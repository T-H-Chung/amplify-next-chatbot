[
  {
    "title": "CSS in JS | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/guides/css-in-js",
    "html": "CSS in JS\nFeedback\n\nOne of the goals of Amplify is to be a good citizen of the environment it exists in. As such Amplify works hard to not interfere with other tools that are being used.\n\nThere are many CSS In JS libraries out there that give a number of benefits. Amplify does not use a CSS In JS library to implement its theming system but operates well with the major CSS In JS libraries out there. Below are a few of the libraries with descriptions of how they work with Amplify's theming system.\n\nIf your CSS library depends on injecting style tags into the DOM, make sure they are being injected after Amplify UI's style tag. In other words, ensure the style tag for Amplify UI is listed above your custom styles in the <head> tag. If Amplify UI's styles are injected after custom styles, then your custom styles may be unset.\n\nStyled Components\nJSS\nEmotion\nAphrodite\n\nStyled Components allows you to create visual primitives with actual CSS code directly tied to components.\n\nUsage\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { View } from '@aws-amplify/ui-react';\n\nconst StyledView = styled(View)`\n  background-color: black;\n  font-size: 32px;\n`;\n\n//use it like any other amplify-ui component\n<StyledView color=\"red\" className=\"my-styled-view\">\n  This is my Styled View\n</StyledView>;\n\nInteractions\n\nThere are various ways to customize an Amplify component and Styled Components will interact with these customizations in the following ways:\n\nAmplify Styling Props\n\nThese are styling props that can be used directly on an Amplify component which will affect a single style property. Examples of styling props are color or fontWeight. These Amplify styling props will take precedence over Styled Component styling.\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { View } from '@aws-amplify/ui-react';\n\nconst StyledView = styled(View)`\n  color: blue;\n`;\n\n<StyledView color=\"red\">Using Styling props</StyledView>;\n\n\nIn the example above, the color of the view will be set to red because of the Amplify styling prop.\n\nAmplify variation props\n\nThese props change the look and/or behavior of certain Amplify components. Examples include size and variation.\n\nimport * as React from 'react';\nimport styled from \"styled-components\";\nimport { Button } from '@aws-amplify/ui-react';\n\nconst StyledButton = styled(Button)`\n  color: blue\n`;\n\n<StyledButton variation=\"primary\">Primary Button</StyledButton>\n\n\nIn the example above, the color of the button will be set to blue. Although the primary variation has a color value of white the Styled Components color value of blue will take precedence over the amplify-ui variation styling.\n\nAmplify Custom ClassNames\n\nThese are custom classnames added onto Amplify components and can be used with CSS styling rules to modify the look of an Amplify component.\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { View } from '@aws-amplify/ui-react';\n\nconst styledView = styled(View)`\n  color: blue;\n`;\n\n<styledView className=\"my-styled-view\">My Styled View</styledView>;\n\n/* External Style Sheet */\n.my-styled-view {\n  color: red;\n}\n\n\nIn the example above, the color of the view will be blue because the styled component will take precedence over the classname CSS.\n\nCSS Root Variable Overrides\n\nAmplify theming provides many CSS variables to customize the look and feel of the entire application. These CSS variables can be used with the :root CSS psuedo-class to override all instances of component styling.\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@aws-amplify/ui-react';\n\nconst StyledButton = styled(Button)`\n  color: blue;\n`;\n\n<StyledButton>Button</StyledButton>;\n\n/* External Style Sheet */\n:root {\n  --amplify-components-button-color: red;\n}\n\n\nIn the example above, the button color will be set to blue because the Styled Component will take precedence over the Amplify CSS variable."
  },
  {
    "title": "Overview | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/guides",
    "html": "Overview\nFeedback\nGuides\n\nAmplify guides are meant to give you a more in-depth understanding of how to use the Amplify UI components and theming to build out common functionality, end-to-end solutions, and frequently asked for workflows.\n\nOverview\n\nGuides are organized by topic, but some guides may overlap multiple topics (i.e. Authentication & Theming) to demonstrate how to integrate multiple services together.\n\nGuides may combine the CLI and libraries together in a single tutorial. This is done to provide an end-to-end solution using both the service creation and configuration as well as connecting to and interacting with the service from a client-side application.\n\nContributing\n\nIf there is a guide or idea that you would like to see implemented that is not listed, open a GitHub Issue with the details of the use case and it will be reviewed by our team and considered.\n\nIf you have an idea for a guide that you'd like to write yourself, submit a pull request. However, make sure to submit an issue with the details of your idea before you submit your PR, so you can receive guidance and feedback."
  },
  {
    "title": "Style Props | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/style-props",
    "html": "Style Props\nFeedback\n\nThese style props are available on Amplify UI primitive components and can be used to modify the corresponding styles. This allows users to quickly make style adjustments without having to go through CSS or add a theme object. Style props override any conflicting CSS style sheet or theme styling.\n\nThere are three ways of passing style props to a component:\n\nPass any valid CSS property directly (e.g., backgroundColor=\"red\")\nThis is useful for rapid prototyping or styling a component which differs from the main theme\nUse a design token from the Theme object by destructuring tokens from the useTheme hook (e.g., backgroundColor={tokens.colors.red[40]})\nThis method utilizes Amplify UI's theming capabilities, allowing for consistent design decisions as well as dynamic updates to the theme (e.g., light/dark mode).\nUse the shorthand syntax to reference design tokens without using the useTheme hook (e.g., backgroundColor=\"red.40\")\nThis is a convenient shorthand for method 2. However, not all design tokens have a shorthand mapping.\nBackground Styles\nBackground Styling Example\nCopy\nimport { Card, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const BackgroundStylePropExample = () => {\n  return (\n    <Card backgroundColor=\"hsl(190, 95%, 30%)\" color=\"#fff\">\n      Background Styling Example\n    </Card>\n  );\n};\n\n// use a design token from the theme object\nexport const BackgroundThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Card\n      backgroundColor={tokens.colors.primary[80]}\n      color={tokens.colors.white}\n    >\n      Background Styling Example\n    </Card>\n  );\n};\n\n// use a design token name\nexport const BackgroundTokenNameExample = () => {\n  return (\n    <Card backgroundColor=\"primary.80\" color=\"white\">\n      Background Styling Example\n    </Card>\n  );\n};\n\nStyle Prop\tCSS Property\nbackgroundColor\tbackground-color\nbackgroundImage\tbackground-image\nBorder Styles\nBorder Styling Example\nCopy\nimport { Button, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const BorderStylePropExample = () => {\n  return (\n    <Button\n      borderRadius=\"0.5rem\"\n      borderStyle=\"dashed\"\n      borderColor=\"hsl(190, 70%, 70%)\"\n      borderWidth=\"medium\"\n    >\n      Border Styling Example\n    </Button>\n  );\n};\n\n// use a design token from the theme object\nexport const BorderThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Button borderRadius={tokens.radii.medium}>Border Styling Example</Button>\n  );\n};\n\n// use a design token name\nexport const BorderTokenNameExample = () => {\n  return <Button borderRadius=\"medium\">Border Styling Example</Button>;\n};\n\nStyle Prop\tCSS Property\nborder\tborder\nborderStyle\tborder-style\nborderRadius\tborder-radius\nborderWidth\tborder-width\nborderColor\tborder-color\nColor Styles\nColor Styling Example\nCopy\nimport { Alert, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const ColorStylePropExample = () => {\n  return (\n    <Alert backgroundColor=\"#fff\" color=\"hsl(190, 50%, 50%)\">\n      Color Styling Example\n    </Alert>\n  );\n};\n\n// use a design token from the theme object\nexport const ColorThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Alert\n      backgroundColor={tokens.colors.white}\n      color={tokens.colors.primary[60]}\n    >\n      Color Styling Example\n    </Alert>\n  );\n};\n\n// use a design token name\nexport const ColorTokenNameExample = () => {\n  return (\n    <Alert backgroundColor=\"white\" color=\"primary.60\">\n      Color Styling Example\n    </Alert>\n  );\n};\n\nStyle Prop\tCSS Property\ncolor\tcolor\nopacity\topacity\nFlex\nButton 1\nButton 2\nButton 3\nCopy\nimport { Button, Flex } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const FlexStylePropExample = () => {\n  return (\n    <Flex direction=\"column\" wrap=\"wrap\" alignItems=\"flex-start\">\n      <Button order=\"3\">Button 1</Button>\n      <Button order=\"1\">Button 2</Button>\n      <Button order=\"2\">Button 3</Button>\n    </Flex>\n  );\n};\n\nStyle Prop\tCSS Property\ndirection\tflex-direction\nwrap\tflex-wrap\nflex\tflex\norder\torder\ngrow\tflex-grow\njustifyContent\tjustify-content\nalignContent\talign-content\nalignItems\talign-items\nalignSelf\talign-self\nshrink\tflex-shrink\nbasis\tflex-basis\nGrid\nA\nB\nC\nD\nCopy\nimport { Grid, Button } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const GridStylePropExample = () => {\n  return (\n    <Grid templateColumns=\"100px 100px 100px\" gap=\"1rem\">\n      <Button column=\"1/3\" row=\"1\">\n        A\n      </Button>\n      <Button column=\"3\" row=\"1/3\">\n        B\n      </Button>\n      <Button column=\"1\" row=\"2\">\n        C\n      </Button>\n      <Button column=\"2\" row=\"2\">\n        D\n      </Button>\n    </Grid>\n  );\n};\n\nStyle Prop\tCSS Property\nautoColumns\tgrid-auto-columns\nautoFlow\tgrid-auto-flow\nautoRows\tgrid-auto-rows\ntemplateAreas\tgrid-template-areas\ntemplateColumns\tgrid-template-columns\ntemplateRows\tgrid-template-rows\narea\tgrid-area\ncolumn\tgrid-column\ncolumnEnd\tgrid-column-end\ncolumnSpan\tgrid-column\ncolumnStart\tgrid-column-start\nrow\tgrid-row\nrowEnd\tgrid-row-end\nrowSpan\tgrid-row\nrowStart\tgrid-row-start\ngap\tgap\ncolumnGap\tcolumn-gap\nrowGap\trow-gap\nMargin and Padding\nMargin and Padding Styling Example\nCopy\nimport { Button, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const MarginAndPaddingStylePropExample = () => {\n  return (\n    <Button padding=\"1rem\" margin=\"1rem\">\n      Margin and Padding Styling Example\n    </Button>\n  );\n};\n\n// use a design token from the theme object\nexport const MarginAndPaddingThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Button padding={tokens.space.large} margin={tokens.space.large}>\n      Margin and Padding Styling Example\n    </Button>\n  );\n};\n\n// use a design token name\nexport const MarginAndPaddingTokenNameExample = () => {\n  return (\n    <Button padding=\"large\" margin=\"large\">\n      Margin and Padding Styling Example\n    </Button>\n  );\n};\n\nStyle Prop\tCSS Property\nmargin\tmargin\nmarginBlock\tmargin-block\nmarginBlockEnd\tmargin-block-end\nmarginBlockStart\tmargin-block-start\nmarginBottom\tmargin-block-end\nmarginInline\tmargin-inline\nmarginInlineEnd\tmargin-inline-end\nmarginInlineStart\tmargin-inline-start\nmarginLeft\tmargin-inline-start\nmarginRight\tmargin-inline-end\nmarginTop\tmargin-block-start\npadding\tpadding\npaddingBlock\tpadding-block\npaddingBlockEnd\tpadding-block-end\npaddingBlockStart\tpadding-block-start\npaddingBottom\tpadding-block-end\npaddingInline\tpadding-inline\npaddingInlineEnd\tpadding-inline-end\npaddingInlineStart\tpadding-inline-start\npaddingLeft\tpadding-inline-start\npaddingRight\tpadding-inline-end\npaddingTop\tpadding-block-start\nPosition Styles\nPosition Styling Example\nCopy\nimport { Button, View, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const PositionStylePropExample = () => {\n  return (\n    <View\n      position=\"relative\"\n      width=\"100%\"\n      height=\"4.5rem\"\n      border=\"1px solid hsl(210, 8%, 55%)\"\n    >\n      <Button position=\"absolute\" right=\"0.5rem\" top=\"0.5rem\">\n        Position Styling Example\n      </Button>\n    </View>\n  );\n};\n\n// use a design token from the theme object\nexport const PositionThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <View\n      position=\"relative\"\n      width={tokens.space.relative.full}\n      height={tokens.space.xxxl}\n      border={`1px solid ${tokens.colors.border.primary}`}\n    >\n      <Button position=\"absolute\" right={tokens.space.xs} top={tokens.space.xs}>\n        Position Styling Example\n      </Button>\n    </View>\n  );\n};\n\n// use a design token name\nexport const PositionTokenNameExample = () => {\n  return (\n    <View\n      position=\"relative\"\n      width=\"relative.full\"\n      height=\"xxxl\"\n      border=\"1px solid hsl(210, 8%, 55%)\"\n    >\n      <Button position=\"absolute\" right=\"xs\" top=\"xs\">\n        Position Styling Example\n      </Button>\n    </View>\n  );\n};\n\nStyle Prop\tCSS Property\nbottom\tbottom\nleft\tleft\nposition\tposition\nright\tright\ntop\ttop\nSize Styles\nCopy\nimport { Card, View, Text, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const SizeStylePropExample = () => {\n  return (\n    <View\n      backgroundColor=\"hsl(190, 50%, 50%)\"\n      width=\"4.5rem\"\n      height=\"4.5rem\"\n    ></View>\n  );\n};\n\n// use a design token from the theme object\nexport const SizeThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <View\n      backgroundColor={tokens.colors.primary[60]}\n      width={tokens.space.xxxl}\n      height={tokens.space.xxxl}\n    ></View>\n  );\n};\n\n// use a design token name\nexport const SizeTokenNameExample = () => {\n  return <View backgroundColor=\"primary.60\" width=\"xxxl\" height=\"xxxl\"></View>;\n};\n\nStyle Prop\tCSS Property\nheight\theight\nmaxHeight\tmax-height\nmaxWidth\tmax-width\nminHeight\tmin-height\nminWidth\tmin-width\nwidth\twidth\nShadow Styles\nShadow Styling Example\nCopy\nimport { Button, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const ShadowStylePropExample = () => {\n  return (\n    <Button boxShadow=\"rgba(13, 26, 38, 0.25) 0px 4px 12px 0px\">\n      Shadow Styling Example\n    </Button>\n  );\n};\n\n// use a design token from the theme object\nexport const ShadowThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Button boxShadow={`${tokens.shadows.large}`}>\n      Shadow Styling Example\n    </Button>\n  );\n};\n\n// use a design token name\nexport const ShadowTokenNameExample = () => {\n  return <Button boxShadow=\"large\">Shadow Styling Example</Button>;\n};\n\nStyle Prop\tCSS Property\nboxShadow\tbox-shadow\nTypography Styles\n\nTypography Styling Example\n\nCopy\nimport { Text, useTheme } from '@aws-amplify/ui-react';\n\n// use any CSS value\nexport const TypographyStylePropExample = () => {\n  return (\n    <Text fontSize=\"2rem\" fontWeight=\"600\" lineHeight=\"1.5\">\n      Typography Styling Example\n    </Text>\n  );\n};\n\n// use a design token from the theme object\nexport const TypographyThemeTokenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Text\n      fontSize={tokens.fontSizes.xxl}\n      fontWeight={tokens.fontWeights.semibold}\n      lineHeight={tokens.lineHeights.medium}\n    >\n      Typography Styling Example\n    </Text>\n  );\n};\n\n// use a design token name\nexport const TypographyTokenNameExample = () => {\n  return (\n    <Text fontSize=\"xxl\" fontWeight=\"semibold\" lineHeight=\"medium\">\n      Typography Styling Example\n    </Text>\n  );\n};\n\nStyle Prop\tCSS Property\nfontFamily\tfont-family\nfontSize\tfont-size\nfontStyle\tfont-style\nfontWeight\tfont-weight\nletterSpacing\tletter-spacing\nlineHeight\tline-height\ntextAlign\ttext-align\ntextDecoration\ttext-decoration\ntextTransform\ttext-transform\nwhiteSpace\twhite-space\nOther Styles\n\nBelow is a list of other style properties accepted by Amplify UI primitives.\n\nStyle Prop\tCSS Property\naspectRatio\taspect-ratio\ndisplay\tdisplay\nobjectFit\tobject-fit\nobjectPosition\tobject-position\noverflow\toverflow\nresize\tresize\ntransform\ttransform\ntransformOrigin\ttransform-origin\nDesign Tokens\n\nFor a list of all available design tokens and their associated values please see colors, typography, and sizes"
  },
  {
    "title": "CSS Variables | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/css-variables",
    "html": "CSS Variables\nFeedback\n\nThese variables are used in Amplify UI. You can override these values to update the look and feel.\n\nAmplify CSS Variable\tDefault Value\n--amplify-border-widths-large\t3px\n--amplify-border-widths-medium\t2px\n--amplify-border-widths-small\t1px\n--amplify-colors-background-disabled\tvar(--amplify-colors-background-tertiary)\n--amplify-colors-background-error\tvar(--amplify-colors-red-10)\n--amplify-colors-background-info\tvar(--amplify-colors-blue-10)\n--amplify-colors-background-primary\tvar(--amplify-colors-white)\n--amplify-colors-background-quaternary\tvar(--amplify-colors-neutral-60)\n--amplify-colors-background-secondary\tvar(--amplify-colors-neutral-10)\n--amplify-colors-background-success\tvar(--amplify-colors-green-10)\n--amplify-colors-background-tertiary\tvar(--amplify-colors-neutral-20)\n--amplify-colors-background-warning\tvar(--amplify-colors-orange-10)\n--amplify-colors-black\thsl(0, 0%, 0%)\n--amplify-colors-blue-10\thsl(220, 95%, 95%)\n--amplify-colors-blue-100\thsl(220, 100%, 15%)\n--amplify-colors-blue-20\thsl(220, 85%, 85%)\n--amplify-colors-blue-40\thsl(220, 70%, 70%)\n--amplify-colors-blue-60\thsl(220, 50%, 50%)\n--amplify-colors-blue-80\thsl(220, 95%, 30%)\n--amplify-colors-blue-90\thsl(220, 100%, 20%)\n--amplify-colors-border-disabled\tvar(--amplify-colors-border-tertiary)\n--amplify-colors-border-error\tvar(--amplify-colors-red-80)\n--amplify-colors-border-focus\tvar(--amplify-colors-primary-100)\n--amplify-colors-border-info\tvar(--amplify-colors-blue-80)\n--amplify-colors-border-pressed\tvar(--amplify-colors-primary-100)\n--amplify-colors-border-primary\tvar(--amplify-colors-neutral-60)\n--amplify-colors-border-secondary\tvar(--amplify-colors-neutral-40)\n--amplify-colors-border-success\tvar(--amplify-colors-green-80)\n--amplify-colors-border-tertiary\tvar(--amplify-colors-neutral-20)\n--amplify-colors-border-warning\tvar(--amplify-colors-orange-80)\n--amplify-colors-font-active\tvar(--amplify-colors-primary-100)\n--amplify-colors-font-disabled\tvar(--amplify-colors-neutral-60)\n--amplify-colors-font-error\tvar(--amplify-colors-red-90)\n--amplify-colors-font-focus\tvar(--amplify-colors-primary-100)\n--amplify-colors-font-hover\tvar(--amplify-colors-primary-90)\n--amplify-colors-font-info\tvar(--amplify-colors-blue-90)\n--amplify-colors-font-interactive\tvar(--amplify-colors-primary-80)\n--amplify-colors-font-inverse\tvar(--amplify-colors-white)\n--amplify-colors-font-primary\tvar(--amplify-colors-neutral-100)\n--amplify-colors-font-secondary\tvar(--amplify-colors-neutral-90)\n--amplify-colors-font-success\tvar(--amplify-colors-green-90)\n--amplify-colors-font-tertiary\tvar(--amplify-colors-neutral-80)\n--amplify-colors-font-warning\tvar(--amplify-colors-orange-90)\n--amplify-colors-green-10\thsl(130, 60%, 95%)\n--amplify-colors-green-100\thsl(130, 22%, 23%)\n--amplify-colors-green-20\thsl(130, 60%, 90%)\n--amplify-colors-green-40\thsl(130, 44%, 63%)\n--amplify-colors-green-60\thsl(130, 43%, 46%)\n--amplify-colors-green-80\thsl(130, 33%, 37%)\n--amplify-colors-green-90\thsl(130, 27%, 29%)\n--amplify-colors-neutral-10\thsl(210, 5%, 98%)\n--amplify-colors-neutral-100\thsl(210, 50%, 10%)\n--amplify-colors-neutral-20\thsl(210, 5%, 94%)\n--amplify-colors-neutral-40\thsl(210, 5%, 87%)\n--amplify-colors-neutral-60\thsl(210, 10%, 58%)\n--amplify-colors-neutral-80\thsl(210, 10%, 40%)\n--amplify-colors-neutral-90\thsl(210, 25%, 25%)\n--amplify-colors-orange-10\thsl(30, 75%, 95%)\n--amplify-colors-orange-100\thsl(30, 100%, 15%)\n--amplify-colors-orange-20\thsl(30, 75%, 85%)\n--amplify-colors-orange-40\thsl(30, 75%, 75%)\n--amplify-colors-orange-60\thsl(30, 50%, 50%)\n--amplify-colors-orange-80\thsl(30, 95%, 30%)\n--amplify-colors-orange-90\thsl(30, 100%, 20%)\n--amplify-colors-overlay-10\thsla(0, 0%, 0%, 0.1)\n--amplify-colors-overlay-20\thsla(0, 0%, 0%, 0.2)\n--amplify-colors-overlay-30\thsla(0, 0%, 0%, 0.3)\n--amplify-colors-overlay-40\thsla(0, 0%, 0%, 0.4)\n--amplify-colors-overlay-5\thsla(0, 0%, 0%, 0.05)\n--amplify-colors-overlay-50\thsla(0, 0%, 0%, 0.5)\n--amplify-colors-overlay-60\thsla(0, 0%, 0%, 0.6)\n--amplify-colors-overlay-70\thsla(0, 0%, 0%, 0.7)\n--amplify-colors-overlay-80\thsla(0, 0%, 0%, 0.8)\n--amplify-colors-overlay-90\thsla(0, 0%, 0%, 0.9)\n--amplify-colors-pink-10\thsl(340, 95%, 95%)\n--amplify-colors-pink-100\thsl(340, 100%, 15%)\n--amplify-colors-pink-20\thsl(340, 90%, 85%)\n--amplify-colors-pink-40\thsl(340, 70%, 70%)\n--amplify-colors-pink-60\thsl(340, 50%, 50%)\n--amplify-colors-pink-80\thsl(340, 95%, 30%)\n--amplify-colors-pink-90\thsl(340, 100%, 20%)\n--amplify-colors-primary-10\tvar(--amplify-colors-teal-10)\n--amplify-colors-primary-100\tvar(--amplify-colors-teal-100)\n--amplify-colors-primary-20\tvar(--amplify-colors-teal-20)\n--amplify-colors-primary-40\tvar(--amplify-colors-teal-40)\n--amplify-colors-primary-60\tvar(--amplify-colors-teal-60)\n--amplify-colors-primary-80\tvar(--amplify-colors-teal-80)\n--amplify-colors-primary-90\tvar(--amplify-colors-teal-90)\n--amplify-colors-purple-10\thsl(300, 95%, 95%)\n--amplify-colors-purple-100\thsl(300, 100%, 15%)\n--amplify-colors-purple-20\thsl(300, 85%, 85%)\n--amplify-colors-purple-40\thsl(300, 70%, 70%)\n--amplify-colors-purple-60\thsl(300, 50%, 50%)\n--amplify-colors-purple-80\thsl(300, 95%, 30%)\n--amplify-colors-purple-90\thsl(300, 100%, 20%)\n--amplify-colors-red-10\thsl(0, 75%, 95%)\n--amplify-colors-red-100\thsl(0, 100%, 15%)\n--amplify-colors-red-20\thsl(0, 75%, 85%)\n--amplify-colors-red-40\thsl(0, 75%, 75%)\n--amplify-colors-red-60\thsl(0, 50%, 50%)\n--amplify-colors-red-80\thsl(0, 95%, 30%)\n--amplify-colors-red-90\thsl(0, 100%, 20%)\n--amplify-colors-secondary-10\tvar(--amplify-colors-purple-10)\n--amplify-colors-secondary-100\tvar(--amplify-colors-purple-100)\n--amplify-colors-secondary-20\tvar(--amplify-colors-purple-20)\n--amplify-colors-secondary-40\tvar(--amplify-colors-purple-40)\n--amplify-colors-secondary-60\tvar(--amplify-colors-purple-60)\n--amplify-colors-secondary-80\tvar(--amplify-colors-purple-80)\n--amplify-colors-secondary-90\tvar(--amplify-colors-purple-90)\n--amplify-colors-shadow-primary\thsla(210, 50%, 10%, 0.25)\n--amplify-colors-shadow-secondary\thsla(210, 50%, 10%, 0.15)\n--amplify-colors-shadow-tertiary\thsla(210, 50%, 10%, 0.05)\n--amplify-colors-teal-10\thsl(190, 75%, 95%)\n--amplify-colors-teal-100\thsl(190, 100%, 15%)\n--amplify-colors-teal-20\thsl(190, 75%, 85%)\n--amplify-colors-teal-40\thsl(190, 70%, 70%)\n--amplify-colors-teal-60\thsl(190, 50%, 50%)\n--amplify-colors-teal-80\thsl(190, 95%, 30%)\n--amplify-colors-teal-90\thsl(190, 100%, 20%)\n--amplify-colors-transparent\ttransparent\n--amplify-colors-white\thsl(0, 0%, 100%)\n--amplify-colors-yellow-10\thsl(60, 75%, 95%)\n--amplify-colors-yellow-100\thsl(60, 100%, 15%)\n--amplify-colors-yellow-20\thsl(60, 75%, 85%)\n--amplify-colors-yellow-40\thsl(60, 75%, 75%)\n--amplify-colors-yellow-60\thsl(60, 50%, 50%)\n--amplify-colors-yellow-80\thsl(60, 95%, 30%)\n--amplify-colors-yellow-90\thsl(60, 100%, 20%)\n--amplify-components-accordion-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-accordion-item-border-color\tvar(--amplify-colors-border-secondary)\n--amplify-components-accordion-item-border-radius\tvar(--amplify-radii-small)\n--amplify-components-accordion-item-border-style\tsolid\n--amplify-components-accordion-item-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-accordion-item-content-color\tinherit\n--amplify-components-accordion-item-content-padding-block-end\tvar(--amplify-space-small)\n--amplify-components-accordion-item-content-padding-block-start\tvar(--amplify-space-xxxs)\n--amplify-components-accordion-item-content-padding-inline\tvar(--amplify-space-small)\n--amplify-components-accordion-item-icon-color\tvar(--amplify-colors-font-tertiary)\n--amplify-components-accordion-item-icon-transition-duration\tvar(--amplify-time-medium)\n--amplify-components-accordion-item-icon-transition-timing-function\tcubic-bezier(0.87, 0, 0.13, 1)\n--amplify-components-accordion-item-trigger-align-items\tcenter\n--amplify-components-accordion-item-trigger-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-accordion-item-trigger-color\tinherit\n--amplify-components-accordion-item-trigger-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-accordion-item-trigger-focus-box-shadow\t0 0 0 2px var(--amplify-colors-border-focus)\n--amplify-components-accordion-item-trigger-gap\tvar(--amplify-space-small)\n--amplify-components-accordion-item-trigger-hover-background-color\tvar(--amplify-colors-overlay-5)\n--amplify-components-accordion-item-trigger-hover-color\tinherit\n--amplify-components-accordion-item-trigger-justify-content\tspace-between\n--amplify-components-accordion-item-trigger-padding-block\tvar(--amplify-space-xs)\n--amplify-components-accordion-item-trigger-padding-inline\tvar(--amplify-space-small)\n--amplify-components-alert-align-items\tcenter\n--amplify-components-alert-background-color\tvar(--amplify-colors-background-tertiary)\n--amplify-components-alert-color\tvar(--amplify-colors-font-primary)\n--amplify-components-alert-error-background-color\tvar(--amplify-colors-background-error)\n--amplify-components-alert-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-alert-heading-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-alert-heading-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-alert-icon-size\tvar(--amplify-font-sizes-xl)\n--amplify-components-alert-info-background-color\tvar(--amplify-colors-background-info)\n--amplify-components-alert-info-color\tvar(--amplify-colors-font-info)\n--amplify-components-alert-justify-content\tspace-between\n--amplify-components-alert-padding-block\tvar(--amplify-space-small)\n--amplify-components-alert-padding-inline\tvar(--amplify-space-medium)\n--amplify-components-alert-success-background-color\tvar(--amplify-colors-background-success)\n--amplify-components-alert-success-color\tvar(--amplify-colors-font-success)\n--amplify-components-alert-warning-background-color\tvar(--amplify-colors-background-warning)\n--amplify-components-alert-warning-color\tvar(--amplify-colors-font-warning)\n--amplify-components-authenticator-container-width-max\t30rem\n--amplify-components-authenticator-footer-padding-bottom\tvar(--amplify-space-medium)\n--amplify-components-authenticator-form-padding\tvar(--amplify-space-xl)\n--amplify-components-authenticator-max-width\t60rem\n--amplify-components-authenticator-modal-background-color\tvar(--amplify-colors-overlay-50)\n--amplify-components-authenticator-modal-height\tvar(--amplify-space-relative-full)\n--amplify-components-authenticator-modal-left\tvar(--amplify-space-zero)\n--amplify-components-authenticator-modal-top\tvar(--amplify-space-zero)\n--amplify-components-authenticator-modal-width\tvar(--amplify-space-relative-full)\n--amplify-components-authenticator-or-container-color\tvar(--amplify-colors-neutral-80)\n--amplify-components-authenticator-or-container-or-line-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-authenticator-router-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-authenticator-router-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-authenticator-router-border-style\tsolid\n--amplify-components-authenticator-router-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-authenticator-router-box-shadow\tvar(--amplify-shadows-medium)\n--amplify-components-authenticator-state-inactive-background-color\tvar(--amplify-colors-background-secondary)\n--amplify-components-autocomplete-menu-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-autocomplete-menu-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-autocomplete-menu-border-radius\tvar(--amplify-radii-small)\n--amplify-components-autocomplete-menu-border-style\tsolid\n--amplify-components-autocomplete-menu-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-autocomplete-menu-empty-display\tflex\n--amplify-components-autocomplete-menu-loading-align-items\tcenter\n--amplify-components-autocomplete-menu-loading-display\tflex\n--amplify-components-autocomplete-menu-loading-gap\tvar(--amplify-space-xxxs)\n--amplify-components-autocomplete-menu-margin-block-start\tvar(--amplify-space-xxxs)\n--amplify-components-autocomplete-menu-option-active-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-autocomplete-menu-option-active-color\tvar(--amplify-colors-white)\n--amplify-components-autocomplete-menu-option-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-autocomplete-menu-option-color\tcurrentcolor\n--amplify-components-autocomplete-menu-option-cursor\tpointer\n--amplify-components-autocomplete-menu-option-transition-duration\tvar(--amplify-time-short)\n--amplify-components-autocomplete-menu-option-transition-property\tbackground-color, color\n--amplify-components-autocomplete-menu-option-transition-timing-function\tease\n--amplify-components-autocomplete-menu-options-display\tflex\n--amplify-components-autocomplete-menu-options-flex-direction\tcolumn\n--amplify-components-autocomplete-menu-options-max-height\t300px\n--amplify-components-autocomplete-menu-space-shared-padding-block\tvar(--amplify-space-xs)\n--amplify-components-autocomplete-menu-space-shared-padding-inline\tvar(--amplify-space-small)\n--amplify-components-autocomplete-menu-width\t100%\n--amplify-components-badge-background-color\tvar(--amplify-colors-background-tertiary)\n--amplify-components-badge-border-radius\tvar(--amplify-radii-xl)\n--amplify-components-badge-color\tvar(--amplify-colors-font-primary)\n--amplify-components-badge-error-background-color\tvar(--amplify-colors-background-error)\n--amplify-components-badge-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-badge-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-badge-font-weight\tvar(--amplify-font-weights-semibold)\n--amplify-components-badge-info-background-color\tvar(--amplify-colors-background-info)\n--amplify-components-badge-info-color\tvar(--amplify-colors-font-info)\n--amplify-components-badge-large-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-badge-large-padding-horizontal\tvar(--amplify-space-medium)\n--amplify-components-badge-large-padding-vertical\tvar(--amplify-space-small)\n--amplify-components-badge-line-height\t1\n--amplify-components-badge-padding-horizontal\tvar(--amplify-space-small)\n--amplify-components-badge-padding-vertical\tvar(--amplify-space-xs)\n--amplify-components-badge-small-font-size\tvar(--amplify-font-sizes-xs)\n--amplify-components-badge-small-padding-horizontal\tvar(--amplify-space-xs)\n--amplify-components-badge-small-padding-vertical\tvar(--amplify-space-xxs)\n--amplify-components-badge-success-background-color\tvar(--amplify-colors-background-success)\n--amplify-components-badge-success-color\tvar(--amplify-colors-font-success)\n--amplify-components-badge-text-align\tcenter\n--amplify-components-badge-warning-background-color\tvar(--amplify-colors-background-warning)\n--amplify-components-badge-warning-color\tvar(--amplify-colors-font-warning)\n--amplify-components-breadcrumbs-color\tvar(--amplify-colors-font-tertiary)\n--amplify-components-breadcrumbs-flex-direction\trow\n--amplify-components-breadcrumbs-flex-wrap\twrap\n--amplify-components-breadcrumbs-gap\t0\n--amplify-components-breadcrumbs-item-align-items\tcenter\n--amplify-components-breadcrumbs-item-color\tinherit\n--amplify-components-breadcrumbs-item-flex-direction\trow\n--amplify-components-breadcrumbs-item-font-size\tinherit\n--amplify-components-breadcrumbs-item-line-height\t1\n--amplify-components-breadcrumbs-link-color\tvar(--amplify-components-link-color)\n--amplify-components-breadcrumbs-link-current-color\tinherit\n--amplify-components-breadcrumbs-link-current-font-size\tinherit\n--amplify-components-breadcrumbs-link-current-font-weight\tnormal\n--amplify-components-breadcrumbs-link-current-text-decoration\tnone\n--amplify-components-breadcrumbs-link-font-size\tinherit\n--amplify-components-breadcrumbs-link-font-weight\tnormal\n--amplify-components-breadcrumbs-link-padding-block\tvar(--amplify-space-xxs)\n--amplify-components-breadcrumbs-link-padding-inline\tvar(--amplify-space-xs)\n--amplify-components-breadcrumbs-link-text-decoration\tnone\n--amplify-components-breadcrumbs-separator-color\tinherit\n--amplify-components-breadcrumbs-separator-font-size\tinherit\n--amplify-components-breadcrumbs-separator-padding-inline\tvar(--amplify-space-xxs)\n--amplify-components-button-active-background-color\tvar(--amplify-colors-primary-20)\n--amplify-components-button-active-border-color\tvar(--amplify-colors-primary-100)\n--amplify-components-button-active-color\tvar(--amplify-colors-font-active)\n--amplify-components-button-background-color\ttransparent\n--amplify-components-button-border-color\tvar(--amplify-components-fieldcontrol-border-color)\n--amplify-components-button-border-radius\tvar(--amplify-components-fieldcontrol-border-radius)\n--amplify-components-button-border-style\tvar(--amplify-components-fieldcontrol-border-style)\n--amplify-components-button-border-width\tvar(--amplify-components-fieldcontrol-border-width)\n--amplify-components-button-color\tvar(--amplify-colors-font-primary)\n--amplify-components-button-destructive-active-background-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-destructive-active-border-color\ttransparent\n--amplify-components-button-destructive-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-destructive-background-color\tvar(--amplify-colors-red-60)\n--amplify-components-button-destructive-border-color\ttransparent\n--amplify-components-button-destructive-border-style\tsolid\n--amplify-components-button-destructive-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-button-destructive-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-destructive-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-button-destructive-disabled-border-color\ttransparent\n--amplify-components-button-destructive-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-destructive-focus-background-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-destructive-focus-border-color\ttransparent\n--amplify-components-button-destructive-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-button-destructive-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-destructive-hover-background-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-destructive-hover-border-color\ttransparent\n--amplify-components-button-destructive-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-destructive-loading-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-button-destructive-loading-border-color\ttransparent\n--amplify-components-button-destructive-loading-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-disabled-background-color\ttransparent\n--amplify-components-button-disabled-border-color\tvar(--amplify-colors-border-tertiary)\n--amplify-components-button-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-focus-background-color\tvar(--amplify-colors-primary-10)\n--amplify-components-button-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-button-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-button-focus-color\tvar(--amplify-colors-font-focus)\n--amplify-components-button-font-size\tvar(--amplify-components-fieldcontrol-font-size)\n--amplify-components-button-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-button-hover-background-color\tvar(--amplify-colors-primary-10)\n--amplify-components-button-hover-border-color\tvar(--amplify-colors-primary-60)\n--amplify-components-button-hover-color\tvar(--amplify-colors-font-focus)\n--amplify-components-button-large-font-size\tvar(--amplify-components-fieldcontrol-large-font-size)\n--amplify-components-button-large-padding-block-end\tvar(--amplify-components-fieldcontrol-large-padding-block-end)\n--amplify-components-button-large-padding-block-start\tvar(--amplify-components-fieldcontrol-large-padding-block-start)\n--amplify-components-button-large-padding-inline-end\tvar(--amplify-components-fieldcontrol-large-padding-inline-end)\n--amplify-components-button-large-padding-inline-start\tvar(--amplify-components-fieldcontrol-large-padding-inline-start)\n--amplify-components-button-line-height\tvar(--amplify-components-fieldcontrol-line-height)\n--amplify-components-button-link-active-background-color\tvar(--amplify-colors-primary-20)\n--amplify-components-button-link-active-border-color\ttransparent\n--amplify-components-button-link-active-color\tvar(--amplify-colors-font-active)\n--amplify-components-button-link-background-color\ttransparent\n--amplify-components-button-link-border-color\ttransparent\n--amplify-components-button-link-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-button-link-color\tvar(--amplify-colors-font-interactive)\n--amplify-components-button-link-disabled-background-color\ttransparent\n--amplify-components-button-link-disabled-border-color\ttransparent\n--amplify-components-button-link-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-link-error-active-background-color\tvar(--amplify-colors-red-20)\n--amplify-components-button-link-error-active-border-color\ttransparent\n--amplify-components-button-link-error-active-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-link-error-background-color\ttransparent\n--amplify-components-button-link-error-border-color\ttransparent\n--amplify-components-button-link-error-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-link-error-focus-background-color\tvar(--amplify-colors-red-10)\n--amplify-components-button-link-error-focus-border-color\ttransparent\n--amplify-components-button-link-error-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-button-link-error-focus-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-link-error-hover-background-color\tvar(--amplify-colors-red-10)\n--amplify-components-button-link-error-hover-border-color\ttransparent\n--amplify-components-button-link-error-hover-color\tvar(--amplify-colors-red-90)\n--amplify-components-button-link-focus-background-color\tvar(--amplify-colors-primary-10)\n--amplify-components-button-link-focus-border-color\ttransparent\n--amplify-components-button-link-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-button-link-focus-color\tvar(--amplify-colors-font-focus)\n--amplify-components-button-link-hover-background-color\tvar(--amplify-colors-primary-10)\n--amplify-components-button-link-hover-border-color\ttransparent\n--amplify-components-button-link-hover-color\tvar(--amplify-colors-font-hover)\n--amplify-components-button-link-info-active-background-color\tvar(--amplify-colors-blue-20)\n--amplify-components-button-link-info-active-border-color\ttransparent\n--amplify-components-button-link-info-active-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-link-info-background-color\ttransparent\n--amplify-components-button-link-info-border-color\ttransparent\n--amplify-components-button-link-info-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-link-info-focus-background-color\tvar(--amplify-colors-blue-10)\n--amplify-components-button-link-info-focus-border-color\ttransparent\n--amplify-components-button-link-info-focus-box-shadow\tvar(--amplify-components-fieldcontrol-info-focus-box-shadow)\n--amplify-components-button-link-info-focus-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-link-info-hover-background-color\tvar(--amplify-colors-blue-10)\n--amplify-components-button-link-info-hover-border-color\ttransparent\n--amplify-components-button-link-info-hover-color\tvar(--amplify-colors-blue-90)\n--amplify-components-button-link-loading-background-color\ttransparent\n--amplify-components-button-link-loading-border-color\ttransparent\n--amplify-components-button-link-loading-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-link-overlay-active-background-color\tvar(--amplify-colors-overlay-10)\n--amplify-components-button-link-overlay-active-border-color\ttransparent\n--amplify-components-button-link-overlay-active-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-button-link-overlay-background-color\ttransparent\n--amplify-components-button-link-overlay-border-color\ttransparent\n--amplify-components-button-link-overlay-color\tvar(--amplify-colors-neutral-100)\n--amplify-components-button-link-overlay-focus-background-color\tvar(--amplify-colors-overlay-5)\n--amplify-components-button-link-overlay-focus-border-color\ttransparent\n--amplify-components-button-link-overlay-focus-box-shadow\tvar(--amplify-components-fieldcontrol-overlay-focus-box-shadow)\n--amplify-components-button-link-overlay-focus-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-button-link-overlay-hover-background-color\tvar(--amplify-colors-overlay-5)\n--amplify-components-button-link-overlay-hover-border-color\ttransparent\n--amplify-components-button-link-overlay-hover-color\tvar(--amplify-colors-overlay-80)\n--amplify-components-button-link-success-active-background-color\tvar(--amplify-colors-green-20)\n--amplify-components-button-link-success-active-border-color\ttransparent\n--amplify-components-button-link-success-active-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-link-success-background-color\ttransparent\n--amplify-components-button-link-success-border-color\ttransparent\n--amplify-components-button-link-success-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-link-success-focus-background-color\tvar(--amplify-colors-green-10)\n--amplify-components-button-link-success-focus-border-color\ttransparent\n--amplify-components-button-link-success-focus-box-shadow\tvar(--amplify-components-fieldcontrol-success-focus-box-shadow)\n--amplify-components-button-link-success-focus-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-link-success-hover-background-color\tvar(--amplify-colors-green-10)\n--amplify-components-button-link-success-hover-border-color\ttransparent\n--amplify-components-button-link-success-hover-color\tvar(--amplify-colors-green-90)\n--amplify-components-button-link-warning-active-background-color\tvar(--amplify-colors-orange-20)\n--amplify-components-button-link-warning-active-border-color\ttransparent\n--amplify-components-button-link-warning-active-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-link-warning-background-color\ttransparent\n--amplify-components-button-link-warning-border-color\ttransparent\n--amplify-components-button-link-warning-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-link-warning-focus-background-color\tvar(--amplify-colors-orange-10)\n--amplify-components-button-link-warning-focus-border-color\ttransparent\n--amplify-components-button-link-warning-focus-box-shadow\tvar(--amplify-components-fieldcontrol-warning-focus-box-shadow)\n--amplify-components-button-link-warning-focus-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-link-warning-hover-background-color\tvar(--amplify-colors-orange-10)\n--amplify-components-button-link-warning-hover-border-color\ttransparent\n--amplify-components-button-link-warning-hover-color\tvar(--amplify-colors-orange-90)\n--amplify-components-button-loader-wrapper-align-items\tcenter\n--amplify-components-button-loader-wrapper-gap\tvar(--amplify-space-xs)\n--amplify-components-button-loading-background-color\ttransparent\n--amplify-components-button-loading-border-color\tvar(--amplify-colors-border-tertiary)\n--amplify-components-button-loading-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-menu-active-background-color\tvar(--amplify-colors-primary-90)\n--amplify-components-button-menu-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-menu-background-color\ttransparent\n--amplify-components-button-menu-border-width\tvar(--amplify-space-zero)\n--amplify-components-button-menu-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-menu-focus-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-button-menu-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-menu-hover-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-button-menu-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-menu-justify-content\tstart\n--amplify-components-button-outlined-error-active-background-color\tvar(--amplify-colors-red-20)\n--amplify-components-button-outlined-error-active-border-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-outlined-error-active-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-outlined-error-background-color\ttransparent\n--amplify-components-button-outlined-error-border-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-outlined-error-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-outlined-error-focus-background-color\tvar(--amplify-colors-red-10)\n--amplify-components-button-outlined-error-focus-border-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-outlined-error-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-button-outlined-error-focus-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-outlined-error-hover-background-color\tvar(--amplify-colors-red-10)\n--amplify-components-button-outlined-error-hover-border-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-outlined-error-hover-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-outlined-info-active-background-color\tvar(--amplify-colors-blue-20)\n--amplify-components-button-outlined-info-active-border-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-outlined-info-active-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-outlined-info-background-color\ttransparent\n--amplify-components-button-outlined-info-border-color\tvar(--amplify-colors-blue-60)\n--amplify-components-button-outlined-info-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-outlined-info-focus-background-color\tvar(--amplify-colors-blue-10)\n--amplify-components-button-outlined-info-focus-border-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-outlined-info-focus-box-shadow\tvar(--amplify-components-fieldcontrol-info-focus-box-shadow)\n--amplify-components-button-outlined-info-focus-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-outlined-info-hover-background-color\tvar(--amplify-colors-blue-10)\n--amplify-components-button-outlined-info-hover-border-color\tvar(--amplify-colors-blue-60)\n--amplify-components-button-outlined-info-hover-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-outlined-overlay-active-background-color\tvar(--amplify-colors-overlay-10)\n--amplify-components-button-outlined-overlay-active-border-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-button-outlined-overlay-active-color\tvar(--amplify-colors-neutral-100)\n--amplify-components-button-outlined-overlay-background-color\ttransparent\n--amplify-components-button-outlined-overlay-border-color\tvar(--amplify-colors-overlay-60)\n--amplify-components-button-outlined-overlay-color\tvar(--amplify-colors-font-primary)\n--amplify-components-button-outlined-overlay-focus-background-color\tvar(--amplify-colors-overlay-5)\n--amplify-components-button-outlined-overlay-focus-border-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-button-outlined-overlay-focus-box-shadow\tvar(--amplify-components-fieldcontrol-overlay-focus-box-shadow)\n--amplify-components-button-outlined-overlay-focus-color\tvar(--amplify-colors-neutral-90)\n--amplify-components-button-outlined-overlay-hover-background-color\tvar(--amplify-colors-overlay-5)\n--amplify-components-button-outlined-overlay-hover-border-color\tvar(--amplify-colors-overlay-60)\n--amplify-components-button-outlined-overlay-hover-color\tvar(--amplify-colors-neutral-90)\n--amplify-components-button-outlined-success-active-background-color\tvar(--amplify-colors-green-20)\n--amplify-components-button-outlined-success-active-border-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-outlined-success-active-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-outlined-success-background-color\ttransparent\n--amplify-components-button-outlined-success-border-color\tvar(--amplify-colors-green-60)\n--amplify-components-button-outlined-success-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-outlined-success-focus-background-color\tvar(--amplify-colors-green-10)\n--amplify-components-button-outlined-success-focus-border-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-outlined-success-focus-box-shadow\tvar(--amplify-components-fieldcontrol-success-focus-box-shadow)\n--amplify-components-button-outlined-success-focus-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-outlined-success-hover-background-color\tvar(--amplify-colors-green-10)\n--amplify-components-button-outlined-success-hover-border-color\tvar(--amplify-colors-green-60)\n--amplify-components-button-outlined-success-hover-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-outlined-warning-active-background-color\tvar(--amplify-colors-orange-20)\n--amplify-components-button-outlined-warning-active-border-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-outlined-warning-active-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-outlined-warning-background-color\ttransparent\n--amplify-components-button-outlined-warning-border-color\tvar(--amplify-colors-orange-60)\n--amplify-components-button-outlined-warning-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-outlined-warning-focus-background-color\tvar(--amplify-colors-orange-10)\n--amplify-components-button-outlined-warning-focus-border-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-outlined-warning-focus-box-shadow\tvar(--amplify-components-fieldcontrol-warning-focus-box-shadow)\n--amplify-components-button-outlined-warning-focus-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-outlined-warning-hover-background-color\tvar(--amplify-colors-orange-10)\n--amplify-components-button-outlined-warning-hover-border-color\tvar(--amplify-colors-orange-60)\n--amplify-components-button-outlined-warning-hover-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-padding-block-end\tvar(--amplify-components-fieldcontrol-padding-block-end)\n--amplify-components-button-padding-block-start\tvar(--amplify-components-fieldcontrol-padding-block-start)\n--amplify-components-button-padding-inline-end\tvar(--amplify-components-fieldcontrol-padding-inline-end)\n--amplify-components-button-padding-inline-start\tvar(--amplify-components-fieldcontrol-padding-inline-start)\n--amplify-components-button-primary-active-background-color\tvar(--amplify-colors-primary-100)\n--amplify-components-button-primary-active-border-color\ttransparent\n--amplify-components-button-primary-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-button-primary-border-color\ttransparent\n--amplify-components-button-primary-border-style\tsolid\n--amplify-components-button-primary-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-button-primary-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-button-primary-disabled-border-color\ttransparent\n--amplify-components-button-primary-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-primary-error-active-background-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-primary-error-active-border-color\ttransparent\n--amplify-components-button-primary-error-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-error-background-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-primary-error-border-color\ttransparent\n--amplify-components-button-primary-error-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-error-focus-background-color\tvar(--amplify-colors-red-90)\n--amplify-components-button-primary-error-focus-border-color\ttransparent\n--amplify-components-button-primary-error-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-button-primary-error-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-error-hover-background-color\tvar(--amplify-colors-red-90)\n--amplify-components-button-primary-error-hover-border-color\ttransparent\n--amplify-components-button-primary-error-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-focus-background-color\tvar(--amplify-colors-primary-90)\n--amplify-components-button-primary-focus-border-color\ttransparent\n--amplify-components-button-primary-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-button-primary-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-hover-background-color\tvar(--amplify-colors-primary-90)\n--amplify-components-button-primary-hover-border-color\ttransparent\n--amplify-components-button-primary-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-info-active-background-color\tvar(--amplify-colors-blue-100)\n--amplify-components-button-primary-info-active-border-color\ttransparent\n--amplify-components-button-primary-info-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-info-background-color\tvar(--amplify-colors-blue-80)\n--amplify-components-button-primary-info-border-color\ttransparent\n--amplify-components-button-primary-info-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-info-focus-background-color\tvar(--amplify-colors-blue-90)\n--amplify-components-button-primary-info-focus-border-color\ttransparent\n--amplify-components-button-primary-info-focus-box-shadow\tvar(--amplify-components-fieldcontrol-info-focus-box-shadow)\n--amplify-components-button-primary-info-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-info-hover-background-color\tvar(--amplify-colors-blue-90)\n--amplify-components-button-primary-info-hover-border-color\ttransparent\n--amplify-components-button-primary-info-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-loading-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-button-primary-loading-border-color\ttransparent\n--amplify-components-button-primary-loading-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-primary-overlay-active-background-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-button-primary-overlay-active-border-color\ttransparent\n--amplify-components-button-primary-overlay-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-overlay-background-color\tvar(--amplify-colors-overlay-70)\n--amplify-components-button-primary-overlay-border-color\ttransparent\n--amplify-components-button-primary-overlay-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-overlay-focus-background-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-button-primary-overlay-focus-border-color\ttransparent\n--amplify-components-button-primary-overlay-focus-box-shadow\tvar(--amplify-components-fieldcontrol-overlay-focus-box-shadow)\n--amplify-components-button-primary-overlay-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-overlay-hover-background-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-button-primary-overlay-hover-border-color\ttransparent\n--amplify-components-button-primary-overlay-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-success-active-background-color\tvar(--amplify-colors-green-100)\n--amplify-components-button-primary-success-active-border-color\ttransparent\n--amplify-components-button-primary-success-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-success-background-color\tvar(--amplify-colors-green-80)\n--amplify-components-button-primary-success-border-color\ttransparent\n--amplify-components-button-primary-success-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-success-focus-background-color\tvar(--amplify-colors-green-90)\n--amplify-components-button-primary-success-focus-border-color\ttransparent\n--amplify-components-button-primary-success-focus-box-shadow\tvar(--amplify-components-fieldcontrol-success-focus-box-shadow)\n--amplify-components-button-primary-success-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-success-hover-background-color\tvar(--amplify-colors-green-90)\n--amplify-components-button-primary-success-hover-border-color\ttransparent\n--amplify-components-button-primary-success-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-warning-active-background-color\tvar(--amplify-colors-orange-100)\n--amplify-components-button-primary-warning-active-border-color\ttransparent\n--amplify-components-button-primary-warning-active-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-warning-background-color\tvar(--amplify-colors-orange-80)\n--amplify-components-button-primary-warning-border-color\ttransparent\n--amplify-components-button-primary-warning-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-warning-focus-background-color\tvar(--amplify-colors-orange-90)\n--amplify-components-button-primary-warning-focus-border-color\ttransparent\n--amplify-components-button-primary-warning-focus-box-shadow\tvar(--amplify-components-fieldcontrol-overlay-focus-box-shadow)\n--amplify-components-button-primary-warning-focus-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-primary-warning-hover-background-color\tvar(--amplify-colors-orange-90)\n--amplify-components-button-primary-warning-hover-border-color\ttransparent\n--amplify-components-button-primary-warning-hover-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-button-small-font-size\tvar(--amplify-components-fieldcontrol-small-font-size)\n--amplify-components-button-small-padding-block-end\tvar(--amplify-components-fieldcontrol-small-padding-block-end)\n--amplify-components-button-small-padding-block-start\tvar(--amplify-components-fieldcontrol-small-padding-block-start)\n--amplify-components-button-small-padding-inline-end\tvar(--amplify-components-fieldcontrol-small-padding-inline-end)\n--amplify-components-button-small-padding-inline-start\tvar(--amplify-components-fieldcontrol-small-padding-inline-start)\n--amplify-components-button-transition-duration\tvar(--amplify-components-fieldcontrol-transition-duration)\n--amplify-components-button-warning-active-background-color\tvar(--amplify-colors-red-20)\n--amplify-components-button-warning-active-border-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-warning-active-color\tvar(--amplify-colors-red-100)\n--amplify-components-button-warning-background-color\ttransparent\n--amplify-components-button-warning-border-color\tvar(--amplify-colors-red-60)\n--amplify-components-button-warning-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-button-warning-color\tvar(--amplify-colors-red-60)\n--amplify-components-button-warning-disabled-background-color\ttransparent\n--amplify-components-button-warning-disabled-border-color\tvar(--amplify-colors-border-tertiary)\n--amplify-components-button-warning-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-button-warning-focus-background-color\tvar(--amplify-colors-red-10)\n--amplify-components-button-warning-focus-border-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-warning-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-button-warning-focus-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-warning-hover-background-color\tvar(--amplify-colors-red-10)\n--amplify-components-button-warning-hover-border-color\tvar(--amplify-colors-red-80)\n--amplify-components-button-warning-hover-color\tvar(--amplify-colors-font-error)\n--amplify-components-button-warning-loading-background-color\ttransparent\n--amplify-components-button-warning-loading-border-color\tvar(--amplify-colors-border-tertiary)\n--amplify-components-button-warning-loading-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-card-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-card-border-color\ttransparent\n--amplify-components-card-border-radius\tvar(--amplify-radii-xs)\n--amplify-components-card-border-style\tsolid\n--amplify-components-card-border-width\t0\n--amplify-components-card-box-shadow\tnone\n--amplify-components-card-elevated-background-color\tvar(--amplify-components-card-background-color)\n--amplify-components-card-elevated-border-color\ttransparent\n--amplify-components-card-elevated-border-radius\tvar(--amplify-radii-xs)\n--amplify-components-card-elevated-border-style\tsolid\n--amplify-components-card-elevated-border-width\t0\n--amplify-components-card-elevated-box-shadow\tvar(--amplify-shadows-medium)\n--amplify-components-card-outlined-background-color\tvar(--amplify-components-card-background-color)\n--amplify-components-card-outlined-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-card-outlined-border-radius\tvar(--amplify-radii-xs)\n--amplify-components-card-outlined-border-style\tsolid\n--amplify-components-card-outlined-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-card-outlined-box-shadow\tvar(--amplify-components-card-box-shadow)\n--amplify-components-card-padding\tvar(--amplify-space-medium)\n--amplify-components-checkbox-align-items\tcenter\n--amplify-components-checkbox-button-align-items\tcenter\n--amplify-components-checkbox-button-before-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-checkbox-button-before-border-radius\t20%\n--amplify-components-checkbox-button-before-border-style\tsolid\n--amplify-components-checkbox-button-before-border-width\tvar(--amplify-border-widths-medium)\n--amplify-components-checkbox-button-before-height\t100%\n--amplify-components-checkbox-button-before-width\t100%\n--amplify-components-checkbox-button-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-checkbox-button-disabled-border-color\tvar(--amplify-colors-border-disabled)\n--amplify-components-checkbox-button-error-border-color\tvar(--amplify-colors-border-error)\n--amplify-components-checkbox-button-error-focus-border-color\tvar(--amplify-colors-border-error)\n--amplify-components-checkbox-button-error-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-checkbox-button-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-checkbox-button-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-checkbox-button-focus-outline-color\tvar(--amplify-colors-transparent)\n--amplify-components-checkbox-button-focus-outline-offset\tvar(--amplify-outline-offsets-medium)\n--amplify-components-checkbox-button-focus-outline-style\tsolid\n--amplify-components-checkbox-button-focus-outline-width\tvar(--amplify-outline-widths-medium)\n--amplify-components-checkbox-button-justify-content\tcenter\n--amplify-components-checkbox-button-position\trelative\n--amplify-components-checkbox-cursor\tpointer\n--amplify-components-checkbox-disabled-cursor\tnot-allowed\n--amplify-components-checkbox-icon-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-checkbox-icon-border-radius\t20%\n--amplify-components-checkbox-icon-checked-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-checkbox-icon-checked-opacity\tvar(--amplify-opacities-100)\n--amplify-components-checkbox-icon-checked-transform\tscale(1)\n--amplify-components-checkbox-icon-indeterminate-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-checkbox-icon-indeterminate-opacity\tvar(--amplify-opacities-100)\n--amplify-components-checkbox-icon-indeterminate-transform\tscale(1)\n--amplify-components-checkbox-icon-opacity\tvar(--amplify-opacities-0)\n--amplify-components-checkbox-icon-transform\tscale(0)\n--amplify-components-checkbox-icon-transition-duration\tvar(--amplify-time-short)\n--amplify-components-checkbox-icon-transition-property\tall\n--amplify-components-checkbox-icon-transition-timing-function\tease-in-out\n--amplify-components-checkbox-label-color\tvar(--amplify-components-text-color)\n--amplify-components-checkbox-label-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-checkboxfield-align-content\tcenter\n--amplify-components-checkboxfield-align-items\tflex-start\n--amplify-components-checkboxfield-flex-direction\tcolumn\n--amplify-components-checkboxfield-justify-content\tcenter\n--amplify-components-collection-pagination-button-color\tvar(--amplify-components-pagination-button-color)\n--amplify-components-collection-pagination-button-disabled-color\tvar(--amplify-components-pagination-button-disabled-color)\n--amplify-components-collection-pagination-button-hover-background-color\tvar(--amplify-components-pagination-button-hover-background-color)\n--amplify-components-collection-pagination-button-hover-color\tvar(--amplify-components-pagination-button-hover-color)\n--amplify-components-collection-pagination-current-background-color\tvar(--amplify-components-pagination-current-background-color)\n--amplify-components-collection-pagination-current-color\tvar(--amplify-components-pagination-current-color)\n--amplify-components-collection-search-button-active-background-color\tvar(--amplify-components-searchfield-button-active-background-color)\n--amplify-components-collection-search-button-active-border-color\tvar(--amplify-components-searchfield-button-active-border-color)\n--amplify-components-collection-search-button-active-color\tvar(--amplify-components-searchfield-button-active-color)\n--amplify-components-collection-search-button-color\tvar(--amplify-components-searchfield-button-color)\n--amplify-components-collection-search-button-disabled-background-color\tvar(--amplify-components-searchfield-button-disabled-background-color)\n--amplify-components-collection-search-button-disabled-border-color\tvar(--amplify-components-searchfield-button-disabled-border-color)\n--amplify-components-collection-search-button-disabled-color\tvar(--amplify-components-searchfield-button-disabled-color)\n--amplify-components-collection-search-button-focus-background-color\tvar(--amplify-components-searchfield-button-focus-background-color)\n--amplify-components-collection-search-button-focus-border-color\tvar(--amplify-components-searchfield-button-focus-border-color)\n--amplify-components-collection-search-button-focus-color\tvar(--amplify-components-searchfield-button-focus-color)\n--amplify-components-collection-search-button-hover-background-color\tvar(--amplify-components-searchfield-button-hover-background-color)\n--amplify-components-collection-search-button-hover-border-color\tvar(--amplify-components-searchfield-button-hover-border-color)\n--amplify-components-collection-search-button-hover-color\tvar(--amplify-components-searchfield-button-hover-color)\n--amplify-components-collection-search-input-color\tvar(--amplify-components-searchfield-color)\n--amplify-components-copy-font-size\tvar(--amplify-font-sizes-xs)\n--amplify-components-copy-gap\tvar(--amplify-space-relative-medium)\n--amplify-components-copy-svg-path-fill\tvar(--amplify-colors-font-primary)\n--amplify-components-copy-tool-tip-bottom\tvar(--amplify-space-large)\n--amplify-components-copy-tool-tip-color\tvar(--amplify-colors-teal-100)\n--amplify-components-copy-tool-tip-font-size\tvar(--amplify-font-sizes-xxs)\n--amplify-components-countrycodeselect-height\tvar(--amplify-space-relative-full)\n--amplify-components-divider-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-divider-border-style\tsolid\n--amplify-components-divider-border-width\tvar(--amplify-border-widths-medium)\n--amplify-components-divider-label-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-divider-label-color\tvar(--amplify-colors-font-tertiary)\n--amplify-components-divider-label-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-divider-label-padding-inline\tvar(--amplify-space-medium)\n--amplify-components-divider-large-border-width\tvar(--amplify-border-widths-large)\n--amplify-components-divider-opacity\tvar(--amplify-opacities-60)\n--amplify-components-divider-small-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-dropzone-accepted-background-color\tvar(--amplify-colors-background-success)\n--amplify-components-dropzone-accepted-border-color\tvar(--amplify-colors-border-success)\n--amplify-components-dropzone-accepted-border-radius\tvar(--amplify-components-dropzone-border-radius)\n--amplify-components-dropzone-accepted-border-style\tvar(--amplify-components-dropzone-border-style)\n--amplify-components-dropzone-accepted-border-width\tvar(--amplify-components-dropzone-border-width)\n--amplify-components-dropzone-accepted-color\tvar(--amplify-colors-font-success)\n--amplify-components-dropzone-active-background-color\tvar(--amplify-colors-primary-10)\n--amplify-components-dropzone-active-border-color\tvar(--amplify-colors-border-pressed)\n--amplify-components-dropzone-active-border-radius\tvar(--amplify-components-dropzone-border-radius)\n--amplify-components-dropzone-active-border-style\tvar(--amplify-components-dropzone-border-style)\n--amplify-components-dropzone-active-border-width\tvar(--amplify-components-dropzone-border-width)\n--amplify-components-dropzone-active-color\tvar(--amplify-colors-font-primary)\n--amplify-components-dropzone-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-dropzone-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-dropzone-border-radius\tvar(--amplify-radii-small)\n--amplify-components-dropzone-border-style\tdashed\n--amplify-components-dropzone-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-dropzone-color\tvar(--amplify-colors-font-primary)\n--amplify-components-dropzone-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-dropzone-disabled-border-color\tvar(--amplify-colors-border-disabled)\n--amplify-components-dropzone-disabled-border-radius\tvar(--amplify-components-dropzone-border-radius)\n--amplify-components-dropzone-disabled-border-style\tvar(--amplify-components-dropzone-border-style)\n--amplify-components-dropzone-disabled-border-width\tvar(--amplify-components-dropzone-border-width)\n--amplify-components-dropzone-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-dropzone-gap\tvar(--amplify-space-small)\n--amplify-components-dropzone-padding-block\tvar(--amplify-space-xl)\n--amplify-components-dropzone-padding-inline\tvar(--amplify-space-large)\n--amplify-components-dropzone-rejected-background-color\tvar(--amplify-colors-background-error)\n--amplify-components-dropzone-rejected-border-color\tvar(--amplify-colors-border-pressed)\n--amplify-components-dropzone-rejected-border-radius\tvar(--amplify-components-dropzone-border-radius)\n--amplify-components-dropzone-rejected-border-style\tvar(--amplify-components-dropzone-border-style)\n--amplify-components-dropzone-rejected-border-width\tvar(--amplify-components-dropzone-border-width)\n--amplify-components-dropzone-rejected-color\tvar(--amplify-colors-font-error)\n--amplify-components-dropzone-text-align\tcenter\n--amplify-components-field-flex-direction\tcolumn\n--amplify-components-field-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-field-gap\tvar(--amplify-space-xs)\n--amplify-components-field-label-color\tvar(--amplify-colors-font-secondary)\n--amplify-components-field-large-font-size\tvar(--amplify-font-sizes-large)\n--amplify-components-field-large-gap\tvar(--amplify-space-small)\n--amplify-components-field-small-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-field-small-gap\tvar(--amplify-space-xxxs)\n--amplify-components-fieldcontrol-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-fieldcontrol-border-radius\tvar(--amplify-radii-small)\n--amplify-components-fieldcontrol-border-style\tsolid\n--amplify-components-fieldcontrol-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-fieldcontrol-color\tvar(--amplify-colors-font-primary)\n--amplify-components-fieldcontrol-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-fieldcontrol-disabled-border-color\tvar(--amplify-colors-transparent)\n--amplify-components-fieldcontrol-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-fieldcontrol-disabled-cursor\tnot-allowed\n--amplify-components-fieldcontrol-error-border-color\tvar(--amplify-colors-border-error)\n--amplify-components-fieldcontrol-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-fieldcontrol-error-focus-box-shadow\t0px 0px 0px 2px var(--amplify-colors-border-error)\n--amplify-components-fieldcontrol-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-fieldcontrol-focus-box-shadow\t0px 0px 0px 2px var(--amplify-colors-border-focus)\n--amplify-components-fieldcontrol-font-size\tvar(--amplify-components-field-font-size)\n--amplify-components-fieldcontrol-info-focus-box-shadow\t0px 0px 0px 2px var(--amplify-colors-blue-100)\n--amplify-components-fieldcontrol-large-font-size\tvar(--amplify-components-field-large-font-size)\n--amplify-components-fieldcontrol-large-padding-block-end\tvar(--amplify-space-xs)\n--amplify-components-fieldcontrol-large-padding-block-start\tvar(--amplify-space-xs)\n--amplify-components-fieldcontrol-large-padding-inline-end\tvar(--amplify-space-medium)\n--amplify-components-fieldcontrol-large-padding-inline-start\tvar(--amplify-space-medium)\n--amplify-components-fieldcontrol-line-height\tvar(--amplify-line-heights-medium)\n--amplify-components-fieldcontrol-outline-color\tvar(--amplify-colors-transparent)\n--amplify-components-fieldcontrol-outline-offset\tvar(--amplify-outline-offsets-medium)\n--amplify-components-fieldcontrol-outline-style\tsolid\n--amplify-components-fieldcontrol-outline-width\tvar(--amplify-outline-widths-medium)\n--amplify-components-fieldcontrol-overlay-focus-box-shadow\t0px 0px 0px 2px var(--amplify-colors-overlay-90)\n--amplify-components-fieldcontrol-padding-block-end\tvar(--amplify-space-xs)\n--amplify-components-fieldcontrol-padding-block-start\tvar(--amplify-space-xs)\n--amplify-components-fieldcontrol-padding-inline-end\tvar(--amplify-space-medium)\n--amplify-components-fieldcontrol-padding-inline-start\tvar(--amplify-space-medium)\n--amplify-components-fieldcontrol-quiet-border-block-start\tnone\n--amplify-components-fieldcontrol-quiet-border-inline-end\tnone\n--amplify-components-fieldcontrol-quiet-border-inline-start\tnone\n--amplify-components-fieldcontrol-quiet-border-radius\t0\n--amplify-components-fieldcontrol-quiet-border-style\tnone\n--amplify-components-fieldcontrol-quiet-error-border-block-end-color\tvar(--amplify-colors-border-error)\n--amplify-components-fieldcontrol-quiet-error-focus-border-block-end-color\ttransparent\n--amplify-components-fieldcontrol-quiet-error-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-fieldcontrol-quiet-focus-border-block-end-color\ttransparent\n--amplify-components-fieldcontrol-quiet-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-fieldcontrol-small-font-size\tvar(--amplify-components-field-small-font-size)\n--amplify-components-fieldcontrol-small-padding-block-end\tvar(--amplify-space-xxs)\n--amplify-components-fieldcontrol-small-padding-block-start\tvar(--amplify-space-xxs)\n--amplify-components-fieldcontrol-small-padding-inline-end\tvar(--amplify-space-small)\n--amplify-components-fieldcontrol-small-padding-inline-start\tvar(--amplify-space-small)\n--amplify-components-fieldcontrol-success-focus-box-shadow\t0px 0px 0px 2px var(--amplify-colors-green-100)\n--amplify-components-fieldcontrol-transition-duration\tvar(--amplify-time-medium)\n--amplify-components-fieldcontrol-warning-focus-box-shadow\t0px 0px 0px 2px var(--amplify-colors-orange-100)\n--amplify-components-fieldgroup-gap\tvar(--amplify-space-zero)\n--amplify-components-fieldgroup-outer-align-items\tcenter\n--amplify-components-fieldgroup-vertical-align-items\tcenter\n--amplify-components-fieldmessages-description-color\tvar(--amplify-colors-font-secondary)\n--amplify-components-fieldmessages-description-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-fieldmessages-description-font-style\titalic\n--amplify-components-fieldmessages-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-fieldmessages-error-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-fieldset-background-color\ttransparent\n--amplify-components-fieldset-border-radius\tvar(--amplify-radii-xs)\n--amplify-components-fieldset-flex-direction\tcolumn\n--amplify-components-fieldset-gap\tvar(--amplify-components-field-gap)\n--amplify-components-fieldset-large-gap\tvar(--amplify-components-field-large-gap)\n--amplify-components-fieldset-legend-color\tvar(--amplify-colors-font-primary)\n--amplify-components-fieldset-legend-font-size\tvar(--amplify-components-field-font-size)\n--amplify-components-fieldset-legend-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-fieldset-legend-large-font-size\tvar(--amplify-components-field-large-font-size)\n--amplify-components-fieldset-legend-line-height\tvar(--amplify-line-heights-medium)\n--amplify-components-fieldset-legend-small-font-size\tvar(--amplify-components-field-small-font-size)\n--amplify-components-fieldset-outlined-border-color\tvar(--amplify-colors-neutral-40)\n--amplify-components-fieldset-outlined-border-style\tsolid\n--amplify-components-fieldset-outlined-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-fieldset-outlined-large-padding\tvar(--amplify-space-large)\n--amplify-components-fieldset-outlined-padding\tvar(--amplify-space-medium)\n--amplify-components-fieldset-outlined-small-padding\tvar(--amplify-space-small)\n--amplify-components-fieldset-small-gap\tvar(--amplify-components-field-small-gap)\n--amplify-components-flex-align-content\tnormal\n--amplify-components-flex-align-items\tstretch\n--amplify-components-flex-flex-wrap\tnowrap\n--amplify-components-flex-gap\tvar(--amplify-space-medium)\n--amplify-components-flex-justify-content\tnormal\n--amplify-components-heading-1-font-size\tvar(--amplify-font-sizes-xxxxl)\n--amplify-components-heading-1-font-weight\tvar(--amplify-font-weights-light)\n--amplify-components-heading-2-font-size\tvar(--amplify-font-sizes-xxxl)\n--amplify-components-heading-2-font-weight\tvar(--amplify-font-weights-normal)\n--amplify-components-heading-3-font-size\tvar(--amplify-font-sizes-xxl)\n--amplify-components-heading-3-font-weight\tvar(--amplify-font-weights-medium)\n--amplify-components-heading-4-font-size\tvar(--amplify-font-sizes-xl)\n--amplify-components-heading-4-font-weight\tvar(--amplify-font-weights-semibold)\n--amplify-components-heading-5-font-size\tvar(--amplify-font-sizes-large)\n--amplify-components-heading-5-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-heading-6-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-heading-6-font-weight\tvar(--amplify-font-weights-extrabold)\n--amplify-components-heading-color\tvar(--amplify-colors-font-primary)\n--amplify-components-heading-line-height\tvar(--amplify-line-heights-small)\n--amplify-components-highlightmatch-highlighted-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-icon-height\t1em\n--amplify-components-icon-line-height\t1\n--amplify-components-image-height\tauto\n--amplify-components-image-max-width\t100%\n--amplify-components-image-object-fit\tinitial\n--amplify-components-image-object-position\tinitial\n--amplify-components-inappmessaging-banner-height\t150px\n--amplify-components-inappmessaging-banner-width\t400px\n--amplify-components-inappmessaging-button-background-color\t#e8e8e8\n--amplify-components-inappmessaging-button-border-radius\t5px\n--amplify-components-inappmessaging-button-color\tblack\n--amplify-components-inappmessaging-dialog-height\t50vh\n--amplify-components-inappmessaging-dialog-min-height\t400px\n--amplify-components-inappmessaging-dialog-min-width\t400px\n--amplify-components-inappmessaging-dialog-width\t30vw\n--amplify-components-inappmessaging-header-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-inappmessaging-header-font-weight\tvar(--amplify-font-weights-extrabold)\n--amplify-components-input-border-color\tvar(--amplify-components-fieldcontrol-border-color)\n--amplify-components-input-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-input-focus-border-color\tvar(--amplify-components-fieldcontrol-focus-border-color)\n--amplify-components-input-font-size\tvar(--amplify-components-fieldcontrol-font-size)\n--amplify-components-link-active-color\tvar(--amplify-colors-font-active)\n--amplify-components-link-color\tvar(--amplify-colors-font-interactive)\n--amplify-components-link-focus-color\tvar(--amplify-colors-font-focus)\n--amplify-components-link-hover-color\tvar(--amplify-colors-font-hover)\n--amplify-components-link-visited-color\tvar(--amplify-colors-font-interactive)\n--amplify-components-liveness-camera-module-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-loader-animation-duration\t1s\n--amplify-components-loader-font-size\tvar(--amplify-font-sizes-xs)\n--amplify-components-loader-height\tvar(--amplify-font-sizes-medium)\n--amplify-components-loader-large-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-loader-large-height\tvar(--amplify-font-sizes-large)\n--amplify-components-loader-large-width\tvar(--amplify-font-sizes-large)\n--amplify-components-loader-linear-animation-duration\t1s\n--amplify-components-loader-linear-font-size\tvar(--amplify-font-sizes-xxs)\n--amplify-components-loader-linear-large-font-size\tvar(--amplify-font-sizes-xs)\n--amplify-components-loader-linear-large-stroke-width\tvar(--amplify-font-sizes-xs)\n--amplify-components-loader-linear-min-width\t5rem\n--amplify-components-loader-linear-small-font-size\tvar(--amplify-font-sizes-xxxs)\n--amplify-components-loader-linear-small-stroke-width\tvar(--amplify-font-sizes-xxxs)\n--amplify-components-loader-linear-stroke-empty\tvar(--amplify-colors-neutral-20)\n--amplify-components-loader-linear-stroke-filled\tvar(--amplify-colors-primary-80)\n--amplify-components-loader-linear-stroke-linecap\tround\n--amplify-components-loader-linear-stroke-width\tvar(--amplify-font-sizes-xxs)\n--amplify-components-loader-linear-width\t100%\n--amplify-components-loader-small-font-size\tvar(--amplify-font-sizes-xxs)\n--amplify-components-loader-small-height\tvar(--amplify-font-sizes-small)\n--amplify-components-loader-small-width\tvar(--amplify-font-sizes-small)\n--amplify-components-loader-stroke-empty\tvar(--amplify-colors-neutral-20)\n--amplify-components-loader-stroke-filled\tvar(--amplify-colors-primary-80)\n--amplify-components-loader-stroke-linecap\tround\n--amplify-components-loader-text-fill\tvar(--amplify-colors-font-primary)\n--amplify-components-loader-width\tvar(--amplify-font-sizes-medium)\n--amplify-components-menu-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-menu-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-menu-border-radius\tvar(--amplify-radii-medium)\n--amplify-components-menu-border-style\tsolid\n--amplify-components-menu-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-menu-box-shadow\tvar(--amplify-shadows-large)\n--amplify-components-menu-flex-direction\tcolumn\n--amplify-components-menu-gap\tvar(--amplify-space-zero)\n--amplify-components-menu-item-min-height\t2.5rem\n--amplify-components-menu-item-padding-inline-end\tvar(--amplify-space-medium)\n--amplify-components-menu-item-padding-inline-start\tvar(--amplify-space-medium)\n--amplify-components-menu-large-height\tvar(--amplify-font-sizes-xxxl)\n--amplify-components-menu-large-width\tvar(--amplify-font-sizes-xxxl)\n--amplify-components-menu-max-width\t30rem\n--amplify-components-menu-min-width\t14rem\n--amplify-components-menu-small-height\tvar(--amplify-font-sizes-medium)\n--amplify-components-menu-small-width\tvar(--amplify-font-sizes-medium)\n--amplify-components-message-align-items\tcenter\n--amplify-components-message-background-color\tvar(--amplify-colors-background-tertiary)\n--amplify-components-message-border-color\ttransparent\n--amplify-components-message-border-radius\tvar(--amplify-radii-xs)\n--amplify-components-message-border-style\tsolid\n--amplify-components-message-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-message-color\tvar(--amplify-colors-font-primary)\n--amplify-components-message-dismiss-gap\tvar(--amplify-space-xxs)\n--amplify-components-message-filled-background-color\tvar(--amplify-colors-background-secondary)\n--amplify-components-message-filled-border-color\ttransparent\n--amplify-components-message-filled-color\tvar(--amplify-colors-font-primary)\n--amplify-components-message-filled-error-background-color\tvar(--amplify-colors-background-error)\n--amplify-components-message-filled-error-border-color\ttransparent\n--amplify-components-message-filled-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-message-filled-info-background-color\tvar(--amplify-colors-background-info)\n--amplify-components-message-filled-info-border-color\ttransparent\n--amplify-components-message-filled-info-color\tvar(--amplify-colors-font-info)\n--amplify-components-message-filled-success-background-color\tvar(--amplify-colors-background-success)\n--amplify-components-message-filled-success-border-color\ttransparent\n--amplify-components-message-filled-success-color\tvar(--amplify-colors-font-success)\n--amplify-components-message-filled-warning-background-color\tvar(--amplify-colors-background-warning)\n--amplify-components-message-filled-warning-border-color\ttransparent\n--amplify-components-message-filled-warning-color\tvar(--amplify-colors-font-warning)\n--amplify-components-message-heading-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-message-heading-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-message-icon-size\tvar(--amplify-font-sizes-xl)\n--amplify-components-message-justify-content\tflex-start\n--amplify-components-message-line-height\tvar(--amplify-line-heights-small)\n--amplify-components-message-outlined-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-outlined-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-message-outlined-color\tvar(--amplify-colors-font-primary)\n--amplify-components-message-outlined-error-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-outlined-error-border-color\tvar(--amplify-colors-border-error)\n--amplify-components-message-outlined-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-message-outlined-info-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-outlined-info-border-color\tvar(--amplify-colors-border-info)\n--amplify-components-message-outlined-info-color\tvar(--amplify-colors-font-info)\n--amplify-components-message-outlined-success-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-outlined-success-border-color\tvar(--amplify-colors-border-success)\n--amplify-components-message-outlined-success-color\tvar(--amplify-colors-font-success)\n--amplify-components-message-outlined-warning-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-outlined-warning-border-color\tvar(--amplify-colors-border-warning)\n--amplify-components-message-outlined-warning-color\tvar(--amplify-colors-font-warning)\n--amplify-components-message-padding-block\tvar(--amplify-space-small)\n--amplify-components-message-padding-inline\tvar(--amplify-space-medium)\n--amplify-components-message-plain-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-plain-border-color\ttransparent\n--amplify-components-message-plain-color\tvar(--amplify-colors-font-primary)\n--amplify-components-message-plain-error-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-plain-error-border-color\ttransparent\n--amplify-components-message-plain-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-message-plain-info-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-plain-info-border-color\ttransparent\n--amplify-components-message-plain-info-color\tvar(--amplify-colors-font-info)\n--amplify-components-message-plain-success-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-plain-success-border-color\ttransparent\n--amplify-components-message-plain-success-color\tvar(--amplify-colors-font-success)\n--amplify-components-message-plain-warning-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-message-plain-warning-border-color\ttransparent\n--amplify-components-message-plain-warning-color\tvar(--amplify-colors-font-warning)\n--amplify-components-pagination-button-color\tvar(--amplify-colors-font-primary)\n--amplify-components-pagination-button-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-pagination-button-hover-background-color\tvar(--amplify-colors-overlay-10)\n--amplify-components-pagination-button-hover-color\tvar(--amplify-colors-font-primary)\n--amplify-components-pagination-button-padding-inline-end\tvar(--amplify-space-xxs)\n--amplify-components-pagination-button-padding-inline-start\tvar(--amplify-space-xxs)\n--amplify-components-pagination-button-transition-duration\tvar(--amplify-time-medium)\n--amplify-components-pagination-button-transition-property\tbackground-color\n--amplify-components-pagination-current-align-items\tcenter\n--amplify-components-pagination-current-background-color\tvar(--amplify-colors-overlay-40)\n--amplify-components-pagination-current-color\tvar(--amplify-colors-font-inverse)\n--amplify-components-pagination-current-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-pagination-current-justify-content\tcenter\n--amplify-components-pagination-ellipsis-align-items\tbaseline\n--amplify-components-pagination-ellipsis-justify-content\tcenter\n--amplify-components-pagination-ellipsis-padding-inline-end\tvar(--amplify-space-xs)\n--amplify-components-pagination-ellipsis-padding-inline-start\tvar(--amplify-space-xs)\n--amplify-components-pagination-item-container-margin-left\tvar(--amplify-space-xxxs)\n--amplify-components-pagination-item-container-margin-right\tvar(--amplify-space-xxxs)\n--amplify-components-pagination-item-shared-border-radius\tvar(--amplify-font-sizes-medium)\n--amplify-components-pagination-item-shared-height\tvar(--amplify-font-sizes-xxl)\n--amplify-components-pagination-item-shared-min-width\tvar(--amplify-font-sizes-xxl)\n--amplify-components-passwordfield-button-active-background-color\tvar(--amplify-components-button-active-background-color)\n--amplify-components-passwordfield-button-active-border-color\tvar(--amplify-components-button-active-border-color)\n--amplify-components-passwordfield-button-active-color\tvar(--amplify-components-button-active-color)\n--amplify-components-passwordfield-button-color\tvar(--amplify-components-button-color)\n--amplify-components-passwordfield-button-disabled-background-color\tvar(--amplify-components-button-disabled-background-color)\n--amplify-components-passwordfield-button-disabled-border-color\tvar(--amplify-components-button-disabled-border-color)\n--amplify-components-passwordfield-button-disabled-color\tvar(--amplify-components-button-disabled-color)\n--amplify-components-passwordfield-button-error-active-background-color\tvar(--amplify-components-button-outlined-error-active-background-color)\n--amplify-components-passwordfield-button-error-active-border-color\tvar(--amplify-components-button-outlined-error-active-border-color)\n--amplify-components-passwordfield-button-error-active-color\tvar(--amplify-components-button-outlined-error-active-color)\n--amplify-components-passwordfield-button-error-background-color\tvar(--amplify-components-button-outlined-error-background-color)\n--amplify-components-passwordfield-button-error-border-color\tvar(--amplify-components-button-outlined-error-border-color)\n--amplify-components-passwordfield-button-error-color\tvar(--amplify-components-button-outlined-error-color)\n--amplify-components-passwordfield-button-error-focus-background-color\tvar(--amplify-components-button-outlined-error-focus-background-color)\n--amplify-components-passwordfield-button-error-focus-border-color\tvar(--amplify-components-button-outlined-error-focus-border-color)\n--amplify-components-passwordfield-button-error-focus-box-shadow\tvar(--amplify-components-button-outlined-error-focus-box-shadow)\n--amplify-components-passwordfield-button-error-focus-color\tvar(--amplify-components-button-outlined-error-focus-color)\n--amplify-components-passwordfield-button-error-hover-background-color\tvar(--amplify-components-button-outlined-error-hover-background-color)\n--amplify-components-passwordfield-button-error-hover-border-color\tvar(--amplify-components-button-outlined-error-hover-border-color)\n--amplify-components-passwordfield-button-error-hover-color\tvar(--amplify-components-button-outlined-error-hover-color)\n--amplify-components-passwordfield-button-focus-background-color\tvar(--amplify-components-button-focus-background-color)\n--amplify-components-passwordfield-button-focus-border-color\tvar(--amplify-components-button-focus-border-color)\n--amplify-components-passwordfield-button-focus-color\tvar(--amplify-components-button-focus-color)\n--amplify-components-passwordfield-button-hover-background-color\tvar(--amplify-components-button-hover-background-color)\n--amplify-components-passwordfield-button-hover-border-color\tvar(--amplify-components-button-hover-border-color)\n--amplify-components-passwordfield-button-hover-color\tvar(--amplify-components-button-hover-color)\n--amplify-components-passwordfield-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-phonenumberfield-border-color\tvar(--amplify-components-fieldcontrol-border-color)\n--amplify-components-phonenumberfield-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-phonenumberfield-focus-border-color\tvar(--amplify-components-fieldcontrol-focus-border-color)\n--amplify-components-phonenumberfield-font-size\tvar(--amplify-components-fieldcontrol-font-size)\n--amplify-components-placeholder-border-radius\tvar(--amplify-radii-small)\n--amplify-components-placeholder-default-height\tvar(--amplify-space-medium)\n--amplify-components-placeholder-end-color\tvar(--amplify-colors-background-tertiary)\n--amplify-components-placeholder-large-height\tvar(--amplify-space-large)\n--amplify-components-placeholder-small-height\tvar(--amplify-space-small)\n--amplify-components-placeholder-start-color\tvar(--amplify-colors-background-secondary)\n--amplify-components-placeholder-transition-duration\tvar(--amplify-time-long)\n--amplify-components-radio-align-items\tcenter\n--amplify-components-radio-button-align-items\tcenter\n--amplify-components-radio-button-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-radio-button-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-radio-button-border-radius\t50%\n--amplify-components-radio-button-border-style\tsolid\n--amplify-components-radio-button-border-width\tvar(--amplify-border-widths-medium)\n--amplify-components-radio-button-box-sizing\tborder-box\n--amplify-components-radio-button-checked-color\tvar(--amplify-colors-primary-80)\n--amplify-components-radio-button-checked-disabled-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-radio-button-color\tvar(--amplify-colors-background-primary)\n--amplify-components-radio-button-disabled-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-radio-button-disabled-border-color\tvar(--amplify-colors-border-disabled)\n--amplify-components-radio-button-error-border-color\tvar(--amplify-colors-border-error)\n--amplify-components-radio-button-error-focus-box-shadow\tvar(--amplify-components-fieldcontrol-error-focus-box-shadow)\n--amplify-components-radio-button-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-radio-button-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-radio-button-height\tvar(--amplify-font-sizes-medium)\n--amplify-components-radio-button-justify-content\tcenter\n--amplify-components-radio-button-large-height\tvar(--amplify-font-sizes-large)\n--amplify-components-radio-button-large-width\tvar(--amplify-font-sizes-large)\n--amplify-components-radio-button-outline-color\tvar(--amplify-colors-transparent)\n--amplify-components-radio-button-outline-offset\tvar(--amplify-outline-offsets-medium)\n--amplify-components-radio-button-outline-style\tsolid\n--amplify-components-radio-button-outline-width\tvar(--amplify-outline-widths-medium)\n--amplify-components-radio-button-padding\tvar(--amplify-border-widths-medium)\n--amplify-components-radio-button-small-height\tvar(--amplify-font-sizes-small)\n--amplify-components-radio-button-small-width\tvar(--amplify-font-sizes-small)\n--amplify-components-radio-button-transition-duration\tvar(--amplify-time-medium)\n--amplify-components-radio-button-transition-property\tall\n--amplify-components-radio-button-width\tvar(--amplify-font-sizes-medium)\n--amplify-components-radio-disabled-cursor\tnot-allowed\n--amplify-components-radio-gap\tinherit\n--amplify-components-radio-justify-content\tflex-start\n--amplify-components-radio-label-color\tvar(--amplify-components-text-color)\n--amplify-components-radio-label-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-radiogroup-legend-color\tvar(--amplify-components-fieldset-legend-color)\n--amplify-components-radiogroup-legend-font-weight\tvar(--amplify-font-weights-normal)\n--amplify-components-radiogroup-radio-background-color\tvar(--amplify-components-radio-button-background-color)\n--amplify-components-radiogroup-radio-border-color\tvar(--amplify-components-radio-button-border-color)\n--amplify-components-radiogroup-radio-border-width\tvar(--amplify-components-radio-button-border-width)\n--amplify-components-radiogroup-radio-checked-color\tvar(--amplify-components-radio-button-checked-color)\n--amplify-components-radiogroup-radio-label-color\tvar(--amplify-components-radio-label-color)\n--amplify-components-rating-default-size\tvar(--amplify-font-sizes-xl)\n--amplify-components-rating-empty-color\tvar(--amplify-colors-background-tertiary)\n--amplify-components-rating-filled-color\tvar(--amplify-colors-secondary-80)\n--amplify-components-rating-large-size\tvar(--amplify-font-sizes-xxxl)\n--amplify-components-rating-small-size\tvar(--amplify-font-sizes-small)\n--amplify-components-searchfield-button-active-background-color\tvar(--amplify-components-button-active-background-color)\n--amplify-components-searchfield-button-active-border-color\tvar(--amplify-components-button-active-border-color)\n--amplify-components-searchfield-button-active-color\tvar(--amplify-components-button-active-color)\n--amplify-components-searchfield-button-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-searchfield-button-color\tvar(--amplify-components-button-color)\n--amplify-components-searchfield-button-disabled-background-color\tvar(--amplify-components-button-disabled-background-color)\n--amplify-components-searchfield-button-disabled-border-color\tvar(--amplify-components-button-disabled-border-color)\n--amplify-components-searchfield-button-disabled-color\tvar(--amplify-components-button-disabled-color)\n--amplify-components-searchfield-button-focus-background-color\tvar(--amplify-components-button-focus-background-color)\n--amplify-components-searchfield-button-focus-border-color\tvar(--amplify-components-button-focus-border-color)\n--amplify-components-searchfield-button-focus-color\tvar(--amplify-components-button-focus-color)\n--amplify-components-searchfield-button-hover-background-color\tvar(--amplify-components-button-hover-background-color)\n--amplify-components-searchfield-button-hover-border-color\tvar(--amplify-components-button-hover-border-color)\n--amplify-components-searchfield-button-hover-color\tvar(--amplify-components-button-hover-color)\n--amplify-components-searchfield-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-select-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-select-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-select-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-select-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-select-expanded-option-padding-block\tvar(--amplify-space-xs)\n--amplify-components-select-expanded-option-padding-inline\tvar(--amplify-space-small)\n--amplify-components-select-expanded-padding-block\tvar(--amplify-space-xs)\n--amplify-components-select-expanded-padding-inline\tvar(--amplify-space-small)\n--amplify-components-select-icon-wrapper-align-items\tcenter\n--amplify-components-select-icon-wrapper-large-right\tvar(--amplify-space-medium)\n--amplify-components-select-icon-wrapper-pointer-events\tnone\n--amplify-components-select-icon-wrapper-position\tabsolute\n--amplify-components-select-icon-wrapper-right\tvar(--amplify-space-medium)\n--amplify-components-select-icon-wrapper-small-right\tvar(--amplify-space-xs)\n--amplify-components-select-icon-wrapper-top\t50%\n--amplify-components-select-icon-wrapper-transform\ttranslateY(-50%)\n--amplify-components-select-large-min-width\t7.5rem\n--amplify-components-select-large-padding-inline-end\tvar(--amplify-space-xxl)\n--amplify-components-select-min-width\t6.5rem\n--amplify-components-select-option-background-color\ttransparent\n--amplify-components-select-option-color\tvar(--amplify-colors-font-primary)\n--amplify-components-select-option-disabled-background-color\ttransparent\n--amplify-components-select-option-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-select-padding-inline-end\tvar(--amplify-space-xxl)\n--amplify-components-select-small-min-width\t5.5rem\n--amplify-components-select-small-padding-inline-end\tvar(--amplify-space-xl)\n--amplify-components-select-white-space\tnowrap\n--amplify-components-select-wrapper-cursor\tpointer\n--amplify-components-select-wrapper-display\tblock\n--amplify-components-select-wrapper-flex\t1\n--amplify-components-select-wrapper-position\trelative\n--amplify-components-selectfield-border-color\tvar(--amplify-components-fieldcontrol-border-color)\n--amplify-components-selectfield-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-selectfield-flex-direction\tcolumn\n--amplify-components-selectfield-focus-border-color\tvar(--amplify-components-fieldcontrol-focus-border-color)\n--amplify-components-selectfield-font-size\tvar(--amplify-components-fieldcontrol-font-size)\n--amplify-components-selectfield-label-color\tvar(--amplify-components-field-label-color)\n--amplify-components-sliderfield-large-thumb-height\t1.5rem\n--amplify-components-sliderfield-large-thumb-width\t1.5rem\n--amplify-components-sliderfield-large-track-height\t0.625rem\n--amplify-components-sliderfield-padding-block\tvar(--amplify-space-xs)\n--amplify-components-sliderfield-range-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-sliderfield-range-border-radius\t9999px\n--amplify-components-sliderfield-range-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-sliderfield-small-thumb-height\t1rem\n--amplify-components-sliderfield-small-thumb-width\t1rem\n--amplify-components-sliderfield-small-track-height\t0.25rem\n--amplify-components-sliderfield-thumb-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-sliderfield-thumb-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-sliderfield-thumb-border-radius\t50%\n--amplify-components-sliderfield-thumb-border-style\tsolid\n--amplify-components-sliderfield-thumb-border-width\tvar(--amplify-border-widths-medium)\n--amplify-components-sliderfield-thumb-box-shadow\tvar(--amplify-shadows-small)\n--amplify-components-sliderfield-thumb-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-sliderfield-thumb-disabled-border-color\ttransparent\n--amplify-components-sliderfield-thumb-disabled-box-shadow\tnone\n--amplify-components-sliderfield-thumb-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-sliderfield-thumb-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-sliderfield-thumb-height\t1.25rem\n--amplify-components-sliderfield-thumb-hover-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-sliderfield-thumb-hover-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-sliderfield-thumb-width\t1.25rem\n--amplify-components-sliderfield-track-background-color\tvar(--amplify-colors-background-quaternary)\n--amplify-components-sliderfield-track-border-radius\t9999px\n--amplify-components-sliderfield-track-height\t0.375rem\n--amplify-components-sliderfield-track-min-width\t10rem\n--amplify-components-stepperfield-border-color\tvar(--amplify-components-fieldcontrol-border-color)\n--amplify-components-stepperfield-button-active-background-color\tvar(--amplify-components-button-active-background-color)\n--amplify-components-stepperfield-button-active-color\tvar(--amplify-components-button-active-color)\n--amplify-components-stepperfield-button-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-stepperfield-button-color\tvar(--amplify-components-button-color)\n--amplify-components-stepperfield-button-disabled-background-color\tvar(--amplify-components-fieldcontrol-disabled-background-color)\n--amplify-components-stepperfield-button-disabled-color\tvar(--amplify-components-button-disabled-color)\n--amplify-components-stepperfield-button-focus-background-color\tvar(--amplify-components-button-focus-background-color)\n--amplify-components-stepperfield-button-focus-color\tvar(--amplify-components-button-focus-color)\n--amplify-components-stepperfield-button-hover-background-color\tvar(--amplify-components-button-hover-background-color)\n--amplify-components-stepperfield-button-hover-color\tvar(--amplify-components-button-hover-color)\n--amplify-components-stepperfield-flex-direction\tcolumn\n--amplify-components-stepperfield-input-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-stepperfield-input-font-size\tvar(--amplify-components-fieldcontrol-font-size)\n--amplify-components-stepperfield-input-text-align\tcenter\n--amplify-components-storagemanager-dropzone-active-background-color\tvar(--amplify-colors-primary-10)\n--amplify-components-storagemanager-dropzone-active-border-color\tvar(--amplify-colors-border-pressed)\n--amplify-components-storagemanager-dropzone-active-border-radius\tvar(--amplify-components-storagemanager-dropzone-border-radius)\n--amplify-components-storagemanager-dropzone-active-border-style\tvar(--amplify-components-storagemanager-dropzone-border-style)\n--amplify-components-storagemanager-dropzone-active-border-width\tvar(--amplify-border-widths-medium)\n--amplify-components-storagemanager-dropzone-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-storagemanager-dropzone-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-storagemanager-dropzone-border-radius\tvar(--amplify-radii-small)\n--amplify-components-storagemanager-dropzone-border-style\tdashed\n--amplify-components-storagemanager-dropzone-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-storagemanager-dropzone-gap\tvar(--amplify-space-small)\n--amplify-components-storagemanager-dropzone-icon-color\tvar(--amplify-colors-border-primary)\n--amplify-components-storagemanager-dropzone-icon-font-size\tvar(--amplify-font-sizes-xxl)\n--amplify-components-storagemanager-dropzone-padding-block\tvar(--amplify-space-xl)\n--amplify-components-storagemanager-dropzone-padding-inline\tvar(--amplify-space-large)\n--amplify-components-storagemanager-dropzone-text-align\tcenter\n--amplify-components-storagemanager-dropzone-text-color\tvar(--amplify-colors-font-tertiary)\n--amplify-components-storagemanager-dropzone-text-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-storagemanager-dropzone-text-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-storagemanager-file-align-items\tbaseline\n--amplify-components-storagemanager-file-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-storagemanager-file-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-storagemanager-file-border-radius\tvar(--amplify-radii-small)\n--amplify-components-storagemanager-file-border-style\tsolid\n--amplify-components-storagemanager-file-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-storagemanager-file-gap\tvar(--amplify-space-small)\n--amplify-components-storagemanager-file-image-background-color\tvar(--amplify-colors-background-secondary)\n--amplify-components-storagemanager-file-image-border-radius\tvar(--amplify-radii-small)\n--amplify-components-storagemanager-file-image-color\tvar(--amplify-colors-font-tertiary)\n--amplify-components-storagemanager-file-image-height\tvar(--amplify-space-xxl)\n--amplify-components-storagemanager-file-image-width\tvar(--amplify-space-xxl)\n--amplify-components-storagemanager-file-name-color\tvar(--amplify-colors-font-primary)\n--amplify-components-storagemanager-file-name-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-storagemanager-file-name-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-storagemanager-file-padding-block\tvar(--amplify-space-xs)\n--amplify-components-storagemanager-file-padding-inline\tvar(--amplify-space-small)\n--amplify-components-storagemanager-file-size-color\tvar(--amplify-colors-font-tertiary)\n--amplify-components-storagemanager-file-size-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-storagemanager-file-size-font-weight\tvar(--amplify-font-weights-normal)\n--amplify-components-storagemanager-filelist-flex-direction\tcolumn\n--amplify-components-storagemanager-filelist-gap\tvar(--amplify-space-small)\n--amplify-components-storagemanager-loader-stroke-empty\tvar(--amplify-colors-border-secondary)\n--amplify-components-storagemanager-loader-stroke-filled\tvar(--amplify-components-loader-stroke-filled)\n--amplify-components-storagemanager-loader-stroke-linecap\tround\n--amplify-components-storagemanager-loader-stroke-width\tvar(--amplify-border-widths-large)\n--amplify-components-storagemanager-previewer-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-storagemanager-previewer-body-gap\tvar(--amplify-space-small)\n--amplify-components-storagemanager-previewer-body-padding-block\tvar(--amplify-space-medium)\n--amplify-components-storagemanager-previewer-body-padding-inline\tvar(--amplify-space-medium)\n--amplify-components-storagemanager-previewer-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-storagemanager-previewer-border-radius\tvar(--amplify-radii-small)\n--amplify-components-storagemanager-previewer-border-style\tsolid\n--amplify-components-storagemanager-previewer-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-storagemanager-previewer-footer-justify-content\tflex-end\n--amplify-components-storagemanager-previewer-max-height\t40rem\n--amplify-components-storagemanager-previewer-max-width\tauto\n--amplify-components-storagemanager-previewer-padding-block\tvar(--amplify-space-zero)\n--amplify-components-storagemanager-previewer-padding-inline\tvar(--amplify-space-zero)\n--amplify-components-storagemanager-previewer-text-color\tvar(--amplify-colors-font-primary)\n--amplify-components-storagemanager-previewer-text-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-storagemanager-previewer-text-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-switchfield-disabled-opacity\tvar(--amplify-opacities-60)\n--amplify-components-switchfield-focused-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-switchfield-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-switchfield-label-padding\tvar(--amplify-space-xs)\n--amplify-components-switchfield-large-font-size\tvar(--amplify-font-sizes-large)\n--amplify-components-switchfield-small-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-switchfield-thumb-background-color\tvar(--amplify-colors-background-primary)\n--amplify-components-switchfield-thumb-border-color\ttransparent\n--amplify-components-switchfield-thumb-border-radius\tvar(--amplify-radii-xxxl)\n--amplify-components-switchfield-thumb-border-style\tsolid\n--amplify-components-switchfield-thumb-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-switchfield-thumb-checked-transform\tvar(--amplify-transforms-slide-x-medium)\n--amplify-components-switchfield-thumb-transition-duration\tvar(--amplify-time-medium)\n--amplify-components-switchfield-thumb-width\tvar(--amplify-space-relative-medium)\n--amplify-components-switchfield-track-background-color\tvar(--amplify-colors-background-quaternary)\n--amplify-components-switchfield-track-border-radius\tvar(--amplify-radii-xxxl)\n--amplify-components-switchfield-track-checked-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-switchfield-track-error-background-color\tvar(--amplify-colors-background-error)\n--amplify-components-switchfield-track-height\tvar(--amplify-space-relative-medium)\n--amplify-components-switchfield-track-padding\tvar(--amplify-outline-widths-medium)\n--amplify-components-switchfield-track-transition-duration\tvar(--amplify-time-short)\n--amplify-components-switchfield-track-width\tvar(--amplify-space-relative-xl)\n--amplify-components-table-body-display\ttable-row-group\n--amplify-components-table-body-vertical-align\tmiddle\n--amplify-components-table-border-collapse\tcollapse\n--amplify-components-table-caption-caption-side\tbottom\n--amplify-components-table-caption-color\tvar(--amplify-colors-font-primary)\n--amplify-components-table-caption-display\ttable-caption\n--amplify-components-table-caption-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-table-caption-large-font-size\tvar(--amplify-font-sizes-large)\n--amplify-components-table-caption-small-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-table-caption-text-align\tcenter\n--amplify-components-table-caption-word-break\tbreak-all\n--amplify-components-table-data-border-color\tvar(--amplify-colors-border-tertiary)\n--amplify-components-table-data-border-style\tsolid\n--amplify-components-table-data-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-table-data-color\tvar(--amplify-colors-font-primary)\n--amplify-components-table-data-display\ttable-cell\n--amplify-components-table-data-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-table-data-font-weight\tvar(--amplify-font-weights-normal)\n--amplify-components-table-data-large-font-size\tvar(--amplify-font-sizes-large)\n--amplify-components-table-data-large-padding\tvar(--amplify-space-large)\n--amplify-components-table-data-padding\tvar(--amplify-space-medium)\n--amplify-components-table-data-small-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-table-data-small-padding\tvar(--amplify-space-xs)\n--amplify-components-table-data-vertical-align\tmiddle\n--amplify-components-table-display\ttable\n--amplify-components-table-foot-display\ttable-footer-group\n--amplify-components-table-foot-vertical-align\tmiddle\n--amplify-components-table-head-display\ttable-header-group\n--amplify-components-table-head-vertical-align\tmiddle\n--amplify-components-table-header-border-color\tvar(--amplify-colors-border-tertiary)\n--amplify-components-table-header-border-style\tsolid\n--amplify-components-table-header-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-table-header-color\tvar(--amplify-colors-font-primary)\n--amplify-components-table-header-display\ttable-cell\n--amplify-components-table-header-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-table-header-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-table-header-large-font-size\tvar(--amplify-font-sizes-large)\n--amplify-components-table-header-large-padding\tvar(--amplify-space-large)\n--amplify-components-table-header-padding\tvar(--amplify-space-medium)\n--amplify-components-table-header-small-font-size\tvar(--amplify-font-sizes-small)\n--amplify-components-table-header-small-padding\tvar(--amplify-space-xs)\n--amplify-components-table-header-vertical-align\tmiddle\n--amplify-components-table-row-display\ttable-row\n--amplify-components-table-row-hover-background-color\tvar(--amplify-colors-background-tertiary)\n--amplify-components-table-row-striped-background-color\tvar(--amplify-colors-background-secondary)\n--amplify-components-table-row-vertical-align\tmiddle\n--amplify-components-table-width\t100%\n--amplify-components-tabs-background-color\ttransparent\n--amplify-components-tabs-border-color\tvar(--amplify-colors-border-secondary)\n--amplify-components-tabs-border-style\tsolid\n--amplify-components-tabs-border-width\tvar(--amplify-border-widths-medium)\n--amplify-components-tabs-gap\t0\n--amplify-components-tabs-item-active-background-color\ttransparent\n--amplify-components-tabs-item-active-border-color\tvar(--amplify-colors-font-interactive)\n--amplify-components-tabs-item-active-box-shadow\tnone\n--amplify-components-tabs-item-active-color\tvar(--amplify-colors-font-interactive)\n--amplify-components-tabs-item-background-color\ttransparent\n--amplify-components-tabs-item-border-color\tvar(--amplify-colors-border-secondary)\n--amplify-components-tabs-item-border-style\tsolid\n--amplify-components-tabs-item-border-width\tvar(--amplify-border-widths-medium)\n--amplify-components-tabs-item-color\tvar(--amplify-colors-font-secondary)\n--amplify-components-tabs-item-disabled-background-color\ttransparent\n--amplify-components-tabs-item-disabled-border-color\tvar(--amplify-colors-border-tertiary)\n--amplify-components-tabs-item-disabled-box-shadow\tnone\n--amplify-components-tabs-item-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-tabs-item-focus-background-color\ttransparent\n--amplify-components-tabs-item-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-tabs-item-focus-box-shadow\t0px 0px 0px var(--amplify-border-widths-medium) var(--amplify-colors-border-focus)\n--amplify-components-tabs-item-focus-color\tvar(--amplify-colors-font-focus)\n--amplify-components-tabs-item-font-size\tvar(--amplify-font-sizes-medium)\n--amplify-components-tabs-item-font-weight\tvar(--amplify-font-weights-bold)\n--amplify-components-tabs-item-hover-background-color\ttransparent\n--amplify-components-tabs-item-hover-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-tabs-item-hover-box-shadow\tnone\n--amplify-components-tabs-item-hover-color\tvar(--amplify-colors-font-hover)\n--amplify-components-tabs-item-padding-horizontal\tvar(--amplify-space-medium)\n--amplify-components-tabs-item-padding-vertical\tvar(--amplify-space-small)\n--amplify-components-tabs-item-text-align\tcenter\n--amplify-components-tabs-item-transition-duration\tvar(--amplify-time-medium)\n--amplify-components-tabs-panel-background-color\ttransparent\n--amplify-components-tabs-panel-padding-block\tvar(--amplify-space-small)\n--amplify-components-tabs-panel-padding-inline\t0\n--amplify-components-text-color\tvar(--amplify-colors-font-primary)\n--amplify-components-text-error-color\tvar(--amplify-colors-font-error)\n--amplify-components-text-info-color\tvar(--amplify-colors-font-info)\n--amplify-components-text-primary-color\tvar(--amplify-colors-font-primary)\n--amplify-components-text-secondary-color\tvar(--amplify-colors-font-secondary)\n--amplify-components-text-success-color\tvar(--amplify-colors-font-success)\n--amplify-components-text-tertiary-color\tvar(--amplify-colors-font-tertiary)\n--amplify-components-text-warning-color\tvar(--amplify-colors-font-warning)\n--amplify-components-textareafield-border-color\tvar(--amplify-components-fieldcontrol-border-color)\n--amplify-components-textareafield-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-textareafield-focus-border-color\tvar(--amplify-components-fieldcontrol-focus-border-color)\n--amplify-components-textfield-border-color\tvar(--amplify-components-fieldcontrol-border-color)\n--amplify-components-textfield-color\tvar(--amplify-components-fieldcontrol-color)\n--amplify-components-textfield-focus-border-color\tvar(--amplify-components-fieldcontrol-focus-border-color)\n--amplify-components-textfield-font-size\tvar(--amplify-components-fieldcontrol-font-size)\n--amplify-components-togglebutton-active-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-border-color\tvar(--amplify-colors-border-primary)\n--amplify-components-togglebutton-color\tvar(--amplify-colors-font-primary)\n--amplify-components-togglebutton-disabled-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-disabled-border-color\tvar(--amplify-colors-border-disabled)\n--amplify-components-togglebutton-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-togglebutton-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-togglebutton-focus-color\tvar(--amplify-colors-font-primary)\n--amplify-components-togglebutton-hover-background-color\tvar(--amplify-colors-overlay-10)\n--amplify-components-togglebutton-link-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-link-color\tvar(--amplify-colors-overlay-50)\n--amplify-components-togglebutton-link-disabled-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-link-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-togglebutton-link-focus-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-link-focus-color\tvar(--amplify-colors-overlay-50)\n--amplify-components-togglebutton-link-hover-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-link-hover-color\tvar(--amplify-colors-overlay-50)\n--amplify-components-togglebutton-link-pressed-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-link-pressed-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-togglebutton-link-pressed-focus-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-link-pressed-focus-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-togglebutton-link-pressed-hover-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-link-pressed-hover-color\tvar(--amplify-colors-overlay-90)\n--amplify-components-togglebutton-pressed-background-color\tvar(--amplify-colors-overlay-20)\n--amplify-components-togglebutton-pressed-border-color\tvar(--amplify-colors-border-pressed)\n--amplify-components-togglebutton-pressed-color\tvar(--amplify-colors-font-primary)\n--amplify-components-togglebutton-pressed-hover-background-color\tvar(--amplify-colors-overlay-30)\n--amplify-components-togglebutton-primary-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-primary-border-width\tvar(--amplify-border-widths-small)\n--amplify-components-togglebutton-primary-disabled-background-color\tvar(--amplify-colors-background-disabled)\n--amplify-components-togglebutton-primary-disabled-border-color\tvar(--amplify-colors-border-disabled)\n--amplify-components-togglebutton-primary-disabled-color\tvar(--amplify-colors-font-disabled)\n--amplify-components-togglebutton-primary-focus-background-color\tvar(--amplify-colors-transparent)\n--amplify-components-togglebutton-primary-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-togglebutton-primary-focus-box-shadow\tvar(--amplify-components-fieldcontrol-focus-box-shadow)\n--amplify-components-togglebutton-primary-focus-color\tvar(--amplify-colors-font-primary)\n--amplify-components-togglebutton-primary-hover-background-color\tvar(--amplify-colors-overlay-10)\n--amplify-components-togglebutton-primary-hover-color\tvar(--amplify-colors-font-primary)\n--amplify-components-togglebutton-primary-pressed-background-color\tvar(--amplify-colors-primary-80)\n--amplify-components-togglebutton-primary-pressed-border-color\tvar(--amplify-colors-primary-80)\n--amplify-components-togglebutton-primary-pressed-color\tvar(--amplify-colors-background-primary)\n--amplify-components-togglebutton-primary-pressed-focus-background-color\tvar(--amplify-colors-border-focus)\n--amplify-components-togglebutton-primary-pressed-focus-border-color\tvar(--amplify-colors-border-focus)\n--amplify-components-togglebutton-primary-pressed-focus-color\tvar(--amplify-colors-background-primary)\n--amplify-components-togglebutton-primary-pressed-hover-background-color\tvar(--amplify-colors-primary-60)\n--amplify-components-togglebutton-primary-pressed-hover-border-color\tvar(--amplify-colors-primary-60)\n--amplify-components-togglebutton-primary-pressed-hover-box-shadow\tvar(--amplify-colors-primary-60)\n--amplify-components-togglebutton-primary-pressed-hover-color\tvar(--amplify-colors-background-primary)\n--amplify-components-togglebuttongroup-align-content\tcenter\n--amplify-components-togglebuttongroup-align-items\tcenter\n--amplify-components-togglebuttongroup-justify-content\tflex-start\n--amplify-font-sizes-large\t1.25rem\n--amplify-font-sizes-medium\t1rem\n--amplify-font-sizes-small\t0.875rem\n--amplify-font-sizes-xl\t1.5rem\n--amplify-font-sizes-xs\t0.75rem\n--amplify-font-sizes-xxl\t2rem\n--amplify-font-sizes-xxs\t0.5rem\n--amplify-font-sizes-xxxl\t2.5rem\n--amplify-font-sizes-xxxs\t0.375rem\n--amplify-font-sizes-xxxxl\t3rem\n--amplify-font-weights-black\t900\n--amplify-font-weights-bold\t700\n--amplify-font-weights-extrabold\t800\n--amplify-font-weights-hairline\t100\n--amplify-font-weights-light\t300\n--amplify-font-weights-medium\t500\n--amplify-font-weights-normal\t400\n--amplify-font-weights-semibold\t600\n--amplify-font-weights-thin\t200\n--amplify-fonts-default-static\t'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif\n--amplify-fonts-default-variable\t'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif\n--amplify-line-heights-large\t2\n--amplify-line-heights-medium\t1.5\n--amplify-line-heights-small\t1.25\n--amplify-opacities-0\t0\n--amplify-opacities-10\t0.1\n--amplify-opacities-100\t1\n--amplify-opacities-20\t0.2\n--amplify-opacities-30\t0.3\n--amplify-opacities-40\t0.4\n--amplify-opacities-50\t0.5\n--amplify-opacities-60\t0.6\n--amplify-opacities-70\t0.7\n--amplify-opacities-80\t0.8\n--amplify-opacities-90\t0.9\n--amplify-outline-offsets-large\t3px\n--amplify-outline-offsets-medium\t2px\n--amplify-outline-offsets-small\t1px\n--amplify-outline-widths-large\t3px\n--amplify-outline-widths-medium\t2px\n--amplify-outline-widths-small\t1px\n--amplify-radii-large\t1rem\n--amplify-radii-medium\t0.5rem\n--amplify-radii-small\t0.25rem\n--amplify-radii-xl\t2rem\n--amplify-radii-xs\t0.125rem\n--amplify-radii-xxl\t4rem\n--amplify-radii-xxxl\t8rem\n--amplify-shadows-large\t0px 4px 12px var(--amplify-colors-shadow-primary)\n--amplify-shadows-medium\t0px 2px 6px var(--amplify-colors-shadow-secondary)\n--amplify-shadows-small\t0px 2px 4px var(--amplify-colors-shadow-tertiary)\n--amplify-space-large\t1.5rem\n--amplify-space-medium\t1rem\n--amplify-space-relative-full\t100%\n--amplify-space-relative-large\t1.5em\n--amplify-space-relative-medium\t1em\n--amplify-space-relative-small\t0.75em\n--amplify-space-relative-xl\t2.0em\n--amplify-space-relative-xs\t0.5em\n--amplify-space-relative-xxl\t3.0em\n--amplify-space-relative-xxs\t0.375em\n--amplify-space-relative-xxxl\t4.5em\n--amplify-space-relative-xxxs\t0.25em\n--amplify-space-small\t0.75rem\n--amplify-space-xl\t2.0rem\n--amplify-space-xs\t0.5rem\n--amplify-space-xxl\t3.0rem\n--amplify-space-xxs\t0.375rem\n--amplify-space-xxxl\t4.5rem\n--amplify-space-xxxs\t0.25rem\n--amplify-space-zero\t0\n--amplify-time-long\t500ms\n--amplify-time-medium\t250ms\n--amplify-time-short\t100ms\n--amplify-transforms-slide-x-large\ttranslateX(2em)\n--amplify-transforms-slide-x-medium\ttranslateX(1em)\n--amplify-transforms-slide-x-small\ttranslateX(0.5em)"
  },
  {
    "title": "Icons | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/icons",
    "html": "Icons\n\nCustomize the icons used in components across your application.\n\nFeedback\nDemo\ndefault\nheroicons\nfeather icons\nflat color icons\nSuccess\nWarning\nError\nInfo\nSelectField\nOption 1\nOption 2\nOption 3\nPasswordField\nPassword is hidden\nSearchField\nStepperField\n3.5 out of 5 rating\n\nDrop files here or\n\nBrowse files\nUsage\n\nTo customize the icons used in the Amplify UI components, wrap your application with the IconProvider component and pass in the icons you want to change. The icons prop should be an object mapping icon names to React components. For example:\n\n3.5 out of 5 rating\nCopy\nimport { IconsProvider, Rating } from '@aws-amplify/ui-react';\nimport { FiStar } from 'react-icons/fi';\n\nexport default function IconProviderExample() {\n  return (\n    <IconsProvider\n      icons={{\n        rating: {\n          filled: <FiStar />,\n          empty: <FiStar />,\n        },\n      }}\n    >\n      <Rating value={3.5} />\n    </IconsProvider>\n  );\n}\n\n\nThe icons passed to the IconsProvider are ReactNodes that get rendered directly.\n\nThe IconProvider component uses React context to make the custom icon set available to child components. Any component inside the IconProvider will have access to the custom icons via an internal hook. You can nest IconProviders in different parts of your application, just like you would with other React contexts if you wanted to change icons in a certain part of your application.\n\nComponents with icons\n\nThe components and their icons that can be overridden are:\n\nAccordion\nAlert\nCheckbox\nMenu\nPagination\nPasswordField\nRating\nSearchField\nSelectField\nStepperField\nStorageManager\n\nHere is the full list of icons you can customize with the IconProvider\n\nCopy\nconst icons = {\n  alert: {\n    close: () => </>,\n    info: () => </>,\n    error: () => </>,\n    warning: () => </>,\n    success: () => </>,\n  },\n  checkbox: {\n    indeterminate: () => </>,\n    checked: () => </>,\n  },\n  accordion: {\n    more: () => </>,\n  },\n  field: {\n    clear: () => </>,\n  },\n  menu: {\n    menu: () => </>,\n  },\n  pagination: {\n    previous: () => </>,\n    next: () => </>,\n  },\n  passwordField: {\n    visibility: () => </>,\n    visibilityOff: () => </>,\n  },\n  rating: {\n    filled: () => </>,\n    empty: () => </>,\n  },\n  searchField: {\n    search: () => </>,\n  },\n  select: {\n    expand: () => </>,\n  },\n  stepperField: {\n    add: () => </>,\n    remove: () => </>,\n  },\n  storageManager: {\n    upload: () => </>,\n    remove: () => </>,\n    error: () => </>,\n    success: () => </>,\n    file: () => </>,\n  }\n}\n"
  },
  {
    "title": "Dark Mode | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/dark-mode",
    "html": "Dark Mode\nFeedback\nOverview\n\nAmplify UI supports color modes/schemes, like Dark Mode, through theme overrides. Amplify UI Theme Overrides let you define different theme styles in different contexts, such as color mode. You can also use plain CSS.\n\nThere are 2 ways to support light/dark mode in your application:\n\nRely on the user's OS preference (System Preferences > General > Appearance in Mac)\nPlace a control like a toggle button in your application that allows the user to switch color modes. With this option you could default to the OS preference or show 3 options: light, dark, system, like this site does.\n\nEither of these approaches work with Amplify UI whether you are using the Theme Overrides or writing plain CSS.\n\nThemeProvider\ncolorMode\n\nThe ThemeProvider accepts a colorMode prop which can be light, dark, or system.\n\nIf you have multiple ThemeProviders in your application, make sure to store colorMode in the application's state or context and pass it to each ThemeProvider or else some parts of your app won't have the right color mode applied. Also, because the theme uses CSS variables which are inherited, your application can have some weird behavior with nested themes and color modes.\n\nMultiple ThemeProviders should be avoided if possible because it is more efficient to use a selector override instead. This site uses nested ThemeProviders for demos.\n\nDefault Dark Mode\n\nAmplify UI comes with a default dark mode that you can use.\n\nNote: the Amplify UI theme and any overrides like dark mode are scoped to the ThemeProvider. Changing the color mode in the example will only affect the example code.\n\nJavaScript\nTypeScript\nLight\nDark\nSystem\n\nCurrent color mode: system\n\nCopy\nimport * as React from 'react';\nimport {\n  defaultDarkModeOverride,\n  ThemeProvider,\n  Card,\n  Text,\n  ToggleButton,\n  ToggleButtonGroup,\n} from '@aws-amplify/ui-react';\n\nexport const DefaultDarkMode = () => {\n  const [colorMode, setColorMode] = React.useState('system');\n  const theme = {\n    name: 'my-theme',\n    overrides: [defaultDarkModeOverride],\n  };\n\n  return (\n    <ThemeProvider theme={theme} colorMode={colorMode}>\n      <Card>\n        <ToggleButtonGroup\n          value={colorMode}\n          isExclusive\n          onChange={(value) => setColorMode(value)}\n        >\n          <ToggleButton value=\"light\">Light</ToggleButton>\n          <ToggleButton value=\"dark\">Dark</ToggleButton>\n          <ToggleButton value=\"system\">System</ToggleButton>\n        </ToggleButtonGroup>\n        <Text>Current color mode: {colorMode}</Text>\n      </Card>\n    </ThemeProvider>\n  );\n};\n\nSystem Dark Mode\n\nIf you don't want to provide a color mode control on your application, but still want to honor the user's operating system preference for color mode, you can set the colorMode on the ThemeProvider to system. Then use either the default dark mode override styling or provide your own.\n\nNote: to see dark mode applied, change your OS preferences\n\nHello\n\nPrimary text\n\nSecondary text\n\nTertiary text\n\nCopy\nimport * as React from 'react';\nimport {\n  defaultDarkModeOverride,\n  ThemeProvider,\n  Card,\n  Text,\n  Button,\n} from '@aws-amplify/ui-react';\n\nexport const SystemDarkModeExample = () => {\n  const theme = {\n    name: 'my-theme',\n    overrides: [defaultDarkModeOverride],\n  };\n\n  return (\n    // Note: color mode overrides are scoped to the ThemeProvider\n    // if you use multiple providers\n    <ThemeProvider theme={theme} colorMode=\"system\">\n      <Card>\n        <Button>Hello</Button>\n        <Text variation=\"primary\">Primary text</Text>\n        <Text variation=\"secondary\">Secondary text</Text>\n        <Text variation=\"tertiary\">Tertiary text</Text>\n      </Card>\n    </ThemeProvider>\n  );\n};\n\nCustom dark mode\nJavaScript\nTypeScript\nLight\nDark\nSystem\n\nCurrent color mode: system\n\nCopy\nimport * as React from 'react';\nimport {\n  ThemeProvider,\n  Card,\n  Text,\n  ToggleButton,\n  ToggleButtonGroup,\n} from '@aws-amplify/ui-react';\n\nexport const CustomDarkModeExample = () => {\n  const [colorMode, setColorMode] = React.useState('system');\n  const theme = {\n    name: 'my-theme',\n    overrides: [\n      {\n        colorMode: 'dark',\n        tokens: {\n          colors: {\n            font: {\n              primary: { value: '{colors.pink.100}' },\n              secondary: { value: '{colors.pink.90}' },\n              tertiary: { value: '{colors.pink.80}' },\n            },\n            background: {\n              primary: { value: '{colors.purple.10}' },\n              secondary: { value: '{colors.purple.20}' },\n              tertiary: { value: '{colors.purple.40}' },\n            },\n            border: {\n              primary: { value: '{colors.pink.60}' },\n              secondary: { value: '{colors.pink.40}' },\n              tertiary: { value: '{colors.pink.20}' },\n            },\n          },\n        },\n      },\n    ],\n  };\n\n  return (\n    // Note: color mode overrides are scoped to the ThemeProvider\n    // if you use multiple providers\n    <ThemeProvider theme={theme} colorMode={colorMode}>\n      <Card>\n        <ToggleButtonGroup\n          value={colorMode}\n          isExclusive\n          onChange={(value) => setColorMode(value)}\n        >\n          <ToggleButton value=\"light\">Light</ToggleButton>\n          <ToggleButton value=\"dark\">Dark</ToggleButton>\n          <ToggleButton value=\"system\">System</ToggleButton>\n        </ToggleButtonGroup>\n        <Text>Current color mode: {colorMode}</Text>\n      </Card>\n    </ThemeProvider>\n  );\n};\n\nCSS\n\nYou can also write CSS variables directly to support color modes. If you are using the colorMode prop in the ThemeProvider, you can write CSS like this to support dark mode:\n\n/* The prefers-color-scheme media query detects the system setting */\n@media (prefers-color-scheme: dark) {\n  [data-amplify-color-mode='system'] {\n    --amplify-colors-background-primary: black;\n  }\n}\n\n[data-amplify-color-mode='dark'] {\n  --amplify-colors-background-primary: black;\n}\n"
  },
  {
    "title": "ThemeProvider | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/theme-provider",
    "html": "ThemeProvider\n\nThe ThemeProvider allows you to apply a Theme to your application.\n\nFeedback\nAmplifyProvider has been renamed to ThemeProvider. The ThemeProvider export is available since version 2.18.3, previous versions must still use AmplifyProvider.\nUsage\n\nImport the ThemeProvider and wrap your application with it:\n\nimport { ThemeProvider } from '@aws-amplify/ui-react';\n\nexport const App = () => (\n  <ThemeProvider>\n    <YourApplication />\n  </ThemeProvider>\n);\n\n\nAfter wrapping your application in the ThemeProvider, you have access to all theme values in your components. To style the components in your app, you can either:\n\nGet the theme tokens through the useTheme hook (e.g., tokens.colors.blue[80])\nReference the theme tokens directly in style props (e.g., \"purple.80\")\nThemed Button\nCopy\nimport { Button, useTheme } from '@aws-amplify/ui-react';\n\nexport const BasicExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <Button border={`2px solid ${tokens.colors.blue[80]}`} color=\"purple.80\">\n      Themed Button\n    </Button>\n  );\n};\n\ntheme\n\nTo create and use your own custom theme, you may pass a theme object to the theme prop on the ThemeProvider.\n\nTheming overview\nHeading text\n\nSome sample text for this card.\n\nCopy\nimport { Card, Heading, Text, ThemeProvider } from '@aws-amplify/ui-react';\n\nconst theme = {\n  name: 'custom-theme',\n  tokens: {\n    components: {\n      card: {\n        backgroundColor: { value: '{colors.background.secondary}' },\n        outlined: {\n          borderColor: { value: '{colors.black}' },\n        },\n      },\n      heading: {\n        color: { value: '{colors.secondary[80]}' },\n      },\n      text: {\n        color: { value: '{colors.primary[80]}' },\n      },\n    },\n  },\n};\n\nexport const CustomThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Card variation=\"outlined\">\n        <Heading level={6}>Heading text</Heading>\n        <Text>Some sample text for this card.</Text>\n      </Card>\n    </ThemeProvider>\n  );\n};\n\ncolorMode\n\nThe ThemeProvider accepts a colorMode prop which can be light, dark, or system.\n\nSee the Dark mode documentation for a detailed explanation of how to use the colorMode prop.\n\nnonce\n\nWhen you have a Content-Security-Policy (CSP) header defined, the browser will automatically block inline styles.\n\nTo safely allow inline styles when using strict CSP rules, you may pass a nonce to the nonce prop on the ThemeProvider. This will add a nonce to the <style> tag rendered by the ThemeProvider. For example:\n\nCSP rules\n\nstyle-src css-cdn.example.com 'nonce-rAnd0m';\n\n\nThemeProvider\n\n<ThemeProvider nonce=\"rAnd0m\">\n  {/* your app */}\n</ThemeProvider>\n\n\nHTML output\n\n<style nonce=\"rAnd0m\">\n  :root, [data-amplify-theme] {\n    --amplify-colors-white: hsl(0, 0%, 100%);\n    /* etc */\n  }\n  /* \n   * Any of your custom theme styles\n   */\n</style>\n\n\nFor more information, see the following documention on allowing inline styles using a nonce."
  },
  {
    "title": "Sizes | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/default-theme/sizes",
    "html": "Sizes\n\nAmplify UI uses design tokens for consistent spacing, border radius, widths, etc.\n\nFeedback\nSpace\nExample usage\nCSS\nCopy\nimport { Grid, View, useTheme } from '@aws-amplify/ui-react';\n\nexport const SpaceExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Grid gap={tokens.space.xxl} templateColumns=\"1fr 1fr\">\n      <View\n        padding={tokens.space.medium}\n        backgroundColor={tokens.colors.neutral[20]}\n      ></View>\n      <View\n        padding={tokens.space.medium}\n        backgroundColor={tokens.colors.neutral[20]}\n      ></View>\n    </Grid>\n  );\n};\n\nzero\n--amplify-space-zero\n0\nxxxs\n--amplify-space-xxxs\n0.25rem\nxxs\n--amplify-space-xxs\n0.375rem\nxs\n--amplify-space-xs\n0.5rem\nsmall\n--amplify-space-small\n0.75rem\nmedium\n--amplify-space-medium\n1rem\nlarge\n--amplify-space-large\n1.5rem\nxl\n--amplify-space-xl\n2.0rem\nxxl\n--amplify-space-xxl\n3.0rem\nxxxl\n--amplify-space-xxxl\n4.5rem\nrelative.xxxs\n--amplify-space-relative-xxxs\n0.25em\nrelative.xxs\n--amplify-space-relative-xxs\n0.375em\nrelative.xs\n--amplify-space-relative-xs\n0.5em\nrelative.small\n--amplify-space-relative-small\n0.75em\nrelative.medium\n--amplify-space-relative-medium\n1em\nrelative.large\n--amplify-space-relative-large\n1.5em\nrelative.xl\n--amplify-space-relative-xl\n2.0em\nrelative.xxl\n--amplify-space-relative-xxl\n3.0em\nrelative.xxxl\n--amplify-space-relative-xxxl\n4.5em\nrelative.full\n--amplify-space-relative-full\n100%\nBorder Widths\nExample usage\nCSS\nCustom border button\nCopy\nimport { Button, useTheme, ThemeProvider } from '@aws-amplify/ui-react';\n\nexport const BorderWidthExample = () => {\n  const { tokens } = useTheme();\n\n  const theme = {\n    name: 'custom-theme',\n    tokens: {\n      components: {\n        button: {\n          borderWidth: tokens.borderWidths.large,\n        },\n      },\n    },\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Button color={tokens.colors.secondary[60]}>Custom border button</Button>\n    </ThemeProvider>\n  );\n};\n\nsmall\n--amplify-border-widths-small\n1px\nmedium\n--amplify-border-widths-medium\n2px\nlarge\n--amplify-border-widths-large\n3px\nRadii\nExample usage\nCSS\nText\nCopy\nimport { Card, useTheme } from '@aws-amplify/ui-react';\n\nexport const RadiiExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Card\n      borderRadius={tokens.radii.xxxl}\n      backgroundColor={tokens.colors.green[10]}\n    >\n      Text\n    </Card>\n  );\n};\n\nxs\n--amplify-radii-xs\n0.125rem\nsmall\n--amplify-radii-small\n0.25rem\nmedium\n--amplify-radii-medium\n0.5rem\nlarge\n--amplify-radii-large\n1rem\nxl\n--amplify-radii-xl\n2rem\nxxl\n--amplify-radii-xxl\n4rem\nxxxl\n--amplify-radii-xxxl\n8rem"
  },
  {
    "title": "Colors | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/default-theme/colors",
    "html": "Colors\n\nThe Amplify UI color palette uses hsl() notation, which defines a color by its hue, saturation and lightness.\n\nFeedback\nSemantic\nExample usage\nCSS\nHeading text\n\nSome sample text for this card.\n\nCopy\nimport { Card, Heading, Text, ThemeProvider } from '@aws-amplify/ui-react';\n\nconst theme = {\n  name: 'custom-theme',\n  tokens: {\n    components: {\n      card: {\n        backgroundColor: { value: '{colors.background.secondary}' },\n        outlined: {\n          borderColor: { value: '{colors.black}' },\n        },\n      },\n      heading: {\n        color: { value: '{colors.secondary[80]}' },\n      },\n      text: {\n        color: { value: '{colors.primary[80]}' },\n      },\n    },\n  },\n};\n\nexport const ColorsExample = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Card variation=\"outlined\">\n        <Heading level={6}>Heading text</Heading>\n        <Text>Some sample text for this card.</Text>\n      </Card>\n    </ThemeProvider>\n  );\n};\n\nFont\nfont.primary\n--amplify-colors-font-primary\nvar(--amplify-colors-neutral-100)\nfont.secondary\n--amplify-colors-font-secondary\nvar(--amplify-colors-neutral-90)\nfont.tertiary\n--amplify-colors-font-tertiary\nvar(--amplify-colors-neutral-80)\nfont.disabled\n--amplify-colors-font-disabled\nvar(--amplify-colors-neutral-60)\nfont.inverse\n--amplify-colors-font-inverse\nvar(--amplify-colors-white)\nfont.interactive\n--amplify-colors-font-interactive\nvar(--amplify-colors-primary-80)\nfont.hover\n--amplify-colors-font-hover\nvar(--amplify-colors-primary-90)\nfont.focus\n--amplify-colors-font-focus\nvar(--amplify-colors-primary-100)\nfont.active\n--amplify-colors-font-active\nvar(--amplify-colors-primary-100)\nfont.info\n--amplify-colors-font-info\nvar(--amplify-colors-blue-90)\nfont.warning\n--amplify-colors-font-warning\nvar(--amplify-colors-orange-90)\nfont.error\n--amplify-colors-font-error\nvar(--amplify-colors-red-90)\nfont.success\n--amplify-colors-font-success\nvar(--amplify-colors-green-90)\nBackground\nbackground.primary\n--amplify-colors-background-primary\nvar(--amplify-colors-white)\nbackground.secondary\n--amplify-colors-background-secondary\nvar(--amplify-colors-neutral-10)\nbackground.tertiary\n--amplify-colors-background-tertiary\nvar(--amplify-colors-neutral-20)\nbackground.quaternary\n--amplify-colors-background-quaternary\nvar(--amplify-colors-neutral-60)\nbackground.disabled\n--amplify-colors-background-disabled\nvar(--amplify-colors-background-tertiary)\nbackground.info\n--amplify-colors-background-info\nvar(--amplify-colors-blue-10)\nbackground.warning\n--amplify-colors-background-warning\nvar(--amplify-colors-orange-10)\nbackground.error\n--amplify-colors-background-error\nvar(--amplify-colors-red-10)\nbackground.success\n--amplify-colors-background-success\nvar(--amplify-colors-green-10)\nBorder\nborder.primary\n--amplify-colors-border-primary\nvar(--amplify-colors-neutral-60)\nborder.secondary\n--amplify-colors-border-secondary\nvar(--amplify-colors-neutral-40)\nborder.tertiary\n--amplify-colors-border-tertiary\nvar(--amplify-colors-neutral-20)\nborder.disabled\n--amplify-colors-border-disabled\nvar(--amplify-colors-border-tertiary)\nborder.pressed\n--amplify-colors-border-pressed\nvar(--amplify-colors-primary-100)\nborder.focus\n--amplify-colors-border-focus\nvar(--amplify-colors-primary-100)\nborder.error\n--amplify-colors-border-error\nvar(--amplify-colors-red-80)\nborder.info\n--amplify-colors-border-info\nvar(--amplify-colors-blue-80)\nborder.success\n--amplify-colors-border-success\nvar(--amplify-colors-green-80)\nborder.warning\n--amplify-colors-border-warning\nvar(--amplify-colors-orange-80)\nShadow\nshadow.primary\n--amplify-colors-shadow-primary\nhsla(210, 50%, 10%, 0.25)\nshadow.secondary\n--amplify-colors-shadow-secondary\nhsla(210, 50%, 10%, 0.15)\nshadow.tertiary\n--amplify-colors-shadow-tertiary\nhsla(210, 50%, 10%, 0.05)\nOverlay\noverlay[5]\n--amplify-colors-overlay-5\nhsla(0, 0%, 0%, 0.05)\noverlay[10]\n--amplify-colors-overlay-10\nhsla(0, 0%, 0%, 0.1)\noverlay[20]\n--amplify-colors-overlay-20\nhsla(0, 0%, 0%, 0.2)\noverlay[30]\n--amplify-colors-overlay-30\nhsla(0, 0%, 0%, 0.3)\noverlay[40]\n--amplify-colors-overlay-40\nhsla(0, 0%, 0%, 0.4)\noverlay[50]\n--amplify-colors-overlay-50\nhsla(0, 0%, 0%, 0.5)\noverlay[60]\n--amplify-colors-overlay-60\nhsla(0, 0%, 0%, 0.6)\noverlay[70]\n--amplify-colors-overlay-70\nhsla(0, 0%, 0%, 0.7)\noverlay[80]\n--amplify-colors-overlay-80\nhsla(0, 0%, 0%, 0.8)\noverlay[90]\n--amplify-colors-overlay-90\nhsla(0, 0%, 0%, 0.9)\nBrand\nPrimary\nprimary[10]\n--amplify-colors-primary-10\nvar(--amplify-colors-teal-10)\nprimary[20]\n--amplify-colors-primary-20\nvar(--amplify-colors-teal-20)\nprimary[40]\n--amplify-colors-primary-40\nvar(--amplify-colors-teal-40)\nprimary[60]\n--amplify-colors-primary-60\nvar(--amplify-colors-teal-60)\nprimary[80]\n--amplify-colors-primary-80\nvar(--amplify-colors-teal-80)\nprimary[90]\n--amplify-colors-primary-90\nvar(--amplify-colors-teal-90)\nprimary[100]\n--amplify-colors-primary-100\nvar(--amplify-colors-teal-100)\nSecondary\nsecondary[10]\n--amplify-colors-secondary-10\nvar(--amplify-colors-purple-10)\nsecondary[20]\n--amplify-colors-secondary-20\nvar(--amplify-colors-purple-20)\nsecondary[40]\n--amplify-colors-secondary-40\nvar(--amplify-colors-purple-40)\nsecondary[60]\n--amplify-colors-secondary-60\nvar(--amplify-colors-purple-60)\nsecondary[80]\n--amplify-colors-secondary-80\nvar(--amplify-colors-purple-80)\nsecondary[90]\n--amplify-colors-secondary-90\nvar(--amplify-colors-purple-90)\nsecondary[100]\n--amplify-colors-secondary-100\nvar(--amplify-colors-purple-100)\nPalette\nNeutral\nneutral[10]\n--amplify-colors-neutral-10\nhsl(210, 5%, 98%)\nneutral[20]\n--amplify-colors-neutral-20\nhsl(210, 5%, 94%)\nneutral[40]\n--amplify-colors-neutral-40\nhsl(210, 5%, 87%)\nneutral[60]\n--amplify-colors-neutral-60\nhsl(210, 10%, 58%)\nneutral[80]\n--amplify-colors-neutral-80\nhsl(210, 10%, 40%)\nneutral[90]\n--amplify-colors-neutral-90\nhsl(210, 25%, 25%)\nneutral[100]\n--amplify-colors-neutral-100\nhsl(210, 50%, 10%)\nRed\nred[10]\n--amplify-colors-red-10\nhsl(0, 75%, 95%)\nred[20]\n--amplify-colors-red-20\nhsl(0, 75%, 85%)\nred[40]\n--amplify-colors-red-40\nhsl(0, 75%, 75%)\nred[60]\n--amplify-colors-red-60\nhsl(0, 50%, 50%)\nred[80]\n--amplify-colors-red-80\nhsl(0, 95%, 30%)\nred[90]\n--amplify-colors-red-90\nhsl(0, 100%, 20%)\nred[100]\n--amplify-colors-red-100\nhsl(0, 100%, 15%)\nOrange\norange[10]\n--amplify-colors-orange-10\nhsl(30, 75%, 95%)\norange[20]\n--amplify-colors-orange-20\nhsl(30, 75%, 85%)\norange[40]\n--amplify-colors-orange-40\nhsl(30, 75%, 75%)\norange[60]\n--amplify-colors-orange-60\nhsl(30, 50%, 50%)\norange[80]\n--amplify-colors-orange-80\nhsl(30, 95%, 30%)\norange[90]\n--amplify-colors-orange-90\nhsl(30, 100%, 20%)\norange[100]\n--amplify-colors-orange-100\nhsl(30, 100%, 15%)\nYellow\nyellow[10]\n--amplify-colors-yellow-10\nhsl(60, 75%, 95%)\nyellow[20]\n--amplify-colors-yellow-20\nhsl(60, 75%, 85%)\nyellow[40]\n--amplify-colors-yellow-40\nhsl(60, 75%, 75%)\nyellow[60]\n--amplify-colors-yellow-60\nhsl(60, 50%, 50%)\nyellow[80]\n--amplify-colors-yellow-80\nhsl(60, 95%, 30%)\nyellow[90]\n--amplify-colors-yellow-90\nhsl(60, 100%, 20%)\nyellow[100]\n--amplify-colors-yellow-100\nhsl(60, 100%, 15%)\nGreen\ngreen[10]\n--amplify-colors-green-10\nhsl(130, 60%, 95%)\ngreen[20]\n--amplify-colors-green-20\nhsl(130, 60%, 90%)\ngreen[40]\n--amplify-colors-green-40\nhsl(130, 44%, 63%)\ngreen[60]\n--amplify-colors-green-60\nhsl(130, 43%, 46%)\ngreen[80]\n--amplify-colors-green-80\nhsl(130, 33%, 37%)\ngreen[90]\n--amplify-colors-green-90\nhsl(130, 27%, 29%)\ngreen[100]\n--amplify-colors-green-100\nhsl(130, 22%, 23%)\nTeal\nteal[10]\n--amplify-colors-teal-10\nhsl(190, 75%, 95%)\nteal[20]\n--amplify-colors-teal-20\nhsl(190, 75%, 85%)\nteal[40]\n--amplify-colors-teal-40\nhsl(190, 70%, 70%)\nteal[60]\n--amplify-colors-teal-60\nhsl(190, 50%, 50%)\nteal[80]\n--amplify-colors-teal-80\nhsl(190, 95%, 30%)\nteal[90]\n--amplify-colors-teal-90\nhsl(190, 100%, 20%)\nteal[100]\n--amplify-colors-teal-100\nhsl(190, 100%, 15%)\nBlue\nblue[10]\n--amplify-colors-blue-10\nhsl(220, 95%, 95%)\nblue[20]\n--amplify-colors-blue-20\nhsl(220, 85%, 85%)\nblue[40]\n--amplify-colors-blue-40\nhsl(220, 70%, 70%)\nblue[60]\n--amplify-colors-blue-60\nhsl(220, 50%, 50%)\nblue[80]\n--amplify-colors-blue-80\nhsl(220, 95%, 30%)\nblue[90]\n--amplify-colors-blue-90\nhsl(220, 100%, 20%)\nblue[100]\n--amplify-colors-blue-100\nhsl(220, 100%, 15%)\nPurple\npurple[10]\n--amplify-colors-purple-10\nhsl(300, 95%, 95%)\npurple[20]\n--amplify-colors-purple-20\nhsl(300, 85%, 85%)\npurple[40]\n--amplify-colors-purple-40\nhsl(300, 70%, 70%)\npurple[60]\n--amplify-colors-purple-60\nhsl(300, 50%, 50%)\npurple[80]\n--amplify-colors-purple-80\nhsl(300, 95%, 30%)\npurple[90]\n--amplify-colors-purple-90\nhsl(300, 100%, 20%)\npurple[100]\n--amplify-colors-purple-100\nhsl(300, 100%, 15%)\nPink\npink[10]\n--amplify-colors-pink-10\nhsl(340, 95%, 95%)\npink[20]\n--amplify-colors-pink-20\nhsl(340, 90%, 85%)\npink[40]\n--amplify-colors-pink-40\nhsl(340, 70%, 70%)\npink[60]\n--amplify-colors-pink-60\nhsl(340, 50%, 50%)\npink[80]\n--amplify-colors-pink-80\nhsl(340, 95%, 30%)\npink[90]\n--amplify-colors-pink-90\nhsl(340, 100%, 20%)\npink[100]\n--amplify-colors-pink-100\nhsl(340, 100%, 15%)\nBlack\nblack\n--amplify-colors-black\nhsl(0, 0%, 0%)\nWhite\nwhite\n--amplify-colors-white\nhsl(0, 0%, 100%)\nTransparent\ntransparent\n--amplify-colors-transparent\ntransparent"
  },
  {
    "title": "Typography | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/default-theme/typography",
    "html": "Typography\n\nAmplify UI provides tokens for font weight, font size and line height, as well as variable and static font families.\n\nFeedback\nFont weights\nExample usage\nCSS\nHeading Text\n\nSome text example with a different font weight.\n\nCopy\nimport { Heading, Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const FontWeightExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <Heading level={2} fontWeight={tokens.fontWeights.thin}>\n        Heading Text\n      </Heading>\n      <Text fontWeight={tokens.fontWeights.bold}>\n        Some text example with a different font weight.\n      </Text>\n    </>\n  );\n};\n\n\nAa\n\nhairline\n--amplify-font-weights-hairline\n100\n\nAa\n\nthin\n--amplify-font-weights-thin\n200\n\nAa\n\nlight\n--amplify-font-weights-light\n300\n\nAa\n\nnormal\n--amplify-font-weights-normal\n400\n\nAa\n\nmedium\n--amplify-font-weights-medium\n500\n\nAa\n\nsemibold\n--amplify-font-weights-semibold\n600\n\nAa\n\nbold\n--amplify-font-weights-bold\n700\n\nAa\n\nextrabold\n--amplify-font-weights-extrabold\n800\n\nAa\n\nblack\n--amplify-font-weights-black\n900\nFont sizes\nExample usage\nCSS\nThis is an H2 with a smaller than usual font size.*\n\n*Note: Some smaller text.\n\nCopy\nimport { Heading, Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const FontSizesExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <Heading level={2} fontSize={tokens.fontSizes.medium}>\n        This is an H2 with a smaller than usual font size.<sup>*</sup>\n      </Heading>\n      <Text fontSize={tokens.fontSizes.small}>\n        <sup>*</sup>Note: Some smaller text.\n      </Text>\n    </>\n  );\n};\n\nAa\nxxxs\n--amplify-font-sizes-xxxs\n0.375rem\nAa\nxxs\n--amplify-font-sizes-xxs\n0.5rem\nAa\nxs\n--amplify-font-sizes-xs\n0.75rem\nAa\nsmall\n--amplify-font-sizes-small\n0.875rem\nAa\nmedium\n--amplify-font-sizes-medium\n1rem\nAa\nlarge\n--amplify-font-sizes-large\n1.25rem\nAa\nxl\n--amplify-font-sizes-xl\n1.5rem\nAa\nxxl\n--amplify-font-sizes-xxl\n2rem\nAa\nxxxl\n--amplify-font-sizes-xxxl\n2.5rem\nAa\nxxxxl\n--amplify-font-sizes-xxxxl\n3rem\nLine heights\nExample usage\nCSS\n\nThis is some example paragraph text with a small line height.\n\nThis is some example paragraph text with a medium line height.\n\nThis is some example paragraph text with a large line height.\n\nCopy\nimport { Grid, Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const LineHeightsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Grid\n      gap={tokens.space.medium}\n      templateColumns=\"repeat(auto-fill, minmax(200px, 1fr))\"\n    >\n      <Text lineHeight={tokens.lineHeights.small}>\n        This is some example paragraph text with a small line height.\n      </Text>\n      <Text lineHeight={tokens.lineHeights.medium}>\n        This is some example paragraph text with a medium line height.\n      </Text>\n      <Text lineHeight={tokens.lineHeights.large}>\n        This is some example paragraph text with a large line height.\n      </Text>\n    </Grid>\n  );\n};\n\nAa\nsmall\n--amplify-line-heights-small\n1.25\nAa\nmedium\n--amplify-line-heights-medium\n1.5\nAa\nlarge\n--amplify-line-heights-large\n2\nFont families\n\nAmplify UI ships with tokens for both static and variable fonts. The benefit of a variable font is you can include many variations of the font (for weight and axes) in a single file. Learn more about variable weight fonts in this guide from MDN\n\nThe quick brown fox jumps over the lazy dog.\n\ndefault.variable\n--amplify-fonts-default-variable\n'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif\n\nThe quick brown fox jumps over the lazy dog.\n\ndefault.static\n--amplify-fonts-default-static\n'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif"
  },
  {
    "title": "Default Theme | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/default-theme",
    "html": "Default Theme\n\nThe default theme tokens in Amplify UI define our base palette, typography, and sizing used throughout the design system.\n\nFeedback\n\nAmplify UI follows a consistent pattern when defining our default tokens for properties such as color, font size, border radius, and more. In addition to the reference here, you can browse our default tokens and their corresponding types on GitHub.\n\nExplore theme tokens\nColors\nTokens that define our default color palette\nTypography\nFont families, font sizes, line heights and more\nSizes\nTokens for spacing, border widths and radii\nReferencing default theme tokens\n\nThe overall structure of the default theme object gives us a clue as to how to reference each token. If we look at the top level of the object, we can see how the tokens are separated by properties:\n\n*/\ninterface BaseTokens<Output extends OutputVariantKey = unknown> {\n  borderWidths?: BorderWidths<Output>;\n  colors?: Colors<Output>;\n  fonts?: Fonts<Output>;\n  fontSizes?: FontSizes<Output>;\n  fontWeights?: FontWeights<Output>;\n  lineHeights?: LineHeights<Output>;\n  opacities?: Opacities<Output>;\n  outlineOffsets?: OutlineOffsets<Output>;\n  outlineWidths?: OutlineWidths<Output>;\n  radii?: Radii<Output>;\n  shadows?: Shadows<Output>;\n  space?: Space<Output>;\n  time?: Time<Output>;\n  transforms?: Transforms<Output>;\n}\n\n\nIf we use space as an example, we'd discover its token definition looks similar to the following (shortened for example):\n\n  space: {\n    xxs: {},\n    xs: {},\n    small: {\n      value: \"0.75rem\"\n    }\n    medium: {},\n    large: {},\n  }\n\n\nAll of our tokens follow this pattern: a top level namespace that is further defined by a scale, each which has their own unique value. In the case of our space design tokens, that scale is based on a size: small, medium, large, etc. Our color tokens, on the other hand, are further defined by hue (red, blue, yellow, etc), and then by a numerical scale based on lightness (10-100).\n\nThis structure allows us to reference the small space value as space.small using Style Props like in the following example.\n\nimport { View } from '@aws-amplify/ui-react';\n\nconst MyComponent = () => {\n  return <View marginBottom=\"space.small\">{children}</View>;\n};\n\n\nOr we can use the design token to create a custom theme.\n\nconst theme {\n  name: 'custom-theme',\n  tokens: {\n    components: {\n      card: {\n        padding: { value: '{space.small}' },\n      },\n    },\n  },\n};\n\n\nThe space token definition also gives us an idea of how the CSS custom properties associated with each token are named. Amplify UI uses StyleDictionary to generate the associated CSS custom properties for each token. For the small space token, this would be --amplify-space-small and you can use it in your stylesheet as:\n\n.my-component {\n  margin-bottom: var(--amplify-space-small);\n}\n"
  },
  {
    "title": "Responsive Design | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming/responsive",
    "html": "Responsive Design\nFeedback\n\nResponsive styling is supported out of the box using our default breakpoints. Our responsive support uses a mobile first approach, so @media(min-width) rules are used for all breakpoints.\n\nBreakpoints\n{\n  base: '0',\n  small: '480px',\n  medium: '768px',\n  large: '992px',\n  xl: '1280px',\n  xxl: '1536px',\n}\n\n\nCode\n\nExample\n\nImport any of our primitives and use either the object or array syntax to changes styles responsively. Resize your browser window window to see the styles change.\n\nimport { Flex, View } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\n<Flex direction={{ base: 'column', large: 'row' }}>\n  <View width=\"100%\" backgroundColor={{ base: 'orange', large: 'yellow' }}>\n    Hello\n  </View>\n  <View width=\"100%\" backgroundColor={['orange', 'orange', 'orange', 'yellow']}>\n    there!\n  </View>\n</Flex>;\n\n\nHello\n\nthere!\n\nObject Syntax\n\nWhen using the object syntax, you can specify a style for multiple viewpoint ranges. The example below shows setting a style of orange from base (0em) through small, and yellow from medium (48em) upwards.\n\n// View will be orange from 0 to 47em, then change to yellow from 48em upwards.\n<View backgroundColor={{ base: 'orange', medium: 'yellow' }} />\n\n\nOr you can use the object syntax to specify styling for each breakpoint individually\n\n// View background color and text color will change at each breakpoint\n<View\n  color={{\n    base: 'black',\n    small: 'black',\n    medium: 'black',\n    large: 'white',\n    xl: 'white',\n    xxl: 'white',\n  }}\n  backgroundColor={{\n    base: 'red',\n    small: 'orange',\n    medium: 'yellow',\n    large: 'green',\n    xl: 'blue',\n    xxl: 'purple',\n  }}\n>\n  Hello\n</View>\n\n\nHello\n\nArray syntax\n\nWhen using the array syntax, specify each breakpoint styling in order from base up to xxl. If only a few styles are specified, all the breakpoints above will have the same style.\n\n  <Text\n    as=\"span\"\n    fontSize={['1rem', '2rem', '3rem', '4rem', '5rem', '6rem']}\n    lineHeight=\"normal\"\n  >\n    {' 🐈 '}\n  </Text>\n  <Text as=\"span\" fontSize={['1rem', '2rem', '3rem']} lineHeight=\"normal\">\n    {' 🐕 '}\n  </Text>\n\n🐈\n🐕\nuseBreakpointValue\n\nA responsive design can be achieved for all properties using the useBreakpointValue hook. The hook will accept the object or array syntax and return the value of the current breakpoint.\n\nResponsive Alert\nCopy\nimport {\n  Alert,\n  AlertVariations,\n  useBreakpointValue,\n} from '@aws-amplify/ui-react';\n\nexport const UseBreakpointValueObjectExample = () => {\n  const variation = useBreakpointValue({\n    base: 'info',\n    small: 'warning',\n    medium: 'error',\n    large: 'success',\n  }) as AlertVariations;\n\n  return <Alert variation={variation}>Responsive Alert</Alert>;\n};\n\nResponsive Alert\nCopy\nimport {\n  Alert,\n  AlertVariations,\n  useBreakpointValue,\n} from '@aws-amplify/ui-react';\n\nexport const UseBreakpointValueArrayExample = () => {\n  const variation = useBreakpointValue([\n    'info',\n    'warning',\n    'error',\n    'success',\n  ]) as AlertVariations;\n\n  return <Alert variation={variation}>Responsive Alert</Alert>;\n};\n"
  },
  {
    "title": "Storage Manager | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/storage/storagemanager",
    "html": "Storage Manager\n\nThe Storage Manager lets your users upload and manage files to the cloud.\n\nTheme source\nReact source\nFeedback\n\nDrop files here or\n\nBrowse files\nBasic Usage\nWait!\n\nDid you follow the quick start instructions to set up the storage and auth services?\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nTo use the StorageManager component import it into your React application with the included styles.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react-storage aws-amplify\nCopy\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\nimport '@aws-amplify/ui-react/styles.css';\n\n\nAt a minimum you must include the path and maxFileCount props. path refers to the S3 image path that will be prefixed to each file key. It is either a string or a callback function that accepts the current user's Cognito identityId and returns a string. See upload files\n\nVersion 3.0.18\n\nUsing @aws-amplify/ui-react-storage version 3.0.18 or below and looking for the accessLevel prop? See Deprecated Props\n\nDrop files here or\n\nBrowse files\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  return (\n    <StorageManager\n      acceptedFileTypes={['image/*']}\n      path=\"public/\"\n      maxFileCount={1}\n      isResumable\n    />\n  );\n};\n\nPrivate or Protected Buckets\n\nWhen uploading to private or protected S3 buckets, you'll need to wrap your app in the Authenticator, allowing the StorageManager component to infer the Cognito identityId of the currently signed-in user. This can be done directly with the Authenticator component or with withAuthenticator, as shown in Add the Authenticator.\n\nThe example below shows configuring the StorageManager to upload to the protected folder under the users' identity id.\n\nCopy\n<StorageManager\n  acceptedFileTypes={['image/*']}\n  path={({ identityId }) => `protected/${identityId}/`}\n  maxFileCount={1}\n  isResumable\n/>\n\nDeprecated props\n\nUsing @aws-amplify/ui-react-storage version 3.0.18 or below?\n\nThe uploading capabilities in these examples are stubbed out so they don't actually upload files anywhere!\n\nProps\nName\tDescription\tType\npath\tS3 bucket key prefixed to each upload target file `key`, allows either a `string` or a callback provided the value of the current user's `identityId`.\t\nstring | (input: { identityId: string | undefined }) => string\n\npath?\tOptional when `accessLevel` is provided. S3 bucket key prefixed to each upload target file `key`\t\nstring\n\naccessLevel\tDeprecated in favor of `path`. S3 access level of upload target files. See https://docs.amplify.aws/gen1/react/build-a-backend/storage/configure-access/\t\n'guest' | 'protected' | 'private'\n\nacceptedFileTypes?\tList of accepted file types, values of `['*']` or undefined allow any files\t\nstring[]\n\nautoUpload?\tDetermines if the upload will automatically start after a file is selected. The default value is `true`\t\nboolean\n\nmaxFileCount\t\t\ninteger\n\nmaxFileSize?\t\t\ninteger\n\nonUploadStart?\tCalled when a file starts uploading\t\n(file: {key: string}) => void;\n\nonUploadSuccess?\tCalled when a file successfully uploads\t\n(file: {key: string}) => void;\n\nonUploadError?\tCalled when a error happens uploading a file\t\n(error: string, file: {key: string}) => void;\n\nonFileRemove?\tCalled when a file is removed\t\n(file: {key: string}) => void;\n\nprocessFile?\tCalled immediately before uploading a file to allow you to edit the key or the file itself. The function can return synchronously or return a promise.\t\n(params: {key: string, file: Blob}) => Promise<{key: string, file: Blob} & Record<string, any>> | {key: string, file: Blob} & Record<string, string>;\n\ndefaultFiles?\tAn array of files that already exist in the cloud.\t\nArray<{s3key: string}>\n\ndisplayText?\tText to override in the component.\t\nStorageManagerDisplayText\n\nuseAccelerateEndpoint?\tUse the accelerated S3 endpoint to upload files.\t\nboolean\n\ncomponents?.Container?\tThe container the StorageManager is wrapped in.\t\nReact.ComponentType<ContainerProps>\n\ncomponents?.DropZone?\tThe dropzone element which contains the FilePicker\t\nReact.ComponentType<DropZoneProps>\n\ncomponents?.FilePicker?\tThe button that opens the file picker menu.\t\nReact.ComponentType<FilePickerProps>\n\ncomponents?.FileList?\tThe list of files that is being uploaded.\t\nReact.ComponentType<FileListProps>\n\ncomponents?.FileListHeader?\tThe heading above the list of files\t\nReact.ComponentType<FileListHeaderProps>\n\ncomponents?.FileListFooter?\tThe footer below the list of files\t\nReact.ComponentType<FileListFooterProps>\n\nref?\tForward ref prop exposing StorageManager imperative methods.\t\nReact.ForwardedRef<StorageManagerHandle>\nManually Upload\n\nThe default behavior of the Storage Manager component is to automatically start the upload after a file is selected. If you wish to change that, set the value of the autoUpload prop to false.\n\nDrop files here or\n\nBrowse files\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  return (\n    <StorageManager\n      acceptedFileTypes={['image/*']}\n      path=\"public/\"\n      autoUpload={false}\n      maxFileCount={1}\n      isResumable\n    />\n  );\n};\n\nSetting Limits\n\nYou can limit what users upload with these 3 props:\n\nmaxFileSize: sets a maximum file size the uploader will accept in bytes. The default is unlimited.\nmaxFileCount: accepts how many files at one time you can select to upload.\nacceptedFileTypes: an array of file type strings that follow the HTML accept attribute.\n\nDrop files here or\n\nBrowse files\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  return (\n    <StorageManager\n      acceptedFileTypes={[\n        // you can list file extensions:\n        '.gif',\n        '.bmp',\n        '.doc',\n        '.jpeg',\n        '.jpg',\n        // or MIME types:\n        'image/png',\n        'video/*',\n      ]}\n      path=\"public/\"\n      maxFileCount={5}\n      // Size is in bytes\n      maxFileSize={10000}\n    />\n  );\n};\n\nPausable / Resumable Uploads\n\nA resumable upload will upload the file in chunks. This allows users to pause an upload and resume it at a later time. You will typically want to do this only when the expected files are larger than the chunk size, which is 5MB.\n\nDrop files here or\n\nBrowse files\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  return (\n    <StorageManager\n      acceptedFileTypes={['image/*', '.zip', '.mp4']}\n      path=\"public/\"\n      maxFileCount={10}\n      isResumable\n    />\n  );\n};\n\nPre-upload Processing\n\nYou might want to process or modify the file(s) and/or file name(s) before they are uploaded. One common situation is you may want to ensure files uploaded are at unique keys by hashing the file contents and using that as the key rather than the filename.\n\nYou can pass a processFile function to the StorageManager which accepts an object with file: File, and key: string, and should return an object with file, key, and any other Storage configurations. The processFile can either return synchronously or return a Promise. This example uses a Promise to read the contents of the file and create a hash for the key.\n\nDrop files here or\n\nBrowse files\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nconst processFile = async ({ file }) => {\n  const fileExtension = file.name.split('.').pop();\n\n  return file\n    .arrayBuffer()\n    .then((filebuffer) => window.crypto.subtle.digest('SHA-1', filebuffer))\n    .then((hashBuffer) => {\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      const hashHex = hashArray\n        .map((a) => a.toString(16).padStart(2, '0'))\n        .join('');\n      return { file, key: `${hashHex}.${fileExtension}` };\n    });\n};\n\nexport const App = () => {\n  return (\n    <StorageManager\n      acceptedFileTypes={['image/*']}\n      path=\"public/\"\n      maxFileCount={1}\n      processFile={processFile}\n    />\n  );\n};\n\n\nOther uses-cases for processing the file before upload:\n\nPerforming file optimizations like removing unnecessary metadata.\nPerforming custom file validations like reading the contents of a file to ensure it is in the proper structure.\n\nYou can also add any other Amplify Storage options by adding them to the return object of processFile\n\nEvent Handling\n\nThe StorageManager component has several event handlers: onUploadStart, onUploadSuccess, onUploadError, and onFileRemove\n\nDrop files here or\n\nBrowse files\nCopy\nimport * as React from 'react';\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  const [files, setFiles] = React.useState({});\n\n  return (\n    <>\n      <StorageManager\n        acceptedFileTypes={['image/*']}\n        path={({ identityId }) => `private/${identityId}/`}\n        maxFileCount={3}\n        onFileRemove={({ key }) => {\n          setFiles((prevFiles) => {\n            return {\n              ...prevFiles,\n              [key]: undefined,\n            };\n          });\n        }}\n        onUploadError={(error, { key }) => {\n          setFiles((prevFiles) => {\n            return {\n              ...prevFiles,\n              [key]: {\n                status: 'error',\n              },\n            };\n          });\n        }}\n        onUploadSuccess={({ key }) => {\n          setFiles((prevFiles) => {\n            return {\n              ...prevFiles,\n              [key]: {\n                status: 'success',\n              },\n            };\n          });\n        }}\n        onUploadStart={({ key }) => {\n          setFiles((prevFiles) => {\n            return {\n              ...prevFiles,\n              [key]: {\n                status: 'uploading',\n              },\n            };\n          });\n        }}\n      />\n      {Object.keys(files).map((key) => {\n        return files[key] ? (\n          <div>\n            {key}: {files[key].status}\n          </div>\n        ) : null;\n      })}\n    </>\n  );\n};\n\nUse a previousState\n\nBe careful setting state in the onUploadSuccess because that function is bound when the upload starts. Make sure to use the previous state argument rather than the current state in the component.\n\npath Usage\n\nThe path prop of the StorageManager is prepended to the key value (resolved from either the file itself or the returned key of processFile) submitted to S3. Using a '/' as the last character of path allows uploading to a specific folder inside the provided accessLevel folder.\n\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  return (\n    <StorageManager\n      path=\"public/images/\"\n      acceptedFileTypes={['image/*']}\n      maxFileCount={1}\n    />\n  );\n};\n\nAdding metadata\n\nMetadata is added as an object with string key-value pairs. It is sent as custom HTTP headers with the name x-amz-meta-[key]. For example, if your metadata for a file was {mode: 'night'}, it would set the x-amz-meta-mode HTTP header to night.\n\nYou can add metadata by adding a metadata object in the return object of processFile.\n\nDrop files here or\n\nBrowse files\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nconst processFile = ({ file, key }) => {\n  return {\n    file,\n    key,\n    metadata: {\n      id: key,\n    },\n  };\n};\n\nexport function App() {\n  return (\n    <StorageManager\n      acceptedFileTypes={['image/*']}\n      path=\"public/\"\n      maxFileCount={3}\n      showThumbnails={true}\n      processFile={processFile}\n    />\n  );\n}\n\nAccelerate Endpoint\n\nAmazon S3 transfer acceleration optimizes transfer speeds from around the world into S3 buckets. When you use Transfer Acceleration, additional data transfer charges might apply. For more information about pricing, see Amazon S3 pricing.\n\nTo use transfer acceleration you first need to enable it on your S3 bucket. Then add useAccelerateEndpoint on the <StorageManager /> component. By default transfer acceleration is off.\n\nCopy\n<StorageManager\n  acceptedFileTypes={['image/*']}\n  maxFileCount={10}\n  useAccelerateEndpoint\n/>\n\n\nYou can also choose whether or not to use transfer acceleration at the file level by returning useAccelerateEndpoint from the processFile function.\n\nCopy\n<StorageManager\n  acceptedFileTypes={['image/*']}\n  maxFileCount={10}\n  processFile={({ file, key }) => {\n    return {\n      file,\n      key,\n      useAccelerateEndpoint: file.size > 10000 ? true : false,\n    };\n  }}\n/>\n\nCustomization\nText and labels\n\nAll text in the StorageManager component is customizable with the displayText prop.\n\ndrag-and-drop here\n\nOpen file picker\nCopy\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  return (\n    <StorageManager\n      acceptedFileTypes={['image/*']}\n      path=\"public/\"\n      maxFileCount={1}\n      displayText={{\n        // some text are plain strings\n        dropFilesText: 'drag-and-drop here',\n        browseFilesText: 'Open file picker',\n        // others are functions that take an argument\n        getFilesUploadedText(count) {\n          return `${count} images uploaded`;\n        },\n      }}\n    />\n  );\n};\n\n\nDisplay text props\n\nInternationalization\n\nYou can use the displayText prop to also support different languages. Use an open source library like i18next, react-intl, or make your own:\n\nEn\nEs\n\nDrop files here or\n\nBrowse files\nCopy\nimport * as React from 'react';\nimport { ToggleButtonGroup, ToggleButton } from '@aws-amplify/ui-react';\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nconst dictionary = {\n  // use default strings for english\n  en: null,\n  es: {\n    getFilesUploadedText(count) {\n      return `${count} ${\n        count === 1 ? 'archivo cargado' : 'archivos cargados'\n      }`;\n    },\n    getFileSizeErrorText(sizeText) {\n      return `El tamaño del archivo debe ser menor a ${sizeText}`;\n    },\n    getRemainingFilesText(count) {\n      return `${count} ${count === 1 ? 'archivo' : 'archivos'} subiendo`;\n    },\n    getUploadingText(percentage) {\n      return `Subiendo${percentage > 0 ? `: ${percentage}%` : ''}`;\n    },\n    getUploadButtonText(count) {\n      return `Cargar ${count} ${count === 1 ? 'archivo' : 'archivos'}`;\n    },\n    getMaxFilesErrorText(count) {\n      return `No se pueden seleccionar más de ${count} ${\n        count === 1 ? 'archivo' : 'archivos'\n      }. Elimine archivos antes de actualizar.`;\n    },\n    getErrorText(message) {\n      return message;\n    },\n    doneButtonText: 'Listo',\n    clearAllButtonText: 'Limpiar todo',\n    extensionNotAllowedText: 'Extensión no permitida',\n    browseFilesText: 'Buscar archivos',\n    dropFilesText: 'Arrastre los archivos aquí o',\n    pauseButtonText: 'Pausa',\n    resumeButtonText: 'Reanudar',\n    uploadSuccessfulText: 'Carga exitosa',\n    getPausedText(percentage) {\n      return `Pausado: ${percentage}%`;\n    },\n  },\n};\n\nexport const App = () => {\n  const [language, setLanguage] = React.useState('en');\n  return (\n    <>\n      <ToggleButtonGroup\n        value={language}\n        isExclusive\n        onChange={(value) => setLanguage(value)}\n      >\n        <ToggleButton value=\"en\">En</ToggleButton>\n        <ToggleButton value=\"es\">Es</ToggleButton>\n      </ToggleButtonGroup>\n      <StorageManager\n        acceptedFileTypes={['image/*']}\n        path=\"public/\"\n        maxFileCount={1}\n        displayText={dictionary[language]}\n      />\n    </>\n  );\n};\n\nComponent overrides\n\nDon't like how things look? Use your own components inside the StorageManager! You can pass your own components with the components prop. The available components to override are: Container, FileList, FileListHeader, FileListFooter, DropZone, and FilePicker.\n\nYou can even use a completely different UI kit like MUI, Chakra, or your own design system!\n\nDrop files here\n\nBrowse Files\nCopy\nimport * as React from 'react';\nimport {\n  Card,\n  Button,\n  Flex,\n  Text,\n  Divider,\n  Image,\n  Loader,\n  Icon,\n} from '@aws-amplify/ui-react';\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  return (\n    <StorageManager\n      acceptedFileTypes={['image/*']}\n      path=\"public/\"\n      maxFileCount={100}\n      components={{\n        Container({ children }) {\n          return <Card variation=\"elevated\">{children}</Card>;\n        },\n        DropZone({ children, displayText, inDropZone, ...rest }) {\n          return (\n            <Flex\n              alignItems=\"center\"\n              direction=\"column\"\n              padding=\"medium\"\n              backgroundColor={inDropZone ? 'primary.10' : ''}\n              {...rest}\n            >\n              <Text>Drop files here</Text>\n              <Divider size=\"small\" label=\"or\" maxWidth=\"10rem\" />\n              {children}\n            </Flex>\n          );\n        },\n        FilePicker({ onClick }) {\n          return (\n            <Button variation=\"primary\" onClick={onClick}>\n              Browse Files\n            </Button>\n          );\n        },\n        FileList({ files, onCancelUpload, onDeleteUpload }) {\n          return (\n            <Flex direction=\"row\">\n              {files.map(({ file, key, progress, id, status, uploadTask }) => (\n                <Flex\n                  key={key}\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  width=\"5rem\"\n                  height=\"5rem\"\n                  position=\"relative\"\n                >\n                  <Image\n                    borderRadius=\"small\"\n                    height=\"100%\"\n                    objectFit=\"cover\"\n                    src={URL.createObjectURL(file)}\n                    alt={key}\n                  />\n                  {progress < 100 ? (\n                    <Loader\n                      position=\"absolute\"\n                      size=\"large\"\n                      percentage={progress}\n                      isDeterminate\n                      isPercentageTextHidden\n                    />\n                  ) : null}\n\n                  <Button\n                    opacity=\"50\"\n                    borderRadius=\"xxl\"\n                    backgroundColor=\"background.primary\"\n                    position=\"absolute\"\n                    variation=\"link\"\n                    size=\"small\"\n                    onClick={() => {\n                      if (status === 'uploading') {\n                        onCancelUpload({ id, uploadTask });\n                      } else {\n                        onDeleteUpload({ id });\n                      }\n                    }}\n                  >\n                    <Icon\n                      fontSize=\"large\"\n                      color=\"font.error\"\n                      viewBox={{ width: 512, height: 512 }}\n                      paths={[\n                        {\n                          d: 'M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z',\n                          strokeWidth: '32',\n                          fill: 'none',\n                          strokeMiterlimit: '10',\n                          stroke: 'currentColor',\n                        },\n                        {\n                          d: 'M320 320L192 192m0 128l128-128',\n                          strokeWidth: '32',\n                          fill: 'none',\n                          strokeLinecap: 'round',\n                          stroke: 'currentColor',\n                        },\n                      ]}\n                    />\n                  </Button>\n                </Flex>\n              ))}\n            </Flex>\n          );\n        },\n      }}\n    />\n  );\n};\n\n\nFilePicker props\n\nDropZone props\n\nImperative handles\n\nThe files state is managed within the StorageManager component itself. To allow for clearing the internal files state, StorageManager exposes a custom ref handle to the parent component with a clearFiles method.\n\nDrop files here or\n\nBrowse files\nClear Files\nCopy\nimport * as React from 'react';\nimport { Button } from '@aws-amplify/ui-react';\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nexport const App = () => {\n  const ref = React.useRef(null);\n\n  return (\n    <>\n      <StorageManager\n        acceptedFileTypes={['image/*']}\n        path=\"public/\"\n        maxFileCount={3}\n        ref={ref}\n      />\n      <Button onClick={() => ref.current.clearFiles()}>Clear Files</Button>\n    </>\n  );\n};\n\nTheming\n\nDrop files here or\n\nBrowse files\nCopy\nimport { ThemeProvider } from '@aws-amplify/ui-react';\nimport { StorageManager } from '@aws-amplify/ui-react-storage';\n\nconst theme = {\n  name: 'my-theme',\n  tokens: {\n    borderWidths: {\n      small: '2px',\n    },\n    components: {\n      storagemanager: {\n        dropzone: {\n          borderColor: '{colors.primary.60}',\n        },\n      },\n    },\n  },\n};\n\nexport const App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <StorageManager\n        acceptedFileTypes={['image/*']}\n        path=\"public/\"\n        maxFileCount={5}\n      />\n    </ThemeProvider>\n  );\n};\n\nTarget Classes\n\nIf you like, you can target classes directly or use CSS variables to make changes to the look and feel of the Storage Manager.\n\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-storagemanager\t\namplify-storagemanager__dropzone\t\namplify-storagemanager__dropzone__icon\t\namplify-storagemanager__dropzone__text\t\namplify-storagemanager__file__picker\t\namplify-storagemanager__file\t\namplify-storagemanager__file__wrapper\t\namplify-storagemanager__file__list\t\namplify-storagemanager__file__name\t\namplify-storagemanager__loader\t\namplify-storagemanager__file__size\t\namplify-storagemanager__file__info\t\namplify-storagemanager__file__image\t\namplify-storagemanager__file__main\t\namplify-storagemanager__file__status\t\namplify-storagemanager__previewer\t\namplify-storagemanager__previewer__text\t\namplify-storagemanager__previewer__actions\t\namplify-storagemanager__previewer__footer\t"
  },
  {
    "title": "Theming | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/theming",
    "html": "Overview\nFeedback\n\nA Theme is a structured collection of design decisions that change the appearance of a UI library. An Amplify UI theme is a structured object of design tokens, breakpoints, and overrides. The goals of the Amplify UI theme are:\n\nLeverage platform technologies as much as possible for performance and broad support. This means plain CSS and CSS variables. You can always fall back to writing CSS (or a pre-processer to CSS like Sass).\nUse framework-specific patterns to provide an easier developer experience. This means providing an extendable theme which generates CSS and CSS variables for your application.\nGetting started\n\nStep 1: Wrap your App with ThemeProvider\n\nimport { ThemeProvider } from '@aws-amplify/ui-react';\nconst App = (\n  <ThemeProvider>\n    <MyApp>/* AmplifyUI */</MyApp>\n  </ThemeProvider>\n);\n\n\nStep 2: Use the theme to style components\n\n// Option 1: Use the theme through component variations\nimport { Text } from '@aws-amplify/ui-react';\nconst MyComponent = ({ children }) => {\n  return <Text variation=\"primary\">{children}</Text>;\n};\n\n// Option 2: Get the theme object through the useTheme hook and style components with it\nimport { Text, useTheme } from '@aws-amplify/ui-react';\nconst MyComponent = ({ children }) => {\n  const { tokens } = useTheme();\n  return <Text color={tokens.colors.font.tertiary}>{children}</Text>;\n};\n\n\nOptional: To extend or override a token in the default theme, create a custom theme:\n\nJavascript\nTypeScript\nimport { ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\n// Step 1: Create a new Theme with your custom values\nconst theme = {\n  name: 'my-theme',\n  tokens: {\n    colors: {\n      font: {\n        primary: { value: '#008080' },\n        // ...\n      },\n    },\n  },\n};\n\n// Step 2: Pass the new theme to `ThemeProvider`\n// this will apply the theme to all Amplify UI components\nconst App = (\n  <ThemeProvider theme={theme}>\n    <MyApp>/* AmplifyUI */</MyApp>\n  </ThemeProvider>\n);\n\nTheme object\n\nThe theme object is where you define tokens for color palette, font stacks, spacing, and more. By default it will extend from the defaultTheme Amplify UI provides.\n\nexport const myTheme = {\n  name: 'my-theme',\n  tokens: {\n    colors: {\n      font: {\n        primary: { value: 'red' },\n      },\n    },\n  },\n};\n\nCSS\n\nYou can theme Amplify UI using CSS and CSS variables if you do not want to use the theme object structure. Amplify UI components use plain CSS so styling components can be done with CSS (or a pre-processor like Sass). All of the design tokens defined in the Amplify theme are CSS variables which can be overridden:\n\n:root, [data-amplify-theme] {\n  --amplify-colors-font-primary: #333;\n  /* you can also use references: */\n  --amplify-colors-font-secondary: var(--amplify-colors-neutral-60);\n}\n\n\nIf you want more customization than the design tokens provide, you can also override the CSS for components:\n\n/* All components have a class name starting with `amplify` */\n.amplify-button {\n  font-size: 2rem;\n  padding: 1rem 2rem;\n  background: none;\n  border: 2px solid black;\n}\n\n.amplify-button:hover {\n  background: gray;\n}\n\n\nOr if you prefer you can use alternative styling with a styling libraries\n\nUnstyled\n\nAmplify UI components can be use unstyled if you want full control over the look-and-feel. To use the components unstyled, import them as you normally would and do not import the CSS.\n\nimport { Button, Card } from '@aws-amplify/ui-react';\n\n// don't import the CSS:\n// import '@aws-amplify/ui-react/styles.css';\n\nexport const App = () => {\n  // ...\n};\n\nTheme Structure\nDesign Tokens\n\nAmplify UI uses Design Tokens for storing design decisions and is the primary way to theme the components. Design tokens are categorized by type under namespaces; for example, colors go under the colors namespace. Stitches, Chakra-UI, and Evergreen use a similar convention for organizing their design tokens.\n\n*/\ninterface BaseTokens<Output extends OutputVariantKey = unknown> {\n  borderWidths?: BorderWidths<Output>;\n  colors?: Colors<Output>;\n  fonts?: Fonts<Output>;\n  fontSizes?: FontSizes<Output>;\n  fontWeights?: FontWeights<Output>;\n  lineHeights?: LineHeights<Output>;\n  opacities?: Opacities<Output>;\n  outlineOffsets?: OutlineOffsets<Output>;\n  outlineWidths?: OutlineWidths<Output>;\n  radii?: Radii<Output>;\n  shadows?: Shadows<Output>;\n  space?: Space<Output>;\n  time?: Time<Output>;\n  transforms?: Transforms<Output>;\n}\n\nReferences\n\nOne import thing about design tokens is they can reference other design tokens. The default theme tokens use references a lot to make a robust system where you can modify a few tokens to have a large effect. The syntax for design token references follows the draft W3C Design Tokens Community Group specification\n\nconst myTheme = {\n  name: 'my-theme',\n  tokens: {\n    colors: {\n      font: {\n        // references colors.neutral.100\n        // because the default theme defines that color already\n        // we don't need to re-define it here\n        primary: { value: '{colors.neutral.100.value}' },\n      },\n    },\n  },\n};\n\nComponent token definitions\n\nAmplify UI follows a consistent pattern when defining tokens for a component's states and variations. This is helpful for discovering what tokens are available for theming different aspects of a component. Amplify UI uses the following pattern:\n\ncomponent[modifier][_state][child];\n\n\nA modifier could be a distinct style variation, like the primary or link variant for the Button component. A modifier could also be a variation based on size, such as small, medium, or large.\n\nState typically refers to a change in the component due to an interaction from the user or application itself, such as hover, focus, loading or disabled. Note: Amplify UI prefixes states with an underscore, _, to help distinguish state names from modifier names.\n\nThe Button component is a good example of a token definition that includes multiple states and modifiers and follows this pattern:\n\nexport const button = {\n  //  ... default tokens\n\n  // states\n  _hover: {},\n  _focus: {},\n  _loading: {},\n  _disabled: {},\n\n  // variations with states\n  primary: {\n    _hover: {},\n    _focus: {},\n    _loading: {},\n    _disabled: {},\n  },\n\n  // size modifiers\n  small: {},\n  large: {},\n};\n\n\nCompiled, this would create the following CSS custom properties:\n\n--amplify-component-button-hover-token: value,\n--amplify-component-button-focus-token: value,\n--amplify-component-button-hover-loading: value,\n--amplify-component-button-focus-disabled: value,\n--amplify-component-button-primary-hover-token: value,\n--amplify-component-button-primary-focus-token: value,\n--amplify-component-button-primary-hover-loading: value,\n--amplify-component-button-primary-focus-disabled: value,\n--amplify-component-button-small-token: value,\n--amplify-component-button-large-token: value,\n\nFonts\n\nAmplify UI allows custom fonts to be used in the theme. The font tokens are defined in the fonts namespace. You can define your primary font stack and fallback font stack values the same way you would do in a CSS font-family rule.\n\nconst myTheme = {\n  name: 'my-theme',\n  tokens: {\n    fonts: {\n      default: {\n        variable: { value: 'Raleway, sans-serif' },\n        static: { value: 'Raleway, sans-serif' },\n      },\n    },\n  },\n};\n\nBreakpoints\n\nBreakpoints allow you to set media query breakpoints for responsive design. You can then define breakpoint-specific token overrides or use the breakpoints for different layouts in Javascript.\n\ntype BreakpointKey = 'base' | 'small' | 'medium' | 'large' | 'xl' | 'xxl';\n\nexport interface Breakpoints {\n  values: Record<BreakpointKey, number>;\n  defaultBreakpoint: BreakpointKey;\n}\n\n// Breakpoint unit is in pixels\nexport const breakpoints: Breakpoints = {\n  values: {\n    base: 0,\n    small: 480, // breakpoint unit is px\n    medium: 768,\n    large: 992,\n    xl: 1280,\n    xxl: 1536,\n  },\n  defaultBreakpoint: 'base',\n};\n\n\nYou can modify default breakpoints in your theme's breakpoints definition:\n\nconst myTheme = {\n  name: 'my-theme',\n  breakpoints: {\n    // Will be deep merged with the default theme\n    // so you don't have to override all the breakpoint values\n    values: {\n      // default unit is 'em'\n      medium: 50,\n    },\n  },\n  //...\n};\n\n\nNote: Unfortunately right now CSS media queries do not support CSS variables so there is no way to customize the breakpoints using only CSS.\n\nOverrides\n\nAn override is a collection of design tokens that should take precedence in certain situations, like dark mode. Overrides are built into the theme configuration, but kept separate, so that Amplify UI can use CSS for overriding parts of the theme.\n\nimport { defaultTheme } from '@aws-amplify/ui-react';\n\nexport const theme = {\n  name: 'my-theme',\n  overrides: [\n    {\n      colorMode: 'dark',\n      tokens: {\n        colors: {\n          neutral: {\n            10: { value: defaultTheme.tokens.colors.neutral[100].value },\n            20: { value: defaultTheme.tokens.colors.neutral[90].value },\n            40: { value: defaultTheme.tokens.colors.neutral[80].value },\n            80: { value: defaultTheme.tokens.colors.neutral[40].value },\n            90: { value: defaultTheme.tokens.colors.neutral[20].value },\n            100: { value: defaultTheme.tokens.colors.neutral[10].value },\n          },\n          black: { value: '#fff' },\n          white: { value: '#000' },\n        },\n      },\n    },\n    {\n      breakpoint: 'large',\n      tokens: {\n        space: {\n          small: { value: '1rem' },\n          medium: { value: '2rem' },\n          large: { value: '3rem' },\n        },\n      },\n    },\n  ],\n};\n\n\nYou can override design tokens in CSS by using a media query or adding extra selectors to [data-amplify-theme=\"{theme.name}\"].\n\n@media (prefers-color-scheme: dark) {\n  [data-amplify-theme='my-theme'] {\n    --amplify-colors-black: #fff;\n    --amplify-colors-white: #fff;\n  }\n}\n\n[data-amplify-theme='my-theme'].disco {\n  --amplify-colors-font-primary: pink;\n}\n\nMerging multiple themes\n\nIf you have multiple themes, you can extend your base theme using the createTheme function.\n\nimport { createTheme, defaultTheme } from '@aws-amplify/ui';\n\n// by default, createTheme extends the defaultTheme.\nexport const baseBrandTheme = createTheme({\n  name: 'base-brand-theme',\n  tokens: {\n    colors: {\n      font: {\n        primary: { value: 'red' },\n      },\n    },\n  },\n});\n\nexport const otherBrandTheme = createTheme(\n  {\n    name: 'other-brand-theme',\n    tokens: {\n      colors: {\n        font: {\n          primary: { value: 'blue' },\n        },\n      },\n    },\n  },\n  baseBrandTheme\n);\n// The 2nd argument is the base theme to be extended\n// if it is omitted, it will use the defaultTheme\n"
  },
  {
    "title": "In-App Messaging | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/in-app-messaging",
    "html": "In-App Messaging\n\nAmplify UI In-App Messaging provides UI components for displaying in-app messages.\n\nFeedback\nOverview\n\nIn-App Messaging allows you to better engage users with contextually appropriate messages rendered on events triggered by their activity while using your application. Create messages that look native to your application and deliver them to your users all without additional code changes.\n\n@aws-amplify/ui-react v5\nThe @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.\n\nAmplify UI In-App Messaging uses the Amplify In-App Messaging API and Amazon Pinpoint.\n\nPrerequisites\nCreate an In-App Messaging campaign\nInstall the required dependencies\nGetting Started\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nIntegration with your application can be done with the InAppMessagingProvider and InAppMessageDisplay components directly, or wrap your app in withInAppMessaging (a React Higher-Order Component):\n\nInAppMessagingProvider\nwithInAppMessaging\nCopy\nimport React, { useEffect } from 'react';\nimport { Amplify } from 'aws-amplify';\nimport {\n  initializeInAppMessaging,\n  syncMessages,\n} from 'aws-amplify/in-app-messaging';\nimport { Text } from '@aws-amplify/ui-react';\nimport {\n  InAppMessagingProvider,\n  InAppMessageDisplay,\n} from '@aws-amplify/ui-react-notifications';\n\nimport '@aws-amplify/ui-react/styles.css';\n\nimport config from './aws-exports';\n\nAmplify.configure(config);\ninitializeInAppMessaging();\n\nfunction App() {\n  useEffect(() => {\n    // sync remote in-app messages\n    syncMessages();\n  }, []);\n\n  return (\n    <InAppMessagingProvider>\n      <InAppMessageDisplay />\n      <Text>In-App Messaging Example</Text>\n    </InAppMessagingProvider>\n  );\n}\n\nexport default App;\n\n\nInAppMessaging.syncMessages is an asynchronous function that handles syncing remote in-app messages with the end user application.\n\nInAppMessagingProvider and useInAppMessaging\n\nInAppMessagingProvider exposes the value of the InAppMessagingContext (a React context) to its children. useInAppMessaging can be used to directly interact with InAppMessagingContext from within InAppMessagingProvider.\n\nuseInAppMessaging exposes the following functions and values of the InAppMessagingContext:\n\nName\tDescription\tType\nclearMessage\tRemoves the current in-app message (if any) from context state\t\n() => void\n\ndisplayMessage\tRender a local in-app message\t\n(message: Message) => void\n\nmessage\tcurrent in-app message (if any) loaded in context state\t\nMessage | null\n\nIn some use cases, you may want to forgo the usage of the default UI handling altogether while still leveraging the Amplify provided In-App Messaging React context and provider for in-app message context state. This can be achieved by wrapping your application in an InAppMessagingProvider and utilizing the useInAppMessaging hook to expose the values of the InAppMessagingContext.\n\nCopy\nimport {\n  InAppMessagingProvider,\n  useInAppMessaging\n} from '@aws-amplify/ui-react-notifications';\nimport '@aws-amplify/ui-react/styles.css';\n\nimport { Home } from './src/Home';\n\nconst MyInAppMessageDisplay = () => {\n  const { inAppMessage } = useInAppMessaging();\n\n  // ...do something with inAppMessage\n};\n\nconst App = () => {\n  return (\n    <InAppMessagingProvider>\n      <MyInAppMessageDisplay />\n      <Home />\n    </InAppMessagingProvider>\n  );\n};\n\nInAppMessageDisplay\n\nInAppMessageDisplay handles the display and lifecycle of an in-app message.\n\nName\tDescription\tType\ncomponents?\tMessage override UI components\t\nMessageComponents\nThe MessageComponents prop\n\nFunctional UI components that render in-app message content\n\nName\tDescription\tType\nBannerMessage?\tBanner UI component (top, middle, and bottom layouts)\t\nBannerMessageProps\n\nCarouselMessage?\tCarousel UI component (default provided for React Native only)\t\nCarouselMessageProps\n\nFullScreenMessage?\tFullScreen UI component\t\nFullScreenMessageProps\n\nModalMessage?\tModal UI component\t\nModalMessageProps\nIntegrate Custom Components\n\nYou may provide your own In-App Messaging UI components to override the default Amplify provided UI components by utilizing the components prop of InAppMessagingProvider.\n\nCopy\nimport React, { useCallback, useEffect } from 'react';\nimport { Amplify } from 'aws-amplify';\nimport {\n  initializeInAppMessaging,\n  syncMessages,\n} from 'aws-amplify/in-app-messaging';\nimport { Button, Flex, Text } from '@aws-amplify/ui-react';\nimport {\n  useInAppMessaging,\n  withInAppMessaging,\n} from '@aws-amplify/ui-react-notifications';\n\nimport '@aws-amplify/ui-react/styles.css';\n\nimport config from './aws-exports';\n\nAmplify.configure(config);\ninitializeInAppMessaging();\n\nconst CustomBannerMessage = (props) => {\n  return (\n    <Flex\n      alignItems=\"center\"\n      borderRadius=\"xs\"\n      position=\"absolute\"\n      padding=\"xl\"\n      backgroundColor=\"teal.20\"\n      right=\"xl\"\n      testId=\"custom-banner\"\n    >\n      <Text fontWeight=\"bold\">{props.header.content}</Text>\n      <Button onClick={props.onClose}>Close!</Button>\n    </Flex>\n  );\n};\n\nfunction App() {\n  const { displayMessage } = useInAppMessaging();\n\n  useEffect(() => {\n    // sync remote in-app messages\n    syncMessages();\n  }, []);\n\n  const displayCustomBannerMessage = useCallback(\n    () =>\n      displayMessage({\n        content: [{ header: { content: 'Hello World!' } }],\n        id: 'Custom message',\n        layout: 'TOP_BANNER',\n      }),\n    [displayMessage]\n  );\n\n  // display custom message component on initial render\n  useEffect(displayCustomBannerMessage, [displayCustomBannerMessage]);\n\n  return (\n    <Button margin=\"medium\" onClick={displayCustomBannerMessage}>\n      Display Custom Banner Message\n    </Button>\n  );\n}\n\nexport default withInAppMessaging(App, {\n  components: { BannerMessage: CustomBannerMessage },\n});\n\nStyle Override\n\nThe default Amplify UI components handle custom style using the styles prop:\n\nCopy\nimport React, { useCallback, useEffect } from 'react';\nimport { Amplify } from 'aws-amplify';\nimport {\n  initializeInAppMessaging,\n  syncMessages,\n} from 'aws-amplify/in-app-messaging';\nimport { Button } from '@aws-amplify/ui-react';\nimport {\n  InAppMessageDisplay,\n  useInAppMessaging,\n  withInAppMessaging,\n} from '@aws-amplify/ui-react-notifications';\nimport '@aws-amplify/ui-react/styles.css';\n\nimport config from './aws-exports';\n\nAmplify.configure(config);\ninitializeInAppMessaging();\n\nconst StyledModalMessage = (props) => (\n  <InAppMessageDisplay.ModalMessage\n    {...props}\n    style={{ container: { backgroundColor: 'antiquewhite' } }}\n  />\n);\n\nfunction App() {\n  const { displayMessage } = useInAppMessaging();\n\n  useEffect(() => {\n    // sync remote in-app messages\n    syncMessages();\n  }, []);\n\n  const displayStyledModalMessage = useCallback(\n    () =>\n      displayMessage({\n        content: [{ header: { content: 'Hello World!' } }],\n        id: 'styled message',\n        layout: 'MODAL',\n      }),\n    [displayMessage]\n  );\n\n  // display message component on initial render\n  useEffect(displayStyledModalMessage, [displayStyledModalMessage]);\n\n  return (\n    <Button margin=\"medium\" onClick={displayStyledModalMessage}>\n      Display Custom Modal Message\n    </Button>\n  );\n}\n\nexport default withInAppMessaging(App, {\n  components: { ModalMessage: StyledModalMessage },\n});\n\n\nAvailable style props:\n\nThe default In-App Messaging components do not handle dark mode using the ThemeProvider at this time\n\nName\tDescription\tType\nbody?\tstyle applied to the message body\t\nReact.CSSProperties\n\ncloseIconButton?\tstyle applied to the close button\t\nReact.CSSProperties\n\ncontainer?\tstyle applied to the primary container of the message component\t\nReact.CSSProperties\n\nheader?\tstyle applied to the message header\t\nReact.CSSProperties\n\nimage?\tstyle applied to the message image\t\nReact.CSSProperties\n\nprimaryButton?\tstyle applied to the message primary button\t\nReact.CSSProperties\n\nsecondaryButton?\tstyle applied to the message secondary button\t\nReact.CSSProperties"
  },
  {
    "title": "Storage Image | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/storage/storageimage",
    "html": "Storage Image\n\nThe Storage Image lets you load images from Amplify Storage.\n\nReact source\nFeedback\nBasic Usage\nWait!\n\nDid you follow the quick start instructions to set up the storage and auth services?\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nTo use the StorageImage component, import it into your React application with the included styles.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react-storage aws-amplify\nCopy\nCopy\nimport { StorageImage } from '@aws-amplify/ui-react-storage';\nimport '@aws-amplify/ui-react/styles.css';\n\n\nAt a minimum you must include the alt and path props. path is a full S3 object key and refers to the Amplify Storage path (See Download Files). It is either a string or a callback function that accepts the current user's Cognito identityId and returns a string.\n\nPublic Image\nCopy\nimport { StorageImage } from '@aws-amplify/ui-react-storage';\n\nexport function App() {\n  return <StorageImage alt=\"sleepy-cat\" path=\"public/cat.jpg\" />;\n}\n\nPrivate or Protected Image\n\nWhen using private or protected images, you'll need to wrap your app in the Authenticator, allowing the StorageImage component to infer the Cognito identityId of the currently signed-in user. This can be done directly with the Authenticator component or with withAuthenticator, as shown in Add the Authenticator.\n\nCopy\nimport { StorageImage } from '@aws-amplify/ui-react-storage';\n\nexport function App() {\n  return (\n    <StorageImage\n      alt=\"protected cat\"\n      path={({ identityId }) => `protected/${identityId}/cat.jpg`}\n    />\n  );\n}\n\nDeprecated props\n\nUsing @aws-amplify/ui-react-storage version 3.0.18 or below?\n\nProps\nName\tDescription\tType\nalt\tAlternative text description of the image\t\nstring\n\npath\tThe path to the image in Storage, representing a full S3 object key. See https://docs.amplify.aws/react/build-a-backend/storage/download-files/\t\nstring | ((input: { identityId?: string }) => string);\n\nimgKey\tDeprecated, use path instead. The key of an image. See https://docs.amplify.aws/gen1/react/build-a-backend/storage/download/\t\nstring\n\naccessLevel\tDeprecated, use path instead. Access level for files in Storage. See https://docs.amplify.aws/gen1/react/build-a-backend/storage/configure-access/\t\n'guest' | 'protected' | 'private'\n\nidentityId?\tDeprecated, use path instead. The unique Amazon Cognito Identity ID of the image owner.\t\nstring\n\nfallbackSrc?\tA fallback image source to be loaded when the component fails to load the image from Storage\t\nstring\n\nonGetUrlError?\tTriggered when an error happens calling Storage.get\t\n(error: Error) => void;\n\nonStorageGetError?\tDeprecated, use onGetUrlError instead. Triggered when an error happens calling Storage.get\t\n(error: Error) => void;\n\nvalidateObjectExistence?\tWhether to check for the existence of a file. Defaults to true. See https://docs.amplify.aws/react/build-a-backend/storage/download-files/#more-geturl-options\t\nboolean\nError Handling\n\nTo handle the error caused by Storage.get, you can pass a onGetUrlError handler and optionally provide a fallbackSrc for the component to load a fallback image.\n\nCopy\nimport { StorageImage } from '@aws-amplify/ui-react-storage';\n\nexport function App() {\n  return (\n    <StorageImage\n      alt=\"fallback cat\"\n      path=\"guest/cat-in-basket.jpg\"\n      fallbackSrc=\"/fallback_cat.jpg\"\n      onGetUrlError={(error) => console.error(error)}\n    />\n  );\n}\n\nDeprecated props\n\nUsing @aws-amplify/ui-react-storage version 3.0.18 or below?\n\nCustomization\nTarget Classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-storageimage\tClass applied to the img tag"
  },
  {
    "title": "Storage | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/storage",
    "html": "Storage\n\nCloud-connected UI components for managing user content in your app, with built-in support for Amazon S3.\n\nFeedback\n\nAmplify UI Storage components use Amplify Storage to allow your users to upload and interact with files stored in Amazon S3 with minimal boilerplate.\n\nQuick start\nSetup with Amplify Gen 2 Backend\n\nFollow the steps in this guide to set up your Amplify Storage backend.\n\nSetup with Amplify Gen 1 Backend\n\nTo set up Amplify using the Gen 1 CLI, follow the steps below:\n\nFirst, update @aws-amplify/cli with npm or yarn if you're using a version before 6.4.0:\n\nnpm\nyarn\nnpm install -g @aws-amplify/cli@latest\n\n\nNow that you have the Amplify CLI installed, you can set up your Amplify project by running amplify init in your project's root directory.\n\nThen run amplify add storage and follow the prompts to add storage to your backend configuration.\n\nAuth\n\nThe Amplify Storage category requires you have auth set up. When you run amplify add storage it will prompt you to add auth as well.\n\nIf you have an existing backend, run amplify pull to sync your aws-exports.js with your cloud backend.\n\nYou should now have an aws-exports.js file in your src/ directory with your latest backend configuration.\n\nAfter setting up Amplify make sure to install the Amplify libraries.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react-storage aws-amplify\nCopy\nConfiguring Amplify for Storage UI Components\n\nTo use Storage UI components with Amplify, you'll need to call Amplify.configure() as shown below.\n\nCopy\nimport { Amplify } from 'aws-amplify';\nimport { StorageImage, StorageManager } from '@aws-amplify/ui-react-storage';\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nexport const App = () => {\n  return (\n    <>\n      <StorageImage alt=\"sleepy-cat\" path=\"public/cat.jpeg\" />\n      <StorageManager path=\"my_prefix/public\" maxFileCount={3} />\n    </>\n  );\n};\n\nNext steps\nStorage Manager component\nLet your users upload files to the cloud"
  },
  {
    "title": "Geo | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/geo",
    "html": "Geo\n\nAmplify UI Geo provides UI components for maps and location search for popular front-end frameworks.\n\nFeedback\n@aws-amplify/ui-react v5\nThe @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.\n\nAmplify UI Geo is powered by Geo APIs and Amazon Location Service.\n\nQuick Start\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nCreate React App setup\n\nThere's a known issue for users of Create React App v4 where the default prod browserslist configuration causes build errors when building for production. See the Create React App Troubleshooting Guide to configure Create React App for use with the MapView UI component.\n\nPrerequisites:\n\nInstall @aws-amplify/ui-react-geo and @aws-amplify/geo with npm or yarn. ( e.g. npm install @aws-amplify/ui-react-geo @aws-amplify/geo)\nCreate map resources by following the Amplify Geo documentation.\nMapView\n\nThe MapView component adds an interactive map to your application.\n\nMapView is fully integrated with the open source library react-map-gl v7 while using maplibre-gl-js as the map tile source. Please note that react-map-gl is a direct dependency that you should NOT install separately. MapView is used as a replacement to react-map-gl's default map and supports the same functionality.\n\nYou can import the MapView component with related styles and use it in your Amplify application without any additional configuration.\n\nimport { Amplify } from 'aws-amplify';\n\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\n\n\nimport '@aws-amplify/ui-react-geo/styles.css';\n\n\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nexport default function BasicMap() {\n\n  return <MapView />;\n\n}\n\n\nIf the map isn't taking up the entire screen, try resetting your browser's default CSS body margins:\n\nbody {\n  margin: 0;\n}\n\nSetting Initial Viewport\n\nThe map's initial viewport can be set with the initialViewState property:\n\nimport { Amplify } from 'aws-amplify';\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react-geo/styles.css';\n\n// import config from './aws-exports'; // Amplify Gen 1 config\nimport config from './amplify_outputs.json'\n\nAmplify.configure(config);\n\nexport default function InitialViewport() {\n\n  return (\n\n    <MapView\n      initialViewState={{\n        latitude: 37.8,\n        longitude: -122.4,\n        zoom: 14,\n      }}\n    />\n  );\n}\n\nUsage with react-map-gl\nMoving Marker\n\nThe Marker component from the react-map-gl library can have dynamic latitude and longitude properties to create a moving marker. The marker's position will reflect changes in latitude and longitude.\n\nimport { useState } from 'react';\n\nimport { Marker } from 'react-map-gl'; // Note: this dependency should NOT be installed separately\n\nimport { Amplify } from 'aws-amplify';\nimport { Button } from '@aws-amplify/ui-react';\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react/styles.css';\nimport '@aws-amplify/ui-react-geo/styles.css';\n\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nexport default function MapWithMovingMarker() {\n  const [{ latitude, longitude }, setMarkerLocation] = useState({\n    latitude: 40,\n    longitude: -100,\n  });\n\n  const updateMarker = () =>\n    setMarkerLocation({ latitude: latitude + 5, longitude: longitude + 5 });\n\n  return (\n    <>\n      <Button onClick={updateMarker}>Move Marker</Button>\n      <MapView>\n\n        <Marker latitude={latitude} longitude={longitude} />\n\n      </MapView>\n    </>\n  );\n}\n\nMarker with Popup\n\nThe Popup component from the react-map-gl library can be used with a Marker to communicate information to a user when the marker is clicked. The offset property can be used to prevent the popup from overlapping the marker.\n\nimport { useState } from 'react';\n\nimport { Marker, Popup } from 'react-map-gl'; // Note: this dependency should NOT be installed separately\n\nimport { Amplify } from 'aws-amplify';\nimport { Heading, Text } from '@aws-amplify/ui-react';\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react/styles.css';\nimport '@aws-amplify/ui-react-geo/styles.css';\n\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nfunction MarkerWithPopup({ latitude, longitude }) {\n  const [showPopup, setShowPopup] = useState(false);\n\n  const handleMarkerClick = ({ originalEvent }) => {\n\n    originalEvent.stopPropagation();\n\n    setShowPopup(true);\n  };\n\n  return (\n    <>\n      <Marker\n        latitude={latitude}\n        longitude={longitude}\n        onClick={handleMarkerClick}\n      />\n      {showPopup && (\n\n        <Popup\n          latitude={latitude}\n          longitude={longitude}\n          offset={{ bottom: [0, -40] }}\n          onClose={() => setShowPopup(false)}\n        >\n\n          <Heading level={2}>Marker Information</Heading>\n          <Text>Some information about a location.</Text>\n        </Popup>\n      )}\n    </>\n  );\n}\n\nexport default function MapWithMarkerPopup() {\n  return (\n    <MapView initialViewState={{ latitude: 40, longitude: -100, zoom: 3.5 }}>\n      <MarkerWithPopup latitude={40} longitude={-100} />\n    </MapView>\n  );\n}\n\n\nNote: Ensure originalEvent.stopPropagation() is called in the marker click handler. This allows the showPopup state to be handled by the component.\n\nAnimation and Native Map Methods\n\nYou may want to access the native maplibre-gl map object from within the component that renders <MapView> (to animate a viewport transition with flyTo, for example). To accomplish this, you can pass your own ref to <MapView> using React's useRef hook which will contain the map object:\n\nimport { useCallback, useRef } from 'react';\nimport type { MapRef } from 'react-map-gl'; // Note: this dependency should NOT be installed separately\nimport { Amplify } from 'aws-amplify';\nimport { Button } from '@aws-amplify/ui-react';\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react/styles.css';\nimport '@aws-amplify/ui-react-geo/styles.css';\n\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nexport default function MapWithRef() {\n\n  const mapRef = useRef<MapRef>();\n\n\n  const flyToMordor = useCallback(() => {\n\n    mapRef.current.flyTo({ center: [172.78, -42.28], zoom: 5 });\n\n  }, []);\n\n  return (\n    <>\n\n      <Button onClick={flyToMordor}>Fly, you fools!</Button>\n\n      <MapView ref={mapRef} />\n    </>\n  );\n}\n\n\nIf you want access to the map object in a child component of <MapView>, you can use the useMap hook from react-map-gl instead:\n\nimport { useMap } from 'react-map-gl'; // Note: this dependency should NOT be installed separately\n\nimport { Amplify } from 'aws-amplify';\nimport { Button } from '@aws-amplify/ui-react';\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react/styles.css';\nimport '@aws-amplify/ui-react-geo/styles.css';\n\nimport awsExports from './aws-exports';\nimport './styles.css';\n\nAmplify.configure(awsExports);\n\n\nfunction FlyToButton() {\n\n  const { current: map } = useMap();\n\n\n  const flyToMordor = () => {\n\n    map.flyTo({ center: [172.78, -42.28], zoom: 5 });\n  };\n\n  return <Button onClick={flyToMordor}>Fly, you fools!</Button>;\n}\n\nexport default function MapWithButton() {\n  return (\n\n    <MapView>\n\n      <FlyToButton />\n    </MapView>\n  );\n}\n\nLocation Search\n\nLocationSearch provides location search powered by Amazon Location Service for the MapView component, using the viewport as the proximity for generating results. LocationSearch is used as a child component of MapView for which it renders visual markers and information based on its location search results.\n\nYou can import the LocationSearch component with related styles and use it as a child of MapView without any additional configuration.\n\nimport { useMap } from 'react-map-gl'; // Note: this dependency should NOT be installed separately\n\nimport { Amplify } from 'aws-amplify';\nimport { Button } from '@aws-amplify/ui-react';\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react/styles.css';\nimport '@aws-amplify/ui-react-geo/styles.css';\n\nimport awsExports from './aws-exports';\nimport './styles.css';\n\nAmplify.configure(awsExports);\n\n\nfunction FlyToButton() {\n\n  const { current: map } = useMap();\n\n\n  const flyToMordor = () => {\n\n    map.flyTo({ center: [172.78, -42.28], zoom: 5 });\n  };\n\n  return <Button onClick={flyToMordor}>Fly, you fools!</Button>;\n}\n\nexport default function MapWithButton() {\n  return (\n\n    <MapView>\n\n      <FlyToButton />\n    </MapView>\n  );\n}\n\nLocationSearch Position\n\nLocationSearch can be provided a position property when used with MapView. The property is not reactive, meaning the position is fixed after the component mounts. Valid values are 'top-right', 'top-left', 'bottom-right', and 'bottom-left'. Default value is 'top-right'.\n\nimport { Amplify } from 'aws-amplify';\nimport { MapView, LocationSearch } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react-geo/styles.css';\n\n// import config from './aws-exports'; // Amplify Gen 1 config\nimport config from './amplify_outputs.json'\nAmplify.configure(config);\n\nexport default function LocationSearchPosition() {\n  return (\n\n    <MapView>\n\n      <LocationSearch position=\"top-left\" />\n    </MapView>\n  );\n}\n\n\nStandalone LocationSearch\n\nLocationSearch can also be used as a standalone component without MapView. As a standalone component, LocationSearch provides search results based on an initial proximity. When used as a standlone component, the proximity property with provided latitude and longitude properties is required.\n\nimport { Amplify } from 'aws-amplify';\n\nimport { LocationSearch } from '@aws-amplify/ui-react-geo';\n\n\n\nimport '@aws-amplify/ui-react-geo/styles.css';\n\n\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nconst SAN_FRANCISCO = {\n  latitude: 37.774,\n  longitude: -122.431,\n};\n\nexport default function StandaloneLocationSearch() {\n\n  return <LocationSearch proximity={SAN_FRANCISCO} />;\n\n}\n"
  },
  {
    "title": "Face Liveness Troubleshooting | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/liveness/troubleshooting",
    "html": "Face Liveness Troubleshooting\n\nTroubleshoot your issues with the Amplify UI FaceLivenessDetector component.\n\nFeedback\n\nThe following issues are presented with corresponding troubleshooting steps. Please check them out in case you run into issues like these -- if the remedies don't work, please file an issue in our GitHub repositories.\n\nError: Cognito user pool does not allow access to unauthenticated identities\n\nFirst, make sure you have followed the prerequisites for setting up Amplify resources. Second, you can also go into the Cognito identity pool configured in your Amplify app, edit it and select the checkbox labeled \"Enable access to unauthenticated identities\" -- then save the changes. Finally, ensure that the configuration file -- aws-exports.js on web or amplifyconfiguration.json on mobile -- contains the name of the correct identity pool.\n\nError: Server error - Session not found\nEnsure that the AWS region you are using to create the liveness session in your backend is the same as the one used within your app.\nEnsure that the session ID returned from the backend when creating the session is the same as the one created on initialization of the Liveness UI. Note: session IDs can only be used once. You must create a new session to allow users to retry the Liveness check.\nError: AccessDeniedError when calling Rekognition APIs (CreateFaceLivenessSession, etc.)\n\nFull error: An error occurred (AccessDeniedException) when calling the CreateFaceLivenessSession.\n\nMake sure you are using a supported AWS region. Please refer to Liveness supported regions documentation.\n\nError: Connection time out\n\nThe websocket connection to the Rekognition streaming service will time out after 5 seconds if a connection is not made. This often happens due to a slow network connection. If your users encounter this issue, prompt them to try again at a different time or using a different network connection.\n\nNo result when GetFaceLivenessSessionResults is called\n\nEnsure that the session ID returned from the backend when creating the session is the same as the one created on initialization of the Liveness UI. Note: session IDs can only be used once. You must create a new session to allow users to retry the Liveness check.\n\nI am unable to use the Amplify CLI and/or CloudFormation. Can I still use the FaceLivenessDetector?\n\nYes, this use case is supported. Please select \"Self Managed Cognito Resource\" in Step 1 of the setup.\n\nInvalidSignatureException: Signature not yet current\n\nThe signature verification on the Rekognition streaming websocket connection was rejected due to a clock skew greater than or equal to 5 minutes. Clock skew represents the difference between a user's device time and AWS server time, and any clock skew of 5 minutes or larger will be rejected by default. Below are some common reasons for encountering this error along with suggestions for resolving them.\n\nThe time on the user's device is inaccurate. Ensure that the date and time on the user's device are accurate and match their time zone.\nUser is in a new time zone that is not reflected on their device, or living between and frequently switching time zones. If users cannot adjust their device time, you can pass systemClockOffset to the FaceLivenessDetectorCore config, which will be applied as an offset in milliseconds to the AWS server time. See an example here."
  },
  {
    "title": "Face Liveness | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/liveness",
    "html": "Face Liveness\n\nAmplify UI FaceLivenessDetector provides a UI component for Amazon Rekognition Face Liveness that helps developers verify that only real users, not bad actors using spoofs, can access your services.\n\nFeedback\n\nAmplify UI FaceLivenessDetector is powered by Amazon Rekognition Face Liveness. The following screenshots shows an example of FaceLivenessDetector in action.\n\nTo learn more about spoof attempts deterred by Face Liveness, please see this demonstration video on YouTube.\n\nQuick start\n\nPrerequisites:\n\nInstall and configure the Amplify CLI by following this guide.\nA backend that is setup following the Amazon Rekognition Face Liveness developer guide.\nStep 1. Configure Auth\n\nThere are multiple methods to setup the Amazon Cognito resources needed for Amplify Auth. The recommended option is using Amplify Gen 2 to generate an Auth backend.\n\nNote: Using Cognito does not mean that you have to migrate your users. By default, FaceLivenessDetector uses a Cognito Identity Pool, for the sole purpose of signing requests to Rekognition.\n\nAmplify Gen 2\nAmplify Gen 1\nAmplify Gen 1 Import\nCustom Credentials Provider\n\nUse Amplify Gen 2 to setup and manage your Cognito Identity and User Pool in code\n\nFaceLivenessDetector uses Amplify Auth by default to authorize users to perform the Face Liveness check. If you are using Amplify for the first time, follow the instructions for installing Amplify Gen 2.\n\nnpm\nyarn\nnpm add --save-dev @aws-amplify/backend@latest @aws-amplify/backend-cli@latest\nCopy\n\nThen follow the instructions for setting up a default Amplify Auth resource.\n\nNow that you have Amplify Auth setup, add the following code to your backend.ts file to create an inline policy to enable authenticated app users to access Rekognition.\n\nconst livenessStack = backend.createStack(\"liveness-stack\");\n\nconst livenessPolicy = new Policy(livenessStack, \"LivenessPolicy\", {\n  statements: [\n    new PolicyStatement({\n      actions: [\"rekognition:StartFaceLivenessSession\"],\n      resources: [\"*\"],\n    }),\n  ],\n});\nbackend.auth.resources.unauthenticatedUserIamRole.attachInlinePolicy(livenessPolicy); // allows guest user access\nbackend.auth.resources.authenticatedUserIamRole.attachInlinePolicy(livenessPolicy); // allows logged in user access\n\nStep 2. Install dependencies\nnpm\nyarn\nnpm install @aws-amplify/ui-react-liveness aws-amplify\nCopy\nStep 3. Initialize Amplify\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nimport React from 'react';\nimport { ThemeProvider } from '@aws-amplify/ui-react';\nimport { Amplify } from 'aws-amplify';\nimport '@aws-amplify/ui-react/styles.css';\nimport awsexports from './aws-exports';\n\nAmplify.configure(awsexports);\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n    </ThemeProvider>\n  );\n}\n\nStep 4. Add FaceLivenessDetector\n\nTo get started you will need to make a request to your backend to receive a sessionId and pass that to the FaceLivenessDetector component.\n\nOnce a valid sessionId, region, and callback has been passed, FaceLivenessDetector will take care of streaming video and presenting Face Liveness challenges.\n\nJavascript\nTypeScript\nimport React from 'react';\nimport { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';\nimport { Loader, ThemeProvider } from '@aws-amplify/ui-react';\n\nexport function LivenessQuickStartReact() {\n  const [loading, setLoading] = React.useState(true);\n  const [createLivenessApiData, setCreateLivenessApiData] =\n    React.useState(null);\n\n  React.useEffect(() => {\n    const fetchCreateLiveness = async () => {\n      /*\n       * This should be replaced with a real call to your own backend API\n       */\n      await new Promise((r) => setTimeout(r, 2000));\n      const mockResponse = { sessionId: 'mockSessionId' };\n      const data = mockResponse;\n\n      setCreateLivenessApiData(data);\n      setLoading(false);\n    };\n\n    fetchCreateLiveness();\n  }, []);\n\n  const handleAnalysisComplete = async () => {\n    /*\n     * This should be replaced with a real call to your own backend API\n     */\n    const response = await fetch(\n      `/api/get?sessionId=${createLivenessApiData.sessionId}`\n    );\n    const data = await response.json();\n\n    /*\n     * Note: The isLive flag is not returned from the GetFaceLivenessSession API\n     * This should be returned from your backend based on the score that you\n     * get in response. Based on the return value of your API you can determine what to render next.\n     * Any next steps from an authorization perspective should happen in your backend and you should not rely\n     * on this value for any auth related decisions.\n     */\n    if (data.isLive) {\n      console.log('User is live');\n    } else {\n      console.log('User is not live');\n    }\n  };\n\n  return (\n    <ThemeProvider>\n      {loading ? (\n        <Loader />\n      ) : (\n        <FaceLivenessDetector\n          sessionId={createLivenessApiData.sessionId}\n          region=\"us-east-1\"\n          onAnalysisComplete={handleAnalysisComplete}\n          onError={(error) => {\n            console.error(error);\n          }}\n        />\n      )}\n    </ThemeProvider>\n  );\n}\n\n\nSee Rekognition documentation for best practices when using FaceLivenessDetector.\n\nFull API Reference\nFaceLivenessDetectorProps\n\nBelow is the full list of props that can be used with the FaceLivenessDetector component.\n\nName\tDescription\tType\nsessionId\tThe sessionId as returned by CreateFaceLivenessSession API.\t\nstring\n\nonAnalysisComplete\tCallback that signals when the liveness session has completed analysis. At this point a request can be made to GetFaceLivenessSessionResults.\t\n() => Promise<void>\n\nregion\tThe AWS region to stream the video to, this should match the region you called the CreateFaceLivenessSession API in.\t\nstring\n\nonUserCancel?\tCallback called when the user cancels the flow. This callback is also called when users click the \"Try Again\" button in the default error modal.\t\n() => void\n\nonError?\tCallback called when there is error occured on any step.\t\n(error: LivenessError) => void\n\ndisableStartScreen?\tOptional parameter for the disabling the start screen, default: false.\t\nboolean\n\ncomponents?\tOptional object for overriding some UI components.\t\nFaceLivenessDetectorComponents\n\ndisplayText?\tOptional object for internationalizing strings.\t\nLivenessDisplayText\n\nconfig?\tOptional parameter for advanced options for the component.\t\nFaceLivenessDetectorConfig\nFaceLivenessDetectorComponents\n\nBelow is the full list of props that can be used with the FaceLivenessDetectorComponents. You can also reference the example here.\n\nName\tDescription\tType\nPhotosensitiveWarning?\tOverrides the rendered component for the photosensitivity warning.\t\nReact.ComponentType\n\nErrorView?\tOverrides the rendered component for error view.\t\nReact.ComponentType\nFaceLivenessDetectorConfig\n\nBelow is the full list of props that can be used with the FaceLivenessDetectorConfig. For instructions on using your own CDN check here.\n\nName\tDescription\tType\nbinaryPath?\tOverrides the WASM binary path, the default is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow/tfjs-backend-wasm/3.11.0/. When overriding this path ensure that the wasm version matches the version of @tensorflow/tfjs-backend-wasm installed by npm.\t\nstring\n\nfaceModelUrl?\tOverrides the Blazeface model and weights bin CDN URL. Default value is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow-models/blazeface/0.0.7/model/model.json\t\nstring\nFaceLivenessDetectorCoreConfig\n\nBelow is the full list of props that can be used with the FaceLivenessDetectorCoreConfig. This config can only be used with the <FaceLivenessDetectoreCore /> component.\n\nName\tDescription\tType\nbinaryPath?\tOverrides the WASM binary path, the default is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow/tfjs-backend-wasm/4.11.0/. When overriding this path ensure that the wasm version matches the version of @tensorflow/tfjs-backend-wasm installed by npm.\t\nstring\n\nfaceModelUrl?\tOverrides the Blazeface model and weights bin CDN URL. Default value is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow-models/blazeface/1.0.2/model/model.json\t\nstring\n\ncredentialProvider?\tAn optional callback that provides AWS Credentials.\t\nAwsCredentialProvider\n\nsystemClockOffset?\tAn optional parameter for overriding the systemClockOffset for the rekognition streaming client. Represents the difference between system clock and AWS server clock in milliseconds. See https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-middleware-signing/Interface/AwsAuthInputConfig/\t\nnumber\nLivenessError\n\nBelow is the LivenessError type used in the onError function that should give you more granularity into the types of errors happening in the component.\n\nName\tDescription\tType\nstate\tThe LivenessErrorState value which indicates the general error type as seen from the component.\t\nLivenessErrorState\n\nerror\tThe error object containing the more specific error name and stack trace.\t\nError\nLivenessErrorState\n\nBelow is the full list of error states that can be returned from the onError prop.\n\nName\tDescription\tType\nRUNTIME_ERROR\tIndicates an error that occurs in the component runtime.\t\nError\n\nSERVER_ERROR\tIndicates an error occurred from the Rekognition streaming API or in the onAnalysisComplete callback.\t\nError\n\nCONNECTION_TIMEOUT\tIndicates a timeout occurred during the initial websocket connection.\t\nError\n\nTIMEOUT\tIndicates a timeout occurred when user attempted a liveness check.\t\nError\n\nFACE_DISTANCE_ERROR\tIndicates that the user moved their face too close to the camera before the check started.\t\nError\n\nCAMERA_ACCESS_ERROR\tIndicates that an error occurred when attempting to access the user's camera, this could be because they did not allow camera permissions in the browser.\t\nError\n\nCAMERA_FRAMERATE_ERROR\tIndicates that the provided camera does not meet the minimum framerate requirements for a liveness check.\t\nError\n\nFRESHNESS_TIMEOUT\tIndicates that the component timed out when attempting to determine freshness of the video via colors flashing on the screen.\t\nError\n\nMOBILE_LANDSCAPE_ERROR\tIndicates that the user attempted to switch to using landscape mode which is not supported.\t\nError\nLivenessDisplayText\n\nThe text in FaceLivenessDetector is defined as string resources in the component's displayText.ts file."
  },
  {
    "title": "DeleteUser | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/account-settings/delete-user",
    "html": "DeleteUser\n\nDeleteUser component allows end users to delete their account permanently from their app.\n\nFeedback\nProps\nName\tDescription\tType\nonSuccess?\tCallback function triggered once user account is successfully deleted\t\n() => void\n\nonError?\tCallback function triggered when account deletion fails\t\n(error: Error) => void\n\nhandleDelete?\tCustom delete user handler\t\n(user: AuthUser) => Promise<void> | void\n\ncomponents?\tCustom components override\t\nDeleteUserComponents\n\ndisplayText?\tText to override in the component\t\nDeleteUserDisplayText\nBasic Usage\n\nDeleteUser has onSuccess handler that will be called after successful user account deletion. You may use this callback to run any custom handling, such as navigating route or rendering confirmation messages.\n\nCopy\nimport React from 'react';\nimport { AccountSettings } from '@aws-amplify/ui-react';\n\nfunction App() {\n  const handleSuccess = () => {\n    alert('user has been successfully deleted')\n  }\n  \n  return (\n    <AccountSettings.DeleteUser onSuccess={handleSuccess} />\n  );\n}\n\nOverride default delete handler\n\nYou can override the default deleteUser handler with handleDelete prop to add any custom cleanup handlers before or after account deletion.\n\nCopy\nimport React from 'react';\n\nimport { Auth } from 'aws-amplify';\nimport { DeleteUser } from '@aws-amplify/ui-react';\n\nfunction App() {\n  const handleSuccess = () => {\n    alert('password is successfully changed!')\n  }\n\n  const handleDelete = async () => {\n    console.log(\"Doing some clean up...\");\n    console.log(\"Done!\");\n    await Auth.deleteUser();\n  };  \n      \n  return (\n    <AccountSettings.DeleteUser onSuccess={handleSuccess} handleDelete={handleDelete} />\n  );\n}\n\nComponent Overrides\n\nYou can override parts of the DeleteUser component by passing in a components prop. It supports the following slots:\n\nName\tDescription\tType\nDeleteButton?\tDelete button\t\nDeleteButtonProps\n\nErrorMessage?\tError alert that displays on delete user errors\t\nErrorMessageComponentProps\n\nWarningView?\tWarning view that asks end user to confirm account deletion\t\nPasswordFieldProps\nReusing default components\n\nDefault components are accessible through AccountSettings.DeleteUser.COMPONENT_NAME (e.g. AccountSettings.DeleteUser.DeleteButton) for your convenience. This is useful if you're interested in modifying just a small part of UI instead of overriding the whole component.\n\nCopy\nfunction App() {\n  const components = {\n    DeleteButton: (props) => (\n      <AccountSettings.DeleteUser.DeleteButton {...props}>Custom Submit Button</AccountSettings.DeleteUser.DeleteButton>\n    ),\n  }\n\n  return (\n    <AccountSettings.DeleteUser components={components} />\n  );\n}\n\n\nNote that spreading props is necessary so that event listeners like onClick or html attributes like type are passed correctly. If you're providing your own custom components, make sure required props are passed onto your elements.\n\nProps and Examples\n\nHere are the required props and examples for overriding each slot.\n\nDeleteButton\n\nErrorMessage\n\nWarningView\n\nText and labels\n\nAll text in the DeleteUser component is customizable with the displayText prop.\n\nCopy\nimport { AccountSettings } from '@aws-amplify/ui-react';\n\nfunction App() {\n  return (\n    <AccountSettings.DeleteUser \n      displayText={{\n        deleteAccountText: 'Delete the account',\n        cancelButtonText: 'Cancel',\n        confirmDeleteButtonText: 'Delete account',\n        warningText: 'Are you sure you want to delete your account? You will lose access and all data.'\n      }}  \n    />\n  );\n}\n\nTheming\n\nDeleteUser component is built upon our robust Amplify UI theming system. To get started, add a theme object and set the appropriate design tokens. You can then pass that theme to the ThemeProvider so the changes can take affect.\n\nCopy\nimport { AccountSettings, Card, ThemeProvider } from '@aws-amplify/ui-react';\n\nconst theme = {\n  name: 'custom-theme',\n  tokens: {\n    colors: {\n      border: {\n        primary: { value: '{colors.neutral.40}' },\n        secondary: { value: '{colors.neutral.20}' },\n        tertiary: { value: '{colors.neutral.10}' },\n      },\n    },\n    radii: {\n      small: { value: '2px' },\n      medium: { value: '3px' },\n      large: { value: '4px' },\n      xl: { value: '6px' },\n    },\n  },\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Card width=\"800px\">\n        <AccountSettings.DeleteUser />\n      </Card>\n    </ThemeProvider>\n  );\n}\n"
  },
  {
    "title": "Customization | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/liveness/customization",
    "html": "Customization\n\nCustomize your FaceLivenessDetector\n\nFeedback\nStart View\n\nFaceLivenessDetector contains an initial (start) view with instructions and information about the Face Liveness check for the end user. By default, the start view is shown before the Face Liveness check. The start view can be disabled, allowing you to provide your own start view before FaceLivenessDetector is displayed in the app:\n\n<FaceLivenessDetector\n    sessionId={createLivenessApiData.sessionId}\n    region='us-east-1'\n    onAnalysisCompleteDetection={onAnalysisCompleteDetection}\n    disableInstructionScreen={true}\n/>\n\nInternationalization (I18n)\n\nThe text in FaceLivenessDetector is defined as string resources in the component's displayText.ts file. These values can be translated/overwritten by following the example below:\n\nimport React from 'react';\nimport { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';\nimport { ToggleButtonGroup, ToggleButton } from '@aws-amplify/ui-react';\n\nconst dictionary = {\n  // use default strings for english\n  en: null,\n  es: {\n    photosensitivyWarningHeadingText: 'Advertencia de fotosensibilidad',\n    photosensitivyWarningBodyText:\n      'Esta verificación muestra luces de colores. Tenga cuidado si es fotosensible.',\n    goodFitCaptionText: 'Buen ajuste',\n    tooFarCaptionText: 'Demasiado lejos',\n    hintCenterFaceText: 'Centra tu cara',\n    startScreenBeginCheckText: 'Comenzar a verificar',\n  },\n};\n\nexport function Customizationi18n() {\n  const [language, setLanguage] = React.useState<string>('en');\n  const [showLiveness, setShowLiveness] = React.useState(false);\n  React.useEffect(() => {\n    setShowLiveness(true);\n  }, []);\n  return (\n    <>\n      <ToggleButtonGroup\n        value={language}\n        isExclusive\n        onChange={(value) => setLanguage(value)}\n      >\n        <ToggleButton value=\"en\">En</ToggleButton>\n        <ToggleButton value=\"es\">Es</ToggleButton>\n      </ToggleButtonGroup>\n      {showLiveness && (\n        <FaceLivenessDetector\n          sessionId={'sessionId'}\n          region=\"us-east-1\"\n          onAnalysisComplete={async () => {}}\n          displayText={dictionary[language]}\n        />\n      )}\n    </>\n  );\n}\n\nTheming\nCSS styles\n\nYou can customize FaceLivenessDetector's default style by using CSS variables.\n\nThe example below uses a <style> tag to change the default colors to a dark theme:\n\n[data-amplify-theme] {\n  --amplify-colors-background-primary: var(--amplify-colors-neutral-90);\n  --amplify-colors-background-secondary: var(--amplify-colors-neutral-100);\n  --amplify-colors-primary-10: var(--amplify-colors-teal-100);\n  --amplify-colors-primary-80: var(--amplify-colors-teal-40);\n  --amplify-colors-primary-90: var(--amplify-colors-teal-20);\n  --amplify-colors-primary-100: var(--amplify-colors-teal-10);\n}\n\nTheme Provider Theme\n\nYou can update the style of FaceLivenessDetector by using the ThemeProvider theme object. To do this, you must surround FaceLivenessDetector in the ThemeProvider.\n\nThen create a theme object, with all your font and color updates. Feel free to use design tokens, as a way of designing your theme further.\n\nBelow is an example of changing the default colors to a dark theme. You can also access the default dark mode override for the Amplify Theme Provider here.\n\nimport React from 'react';\nimport { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';\nimport { Theme, ThemeProvider, useTheme } from '@aws-amplify/ui-react';\n\nexport function CustomizationTheme() {\n  const [showLiveness, setShowLiveness] = React.useState(false);\n  React.useEffect(() => {\n    setShowLiveness(true);\n  }, []);\n  const { tokens } = useTheme();\n  const theme: Theme = {\n    name: 'Face Liveness Example Theme',\n    tokens: {\n      colors: {\n        background: {\n          primary: {\n            value: tokens.colors.neutral['90'].value,\n          },\n          secondary: {\n            value: tokens.colors.neutral['100'].value,\n          },\n        },\n        font: {\n          primary: {\n            value: tokens.colors.white.value,\n          },\n        },\n        brand: {\n          primary: {\n            '10': tokens.colors.teal['100'],\n            '80': tokens.colors.teal['40'],\n            '90': tokens.colors.teal['20'],\n            '100': tokens.colors.teal['10'],\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      {showLiveness && (\n        <FaceLivenessDetector\n          sessionId={'sessionId'}\n          region={'us-east-1'}\n          onAnalysisComplete={async () => {}}\n        />\n      )}\n    </ThemeProvider>\n  );\n}\n\nComponents\n\nFaceLivenessDetector allows overriding some UI components using the components prop.\n\nThe following code snippet demonstrates how to pass in custom HTML rendering functions:\n\nCustom Photo Sensitivity Warning\nCustom Error View\nThe children prop in ErrorView contains a default error component based on the LivenessError, you can use our default rendered components or render your own error message\nimport React from 'react';\nimport { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';\nimport { View, Heading, Alert } from '@aws-amplify/ui-react';\n\nexport function CustomizationComponents() {\n  const [showLiveness, setShowLiveness] = React.useState(false);\n  React.useEffect(() => {\n    setShowLiveness(true);\n  }, []);\n  return showLiveness ? (\n    <FaceLivenessDetector\n      sessionId={'sessionId'}\n      region={'us-east-1'}\n      onAnalysisComplete={async () => {}}\n      components={{\n        PhotosensitiveWarning: (): JSX.Element => {\n          return (\n            <Alert\n              variation=\"warning\"\n              isDismissible={false}\n              hasIcon={true}\n              heading=\"Caution\"\n            >\n              This check displays colored lights. Use caution if you are\n              photosensitive.\n            </Alert>\n          );\n        },\n        ErrorView: ({ children }) => {\n          return (\n            <View flex=\"1\" backgroundColor=\"white\">\n              <Heading color=\"black\">My Custom Error View</Heading>\n              {children}\n            </View>\n          );\n        },\n      }}\n    />\n  ) : null;\n}\n\nError View Example\n\nThe following code snippet demonstrates using a more customized error view which does not utilize the children component and instead renders your own full modal.\n\nimport React, { useCallback, useState } from 'react';\nimport { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';\nimport { Button, Flex, Heading, Text } from '@aws-amplify/ui-react';\n\nexport function CustomizationComponentsErrorView() {\n  const [error, setError] = useState(undefined);\n  const [showLiveness, setShowLiveness] = React.useState(false);\n  React.useEffect(() => {\n    setShowLiveness(true);\n  }, []);\n\n  const CustomError = useCallback(() => {\n    return (\n      <Flex\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        width=\"100%\"\n        height=\"100%\"\n      >\n        <Flex\n          backgroundColor=\"white\"\n          direction=\"column\"\n          justifyContent=\"center\"\n          padding=\"32px\"\n        >\n          <Heading color=\"black\">{error?.state}</Heading>\n          <Text>{error?.error.message}</Text>\n          <Button>Try again?</Button>\n        </Flex>\n      </Flex>\n    );\n  }, [error]);\n\n  return showLiveness ? (\n    <FaceLivenessDetector\n      sessionId=\"sessionId\"\n      region=\"us-east-1\"\n      onAnalysisComplete={async () => {}}\n      onError={setError}\n      components={{\n        ErrorView: CustomError,\n      }}\n    />\n  ) : null;\n}\n\nSystem Clock Offset\n\nThe systemClockOffset can optionally be passed to the FaceLivenessDetectorCore config, where it will be added as an offset in milliseconds to the AWS server time. This can be useful when the user's device time is inaccurate or when the user is frequently switching time zones. An example of calculating the offset and passing it to the FaceLivenessDetectorCore is shown below:\n\nThe following example requires that headers with the Date are available in the response. The solution will need to be modified based on the call to your backend API.\nimport React from 'react';\nimport { FaceLivenessDetectorCore } from '@aws-amplify/ui-react-liveness';\n\nfunction MyComponent() {\n  const [createLivenessApiData, setCreateLivenessApiData] = React.useState(null);\n  \n  /* \n   * 1. Check whether the difference between server time and device time is\n   *  greater than or equal to 5 minutes, and if so, return the offset in milliseconds.\n   *  This logic should be adjusted based on the server response and use case\n  */ \n  const getSystemClockOffset = (serverTime: number) => {\n    const maxSupportedClockSkew = 5 * 60 * 1000; // 5 minutes\n    const deviceTime = Date.now();\n    const delta = serverTime ? serverTime - deviceTime : 0;\n    return Math.abs(delta) >= maxSupportedClockSkew ? delta : undefined;\n  }\n  \n  React.useEffect(() => {\n    /*\n    * Replace with your own API call to create a session\n    */\n    const response = await fetch(`/api/createSession`);\n    const body = await response.json(); // { sessionId: 'mockSessionId' } \n    /*\n    * Replace serverTime with the actual server date,\n    * which can be retrieved from the response headers or your custom backend.\n    */\n    const serverTime = response.headers['date']\n    const systemClockOffset = getSystemClockOffset(serverTime)\n    setCreateLivenessApiData({body, systemClockOffset});\n  }, []);\n    \n  return (\n    <div>\n      <FaceLivenessDetectorCore\n        sessionId={createLivenessApiData.sessionId}\n        region={'us-east-1'}\n        /* \n         * 2. Pass systemClockOffset to the config \n        */\n        config={{\n          systemClockOffset={createLivenessApiData.systemClockOffset}\n        }}\n      />\n    </div>\n  );\n}\n\n\n\nCustom CDN\n\nFaceLivenessDetector allows overriding the default hosted CDN and providing your own. The CDN files are used by the TensorFlow library to load in files at runtime. You can host your own CDN by following the instructions below.\n\nLearn more about the differences between the three different .wasm files in this TensorFlow blog post.\n\nDownload the TFJS wasm and blazeface files for the corresponding version of @aws-amplify/ui-react-liveness.\nDownload wasm files for tfjs here:\n<= v2.x\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@3.11.0/dist/tfjs-backend-wasm.wasm\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@3.11.0/dist/tfjs-backend-wasm-simd.wasm\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@3.11.0/dist/tfjs-backend-wasm-threaded-simd.wasm\nv3.x\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@4.11.0/dist/tfjs-backend-wasm.wasm\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@4.11.0/dist/tfjs-backend-wasm-simd.wasm\nhttps://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@4.11.0/dist/tfjs-backend-wasm-threaded-simd.wasm\nDownload and unzip the tar file. It should contain a model.json file and a group1-shard1of1.bin file.\n<= v2.x - https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1\nv3.x - https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1\nHost all files alongside your JS files on your own server\nUpdate FaceLivenessDetector code:\nimport React from 'react';\nimport { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';\n\nexport function CustomizationCdn() {\n  const [showLiveness, setShowLiveness] = React.useState(false);\n  React.useEffect(() => {\n    setShowLiveness(true);\n  }, []);\n  return showLiveness ? (\n    <FaceLivenessDetector\n      sessionId={'sessionId'}\n      region=\"us-east-1\"\n      onAnalysisComplete={async () => {}}\n      config={{\n        binaryPath: 'http://example.com/path/to/your/wasm/files/',\n        faceModelUrl:\n          'http://example.com/path/to/your/blazeface/file/model.json',\n      }}\n    />\n  ) : null;\n}\n\n\nbinaryPath must be a path to a folder with .wasm files. faceModelUrl must point to the model.json file and will also expect the group1-shard1of1.bin file to be colocated in the same path.\n\nBest Practices\nThe get ready screen has been optimized for increasing the end user's success rate and we strongly discourage making any changes to that screen.\nWe do not recommend modifying the countdown time, face fit timeout, and oval size, as they affect the security and accuracy of the Face Liveness check."
  },
  {
    "title": "ChangePassword | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/account-settings/change-password",
    "html": "ChangePassword\n\nChangePassword component enables end users to change their password.\n\nFeedback\nProps\nName\tDescription\tType\nonSuccess?\tCallback function triggered when password is successfully updated\t\n() => void\n\nonError?\tCallback function triggered when change password fails\t\n(error: Error) => void\n\nvalidators?\tCustom password validations\t\nValidatorOptions[]\n\ncomponents?\tSubmit button\t\nChangePasswordComponents\n\ndisplayText?\tText to override in the component\t\nChangePasswordDisplayText\nBasic Usage\n\nChangePassword has onSuccess handler that will be called after successful password change. You may use this callback to run any custom handling, such as navigating route or rendering confirmation messages.\n\nCopy\nimport React from 'react';\nimport { AccountSettings } from '@aws-amplify/ui-react';\n\nfunction App() {\n  const handleSuccess = () => {\n    alert('password is successfully changed!')\n  }\n  \n  return (\n    <AccountSettings.ChangePassword onSuccess={handleSuccess}/>\n  );\n}\n\nCustom Validation\n\nYou can override the default password validator with your own custom validator. To do so, you can use the validators prop, which takes an array of ValidatorOptions:\n\nCopy\ninterface ValidatorOptions {\n  validationMode: 'onBlur' | 'onChange' | 'onTouched';\n  validator: (value: string) => boolean;\n  message: string;\n}\n\nonBlur validates password on every blur event\nonChange validates password on every change event\nonTouched validates password on first blur, and on every change event after the first blur.\n\nFor example, following is a minLength validator that validates on every change:\n\nCopy\nconst minLength = {\n  validationMode: 'onChange',\n  validator: (password) => password.length >= 4,\n  message: 'Password must have length 4 or greater',\n};\n\n\nYou can pass multiple validators to ChangePassword to override the default validator:\n\nCopy\nimport React from 'react';\nimport { AccountSettings } from '@aws-amplify/ui-react';\n\nfunction App() {\n  const minLength = {\n    validationMode: 'onChange',\n    validator: (password) => password.length >= 4,\n    message: 'Password must have length 4 or greater',\n  };\n\n  const maxLength = {\n    validationMode: 'onChange',\n    validator: (password) => password.length <= 12,\n    message: 'Password must have length 12 or less',\n  };\n  \n  const handleSuccess = () => {\n    alert('password is successfully changed!')\n  }\n  \n  return (\n    <AccountSettings.ChangePassword \n      onSuccess={handleSuccess} \n      validators={[minLength, maxLength]}\n    />\n  );\n}\n\nComponent Overrides\n\nYou can provide your own UI components to override parts of ChangePassword. It supports the following slots:\n\nName\tDescription\tType\nCurrentPasswordField?\tPassword field for current password\t\nPasswordFieldProps\n\nNewPasswordField?\tPassword field for new password\t\nPasswordFieldProps\n\nConfirmPasswordField?\tPassword field for confirm password\t\nPasswordFieldProps\n\nErrorMessage?\tError alert that displays on change password errors\t\nErrorMessageComponentProps\n\nSubmitButton?\tSubmit button\t\nSubmitButtonProps\nReusing default components\n\nDefault components are accessible through AccountSettings.ChangePassword.COMPONENT_NAME (e.g. AccountSettings.ChangePassword.NewPasswordField) for your convenience. This is useful if you're interested in modifying just a small part of UI instead of overriding the whole component.\n\nCopy\nfunction App() {\n  const components = {\n    NewPasswordField: (props) => (\n      <AccountSettings.ChangePassword.NewPasswordField\n        {...props} \n        label=\"Custom New Password Label\" \n      />\n    ),\n  }\n\n  return (\n    <AccountSettings.ChangePassword components={components} />\n  );\n}\n\n\nNote that spreading props is necessary so that event listeners like onChange or html attributes like name are passed correctly. If you're providing your own custom components, make sure required props are passed onto your elements.\n\nProps and Examples\n\nHere are the required props and examples for overriding each slot.\n\nPasswordFields\n\nErrorMessage\n\nSubmitButton\n\nText and labels\n\nAll text in the ChangePassword component is customizable with the displayText prop.\n\nCopy\nimport { AccountSettings } from '@aws-amplify/ui-react';\n\nfunction App() {\n  return (\n    <AccountSettings.ChangePassword \n      displayText={{\n        currentPasswordLabel: 'Enter current password',\n        newPasswordLabel: 'Enter new password',\n        confirmPasswordLabel: 'Confirm your password',\n        updatePasswordText: 'Update your password',\n      }}  \n    />\n  );\n}\n\nTheming\n\nChangePassword component is built upon our robust Amplify UI theming system. To get started, add a theme object and set the appropriate design tokens. You can then pass that theme to the ThemeProvider so the changes can take affect.\n\nCopy\nimport { AccountSettings, Card, ThemeProvider } from '@aws-amplify/ui-react';\n\nconst theme = {\n  name: 'custom-theme',\n  tokens: {\n    colors: {\n      border: {\n        primary: { value: '{colors.neutral.40}' },\n        secondary: { value: '{colors.neutral.20}' },\n        tertiary: { value: '{colors.neutral.10}' },\n      },\n    },\n    radii: {\n      small: { value: '2px' },\n      medium: { value: '3px' },\n      large: { value: '4px' },\n      xl: { value: '6px' },\n    },\n  },\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Card width=\"800px\">\n        <AccountSettings.ChangePassword />\n      </Card>\n    </ThemeProvider>\n  );\n}\n"
  },
  {
    "title": "Account Settings | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/account-settings",
    "html": "Account Settings\n\nAmplify UI provides account settings components to manage account settings.\n\nFeedback\n@aws-amplify/ui-react v5\nThe @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.\n\nAccount Settings components are a set of standalone components that add user management flows to your application with minimal boilerplate.\n\nAccount Settings components require end user to be authenticated. You can use the Authenticator component to add authentication UI to your application.\n\nQuick Start\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nStep 1. Configure Backend\n\nAccount settings components work seamlessly with the Amplify CLI to automatically work with your backend.\n\nFirst, update @aws-amplify/cli with npm or yarn if you're using a version before 6.4.0:\n\nnpm\nyarn\nnpm install -g @aws-amplify/cli@latest\n\nStep 2. Install Dependencies\nnpm\nyarn\nnpm install @aws-amplify/ui-react aws-amplify\nCopy\nStep 3. Add Account Settings Components\n\nGet started by using AccountSettings with either the ChangePassword or DeleteUser components."
  },
  {
    "title": "Advanced Usage | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/authenticator/advanced",
    "html": "Advanced Usage\n\nAccess Authenticator UI component state outside of the UI component\n\nFeedback\n\nYou must render the Authenticator UI component before using the useAuthenticator hook. This hook was designed to retrieve Authenticator UI specific state such as route and user and should not be used without the UI component.\n\n\n\nuseAuthenticator Hook\n\n@aws-amplify/ui-react ships with useAuthenticator React hook that can be used to access, modify, and update Authenticator's auth state. To use them, you must render the Authenticator and wrap your application with <Authenticator.Provider>:\n\nimport { Authenticator } from '@aws-amplify/ui-react';\n\nexport default () => (\n  <Authenticator.Provider>\n    <App />\n  </Authenticator.Provider>\n);\n\n\nThen, you can use useAuthenticator on your App:\n\nimport { useAuthenticator } from '@aws-amplify/ui-react';\n\nconst App = () => {\n  const { user, signOut } = useAuthenticator((context) => [context.user]);\n  // ...\n};\n\nAuthenticator Provider\n\nIn advanced use cases where usage of the useAuthenticator hook outside the scope of the Authenticator is needed, wrap your application inside an Authenticator.Provider. The Authenticator.Provider guarantees that the useAuthenticator hook is available throughout your application.\n\nCreate React App\nNext.js\nimport { Authenticator, View } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css'; // default theme\n\nexport default function App() {\n  return (\n    <Authenticator.Provider>\n      <View>Your app here</View>\n    </Authenticator.Provider>\n  );\n};\n\nPrevent Re-renders\n\nUsing useAuthenticator hook at your App level is risky, because it'll trigger a re-render down its tree whenever any of its context changes value.\n\nTo prevent undesired re-renders, you can pass a function to useAuthenticator that takes in Authenticator context and returns an array of desired context values. The hook will only trigger re-render if any of the array values change.\n\nFor example, you can ensure useAuthenticator to only reevaluate when its user context changes:\n\nimport { useAuthenticator } from '@aws-amplify/ui-react';\n\n// hook below is only reevaluated when `user` changes\nconst { user, signOut } = useAuthenticator((context) => [context.user]);\n\nAccess Auth State\n\nYou can use useAuthenticator hook to access route string that represents the current authState. They can be one of:\n\nidle\nsetup\nsignIn\nsignUp\nconfirmSignIn\nconfirmSignUp\nsetupTotp\nforceNewPassword\nforgotPassword\nconfirmResetPassword\nverifyUser\nconfirmVerifyUser\nsignOut\nauthenticated\nimport { useAuthenticator } from '@aws-amplify/ui-react';\n\n\nconst App = () => {\n\n  const { route } = useAuthenticator(context => [context.route]);\n\n\n\n  // Use the value of route to decide which page to render\n\n  return route === 'authenticated' ? <Home /> : <Authenticator />;\n\n};\n\nAuthentication Check\n\nIf you just need to check if you're authenticated or not, you can use the more straightforward useAuthenticator hook to access the authStatus string. The authStatus string can represent the following states:\n\nconfiguring\nauthenticated\nunauthenticated\n\nThe configuring state only occurs when the Authenticator is first loading.\n\nimport { useAuthenticator } from '@aws-amplify/ui-react';\n\n\nconst App = () => {\n\n  const { authStatus } = useAuthenticator(context => [context.authStatus]);\n\n\n\n  // Use the value of authStatus to decide which page to render\n\n return (\n\n    <>\n      {authStatus === 'configuring' && 'Loading...'}\n      {authStatus !== 'authenticated' ? <Authenticator /> : <Home />}\n    </>\n  );\n};\n\nAccess Authenticated User\n\nYou can use useAuthenticator hook to access current signed in user. If no user is authenticated, it'll return undefined.\n\nimport { useAuthenticator } from '@aws-amplify/ui-react';\n\n\nconst Home = () => {\n\n  const { user, signOut } = useAuthenticator((context) => [context.user]);\n\n\n  return (\n    <>\n\n      <h2>Welcome, {user.username}!</h2>\n\n      <button onClick={signOut}>Sign Out</button>\n\n    </>\n  );\n};\n\nTrigger Transitions\n\nYou can use useAuthenticator hook to access functions that lets you trigger transitions to the authenticator. Please see Full API to see all supported transition functions. Any invalid transitions (e.g. signUp directly to authenticated) will be ignored.\n\nimport { useAuthenticator } from '@aws-amplify/ui-react';\n\n\nconst Home = () => {\n\n  const { user, signOut } = useAuthenticator((context) => [context.user]);\n\n\n\n  return <button onClick={signOut}>Welcome, {user.username}!</button>;\n\n};\n\nExample\n\nHere's an example that uses the toForgotPassword trigger transition, to create a custom button. Note that example uses the Footer \"slot\" override.\n\nimport '@aws-amplify/ui-react/styles.css';\nimport {\n  Authenticator,\n  View,\n  Button,\n  useAuthenticator,\n} from '@aws-amplify/ui-react';\n\nexport default function App() {\n  const components = {\n    SignIn: {\n      Footer() {\n        const { toForgotPassword } = useAuthenticator();\n\n        return (\n\n          <View textAlign=\"center\">\n            <Button fontWeight=\"normal\" onClick={toForgotPassword} size=\"small\">\n              Forgot Password???\n\n            </Button>\n\n          </View>\n        );\n      },\n    },\n  };\n\n  return (\n    <Authenticator components={components}>\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\n\n\nFull API\n\nBelow is the full list of context that useAuthenticator hook returns.\n\nAccess Contexts\nTrigger Transition\n\nThese are readonly contexts that represent the current auth state. Any unapplicable context will be undefined.\n\nName\tDescription\tType\nuser\tCurrent signed in user\tAuthUser\nroute\tName of the auth flow user is in\tstring\nerror\tAny error returned from service API call\tstring\nvalidationErrors\tAny form validation errors found. Maps each error message to respective input name.\tRecord<string, string>\nhasValidationErrors\tWhether there are any form validation errors\tboolean\nisPending\tWhether service API call is in progress\tboolean\ncodeDeliveryDetail\tProvides detail on where confirm sign up code is sent to.\tCodeDeliveryDetail"
  },
  {
    "title": "Customization | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/authenticator/customization",
    "html": "Customization\n\nOverride and customize your Authenticator.\n\nFeedback\nHeaders & Footers\n\nThe Authenticator has several \"slots\" that you can customize to add messaging & functionality to meet your app's needs.\n\nThe following example customizes these slots with:\n\nCustom header above the Authenticator with the Amplify logo\nCustom footer below the Authenticator with © All Rights Reserved\nCustom Sign In header with Sign in to your account\nCustom Sign In footer with a Reset Password link\nCustom Sign Up header with Create a new account\nCustom Sign Up footer with a Back to Sign In link\nCustom Confirm Sign Up header with an Enter Information header\nCustom Confirm Sign Up footer with a Footer Information message\nconst components = {\n\n  Header() {\n\n    const { tokens } = useTheme();\n\n    return (\n      <View textAlign=\"center\" padding={tokens.space.large}>\n        <Image\n          alt=\"Amplify logo\"\n          src=\"https://docs.amplify.aws/assets/logo-dark.svg\"\n        />\n      </View>\n    );\n  },\n\n\n  Footer() {\n\n    const { tokens } = useTheme();\n\n    return (\n      <View textAlign=\"center\" padding={tokens.space.large}>\n        <Text color={tokens.colors.neutral[80]}>\n          &copy; All Rights Reserved\n        </Text>\n      </View>\n    );\n  },\n\n\n  SignIn: {\n\n    Header() {\n\n      const { tokens } = useTheme();\n\n      return (\n        <Heading\n          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}\n          level={3}\n        >\n          Sign in to your account\n        </Heading>\n      );\n    },\n\n    Footer() {\n\n      const { toForgotPassword } = useAuthenticator();\n\n      return (\n        <View textAlign=\"center\">\n          <Button\n            fontWeight=\"normal\"\n            onClick={toForgotPassword}\n            size=\"small\"\n            variation=\"link\"\n          >\n            Reset Password\n          </Button>\n        </View>\n      );\n    },\n  },\n\n\n  SignUp: {\n\n    Header() {\n\n      const { tokens } = useTheme();\n\n      return (\n        <Heading\n          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}\n          level={3}\n        >\n          Create a new account\n        </Heading>\n      );\n    },\n\n    Footer() {\n\n      const { toSignIn } = useAuthenticator();\n\n      return (\n        <View textAlign=\"center\">\n          <Button\n            fontWeight=\"normal\"\n            onClick={toSignIn}\n            size=\"small\"\n            variation=\"link\"\n          >\n            Back to Sign In\n          </Button>\n        </View>\n      );\n    },\n  },\n\n  ConfirmSignUp: {\n\n    Header() {\n\n      const { tokens } = useTheme();\n      return (\n        <Heading\n          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}\n          level={3}\n        >\n          Enter Information:\n        </Heading>\n      );\n    },\n\n    Footer() {\n\n      return <Text>Footer Information</Text>;\n    },\n  },\n  SetupTotp: {\n    Header() {\n      const { tokens } = useTheme();\n      return (\n\n        <Heading\n          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}\n          level={3}\n        >\n\n          Enter Information:\n        </Heading>\n      );\n    },\n    Footer() {\n      return <Text>Footer Information</Text>;\n    },\n  },\n  ConfirmSignIn: {\n    Header() {\n      const { tokens } = useTheme();\n      return (\n        <Heading\n          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}\n          level={3}\n        >\n          Enter Information:\n        </Heading>\n      );\n    },\n    Footer() {\n      return <Text>Footer Information</Text>;\n    },\n  },\n  ForgotPassword: {\n    Header() {\n      const { tokens } = useTheme();\n      return (\n        <Heading\n          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}\n          level={3}\n        >\n          Enter Information:\n        </Heading>\n      );\n    },\n    Footer() {\n      return <Text>Footer Information</Text>;\n    },\n  },\n  ConfirmResetPassword: {\n    Header() {\n      const { tokens } = useTheme();\n      return (\n        <Heading\n          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}\n          level={3}\n        >\n          Enter Information:\n        </Heading>\n      );\n    },\n    Footer() {\n      return <Text>Footer Information</Text>;\n    },\n  },\n};\n\nconst formFields = {\n  signIn: {\n    username: {\n      placeholder: 'Enter your email',\n    },\n  },\n  signUp: {\n    password: {\n      label: 'Password:',\n      placeholder: 'Enter your Password:',\n      isRequired: false,\n      order: 2,\n    },\n    confirm_password: {\n      label: 'Confirm Password:',\n      order: 1,\n    },\n  },\n  forceNewPassword: {\n    password: {\n      placeholder: 'Enter your Password:',\n    },\n  },\n  forgotPassword: {\n    username: {\n      placeholder: 'Enter your email:',\n    },\n  },\n  confirmResetPassword: {\n    confirmation_code: {\n      placeholder: 'Enter your Confirmation Code:',\n      label: 'New Label',\n      isRequired: false,\n    },\n    confirm_password: {\n      placeholder: 'Enter your Password Please:',\n    },\n  },\n  setupTotp: {\n    QR: {\n      totpIssuer: 'test issuer',\n      totpUsername: 'amplify_qr_test_user',\n    },\n    confirmation_code: {\n      label: 'New Label',\n      placeholder: 'Enter your Confirmation Code:',\n      isRequired: false,\n    },\n  },\n  confirmSignIn: {\n    confirmation_code: {\n      label: 'New Label',\n      placeholder: 'Enter your Confirmation Code:',\n      isRequired: false,\n    },\n  },\n};\n\nexport default function App() {\n  return (\n    <Authenticator formFields={formFields} components={components}>\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\nLogin\nRegister\nSign in to your account\nSign In with Amazon\nSign In with Apple\nSign In with Facebook\nSign In with Google\nLog in\nEnter your username\nEnter your password\nPassword is hidden\nLog in\nReset Password\n\n© All Rights Reserved\n\nOverride Function Calls\n\nYou can override the call to signUp, signIn, confirmSignIn, confirmSignUp, forgotPassword and forgotPasswordSubmit functions. To override a call you must create a new services object with an async handle* function that returns an aws-amplify Auth promise.\n\n@aws-amplify/ui-react v5\n\nUse resetPassword in place of forgotPassword in versions 5 and earlier of @aws-amplify/ui-react.\n\nThe service object must then be passed into the authenticator component as a services prop. For example, let's imagine you'd like to lowercase the username and the email attributes during signUp. This would be overriden like so:\n\n@aws-amplify/ui-react v6 (latest)\n@aws-amplify/ui-react v5 and below\n\nIn @aws-amplify/ui-react version 6, Auth function calls are imported directly as shown below.\n\nimport { Authenticator } from '@aws-amplify/ui-react';\n\nimport { signUp, SignUpInput } from 'aws-amplify/auth';\n\n\nexport default function App() {\n  const services = {\n    async handleSignUp(input: SignUpInput) {\n      // custom username and email\n      const { username, password, options } = input;\n      const customUsername = username.toLowerCase();\n      const customEmail = options?.userAttributes?.email.toLowerCase();\n      return signUp({\n        username: customUsername,\n        password,\n        options: {\n\n          ...input.options,\n\n          userAttributes: {\n            ...input.options?.userAttributes,\n            email: customEmail,\n          },\n        },\n      });\n    },\n  };\n  return (\n    <Authenticator services={services} initialState=\"signUp\">\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\n\nEach handle* function accepts as input the expected input of its corresponding Auth function, allowing you to override the Auth function call from within the handle* function. Here is a table of each override function name, and the values passed as input.\n\n@aws-amplify/ui-react v6 (latest)\n@aws-amplify/ui-react v5\nAuth Function Call\tOverride Name\tinput Properties\nsignUp\thandleSignUp\t{username, password}\nsignIn\thandleSignIn\t{username, password}\nconfirmSignIn\thandleConfirmSignIn\t{challengeResponse}\nconfirmSignUp\thandleConfirmSignUp\t{username, confirmationCode}\nresetPassword\thandleForgotPassword\t{username}\nconfirmResetPassword\thandleForgotPasswordSubmit\t{username, newPassword, confirmationCode}\nInternationalization (I18n)\n\nThe Authenticator ships with translations for:\n\nen – English (default)\nzh – Chinese\nnl – Dutch\nfr – French\nde – German\nhe – Hebrew\nid – Indonesian\nit – Italian\nja – Japanese\nko – Korean\nnb - Norwegian\npl – Polish\npt – Portuguese\nru – Russian\nes – Spanish\nsv – Swedish\ntr – Turkish\nua – Ukrainian\n\nThese translations can be customized using the Amplify JS' I18n module:\n\nNote: The import path for i18n changed from aws-amplify to aws-amplify/utils in aws-amplify@6\n\nimport { I18n } from 'aws-amplify/utils';\nimport { translations } from '@aws-amplify/ui-react';\nI18n.putVocabularies(translations);\nI18n.setLanguage('fr');\n\nI18n.putVocabularies({\n  fr: {\n    'Sign In': 'Se connecter',\n    'Sign Up': \"S'inscrire\",\n  },\n  es: {\n    'Sign In': 'Registrarse',\n    'Sign Up': 'Regístrate',\n  },\n});\n\n\nThe list of available keys are available here.\n\nConfirm Sign Up Page Translations\n\nThe confirm sign up page has a few specialized strings that can be translated. These include:\n\n`Your code is on the way. To log in, enter the code we emailed to`\n\n`Your code is on the way. To log in, enter the code we texted to`\n\n`Your code is on the way. To log in, enter the code we sent you. It may take a minute to arrive.`\n\n`It may take a minute to arrive.`\n\nTranslations Needed 📖\n\nIf you see any missing translations or would like to contribute a new language, we greatly appreciate contributions to translations we have here.\n\nLabels & Text\n\nUsing the same techniques as Internationalization (I18n), you can customize the labels and text of the components:\n\nDefault Values\n\nCompare the default labels here to those in the customized screens below.\n\nBecause I18n manages global translations, customizing these will affect all translations of these strings (including those on this page!).\n\nLogin\nRegister\nLog in\nEnter your username\nEnter your password\nPassword is hidden\nLog in\nReset Password\n\nSign In\n\nSign Up\n\nForgot Password\n\nSetup TOTP\n\nSign Up Fields\n\nThe following example customizes the Sign Up screen by:\n\nRe-using the default Sign Up form fields\nAppending a custom \"Terms and Conditions\" checkbox with a validateCustomSignUp service\n\nNote: In the example code below, preferred_username is not set as an attribute because it has already been defined through Zero Configuration. You may also notice that the acknowledgement field is not being sent. This occurs since acknowledgement is not a known attribute to Cognito. To assign it as a custom attribute instead, the name field must have the custom: prefix.\n\nexport default function App() {\n  return (\n    <Authenticator\n      // Default to Sign Up screen\n      initialState=\"signUp\"\n      // Customize `Authenticator.SignUp.FormFields`\n\n      components={{\n\n        SignUp: {\n\n          FormFields() {\n\n            const { validationErrors } = useAuthenticator();\n\n            return (\n              <>\n                {/* Re-use default `Authenticator.SignUp.FormFields` */}\n                <Authenticator.SignUp.FormFields />\n\n                {/* Append & require Terms and Conditions field to sign up  */}\n                <CheckboxField\n                  errorMessage={validationErrors.acknowledgement as string}\n                  hasError={!!validationErrors.acknowledgement}\n                  name=\"acknowledgement\"\n                  value=\"yes\"\n                  label=\"I agree with the Terms and Conditions\"\n                />\n              </>\n            );\n          },\n        },\n      }}\n\n      services={{\n\n        async validateCustomSignUp(formData) {\n          if (!formData.acknowledgement) {\n            return {\n              acknowledgement: 'You must agree to the Terms and Conditions',\n            };\n          }\n        },\n      }}\n    >\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\n\nLogin\nRegister\nEnter your email\nEnter your password\nPassword is hidden\nConfirm your password\nPassword is hidden\nPreferred Username\nI agree with the Terms and Conditions\n\nYou must agree to the Terms and Conditions\n\nRegister\n\nIf you'd like to add an attribute please first consider using the Sign Up Attributes prop. In some instances you may want to add an app-specific attribute. In those cases you can add a new form element to the Sign Up form fields. Be aware the HTML name attribute on the new form field must match the name of the Cognito attribute. If the cognito attribute is a custom attribute it must have the custom: prefix in the HTML attribute name.\n\nCopy\n  const formFields = {\n    signUp: {\n      email: {\n        order:1\n      },\n      password: {\n        order: 2\n      },\n      confirm_password: {\n        order: 3\n      },\n      'custom:your_custom_attribute': {\n        order: 4\n      }\n    },\n  }\n\nForce New Password Fields\n\nThe following example customizes the Force New Password screen by:\n\nRe-using the default Force New Password form fields\nAppending a custom \"Zone Info\" text field\n<Authenticator\n      initialState=\"signUp\"\n      components={{\n        ForceNewPassword: {\n          FormFields() {\n            return (\n\n              <>\n\n                <Authenticator.ForceNewPassword.FormFields />\n\n                <TextField\n                  label=\"Zone Info\"\n                  id=\"12233\"\n                  placeholder=\"Zone Info\"\n                  name=\"zoneinfo\"\n                  type=\"text\"\n                ></TextField>\n\n              </>\n            );\n          },\n        },\n      }}\n    >\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\nSign Up Field Order\n\nThe authenticator allows a custom order of sign up fields on the Sign Up page.\n\nOrder is determined by a formFields prop that is passed into the Authenticator component. This prop will have the signUp key with a list of all the input fields. Each input field will have an order key that specifies which order it will be displayed on the page.\n\nIn the example below the order will be set as email, family_name, birthdate, preferred_username, password and finally confirm_password.\n\nNote: Fields that do not have a order key will be displayed at the bottom of the Sign Up page. The order key can also be combined with other form field updates. In addition, typically attributes added to the sign up page have already been inferred through Zero Configuration. However, you can explicitly set the sign up attributes prop to add these to the sign up page if needed.\n\n\nconst formFields = {\n\n   signUp: {\n\n     email: {\n\n       order:1\n\n     },\n\n     family_name: {\n\n       order: 2\n\n     },\n\n     preferred_username: {\n       order: 4\n     },\n     birthdate: {\n       order: 3\n     },\n     password: {\n       order: 5\n     },\n     confirm_password: {\n       order: 6\n     }\n   },\n  }\n\n\n// Adding the signUpAttributes prop is typically not needed since attributes are inferred via Zero Configuration.\n// For the sake of this example they have been explicitly added so you can copy and paste this into your own application and see it work. \nconst signUpAttributes={['birthdate', 'family_name', 'preferred_username']}\n\nexport default function App() {\n  return (\n    <Authenticator formFields={formFields} signUpAttributes={signUpAttributes}>\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\nLogin\nRegister\nEnter your email\nFamily Name\nBirthdate\nPreferred Username\nEnter your password\nPassword is hidden\nConfirm your password\nPassword is hidden\nRegister\nForm Field Customization\n\nThe Authenticator allows for customization of multiple aspects of the form fields. The sections below will describe several use cases, on how to modify these fields.\n\nOverall, the following attributes are allowed to be modified on any input as described in the labels and placeholder section:\n\nplaceholder label\n\nAdditionally, you'll be able to show or hide the label of each form field by using labelHidden and set a field to required or not required with isRequired.\n\nFor customers wishing to change a phone number field, a new dialCode and dialCodeList key are now available as described in the dialCode and dialCodeList.\n\nFor a full list of component names and field names can be found in the input form table.\n\nUpdating labels, placeholders, required fields and showing labels\n\nYou can customize any label, placeholder, set a field as required or not required, and hide or show labels by configuring the formFields props, and passing it into the Authenticator component. To use this feature create a formFields prop and include the component name as a key. Inside that object you can list all the inputs you'd like to change by their name. Inputs can have additional client side validation by following HTML form validation standards.\n\nNote: Specifying formFields for a given field will overwrite any default attributes. To include defaults, you must re-specify them as shown below.\n\nThe following example customizes the Sign In page by:\n\nUpdating the placeholder with placeholder.\nSetting required to true with isRequired. username is required by default, but as mentioned above, default attributes will be overwritten and must be re-declared when using formFields.\nUpdating the label text with label.\nShow the label using labelHidden set to false.\n\nNote: On the sign in page the input name is always username, regardless of the login mechanism type.\n\n\nconst formFields = {\n\n  signIn: {\n\n    username: {\n\n      placeholder: 'Enter Your Email Here',\n\n      isRequired: true,\n\n      label: 'Email:'\n\n    },\n\n  },\n\n}\n\n\nexport default function App() {\n  return (\n    <Authenticator formFields={formFields}>\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\nLogin\nRegister\nLog in\nEmail:\nEnter your password\nPassword is hidden\nLog in\nReset Password\nDefault international dial code\n\nDefault Dial code customization is available via the dialCode form field key.\n\nThe following example will set the default dial code to +227 on the Sign Up and Sign In page.\n\n\nconst formFields = {\n\n  signIn: {\n\n    username: {\n\n      dialCode: '+227'\n\n    },\n\n  },\n\n  signUp: {\n\n    phone_number: {\n\n      dialCode: '+227'\n\n    },\n  },\n}\n\nexport default function App() {\n  return (\n    <Authenticator formFields={formFields}>\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\nLogin\nRegister\nLog in\nEnter your phone number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nEnter your password\nPassword is hidden\nLog in\nReset Password\nChange dial code list\n\nIf needed, you can update the list of dial codes shown to the user by assigning an array of dial codes to the dialCodeList.\n\nIn this example, only four dial codes are show in the drop down list for the sign in and sign up pages.\n\nNote: Make sure to add the plus sign to each dial code in the dialCodeList.\n\n\nconst formFields = {\n\n  signIn: {\n\n    username: {\n\n      dialCodeList: ['+1', '+123', '+227', '+229']\n\n    },\n\n  },\n\n  signUp: {\n\n    phone_number: {\n\n      dialCodeList: ['+1', '+123', '+227', '+229']\n\n    },\n  },\n}\n\nexport default function App() {\n  return (\n    <Authenticator formFields={formFields}>\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\nLogin\nRegister\nLog in\nEnter your phone number\nCountry code\n+1\n+123\n+227\n+229\nEnter your password\nPassword is hidden\nLog in\nReset Password\nInput Form Field Names Table\n\nHere are the various components and input names that are available for customization.\n\nComponent Name\tForm Field Names\nsignIn\tusername password\nsignUp\temail phone_number username password confirm_password preferred_username birthdate family_name middle_name given_name name nickname profile website\nconfirmSignUp\tconfirmation_code\nforgotPassword\tusername\nconfirmResetPassword\tconfirmation_code password confirm_password\nforceNewPassword\tpassword confirm_password\nsetupTotp\tconfirmation_code\nconfirmSignIn\tconfirmation_code\nconfirmVerifyUser\tconfirmation_code\n\nNote: Custom sign up attributes not listed in this table are customizable. Use the form field name as the key.\n\nUpdate Setup TOTP QR Issuer and Username\n\nWhen setting up TOTP you can customize the issuer and username that will be shown in TOTP applications. This can be done by adding the formFields prop to the Authenticator component with a setupTotp key. The setupTotp should have a QR key with a totpIssuer and or totpUsername as seen in the example below.\n\nNote: Unless changed, the default issuer is AWSCognito and username will be the current user.username for the user signing up.\n\n\nconst formFields = {\n\n  setupTotp: {\n\n        QR: {\n\n          totpIssuer: 'test issuer',\n\n          totpUsername: 'amplify_qr_test_user',\n\n        },\n\n      },\n\n  }\n\n\nexport default function App() {\n  return (\n    <Authenticator formFields={formFields}>\n      {({ signOut }) => <button onClick={signOut}>Sign out</button>}\n    </Authenticator>\n  );\n}\n\nStyling\n\nYou can customize the Authenticator's default style by using CSS variables.\n\nCSS style\n\nThe example below uses a <style> tag to change the appearance of some of the components used for the Authenticator:\n\n\n[data-amplify-authenticator] {\n  --amplify-components-authenticator-router-box-shadow: 0 0 16px var(--amplify-colors-overlay-10);\n  --amplify-components-authenticator-router-border-width: 0;\n  --amplify-components-authenticator-form-padding: var(--amplify-space-medium) var(--amplify-space-xl) var(--amplify-space-xl);\n  --amplify-components-button-primary-background-color: var(--amplify-colors-neutral-100);\n  --amplify-components-fieldcontrol-focus-box-shadow: 0 0 0 2px var(--amplify-colors-purple-60);\n  --amplify-components-tabs-item-active-border-color: var(--amplify-colors-neutral-100);\n  --amplify-components-tabs-item-color: var(--amplify-colors-neutral-80);\n  --amplify-components-tabs-item-active-color: var(--amplify-colors-purple-100);\n  --amplify-components-button-link-color: var(--amplify-colors-purple-80);\n}\n\n\nLogin\nRegister\nLog in\nEnter your username\nEnter your password\nPassword is hidden\nLog in\nReset Password\nTheme Provider Theme\n\nBelow is an example of updating the style of the Authenticator by using the ThemeProvider theme object. To do this, you must surround the Authenticator in the ThemeProvider.\n\nThen create a theme object, with all your font and color updates. Feel free to use design tokens, as a way of designing your theme further.\n\nimport {\n  Authenticator,\n  ThemeProvider,\n  Theme,\n  useTheme,\n  View,\n} from '@aws-amplify/ui-react';\nexport function AuthStyle() {\n  const { tokens } = useTheme();\n  const theme: Theme = {\n    name: 'Auth Example Theme',\n    tokens: {\n      components: {\n        authenticator: {\n          router: {\n            boxShadow: `0 0 16px ${tokens.colors.overlay['10']}`,\n            borderWidth: '0',\n          },\n          form: {\n            padding: `${tokens.space.medium} ${tokens.space.xl} ${tokens.space.medium}`,\n          },\n        },\n        button: {\n          primary: {\n            backgroundColor: tokens.colors.neutral['100'],\n          },\n          link: {\n            color: tokens.colors.purple['80'],\n          },\n        },\n        fieldcontrol: {\n          _focus: {\n            boxShadow: `0 0 0 2px ${tokens.colors.purple['60']}`,\n          },\n        },\n        tabs: {\n          item: {\n            color: tokens.colors.neutral['80'],\n            _active: {\n              borderColor: tokens.colors.neutral['100'],\n              color: tokens.colors.purple['100'],\n            },\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <View padding=\"xxl\">\n        <Authenticator />\n      </View>\n    </ThemeProvider>\n  );\n}\n\nLogin\nRegister\nLog in\nEnter your username\nEnter your password\nPassword is hidden\nLog in\nReset Password\n\nIf you have TypeScript enabled, all the object keys will be present when creating the theme object. This will help speed up your development time while creating themes.\n\nAdditional CSS Styling\n\nYou can also override the authenticator's amplify-* classes. For example, if you'd like to update the primary color of your submit button you can override the amplify-button class.\n\n.amplify-button--primary {\n  background: linear-gradient(\n    to right,\n    var(--amplify-colors-green-80),\n    var(--amplify-colors-orange-40)\n  );\n}\n\nLogin\nRegister\nLog in\nEnter your username\nEnter your password\nPassword is hidden\nLog in\nReset Password"
  },
  {
    "title": "Configuration | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/authenticator/configuration",
    "html": "Configuration\n\nHow to setup and configure your Authenticator component.\n\nFeedback\nWait!\n\nDid you follow the quick start instructions to set up the Authenticator first?\n\nInitial State\n\nBy default, unauthenticated users are redirected to the Sign In flow. You can explicitly redirect to Sign Up or Forgot Password:\n\nSign In\nSign Up\nForgot Password\nexport default function App() {\n  return (\n\n    <Authenticator>\n\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\n\nSign In\nCreate Account\nSign in\nUsername\nPassword\nPassword is hidden\nSign in\nForgot your password?\nLogin Mechanisms\nZero Configuration\n\nThe Authenticator automatically infers loginMechanisms from the current Amplify configuration, but can be explicitly defined as seen below.\n\nWithout the zero configuration, the Authenticator by default creates new users in the Amazon Cognito UserPool based on a unique username.\n\nYou can provide an alternative to username such as email or phone_number.\n\nNote: A username, email, or phone_number value is required for Cognito User Pools. The username field will only work with Gen 1 Auth. For more information about using username see the docs.\n\nEmail\nPhone Number\nUsername\n<Authenticator loginMechanisms={['email']}>\n  {({ signOut, user }) => (\n\n    <main>\n\n      <h1>Hello {user.username}</h1>\n      <button onClick={signOut}>Sign out</button>\n    </main>\n  )}\n</Authenticator>\n\nSign In\nCreate Account\nSign in\nEmail\nPassword\nPassword is hidden\nSign in\nForgot your password?\nSign Up Attributes\nZero Configuration\n\nThe Authenticator automatically infers signUpAttributes from amplify pull, but can be explicitly defined as seen below.\n\nThe Authenticator automatically renders most Cognito User Pools attributes, with the exception of address, gender, locale, picture, updated_at, and zoneinfo. Because these are often app-specific, they can be customized via Sign Up fields.\n\nVerification Attributes\nAll Attributes\n\nBy default, the Authenticator will still require any attributes required for verification, such as email, even if signUpAttributes is empty:\n\nexport default function App() {\n  return (\n\n    <Authenticator signUpAttributes={[]}>\n\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\n\nSign In\nCreate Account\nUsername\nPassword\nPassword is hidden\nConfirm Password\nPassword is hidden\nEmail\nCreate Account\nSocial Providers\nZero Configuration\n\nThe Authenticator automatically infers socialProviders from amplify pull, but can be explicitly defined as seen below.\n\nFor your configured social providers, you can also provide amazon, facebook, or google:\n\nexport default function App() {\n  return (\n\n    <Authenticator socialProviders={['amazon', 'apple', 'facebook', 'google']}>\n\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\n\nSign In\nCreate Account\nSign In with Amazon\nSign In with Apple\nSign In with Facebook\nSign In with Google\nSign in\nUsername\nPassword\nPassword is hidden\nSign in\nForgot your password?\n\nStep by step video on setting up social providers.\n\nVariation\n\nThe Authenticator has multiple variations to meet the needs of your application.\n\ndefault\nmodal\n\nBy default, the Authenticator will render as a centered card within the container:\n\nexport default function App() {\n  return (\n\n    <Authenticator>\n\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\n\nSign In\nCreate Account\nSign in\nUsername\nPassword\nPassword is hidden\nSign in\nForgot your password?\nHide Sign Up\n\nThe Authenticator has an option to hide the sign up page including the Create Account tab.\n\n<Authenticator hideSignUp />\n\nSign in\nUsername\nPassword\nPassword is hidden\nSign in\nForgot your password?"
  },
  {
    "title": "Authenticator | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/connected-components/authenticator",
    "html": "Authenticator\n\nAuthenticator component adds complete authentication flows to your application with minimal boilerplate.\n\nFeedback\n@aws-amplify/ui-react v5\nThe @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.\n\nThe Authenticator component adds complete authentication flows to your application with minimal boilerplate.\n\nSign In\nCreate Account\nSign in\nUsername\nPassword\nPassword is hidden\nSign in\nForgot your password?\nQuick start\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nSetup with Amplify Gen 2 backend\n\nTo get up and running with the Authenticator, follow the Amplify Gen2 quickstart guide.\n\nSetup with Amplify Gen 1 backend\n\nTo setup Amplify using the Gen1 CLI, follow the steps below:\n\nStep 1. Configure backend\n\nThe Authenticator works seamlessly with the Amplify CLI to automatically work with your backend.\n\nFirst, update @aws-amplify/cli with npm or yarn if you're using a version before 6.4.0:\n\nnpm\nyarn\nnpm install -g @aws-amplify/cli@latest\nCopy\n\nNow that you have the Amplify CLI installed, you can set up your Amplify project by running amplify init in your project's root directory. Then run amplify add auth and follow the prompts to add authentication to your backend configuration.\n\nIf you have an existing backend, run amplify pull to sync your aws-exports.js with your cloud backend.\n\nYou should now have an aws-exports.js file in your src/ directory with your latest backend configuration.\n\nStep 2. Install dependencies\nnpm\nyarn\nnpm install @aws-amplify/ui-react aws-amplify\nCopy\nStep 3. Add the Authenticator\n\nThe quickest way to get started is by wrapping your application with the Authenticator component. Once an end-user has created an account & signed in, the underlying component is rendered with access to the user.\n\nYou can use the Authenticator component directly, or wrap your app in withAuthenticator Higher-Order Component:\n\nAuthenticator\nwithAuthenticator\nimport React from 'react';\nimport { Amplify } from 'aws-amplify';\n\n\n\nimport { Authenticator } from '@aws-amplify/ui-react';\n\nimport '@aws-amplify/ui-react/styles.css';\n\nimport awsExports from './aws-exports';\nAmplify.configure(awsExports);\n\nexport default function App() {\n\n  return (\n\n    <Authenticator>\n\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\n\nReact Authenticator v1\n\nLooking for a previous version of Authenticator? Checkout the Authenticator v1 documentation.\n\nPlease see troubleshooting if you have trouble building or running your application with Authenticator.\n\nNext steps\nConfiguration\nHow to setup and configure your Authenticator component\nCustomization\nOverride and customize your Authenticator\nAdvanced Usage\nAccess Authenticator UI component state outside of the UI component"
  },
  {
    "title": "VisuallyHidden | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/visuallyhidden",
    "html": "VisuallyHidden\n\nVisuallyHidden is used to visually hide content while leaving it available for screen readers.\n\nReact source\nFeedback\nDocumentation\nProps\n\nThere are some common scenarios where you might need the VisuallyHidden primitive:\n\nTo provide an accessible alternative to icon only buttons\nTo provide additional context for screen reader users regarding interface interactions.\nCombined with ARIA attributes such as aria-live, to announce context when a change in the interface occurs.\n\nSince the VisuallyHidden element is hidden using the CSS clip property, and not display: none, the element is still available to assistive technologies.\n\nNote\n\nIt's a good practice to consider if your VisuallyHidden content would be better served as visible for all; that way everyone benefits from the additional context.\n\nUsage\n\nImport the VisuallyHidden primitive.\n\nMark as complete\nCopy\nimport { Button, VisuallyHidden, Icon } from '@aws-amplify/ui-react';\n\nconst IconDone = () => {\n  return (\n    <Icon\n      pathData=\"M9 16.2001L4.8 12.0001L3.4 13.4001L9 19.0001L21 7.0001L19.6 5.6001L9 16.2001Z\"\n      ariaLabel=\"\"\n    />\n  );\n};\n\nexport const DefaultVisuallyHiddenExample = () => {\n  return (\n    <Button variation=\"primary\">\n      <VisuallyHidden>Mark as complete</VisuallyHidden>\n      <IconDone />\n    </Button>\n  );\n};\n\nCSS Styling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-visually-hidden\tTop level element that wraps the VisuallyHidden primitive"
  },
  {
    "title": "Rating | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/rating",
    "html": "Rating\n\nRating displays a read-only star rating of a product or service.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\n2 out of 5 rating\nvalue\nmaxValue\nsize\nsmall\nmedium\nlarge\nfillColor\nemptyColor\nCopy\n<Rating\n  value={2}\n  maxValue={5}\n  fillColor=\"hsl(300, 95%, 30%)\"\n  emptyColor=\"hsl(210, 5%, 94%)\"\n  />\nUsage\n\nImport Rating component\n\n0 out of 5 rating\nCopy\nimport { Rating } from '@aws-amplify/ui-react';\n\nexport const DefaultRatingExample = () => {\n  return <Rating />;\n};\n\nValue\n\nPass in a value prop to set the Rating value.\n\n3.7 out of 5 rating\nCopy\nimport { Rating } from '@aws-amplify/ui-react';\n\nexport const RatingValueExample = () => {\n  return <Rating value={3.7} />;\n};\n\nMax Value\n\nPass in an optional maxValue prop to set the maximum value of the Rating component (default maxValue is 5).\n\n6.3 out of 10 rating\nCopy\nimport { Rating } from '@aws-amplify/ui-react';\n\nexport const RatingMaxExample = () => {\n  return <Rating value={6.3} maxValue={10} />;\n};\n\nSize\n\nUse the size prop to adjust the size of the Rating component. Options include small, large, and none (default).\n\n2.5 out of 5 rating\n2.5 out of 5 rating\n2.5 out of 5 rating\nCopy\nimport { Rating } from '@aws-amplify/ui-react';\n\nexport const RatingSizeExample = () => {\n  return (\n    <>\n      <Rating value={2.5} size=\"small\" />\n      <Rating value={2.5} />\n      <Rating value={2.5} size=\"large\" />\n    </>\n  );\n};\n\nColors\n\nThe fill color and empty color can be set using the fillColor and emptyColor props.\n\n2.5 out of 5 rating\nCopy\nimport { Rating, useTheme } from '@aws-amplify/ui-react';\n\nexport const RatingColorExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Rating\n      value={2.5}\n      fillColor={tokens.colors.red[60]}\n      emptyColor={tokens.colors.green[60]}\n    />\n  );\n};\n\nCustom Icon\n\nA custom icon can be used in the Rating component using the icon prop. The Rating component works well with all major icon sets and these icons can be substituted in using this icon prop. The icon prop will override both the filled and empty icons unless a specific empty icon is also passed in.\n\n2.5 out of 5 rating\nCopy\nimport { Rating, Icon } from '@aws-amplify/ui-react';\n\nconst IconAdd = () => {\n  return <Icon pathData=\"M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z\" />;\n};\n\nexport const RatingIconExample = () => {\n  return <Rating value={2.5} icon={<IconAdd />} />;\n};\n\nCustom SVG Icon\n\nA custom SVG may be used with the Rating component. The color props on the Rating component rely on the svg icon being used inheriting the color property and setting the svg fill to currentColor.\n\n2.5 out of 5 rating\nCopy\n/* styles.css */\n.my-cool-svg {\n  fill: currentColor;\n}\n\nCopy\nimport { Rating } from '@aws-amplify/ui-react';\n\nconst MyCoolSvg = () => {\n  return (\n    <svg className=\"my-cool-svg\">\n      <g>\n        <g>\n          <path d=\"M14.5,17c0,1.65-1.35,3-3,3s-3-1.35-3-3h2c0,0.55,0.45,1,1,1s1-0.45,1-1s-0.45-1-1-1H2v-2h9.5 C13.15,14,14.5,15.35,14.5,17z M19,6.5C19,4.57,17.43,3,15.5,3S12,4.57,12,6.5h2C14,5.67,14.67,5,15.5,5S17,5.67,17,6.5 S16.33,8,15.5,8H2v2h13.5C17.43,10,19,8.43,19,6.5z M18.5,11H2v2h16.5c0.83,0,1.5,0.67,1.5,1.5S19.33,16,18.5,16v2 c1.93,0,3.5-1.57,3.5-3.5S20.43,11,18.5,11z\" />\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nexport const RatingSVGExample = () => {\n  return <Rating value={2.5} icon={<MyCoolSvg />} />;\n};\n\nCustom Empty Icon\n\nA custom empty icon can be used in the Rating component using the emptyIcon prop. The emptyIcon prop will only affect the empty icon being rendered and by passing in an empty icon there will be different icons being rendered for the empty icons and filled icons. This is in contrast to the icon prop which will override both the empty and filled icons being used.\n\n2.5 out of 5 rating\nCopy\nimport { Rating, Icon } from '@aws-amplify/ui-react';\n\nconst IconStarBorder = () => {\n  return (\n    <Icon pathData=\"M22 9.24L14.81 8.62L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27L18.18 21L16.55 13.97L22 9.24ZM12 15.4L8.24 17.67L9.24 13.39L5.92 10.51L10.3 10.13L12 6.1L13.71 10.14L18.09 10.52L14.77 13.4L15.77 17.68L12 15.4Z\" />\n  );\n};\n\nexport const RatingEmptyExample = () => {\n  return <Rating value={2.5} emptyIcon={<IconStarBorder />} />;\n};\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all Rating components in your application with a Theme.\n\nRating Theme Source\n\n3 out of 5 rating\n3.5 out of 5 rating\n5 out of 5 rating\nCopy\nimport { Rating, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'rating-theme',\n  tokens: {\n    components: {\n      rating: {\n        filled: { color: { value: '{colors.yellow.60}' } },\n        empty: { color: { value: '{colors.neutral.40}' } },\n        small: { size: { value: '{fontSizes.xxs}' } },\n        default: { size: { value: '{fontSizes.large}' } },\n        large: { size: { value: '{fontSizes.xxxl}' } },\n      },\n    },\n  },\n};\n\nexport const RatingThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex direction=\"column\">\n      <Rating value={3} size=\"small\" />\n      <Rating value={3.5} />\n      <Rating value={5} size=\"large\" />\n    </Flex>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-rating\tTop level element that wraps the Rating primitive\namplify-rating__item\tEach element in the Rating primitive\namplify-rating__icon\tThe icons in the Rating primitive\namplify-rating__label\tTop level element that wraps the Rating primitive\nGlobal styling\n\nTo override styling on all Rating components, you can set the Amplify CSS variables or use the built-in .amplify-rating classes.\n\nFilled and empty icon colors\n\nThe empty and filled icon colors can be overridden using css variables or the .amplify-rating-icon-filled and .amplify-rating-icon-empty classes.\n\n2.5 out of 5 rating\nCopy\n/* styles.css */\n:root {\n  --amplify-components-rating-filled-color: var(--amplify-colors-purple-60);\n  --amplify-components-rating-empty-color: var(--amplify-colors-blue-60);\n}\n/* OR */\n.amplify-rating-icon-filled {\n  color: var(--amplify-colors-purple-60);\n}\n\n.amplify-rating-icon-empty {\n  color: var(--amplify-colors-blue-60);\n}\n\nSizes\n\nThe size variations on the Rating component can be overridden at the application level using CSS variables\n\n2.5 out of 5 rating\nCopy\n  /* styles.css */\n  :root {\n    --amplify-components-rating-small-size: var(--amplify-font-sizes-xxxl);\n  }\n  /* OR */\n  .amplify-rating[data-size=small] {\n    font-size: var(--amplify-font-sizes-xxxl);\n    line-height: var(--amplify-font-sizes-xxxl);\n  }\n\nLocal styling\n\nThe Rating component styling props can be overridden using a custom class name and the built-in CSS classes.\n\nFilled and empty icon colors\n\nThe empty and filled icon colors can be overridden using a custom CSS class on your Rating component and with the .amplify-rating-icon-filled and .amplify-rating-icon-empty classes\n\n2.5 out of 5 rating\nCopy\n.my-rating-component .amplify-rating-icon-filled {\n  color: var(--amplify-colors-purple-60);\n}\n\n.my-rating-component .amplify-rating-icon-empty {\n  color: var(--amplify-colors-blue-60);\n}\n\nCopy\nimport { Rating } from '@aws-amplify/ui-react';\n\nexport const RatingStyleColorExample = () => {\n  return <Rating value={2.5} className=\"my-rating-component\" />;\n};\n\nSizes\n\nThe size variations on the Rating component can be overridden at the individual component level. Here we override the small size to display xxxl stars.\n\n2.5 out of 5 rating\nCopy\n/* styles.css */\n.large-rating[data-size='small'] {\n  font-size: var(--amplify-font-sizes-xxxl);\n  line-height: var(--amplify-font-sizes-xxxl);\n}\n\nCopy\nimport { Rating } from '@aws-amplify/ui-react';\n\nexport const RatingStyleSizeExample = () => {\n  return <Rating value={2.5} className=\"large-rating\" size=\"small\" />;\n};\n"
  },
  {
    "title": "HighlightMatch | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/highlightmatch",
    "html": "HighlightMatch\n\nHighlightMatch is used to highlight a substring of a text.\n\nReact source\nFeedback\nDocumentation\nProps\nDemo\nThis is a highlighted string.\nQuery\nMain text\nCopy\n<HighlightMatch query=\"highlighted string\">\n  This is a highlighted string.\n</HighlightMatch>\nUsage\n\nImport the HighlightMatch primitive. Render the text as children of the HighlightMatch, then pass the word you want to highlight to the query prop.\n\nThis is the highlighted part.\nCopy\nimport { HighlightMatch } from '@aws-amplify/ui-react';\n\nexport const HighlightMatchDefaultExample = () => {\n  return (\n    <HighlightMatch query=\"highlighted part\">\n      This is the highlighted part.\n    </HighlightMatch>\n  );\n};\n\n\nNote: The query for the text is case insensitive.\n\nStyling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-highlightmatch\tTop level element that wraps the HighlightMatch primitive\namplify-highlightmatch__highlighted\tClass applied to the highlighted text of the HighlightMatch primitive"
  },
  {
    "title": "Table | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/table",
    "html": "Table\n\nTable displays tabular data using the HTML <table> element and related elements.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nCitrus\tStone Fruit\tBerry\nOrange\tNectarine\tRaspberry\nGrapefruit\tApricot\tBlueberry\nLime\tPeach\tStrawberry\ncaption\nhighlightOnHover\nsize\n(default)\nsmall\nlarge\nvariation\n(default)\nbordered\nstriped\nCopy\n\n\n<Table\n  caption=\"\"\n  highlightOnHover={false}>\n  <TableHead>\n    <TableRow>\n      <TableCell as=\"th\">Citrus</TableCell>\n      <TableCell as=\"th\">Stone Fruit</TableCell>\n      <TableCell as=\"th\">Berry</TableCell>\n    </TableRow>\n  </TableHead>\n  <TableBody>\n    <TableRow>\n      <TableCell>Orange</TableCell>\n      <TableCell>Nectarine</TableCell>\n      <TableCell>Raspberry</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Grapefruit</TableCell>\n      <TableCell>Apricot</TableCell>\n      <TableCell>Blueberry</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Lime</TableCell>\n      <TableCell>Peach</TableCell>\n      <TableCell>Strawberry</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n  \nUsage\n\nThe Table primitive and its various components can be used similiarly to how the HTML table, tbody, td, tfoot, th, thead, and tr elements are used.\n\nCopy\nimport {\n  Table,\n  TableCell,\n  TableBody,\n  TableHead,\n  TableRow,\n} from '@aws-amplify/ui-react';\n\nexport const BasicExample = ({\n  caption,\n  highlightOnHover,\n  size,\n  variation,\n}) => (\n  <Table\n    caption={caption}\n    highlightOnHover={highlightOnHover}\n    size={size}\n    variation={variation}\n  >\n    <TableHead>\n      <TableRow>\n        <TableCell as=\"th\">Citrus</TableCell>\n        <TableCell as=\"th\">Stone Fruit</TableCell>\n        <TableCell as=\"th\">Berry</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      <TableRow>\n        <TableCell>Orange</TableCell>\n        <TableCell>Nectarine</TableCell>\n        <TableCell>Raspberry</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Grapefruit</TableCell>\n        <TableCell>Apricot</TableCell>\n        <TableCell>Blueberry</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Lime</TableCell>\n        <TableCell>Peach</TableCell>\n        <TableCell>Strawberry</TableCell>\n      </TableRow>\n    </TableBody>\n  </Table>\n);\n\nSize\n\nControl the cell height and font size of a Table using the size prop. Available options are small, none (default), and large.\n\nSmall Table\nSmall\tSmall\nSmall\tSmall\nDefault Table\nDefault\tDefault\nDefault\tDefault\nLarge Table\nLarge\tLarge\nLarge\tLarge\nCopy\nimport { Flex, Table, TableCell, TableRow } from '@aws-amplify/ui-react';\n\nexport const SizeExample = () => (\n  <Flex direction=\"column\">\n    <Table caption=\"Small Table\" size=\"small\">\n      <TableRow>\n        <TableCell>Small</TableCell>\n        <TableCell>Small</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Small</TableCell>\n        <TableCell>Small</TableCell>\n      </TableRow>\n    </Table>\n    <Table caption=\"Default Table\">\n      <TableRow>\n        <TableCell>Default</TableCell>\n        <TableCell>Default</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Default</TableCell>\n        <TableCell>Default</TableCell>\n      </TableRow>\n    </Table>\n    <Table caption=\"Large Table\" size=\"large\">\n      <TableRow>\n        <TableCell>Large</TableCell>\n        <TableCell>Large</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Large</TableCell>\n        <TableCell>Large</TableCell>\n      </TableRow>\n    </Table>\n  </Flex>\n);\n\nVariation\n\nThe variation prop can be used to make all cells bordered or rows striped. Note that the striped variation doesn't apply to rows in a TableHead tag.\n\nBordered\tBordered\nBordered\tBordered\nBordered\tBordered\nStriped\tStriped\nStriped\tStriped\nStriped\tStriped\nCopy\nimport { Flex, Table, TableCell, TableRow } from '@aws-amplify/ui-react';\n\nexport const VariationExample = () => (\n  <Flex direction=\"column\">\n    <Table variation=\"bordered\">\n      <TableRow>\n        <TableCell>Bordered</TableCell>\n        <TableCell>Bordered</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Bordered</TableCell>\n        <TableCell>Bordered</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Bordered</TableCell>\n        <TableCell>Bordered</TableCell>\n      </TableRow>\n    </Table>\n    <Table variation=\"striped\">\n      <TableRow>\n        <TableCell>Striped</TableCell>\n        <TableCell>Striped</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Striped</TableCell>\n        <TableCell>Striped</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Striped</TableCell>\n        <TableCell>Striped</TableCell>\n      </TableRow>\n    </Table>\n  </Flex>\n);\n\nHighlight on Hover\n\nThe highlightOnHover prop can be used to change the background color of table rows upon mouse hover. Note that rows in a TableHead tag are not highlighted.\n\nNot highlighted\nHighlighted on hover\tHighlighted on hover\nHighlighted on hover\tHighlighted on hover\nCopy\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from '@aws-amplify/ui-react';\n\nexport const HighlightExample = () => (\n  <Table highlightOnHover={true}>\n    <TableHead>\n      <TableRow>\n        <TableCell as=\"th\" colSpan={2}>\n          Not highlighted\n        </TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      <TableRow>\n        <TableCell>Highlighted on hover</TableCell>\n        <TableCell>Highlighted on hover</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Highlighted on hover</TableCell>\n        <TableCell>Highlighted on hover</TableCell>\n      </TableRow>\n    </TableBody>\n  </Table>\n);\n\nTableCell\nth and td cells\n\nThe TableCell is used for all data presented in a table. If a cell is intended to be a heading for a row or column, it's recommended to set the cell as a th element using the as property:\n\n<TableCell as=\"th\">Column Header</TableCell>\n\n\nBy default, the TableCell is rendered as a td element.\n\nSpanning multiple columns or rows\n\nThe TableCell component can be made to span multiple columns or rows using the colspan or rowspan properties, respectively. This is similar to how the HTML native th and td elements are made to span multiple columns and rows.\n\n\t\t\n\t\t\t\n\t\n\nCopy\nimport { Table, TableBody, TableCell, TableRow } from '@aws-amplify/ui-react';\n\nexport const SpanExample = () => (\n  <Table variation=\"bordered\">\n    <TableBody>\n      <TableRow>\n        <TableCell />\n        <TableCell />\n        <TableCell\n          colspan=\"2\"\n        />\n      </TableRow>\n      <TableRow>\n        <TableCell\n          rowspan=\"3\"\n        />\n        <TableCell />\n        <TableCell />\n        <TableCell\n          rowspan=\"3\"\n        />\n      </TableRow>\n      <TableRow>\n        <TableCell />\n        <TableCell />\n      </TableRow>\n      <TableRow>\n        <TableCell\n          colspan=\"3\"\n        />\n      </TableRow>\n    </TableBody>\n  </Table>\n);\n\nStandard HTML attributes\n\nThe Table will accept any of the standard HTML attributes that a <table> element accepts. Standard <table> attributes can be found in the MDN Documentation\n\nCitrus\tStone Fruit\tBerry\nOrange\tNectarine\tRaspberry\nGrapefruit\tApricot\tBlueberry\nCopy\n<Table title=\"Table\">\n  <TableHead>\n    <TableRow>\n      <TableCell as=\"th\">Citrus</TableCell>\n      <TableCell as=\"th\">Stone Fruit</TableCell>\n      <TableCell as=\"th\">Berry</TableCell>\n    </TableRow>\n  </TableHead>\n  <TableBody>\n    <TableRow>\n      <TableCell>Orange</TableCell>\n      <TableCell>Nectarine</TableCell>\n      <TableCell>Raspberry</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Grapefruit</TableCell>\n      <TableCell>Apricot</TableCell>\n      <TableCell>Blueberry</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all Table components in your application with a Theme.\n\nTable Theme Source\n\nCitrus\tStone Fruit\tBerry\nOrange\tNectarine\tRaspberry\nGrapefruit\tApricot\tBlueberry\nLime\tPeach\tStrawberry\nCopy\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  ThemeProvider,\n  Theme,\n} from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'table-theme',\n  tokens: {\n    components: {\n      table: {\n        row: {\n          hover: {\n            backgroundColor: { value: '{colors.blue.20}' },\n          },\n\n          striped: {\n            backgroundColor: { value: '{colors.blue.10}' },\n          },\n        },\n\n        header: {\n          color: { value: '{colors.blue.80}' },\n          fontSize: { value: '{fontSizes.xl}' },\n        },\n\n        data: {\n          fontWeight: { value: '{fontWeights.semibold}' },\n        },\n      },\n    },\n  },\n};\n\nexport const TableThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Table highlightOnHover variation=\"striped\">\n      <TableHead>\n        <TableRow>\n          <TableCell as=\"th\">Citrus</TableCell>\n          <TableCell as=\"th\">Stone Fruit</TableCell>\n          <TableCell as=\"th\">Berry</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <TableCell>Orange</TableCell>\n          <TableCell>Nectarine</TableCell>\n          <TableCell>Raspberry</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Grapefruit</TableCell>\n          <TableCell>Apricot</TableCell>\n          <TableCell>Blueberry</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>Lime</TableCell>\n          <TableCell>Peach</TableCell>\n          <TableCell>Strawberry</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-table\tTop level element that wraps the Table primitive\namplify-table__caption\tClass applied to the content provided as the caption prop\namplify-table__body\tClass applied to TableBody component\namplify-table__td\tClass applied to TableCell component rendered as a <td> element (<TableCell as=\"td\" />)\namplify-table__th\tClass applied to TableCell comopnent rendered as a <th> element (<TableCell as=\"th\" />)\namplify-table__foot\tClass applied to TableFoot component\namplify-table__head\tClass applied to TableHead component\namplify-table__row\tClass applied to TableRow component\nGlobal Styling\n\nEach component related to the Table primitive has its own class name which may be used to override styling with custom CSS.\n\nTable Title\nA short table description\n\tA\tB\tC\n1\tA1\tB1\tC1\n2\tA2\tB2\tC2\n3\tA3\tB3\tC3\nCopy\n/* styles.css */\n.amplify-table__th {\n  background-color: var(--amplify-colors-background-tertiary);\n}\n\n.amplify-table__th:first-child {\n  text-align: right;\n}\n\n.amplify-table__row:not(:first-child) .amplify-table__th {\n  border-top: none;\n}\n\n.amplify-table__row:not(:last-child) .amplify-table__th {\n  border-bottom: none;\n}\n\n.amplify-table__caption {\n  caption-side: top;\n  text-align: right;\n}\n\n.table-summary {\n  color: var(--amplify-colors-font-secondary);\n  font-style: italic;\n}\n\nCopy\nimport { Table, TableBody, TableCell, TableRow } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nimport './styles.css';\n\n<Table\n  className=\"global-styling-table\"\n  caption={\n    <>\n      Table Title\n      <br />\n      <span class=\"table-summary\">A short table description</span>\n    </>\n  }\n>\n  <TableBody>\n    <TableRow>\n      <TableCell as=\"th\" />\n      <TableCell as=\"th\">A</TableCell>\n      <TableCell as=\"th\">B</TableCell>\n      <TableCell as=\"th\">C</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell as=\"th\">1</TableCell>\n      <TableCell>A1</TableCell>\n      <TableCell>B1</TableCell>\n      <TableCell>C1</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell as=\"th\">2</TableCell>\n      <TableCell>A2</TableCell>\n      <TableCell>B2</TableCell>\n      <TableCell>C2</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell as=\"th\">3</TableCell>\n      <TableCell>A3</TableCell>\n      <TableCell>B3</TableCell>\n      <TableCell>C3</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>;\n\nLocal Styling\n\nTo override styling on a specific Table components, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nSmaller Text\tSmaller Text\nCopy\n/* styles.css */\n.my-custom-table .amplify-table__td {\n  font-size: var(--amplify-font-sizes-xs);\n}\n\n.my-custom-table .amplify-table__row {\n  background-color: var(--amplify-colors-neutral-60);\n}\n\nCopy\nimport './styles.css';\n\n<Table className=\"my-custom-table\">\n  <TableBody>\n    <TableRow>\n      <TableCell>Smaller Text</TableCell>\n      <TableCell>Smaller Text</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>;\n\n\nUsing data attributes:\n\nLarger Text\tLarger Text\nCopy\n/* styles.css */\n/* Override only large size styles */\n.amplify-table[data-size='large'] .amplify-table__td {\n  font-size: var(--amplify-font-sizes-xxxl);\n}\n\nCopy\nimport './styles.css';\n\n<Table size=\"large\">\n  <TableBody>\n    <TableRow>\n      <TableCell>Larger Text</TableCell>\n      <TableCell>Larger Text</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>;\n\n\nUsing style props:\n\nSmaller Text\tSmaller Text\nCopy\nimport {\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const TableStylePropExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Table>\n      <TableBody>\n        <TableRow>\n          <TableCell style={{ fontSize: `${tokens.fontSizes.xs}` }}>\n            Smaller Text\n          </TableCell>\n          <TableCell style={{ fontSize: `${tokens.fontSizes.xs}` }}>\n            Smaller Text\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n\n\n/* OR */\n\nCopy\nimport {\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const TableFontSizePropExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Table>\n      <TableBody>\n        <TableRow>\n          <TableCell fontSize={tokens.fontSizes.xs}>Smaller Text</TableCell>\n          <TableCell fontSize={tokens.fontSizes.xs}>Smaller Text</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n};\n"
  },
  {
    "title": "Badge | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/badge",
    "html": "Badge\n\nBadge is a color-coded element used to display a status or message about an item.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nBadge\nVariation\ndefault\ninfo\nerror\nwarning\nsuccess\nSize\ndefault\nsmall\nlarge\nText\nCopy\n<Badge>\n  Badge\n</Badge>\nUsage\n\nImport the Badge primitive and styles.\n\nDefault badge\nCopy\nimport { Badge } from '@aws-amplify/ui-react';\n\nexport const DefaultBadgeExample = () => <Badge>Default badge</Badge>;\n\nVariations\n\nUse the variation prop to change the Badge variation. Available options are info, error, warning, success, and none (default).\n\nInfoErrorWarningSuccessDefault\nCopy\nimport { Badge } from '@aws-amplify/ui-react';\n\nexport const BadgeVariationExample = () => (\n  <>\n    <Badge variation=\"info\">Info</Badge>\n    <Badge variation=\"error\">Error</Badge>\n    <Badge variation=\"warning\">Warning</Badge>\n    <Badge variation=\"success\">Success</Badge>\n    <Badge>Default</Badge>\n  </>\n);\n\nSizes\n\nUse the size prop to change the Badge size. Available options are small, large, and none (default).\n\nSmallDefaultLarge\nCopy\nimport { Badge } from '@aws-amplify/ui-react';\n\nexport const BadgeSizeExample = () => (\n  <>\n    <Badge size=\"small\">Small</Badge>\n    <Badge>Default</Badge>\n    <Badge size=\"large\">Large</Badge>\n  </>\n);\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all Badge components in your application with a Theme.\n\nBadge Theme Source\n\nDefault\nSuccess\nLarge\nCopy\nimport { Badge, ThemeProvider, Theme, Flex } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'badge-theme',\n  tokens: {\n    components: {\n      badge: {\n        // Default styles\n        color: { value: '{colors.white}' },\n        fontWeight: { value: '{fontWeights.normal}' },\n        fontSize: { value: '{fontSizes.medium}' },\n        backgroundColor: { value: '{colors.blue.80}' },\n        paddingVertical: { value: '{space.small}' },\n        paddingHorizontal: { value: '{space.medium}' },\n        borderRadius: { value: '{radii.small}' },\n\n        // Variations\n        success: {\n          color: { value: '{colors.black}' },\n          backgroundColor: { value: '{colors.green.60}' },\n        },\n\n        // Sizes\n        large: {\n          fontSize: { value: '{fontSizes.xxl}' },\n        },\n      },\n    },\n  },\n};\n\nexport const BadgeThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex alignItems=\"flex-end\">\n      <Badge>Default</Badge>\n      <Badge variation=\"success\">Success</Badge>\n      <Badge size=\"large\">Large</Badge>\n    </Flex>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-badge\tTop level element that wraps the Badge component\nGlobal styling\n\nTo override styling on all Badges, you can set the Amplify CSS variables or use the built-in .amplify-badge class.\n\nCopy\n/* styles.css */\n[data-amplify-theme] {\n  --amplify-components-badge-background-color: yellow;\n}\n/* OR */\n.amplify-badge {\n  background-color: yellow;\n}\n\n\nTo replace the Badge styling, unset it:\n\nCopy\n.amplify-badge {\n  all: unset;\n  /* Add your styling here*/\n}\n\nLocal styling\n\nTo override styling on a specific Badge, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\n13\nCopy\n/* styles.css */\n.flagged {\n  color: white;\n  background-color: crimson;\n  border-radius: 3px;\n}\n\nCopy\nimport './styles.css';\n\n<Badge className=\"flagged\">13</Badge>;\n\n\nUsing data attributes:\n\n/* styles.css */\n/* Override only info variation styles */\n.amplify-badge[data-variation='info'] {\n  background-color: rebeccapurple;\n}\n\n/* Override only large size styles */\n.amplify-badge[data-size='large'] {\n  border: 1px solid black;\n}\n\nimport './styles.css';\n\n<Badge variation=\"info\">Purple background</Badge>\n<Badge size=\"large\">Black border</Badge>\n\n\nUsing style props:\n\nBadge\nCopy\nimport { Badge, useTheme } from '@aws-amplify/ui-react';\n\nexport const BadgeStyleProps = () => {\n  const { tokens } = useTheme();\n  return (\n    <Badge\n      backgroundColor={tokens.colors.secondary[20]}\n      color={tokens.colors.secondary[90]}\n    >\n      Badge\n    </Badge>\n  );\n};\n"
  },
  {
    "title": "Pagination | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/pagination",
    "html": "Pagination\n\nPagination allows users to navigate large sets of data.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nPage:\n1\n2\n3\n4\n5\n…\n10\nCurrent Page\nTotal Pages\nSibling Count\nHas More Pages\nCopy\n<Pagination\n  currentPage={1}\n  totalPages={10}\n  siblingCount={1}\n/>\nUsage\n\nImport the Pagination component. To use Pagination as an uncontrolled component, import the usePagination hook and pass it an object including the following properties:\n\ntotalPages (required)\ncurrentPage (optional, defaults to 1)\nsiblingCount (optional, defaults to 1)\nhasMorePages (optional)\nPage:\n1\n2\n3\n4\n5\n…\n8\nCopy\nimport { Pagination, usePagination } from '@aws-amplify/ui-react';\n\nexport const DefaultPaginationExample = () => {\n  const paginationProps = usePagination({ totalPages: 8 });\n\n  return <Pagination {...paginationProps} />;\n};\n\nControlled component\n\nTo use Pagination as a controlled component, you'll need to handle state using these callback functions:\n\nonNext: triggered when the next-page button > is pressed\nonPrevious: triggered when the previous-page button < is pressed\nonChange: triggered every time the page changes (e.g., when a page button is pressed directly)\nPage:\n1\n2\n3\n4\n5\nCopy\nimport * as React from 'react';\nimport { Pagination } from '@aws-amplify/ui-react';\n\nexport const ControlledPaginationExample = () => {\n  const [currentPageIndex, setCurrentPageIndex] = React.useState(1);\n  const totalPages = 5;\n\n  const handleNextPage = () => {\n    console.log('handleNextPage');\n    setCurrentPageIndex(currentPageIndex + 1);\n  };\n\n  const handlePreviousPage = () => {\n    console.log('handlePreviousPage');\n    setCurrentPageIndex(currentPageIndex - 1);\n  };\n\n  const handleOnChange = (newPageIndex, prevPageIndex) => {\n    console.log(\n      `handleOnChange \\n - newPageIndex: ${newPageIndex} \\n - prevPageIndex: ${prevPageIndex}`\n    );\n    setCurrentPageIndex(newPageIndex);\n  };\n\n  return (\n    <Pagination\n      currentPage={currentPageIndex}\n      totalPages={totalPages}\n      onNext={handleNextPage}\n      onPrevious={handlePreviousPage}\n      onChange={handleOnChange}\n    />\n  );\n};\n\nPaginating at an API level\n\nIt's common to use a paged API where the total number of pages in the dataset is unknown until you've reached the final page. To use the Pagination component in this scenario, set the totalPages prop to the total pages of content loaded from the API so far, and set hasMorePages initially to true (which enables the next button to be clicked to trigger another API call). Update the totalPages as you fetch more data. Once you reach the end of the data, set the hasMorePages to false (and thus the Pagination component's next button will be disabled). See below for a contrived example:\n\nPage:\n1\nCopy\nimport * as React from 'react';\nimport { Pagination } from '@aws-amplify/ui-react';\n\nexport const PaginationHasMorePagesExample = () => {\n  const [pageTokens, setPageTokens] = React.useState(['page2']);\n  const [currentPageIndex, setCurrentPageIndex] = React.useState(1);\n  const [hasMorePages, setHasMorePages] = React.useState(true);\n\n  const handleNextPage = async () => {\n    if (hasMorePages && currentPageIndex === pageTokens.length) {\n      const { nextToken } = await myAPI.fetch();\n\n      if (!nextToken) {\n        setHasMorePages(false);\n      }\n\n      setPageTokens([...pageTokens, nextToken]);\n    }\n\n    setCurrentPageIndex(currentPageIndex + 1);\n  };\n\n  return (\n    <Pagination\n      currentPage={currentPageIndex}\n      totalPages={pageTokens.length}\n      hasMorePages={hasMorePages}\n      onNext={handleNextPage}\n      onPrevious={() => setCurrentPageIndex(currentPageIndex - 1)}\n      onChange={(pageIndex) => setCurrentPageIndex(pageIndex)}\n    />\n  );\n};\n\nconst mockedAPI = () => {\n  const response = [\n    {\n      res: 'cat',\n      nextToken: 'page3',\n    },\n    {\n      res: 'parrot',\n      nextToken: null,\n    },\n  ];\n\n  let timesCalled = 0;\n\n  return {\n    fetch() {\n      if (timesCalled < 2) {\n        return response[timesCalled++];\n      }\n    },\n  };\n};\n\nconst myAPI = mockedAPI();\n\nSibling Count\n\nsiblingCount is an optional prop which controls the number of pages displayed on each side of the current page (defaults to 1). For example, in the demo below, notice how page 5 has two siblings to the left (3 and 4) and two siblings to the right (6 and 7).\n\n1\n…\n3\n4\nPage:\n5\n6\n7\n…\n11\nCopy\nimport { Pagination, usePagination } from '@aws-amplify/ui-react';\n\nexport const PaginationSiblingCountExample = () => {\n  const paginationProps = usePagination({\n    totalPages: 11,\n    currentPage: 5,\n\n    siblingCount: 2,\n\n  });\n\n  return <Pagination {...paginationProps} />;\n};\n\nAccessibility\n\nAccessible labels are provided for the Pagination buttons either via the aria-label attribute or by using the VisuallyHidden primitive.\n\nUse the following props to customize these labels:\n\npreviousLabel: Set the aria-label for the previous page button (defaults to Go to previous page)\n\nnextLabel: Set the aria-label for the next page button (defaults to Go to next page)\n\ncurrentPageLabel: Set the VisuallyHidden label for current page (defaults to Page). This will be used to construct the label text for current page. e.g, Page: 1 if page 1 is the current page.\n\npageLabel: Set the label for each page button other than the current page (defaults to Go to page). This will be used to construct the aria-label. e.g, Go to page 1 for page 1 button.\n\nBy default, the root node of the Pagination component is a <nav> element. Elements with the navigation role, like <nav>, require unique labels if there are multiple on the same page. Passing an aria-label to the Pagination component is one way to accomodate this.\n\nYou are on page:\n1\n2\n3\n4\n5\nCopy\nimport { usePagination, Pagination } from '@aws-amplify/ui-react';\n\nexport const PaginationAccessibilityExample = () => {\n  const paginationProps = usePagination({ totalPages: 5 });\n  return (\n    <Pagination\n      aria-label=\"Example pagination\"\n      pageLabel=\"Jump to page\"\n      currentPageLabel=\"You are on page\"\n      previousLabel=\"Back to previous page\"\n      nextLabel=\"Forward to next page\"\n      {...paginationProps}\n    />\n  );\n};\n\nStyling\nTheme\n\nYou can customize the appearance of all Pagination components in your application with a Theme.\n\nPagination Theme Source\n\nPage:\n1\n2\n3\n4\n5\n6\nCopy\nimport {\n  Pagination,\n  usePagination,\n  ThemeProvider,\n  Theme,\n} from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'pagination-theme',\n  tokens: {\n    components: {\n      pagination: {\n        current: {\n          backgroundColor: { value: '{colors.secondary.80}' },\n        },\n        button: {\n          hover: {\n            backgroundColor: { value: '{colors.neutral.40}' },\n            color: { value: '{colors.secondary.80}' },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PaginationThemeExample = () => {\n  const paginationProps = usePagination({ totalPages: 6 });\n\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Pagination {...paginationProps} />\n    </ThemeProvider>\n  );\n};\n\nIcons\nPage:\n1\n2\n3\n4\n5\n6\nCopy\nimport {\n  Pagination,\n  usePagination,\n  IconsProvider,\n} from '@aws-amplify/ui-react';\nimport { FiArrowLeft, FiArrowRight } from 'react-icons/fi';\n\nexport const PaginationIconExample = () => {\n  const paginationProps = usePagination({ totalPages: 6 });\n\n  return (\n    <IconsProvider\n      icons={{\n        pagination: {\n          next: <FiArrowRight />,\n          previous: <FiArrowLeft />,\n        },\n      }}\n    >\n      <Pagination {...paginationProps} />\n    </IconsProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-pagination\tTop level element that wraps the Pagination primitive\namplify-pagination__item\tClass applied to the pagination items\nGlobal styling\n\nTo override styling on all Pagination components, you can set the Amplify CSS variables or use the built-in .amplify-pagination class.\n\nPage:\n1\n2\n3\n4\n5\n…\n8\nCopy\n/* styles.css */\n.amplify-pagination {\n  --amplify-components-pagination-current-background-color: var(\n    --amplify-colors-red-60\n  );\n}\n\nCopy\nimport { Pagination, usePagination } from '@aws-amplify/ui-react';\nimport './styles.css';\n\nconst PaginationGlobalStylingExample = () => {\n  const paginationProps = usePagination({ totalPages: 8 });\n  return <Pagination {...paginationProps} />;\n};\n\nLocal styling\n\nTo override styling on a specific Pagination component, you can use a class selector or style props.\n\nUsing a class selector:\n\nPage:\n1\n2\n3\n4\n5\n…\n7\nCopy\n/* styles.css */\n.my-custom-pagination {\n  --amplify-components-pagination-current-background-color: var(\n    --amplify-colors-green-80\n  );\n  --amplify-components-pagination-button-hover-background-color: var(\n    --amplify-colors-blue-20\n  );\n}\n\nCopy\nimport { Pagination, usePagination } from '@aws-amplify/ui-react';\nimport './styles.css';\n\nconst PaginationClassStylingExample= () => {\n  const paginationProps = usePagination({ totalPages: 7 });\n  return <Pagination {...paginationProps} className=\"my-custom-pagination\" />;\n};\n\n\nUsing style props:\n\nPage:\n1\n2\n3\n4\n5\nCopy\nimport { Pagination, usePagination } from '@aws-amplify/ui-react';\n\nconst PaginationStylePropsExample = () => {\n  const paginationProps = usePagination({ totalPages: 5 });\n  return <Pagination {...paginationProps} backgroundColor=\"lavender\" padding=\"1rem\" />;\n};\n"
  },
  {
    "title": "Grid | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/grid",
    "html": "Grid\n\nGrid provides a layout container using CSS Grid.\n\nReact source\nFeedback\nDocumentation\nProps\n\nGrid provides a CSS Grid container with style display: grid. Any Amplify UI components can be used as grid item children. To learn how to use CSS Grid properties, see the following documentation:\n\nGrid layout - MDN\nA Complete Guide to Grid - CSS Tricks\nDemo\n\nThis demo shows how to create a basic layout using the Grid primitive.\n\nHeader\nNav\nMain\nFooter\nGrid container props\nGrid item (Header) props\nGrid item (Nav) props\nGrid item (Main) props\nGrid item (Footer) props\nCopy\n<Grid\n  columnGap=\"0.5rem\"\n  rowGap=\"0.5rem\"\n  templateColumns=\"1fr 1fr 1fr\"\n  templateRows=\"1fr 3fr 1fr\"\n>\n  <Card\n    columnStart=\"1\"\n    columnEnd=\"-1\"\n  >\n    Header\n  </Card>\n  <Card\n    columnStart=\"1\"\n    columnEnd=\"2\"\n  >\n    Nav\n  </Card>\n  <Card\n    columnStart=\"2\"\n    columnEnd=\"-1\"\n  >\n    Main\n  </Card>\n  <Card\n    columnStart=\"2\"\n    columnEnd=\"-1\"\n  >\n    Footer\n  </Card>\n</Grid>\nUsage\n\nImport the Grid primitive. Use any primitive as grid item child components.\n\nCopy\nimport { Grid, View, useTheme } from '@aws-amplify/ui-react';\n\nexport const DefaultGridExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Grid\n      templateColumns=\"1fr 1fr\"\n      templateRows=\"10rem 10rem\"\n      gap={tokens.space.small}\n    >\n      <View backgroundColor={tokens.colors.blue[10]}></View>\n      <View backgroundColor={tokens.colors.blue[20]}></View>\n      <View backgroundColor={tokens.colors.blue[40]}></View>\n      <View backgroundColor={tokens.colors.blue[60]}></View>\n    </Grid>\n  );\n};\n\nMapping Grid CSS properties to Grid props\n\nWe've shortened some of the names of the CSS properties for a cleaner prop API. See the following list prop names (CSS => Grid props):\n\nGrid container:\ngrid-auto-columns => autoColumns\ngrid-auto-flow => autoFlow\ngrid-template-areas => templateAreas\ngrid-template-columns => templateColumns\ngrid-template-rows => templateRows\ncolumn-gap => columnGap\nrow-gap => rowGrap\ngap => gap\nalign-items => alignItems\nalign-content => alignContent\njustify-content => justifyContent\nGrid items *:\ngrid-area => area\ngrid-column => column\ngrid-column-start => columnStart\ngrid-column-end => columnEnd\ngrid-row => row\ngrid-row-start => rowStart\ngrid-row-end => rowEnd\n\n*Note: rowSpan and columnSpan grid item props are transformed to row and column span rules.\n\nRow and column span\n\nUse the rowSpan or columnSpan props to stretch a grid item across multiple rows or columns. Available values are any integer value or auto. While rowSpan and columnSpan do not map to CSS properties, they are transformed to row and column style rules.\n\nCopy\nimport { Grid, View, useTheme } from '@aws-amplify/ui-react';\n\nexport const GridRowAndColumnSpanExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Grid\n      templateColumns=\"1fr 1fr\"\n      templateRows=\"10rem 10rem 10rem\"\n      gap={tokens.space.small}\n    >\n      <View columnSpan={2} backgroundColor={tokens.colors.orange[10]}></View>\n      <View rowSpan={2} backgroundColor={tokens.colors.orange[20]}></View>\n      <View backgroundColor={tokens.colors.orange[40]}></View>\n      <View backgroundColor={tokens.colors.orange[60]}></View>\n    </Grid>\n  );\n};\n\nResponsive layouts\n\nUse array or object syntax to dynamically change layout based on screen size. Resize browser to see example below.\n\nSee responsive design for more details.\n\nCopy\nimport { Grid, View, useTheme } from '@aws-amplify/ui-react';\n\nexport const GridResponsiveExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Grid\n      templateColumns={{ base: '1fr', large: '1fr 1fr' }}\n      templateRows={{ base: 'repeat(4, 10rem)', large: 'repeat(3, 10rem)' }}\n      gap={tokens.space.small}\n    >\n      <View\n        columnSpan={[1, 1, 1, 2]}\n        backgroundColor={tokens.colors.pink[10]}\n      ></View>\n      <View\n        rowSpan={{ base: 1, large: 2 }}\n        backgroundColor={tokens.colors.pink[20]}\n      ></View>\n      <View backgroundColor={tokens.colors.pink[40]}></View>\n      <View backgroundColor={tokens.colors.pink[60]}></View>\n    </Grid>\n  );\n};\n\nCSS Styling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-grid\tTop level element that wraps the Grid primitive"
  },
  {
    "title": "Collection | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/collection",
    "html": "Collection\n\nCollection provides a way to display items from a data source.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nWaterfront\nVerified\nMilford - Room #1\nBook it\nMountain\nVerified\nMilford - Room #2\nBook it\ndirection\nrow\ncolumn\ngap\nwrap\nnowrap\nwrap\nwrap-reverse\nCopy\n\n\nconst items = [\n  {\n    title: 'Milford - Room #1',\n    badges: ['Waterfront', 'Verified'],\n  },\n  {\n    title: 'Milford - Room #2',\n    badges: ['Mountain', 'Verified'],\n  },\n];\n\n\n<Collection\n  items={items}\n  type=\"list\"\n  direction=\"row\"\n  gap=\"20px\"\n  wrap=\"nowrap\"\n>\n  {(item, index) => (\n    <Card\n      key={index}\n      borderRadius=\"medium\"\n      maxWidth=\"20rem\"\n      variation=\"outlined\"\n    >\n      <Image\n        src=\"/road-to-milford-new-zealand-800w.jpg\"\n        alt=\"Glittering stream with old log, snowy mountain peaks tower over a green field.\"\n      />\n      <View padding=\"xs\">\n        <Flex>\n          {item.badges.map((badge) => (\n            <Badge\n              key={badge}\n              backgroundColor={\n                badge === 'Waterfront' ? 'blue.40' \n                : badge === 'Mountain' ? 'green.40' : 'yellow.40'}\n            >\n              {badge}\n            </Badge>\n          ))}\n        </Flex>\n        <Divider padding=\"xs\" />\n        <Heading padding=\"medium\">{item.title}</Heading>\n        <Button variation=\"primary\" isFullWidth>\n          Book it\n        </Button>\n      </View>\n    </Card>\n  )}\n</Collection>\nUsage\n\nImport the Collection component and provide your own repeating component as a function. Here's an example using the list collection type.\n\nFiordland National Park\n\nThis national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.\n\nBay of Islands, North Island\n\nThree hours north of Auckland, this area features over 144 islands to explore.\n\nQueenstown, South Island\n\nThis hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.\n\nCopy\nimport { Collection, Card, Heading, Text } from '@aws-amplify/ui-react';\n\nexport const DefaultCollectionExample = () => {\n  return (\n    <Collection\n      type=\"list\"\n      items={[\n        {\n          title: 'Fiordland National Park',\n          description:\n            'This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.',\n        },\n        {\n          title: 'Bay of Islands, North Island',\n          description:\n            'Three hours north of Auckland, this area features over 144 islands to explore.',\n        },\n        {\n          title: 'Queenstown, South Island',\n          description:\n            \"This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.\",\n        },\n      ]}\n      gap=\"1.5rem\"\n    >\n      {(item, index) => (\n        <Card key={index} padding=\"1rem\">\n          <Heading level={4}>{item.title}</Heading>\n          <Text>{item.description}</Text>\n        </Card>\n      )}\n    </Collection>\n  );\n};\n\nCollection types\n\nCollection type options include list and grid.\n\nList\n\nThe list collection type can be customized with any of following Flex props: alignItems, alignContent, direction, gap, justifyContent, wrap.\n\nFiordland National Park\n\nThis national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.\n\nBay of Islands, North Island\n\nThree hours north of Auckland, this area features over 144 islands to explore.\n\nQueenstown, South Island\n\nThis hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.\n\nCopy\nimport {\n  Collection,\n  Card,\n  Heading,\n  Text,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const ListCollectionExample = () => {\n  const { tokens } = useTheme();\n  const items = [\n    {\n      title: 'Fiordland National Park',\n      description:\n        'This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.',\n    },\n    {\n      title: 'Bay of Islands, North Island',\n      description:\n        'Three hours north of Auckland, this area features over 144 islands to explore.',\n    },\n    {\n      title: 'Queenstown, South Island',\n      description:\n        \"This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.\",\n    },\n  ];\n\n  return (\n    <Collection\n      type=\"list\"\n      items={items}\n      direction=\"row\"\n      justifyContent=\"space-between\"\n      wrap=\"wrap\"\n    >\n      {(item, index) => (\n        <Card\n          key={index}\n          padding={tokens.space.medium}\n          maxWidth=\"180px\"\n          fontSize={tokens.fontSizes.xs}\n        >\n          <Heading level={4}>{item.title}</Heading>\n          <Text>{item.description}</Text>\n        </Card>\n      )}\n    </Collection>\n  );\n};\n\nGrid\n\nThe grid collection type can be customized with the following Grid props: templateColumns and templateRows. Then the Collection children can use the Grid props to control their size and placement such as row and column.\n\nFiordland National Park\n\nThis national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.\n\nBay of Islands\n\nThree hours north of Auckland, this area features over 144 islands to explore.\n\nQueenstown, South Island\n\nThis hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.\n\nCopy\nimport {\n  Collection,\n  Card,\n  Heading,\n  Text,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const GridCollectionExample = () => {\n  const { tokens } = useTheme();\n  const items = [\n    {\n      title: 'Fiordland National Park',\n      description:\n        'This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.',\n    },\n    {\n      title: 'Bay of Islands',\n      description:\n        'Three hours north of Auckland, this area features over 144 islands to explore.',\n    },\n    {\n      title: 'Queenstown, South Island',\n      description:\n        \"This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.\",\n    },\n  ];\n\n  return (\n    <Collection\n      type=\"grid\"\n      items={items}\n      templateColumns=\"1fr 1fr 1fr\"\n      templateRows=\"12rem 12rem 12rem\"\n    >\n      {(item, index) => {\n        return (\n          <Card\n            key={index}\n            padding={tokens.space.medium}\n            maxWidth=\"180px\"\n            fontSize={tokens.fontSizes.xs}\n            backgroundColor={tokens.colors.background.secondary}\n            row={index + 1}\n            column={index + 1}\n          >\n            <Heading level={4}>{item.title}</Heading>\n            <Text>{item.description}</Text>\n          </Card>\n        );\n      }}\n    </Collection>\n  );\n};\n\nPagination\n\nA Collection can be paginated by adding a special isPaginated property. Change the page size by passing a itemsPerPage property (default: 10).\n\n🇦🇩 Andorra\n🇦🇪 United Arab Emirates\n🇦🇫 Afghanistan\n🇦🇬 Antigua and Barbuda\n🇦🇮 Anguilla\n🇦🇱 Albania\n🇦🇲 Armenia\n🇦🇴 Angola\n🇦🇶 Antarctica\n🇦🇷 Argentina\n🇦🇸 American Samoa\n🇦🇹 Austria\nPage:\n1\n2\n3\n4\n5\n…\n21\nCopy\nimport { Collection, Button } from '@aws-amplify/ui-react';\nimport { countries } from 'countries-list';\n\nexport const PaginationCollectionExample = () => {\n  return (\n    <Collection\n      type=\"list\"\n      direction=\"row\"\n      wrap=\"wrap\"\n      items={Object.values(countries).map(({ name, emoji }) => ({\n        name,\n        emoji,\n      }))}\n      isPaginated\n      itemsPerPage={12}\n    >\n      {(regions, index) => (\n        <Button grow=\"1\" key={index}>\n          {regions.emoji} {regions.name}\n        </Button>\n      )}\n    </Collection>\n  );\n};\n\nSearch\n\nCollections can also be filtered, adding a isSearchable property. Pass a custom searchFilter function to enhance your search experience (default search filter looks for any string-like property inside of items)\n\nSearch\n🇦🇩 Andorra\n🇦🇪 United Arab Emirates\n🇦🇫 Afghanistan\n🇦🇬 Antigua and Barbuda\n🇦🇮 Anguilla\n🇦🇱 Albania\n🇦🇲 Armenia\n🇦🇴 Angola\n🇦🇶 Antarctica\nPage:\n1\n2\n3\n4\n5\n…\n28\nCopy\nimport { Collection, Button } from '@aws-amplify/ui-react';\nimport { countries } from 'countries-list';\n\nexport const SearchCollectionExample = () => {\n  return (\n    <Collection\n      type=\"grid\"\n      templateColumns=\"1fr 1fr 1fr\"\n      gap=\"15px\"\n      items={Object.values(countries).map(({ name, emoji }) => ({\n        name,\n        emoji,\n      }))}\n      isSearchable\n      isPaginated\n      itemsPerPage={9}\n      searchPlaceholder=\"Type to search...\"\n      searchFilter={(regions, keyword) =>\n        (regions as any).name.toLowerCase().startsWith(keyword.toLowerCase())\n      }\n    >\n      {(regions, index) => (\n        <Button grow=\"1\" key={index}>\n          {regions.emoji} {regions.name}\n        </Button>\n      )}\n    </Collection>\n  );\n};\n\nNo Results Found\n\nTo handle the case when no results are found from the search, you can pass a custom ReactNode (includes string) to the searchNoResultsFound prop. By default, Collection renders the text \"No results found\".\n\nSearch\n🇦🇩 Andorra\n🇦🇪 United Arab Emirates\n🇦🇫 Afghanistan\n🇦🇬 Antigua and Barbuda\n🇦🇮 Anguilla\n🇦🇱 Albania\n🇦🇲 Armenia\n🇦🇴 Angola\n🇦🇶 Antarctica\nPage:\n1\n2\n3\n4\n5\n…\n28\nCopy\nimport { Collection, Button, Text, Flex } from '@aws-amplify/ui-react';\nimport { countries } from 'countries-list';\n\nexport const SearchNoResultsFoundCollectionExample = () => {\n  return (\n    <Collection\n      type=\"grid\"\n      templateColumns=\"1fr 1fr 1fr\"\n      gap=\"15px\"\n      items={Object.values(countries).map(({ name, emoji }) => ({\n        name,\n        emoji,\n      }))}\n      isSearchable\n      isPaginated\n      itemsPerPage={9}\n      searchNoResultsFound={\n        <Flex justifyContent=\"center\">\n          <Text color=\"purple.80\" fontSize=\"1rem\">\n            Nothing found, please try again\n          </Text>\n        </Flex>\n      }\n      searchPlaceholder=\"Type to search...\"\n      searchFilter={(regions, keyword) =>\n        (regions as any).name.toLowerCase().startsWith(keyword.toLowerCase())\n      }\n    >\n      {(regions, index) => (\n        <Button grow=\"1\" key={index}>\n          {regions.emoji} {regions.name}\n        </Button>\n      )}\n    </Collection>\n  );\n};\n\nCustomization\nTheme\n\nYou can customize the appearance of all Collection components in your application with a Theme.\n\nCollection Theme Source\n\nSearch\n🇦🇩 Andorra\n🇦🇪 United Arab Emirates\n🇦🇫 Afghanistan\n🇦🇬 Antigua and Barbuda\n🇦🇮 Anguilla\n🇦🇱 Albania\n🇦🇲 Armenia\n🇦🇴 Angola\n🇦🇶 Antarctica\nPage:\n1\n2\n3\n4\n5\n…\n28\nCopy\nimport {\n  Button,\n  Collection,\n  ThemeProvider,\n  Theme,\n} from '@aws-amplify/ui-react';\nimport { countries } from 'countries-list';\n\nconst theme: Theme = {\n  name: 'collection-theme',\n  tokens: {\n    components: {\n      collection: {\n        pagination: {\n          current: {\n            color: { value: 'white' },\n            backgroundColor: {\n              value: '{colors.blue.80}',\n            },\n          },\n          button: {\n            color: { value: '{colors.blue.60}' },\n            _hover: {\n              backgroundColor: {\n                value: '{colors.blue.10}',\n              },\n              color: { value: '{colors.blue.60}' },\n            },\n          },\n        },\n        search: {\n          input: {\n            color: { value: '{colors.blue.60}' },\n          },\n          button: {\n            color: { value: '{colors.blue.60}' },\n            _focus: {\n              backgroundColor: {\n                value: '{colors.blue.60}',\n              },\n              color: {\n                value: 'white',\n              },\n            },\n            _hover: {\n              backgroundColor: {\n                value: '{colors.blue.80}',\n              },\n              color: {\n                value: 'white',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const CollectionThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Collection\n        type=\"grid\"\n        templateColumns=\"1fr 1fr 1fr\"\n        gap=\"15px\"\n        items={Object.values(countries).map(({ name, emoji }) => ({\n          name,\n          emoji,\n        }))}\n        isSearchable\n        isPaginated\n        itemsPerPage={9}\n        searchPlaceholder=\"Type to search...\"\n        searchFilter={(regions, keyword) =>\n          (regions as any).name.toLowerCase().startsWith(keyword.toLowerCase())\n        }\n      >\n        {(regions, index) => (\n          <Button grow=\"1\" key={index}>\n            {regions.emoji} {regions.name}\n          </Button>\n        )}\n      </Collection>\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-collection\tTop level element that wraps the Collection primitive\namplify-collection-items\tClass applied to the element that wraps all the items in a collection\namplify-collection-search\tClass applied to the element that wraps the collection search box\namplify-collection-pagination\tClass applied to the element that wraps the pagination component in a collection\nGlobal Styling\n\nTo override the styling on all Collections you can use the built in .amplify-collection class.\n\nSearch\n🇦🇩 Andorra\n🇦🇪 United Arab Emirates\n🇦🇫 Afghanistan\n🇦🇬 Antigua and Barbuda\n🇦🇮 Anguilla\n🇦🇱 Albania\n🇦🇲 Armenia\n🇦🇴 Angola\n🇦🇶 Antarctica\nPage:\n1\n2\n3\n4\n5\n…\n28\nCopy\n.amplify-collection {\n  --amplify-components-collection-pagination-current-color: var(\n    --amplify-colors-secondary-20\n  );\n  --amplify-components-collection-pagination-current-background-color: var(\n    --amplify-colors-teal-80\n  );\n}\n\nLocal Styling\n\nTo override styling on a specific Collection, you can use a class selector or style props.\n\nUsing a class selector:\n\n🇦🇩\n🇦🇪\n🇦🇫\n🇦🇬\n🇦🇮\n🇦🇱\n🇦🇲\n🇦🇴\n🇦🇶\n🇦🇷\n🇦🇸\n🇦🇹\n🇦🇺\n🇦🇼\n🇦🇽\n🇦🇿\n🇧🇦\n🇧🇧\n🇧🇩\n🇧🇪\nCopy\nimport { Collection, Button } from '@aws-amplify/ui-react';\nimport { countries } from 'countries-list';\n\nexport const LocalCollectionClassExample = () => {\n  const items = Object.values(countries)\n    .map(({ name, emoji }) => ({\n      name,\n      emoji,\n    }))\n    .splice(0, 20);\n  return (\n    <Collection\n      type=\"list\"\n      className=\"collection-local-styling-example\"\n      direction=\"row\"\n      items={items}\n    >\n      {(regions, index) => (\n        <Button grow=\"1\" key={index}>\n          {regions.emoji}\n        </Button>\n      )}\n    </Collection>\n  );\n};\n\nCopy\n.collection-local-styling-example {\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 5px;\n}\n\n.collection-local-styling-example .amplify-collection-items {\n  flex-wrap: wrap;\n  gap: 20px;\n}\n\n.collection-local-styling-example .amplify-button {\n  background-color: var(--amplify-colors-neutral-60);\n}\n\n\nUsing style props:\n\n🇦🇩\n🇦🇪\n🇦🇫\n🇦🇬\n🇦🇮\n🇦🇱\n🇦🇲\n🇦🇴\n🇦🇶\n🇦🇷\n🇦🇸\n🇦🇹\n🇦🇺\n🇦🇼\n🇦🇽\n🇦🇿\n🇧🇦\n🇧🇧\n🇧🇩\n🇧🇪\nCopy\nimport { Collection, Button, useTheme } from '@aws-amplify/ui-react';\nimport { countries } from 'countries-list';\n\nexport const CollectionStylePropExample = () => {\n  const { tokens } = useTheme();\n  const items = Object.values(countries)\n    .map(({ name, emoji }) => ({\n      name,\n      emoji,\n    }))\n    .splice(0, 20);\n  return (\n    <Collection\n      type=\"list\"\n      border={`${tokens.borderWidths.medium} solid ${tokens.colors.red[60]}`}\n      direction=\"row\"\n      wrap=\"wrap\"\n      padding=\"5px\"\n      gap=\"20px\"\n      items={items}\n    >\n      {(regions, index) => (\n        <Button grow=\"1\" key={index}>\n          {regions.emoji}\n        </Button>\n      )}\n    </Collection>\n  );\n};\n"
  },
  {
    "title": "Flex | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/flex",
    "html": "Flex\n\nFlex provides a layout container using CSS Flexbox.\n\nReact source\nFeedback\nDocumentation\nProps\n\nThe Flex primitive provides a Flexbox container with style display: flex. To learn how to use Flexbox CSS properties, see the following documentation:\n\nFlex layout - MDN\nA Complete Guide to Flex - CSS Tricks\nDemo\ndirection\nrow\ncolumn\ncolumn-reverse\nrow-reverse\njustifyContent\nflex-start\nflex-end\ncenter\nspace-between\nspace-around\nspace-evenly\nalignItems\nstretch\nflex-start\nflex-end\ncenter\nbaseline\nalignContent\nflex-start\nflex-end\ncenter\nspace-between\nspace-around\nstretch\nwrap\nnowrap\nwrap\nwrap-reverse\ngap\nCopy\n<Flex\n  direction=\"row\"\n  justifyContent=\"flex-start\"\n  alignItems=\"stretch\"\n  alignContent=\"flex-start\"\n  wrap=\"nowrap\"\n  gap=\"1rem\"\n>\n  <View\n    height=\"2rem\"\n    width=\"5rem\"\n    backgroundColor={tokens.colors.blue[20]}\n  ></View>\n  <View\n    height=\"2.5rem\"\n    width=\"6.25rem\"\n    backgroundColor={tokens.colors.blue[40]}\n  ></View>\n  <View\n    height=\"3rem\"\n    width=\"7.5rem\"\n    backgroundColor={tokens.colors.blue[60]}\n  ></View>\n  <View\n    height=\"3.5rem\"\n    width=\"8.75rem\"\n    backgroundColor={tokens.colors.blue[80]}\n  ></View>\n</Flex>\nUsage\n\nImport the Flex primitive.\n\nButton 1\nButton 2\nButton 3\nCopy\nimport { Flex, Button, useTheme } from '@aws-amplify/ui-react';\n\nexport const DefaultFlexExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <Flex>\n      <Button backgroundColor={tokens.colors.pink[10]}>Button 1</Button>\n      <Button backgroundColor={tokens.colors.pink[20]}>Button 2</Button>\n      <Button backgroundColor={tokens.colors.pink[40]}>Button 3</Button>\n    </Flex>\n  );\n};\n\nMapping Flexbox CSS properties to Flex props\nFlexbox CSS property => Flex prop:\nflex-direction => direction\njustify-content => justifyContent\nalign-items => alignItems\nalign-content => alignContent\nflex-wrap => wrap\ngap => gap\nDefault prop values:\ndirection=\"row\"\njustifyContent=\"normal\"\nalignItems=\"stretch\"\nalignContent=\"normal\"\nwrap=\"nowrap\"\ngap=\"1rem\"\nCSS Styling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-flex\tTop level element that wraps the Flex primitive"
  },
  {
    "title": "Card | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/card",
    "html": "Card\n\nCard groups related pieces of content.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nI'm a card!\nVariation\ndefault\noutlined\nelevated\nCopy\n<Card>\n  I'm a card!\n</Card>\nUsage\n\nThe Card component will include basic styling but the form of the Card component will come from the content passed into it.\n\nPlus\nVerified\nNew Zealand White Water Outdoor Adventure\nJoin us on this beautiful outdoor adventure through the glittering rivers through the snowy peaks on New Zealand.\nBook it\nCopy\nimport {\n  Card,\n  Image,\n  View,\n  Heading,\n  Flex,\n  Badge,\n  Text,\n  Button,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const DefaultCardExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <View\n      backgroundColor={tokens.colors.background.secondary}\n      padding={tokens.space.medium}\n    >\n      <Card>\n        <Flex direction=\"row\" alignItems=\"flex-start\">\n          <Image\n            alt=\"Road to milford sound\"\n            src=\"/road-to-milford-new-zealand-800w.jpg\"\n            width=\"33%\"\n          />\n          <Flex\n            direction=\"column\"\n            alignItems=\"flex-start\"\n            gap={tokens.space.xs}\n          >\n            <Flex>\n              <Badge size=\"small\" variation=\"info\">\n                Plus\n              </Badge>\n              <Badge size=\"small\" variation=\"success\">\n                Verified\n              </Badge>\n            </Flex>\n\n            <Heading level={5}>\n              New Zealand White Water Outdoor Adventure\n            </Heading>\n\n            <Text as=\"span\">\n              Join us on this beautiful outdoor adventure through the glittering\n              rivers through the snowy peaks on New Zealand.\n            </Text>\n            <Button variation=\"primary\">Book it</Button>\n          </Flex>\n        </Flex>\n      </Card>\n    </View>\n  );\n};\n\nVariations\nDefault card\nOutlined card\nElevated card\nCopy\nimport { Card } from '@aws-amplify/ui-react';\n\nexport const CardVariationsExample = () => {\n  return (\n    <>\n      <Card>Default card</Card>\n      <Card variation=\"outlined\">Outlined card</Card>\n      <Card variation=\"elevated\">Elevated card</Card>\n    </>\n  );\n};\n\nSet rendered HTML element\n\nThe Card component renders as a div by default. You can change the HTML element rendered by Card with the as property.\n\nI'm a section!\nCopy\nimport { Card } from '@aws-amplify/ui-react';\n\nexport const CardAsExample = () => {\n  return <Card as=\"section\">{`I'm a section!`}</Card>;\n};\n\nCustomization\nTheme\n\nYou can customize the appearance of all Card components in your application with a Theme.\n\nCard Theme Source\n\nDefault\n\nOutlined\n\nElevated\n\nCopy\nimport { Card, Text, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'card-theme',\n  tokens: {\n    components: {\n      card: {\n        // You can reference other tokens\n        backgroundColor: { value: '{colors.background.success}' },\n        borderRadius: { value: '{radii.large}' },\n        padding: { value: '{space.xl}' },\n\n        // Variations\n        outlined: {\n          // Or use explicit values\n          borderWidth: { value: '10px' },\n          backgroundColor: { value: '{colors.background.warning}' },\n        },\n        elevated: {\n          backgroundColor: { value: '{colors.background.info}' },\n          boxShadow: { value: '{shadows.large}' },\n        },\n      },\n    },\n  },\n};\n\nexport const CardThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Flex>\n        <Card>\n          <Text>Default</Text>\n        </Card>\n        <Card variation=\"outlined\">\n          <Text>Outlined</Text>\n        </Card>\n        <Card variation=\"elevated\">\n          <Text>Elevated</Text>\n        </Card>\n      </Flex>\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-card\tTop level element that wraps the Card primitive\nCSS\n\nTo override styling on all Cards, you can set the Amplify CSS variables or use the built-in .amplify-card class.\n\nThick Bordered Card\nCopy\n/* styles.css */\n:root {\n  --amplify-components-card-border-color: red;\n  --amplify-components-card-border-width: 3px;\n}\n/* OR */\n.amplify-card {\n  border: 3px solid red;\n}\n\n\nTo replace all the Card styling, unset it:\n\n.amplify-card {\n  all: unset;\n  /* Add your styling here*/\n}\n\nLocal styling\n\nTo override styling on a specific Card, you can use a class selector or style props.\n\nUsing a class selector:\n\nCustom card!\n\nCopy\nimport { Card, Text } from '@aws-amplify/ui-react';\n\nconst css = `.custom-card-class {\n  border: 3px solid red;\n}`;\n\nexport const CardClassNameExample = () => {\n  return (\n    <>\n      <style>{css}</style>\n      <Card className=\"custom-card-class\">\n        <Text>Custom card!</Text>\n      </Card>\n    </>\n  );\n};\n\n\nUsing style props:\n\nSpecial card!\n\nCopy\nimport { Card, Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const CardStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Card backgroundColor={tokens.colors.primary[20]}>\n      <Text>Special card!</Text>\n    </Card>\n  );\n};\n\nDefault theme\nimport { DesignTokenProperties, OutputVariantKey } from '../types/designToken';\n\ntype CardVariationStyleKey =\n  | 'backgroundColor'\n  | 'borderRadius'\n  | 'borderWidth'\n  | 'borderStyle'\n  | 'borderColor'\n  | 'boxShadow';\n\ntype CardVariationTokens<OutputType> = DesignTokenProperties<\n  CardVariationStyleKey,\n  OutputType\n>;\n\nexport type CardTokens<OutputType extends OutputVariantKey> =\n  CardVariationTokens<OutputType> &\n    DesignTokenProperties<'padding', OutputType> & {\n      elevated?: CardVariationTokens<OutputType>;\n      outlined?: CardVariationTokens<OutputType>;\n    };\n\nexport const card: Required<CardTokens<'default'>> = {\n  backgroundColor: { value: '{colors.background.primary.value}' },\n  borderRadius: { value: '{radii.xs.value}' },\n  borderWidth: { value: '0' },\n  borderStyle: { value: 'solid' },\n  borderColor: { value: 'transparent' },\n  boxShadow: { value: 'none' },\n  padding: { value: '{space.medium.value}' },\n\n  outlined: {\n    backgroundColor: { value: '{components.card.backgroundColor.value}' },\n    borderRadius: { value: '{radii.xs.value}' },\n    borderWidth: { value: '{borderWidths.small.value}' },\n    borderStyle: { value: 'solid' },\n    borderColor: { value: '{colors.border.primary.value}' },\n    boxShadow: { value: '{components.card.boxShadow.value}' },\n  },\n\n  elevated: {\n    backgroundColor: { value: '{components.card.backgroundColor.value}' },\n    borderRadius: { value: '{radii.xs.value}' },\n    borderWidth: { value: '0' },\n    borderStyle: { value: 'solid' },\n    borderColor: { value: 'transparent' },\n    boxShadow: { value: '{shadows.medium.value}' },\n  },\n};\n"
  },
  {
    "title": "Accordion | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/accordion",
    "html": "Accordion\n\nThe Accordion allows users to expand or collapse a set of sections.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\n\nIn Amplify UI v5 this was called Expander. We rebuilt it in v6 to use the browser native details and summary elements\n\nDemo\nIs it accessible?\nCan I customize the styling?\nIs it a great way to organize content?\nallowMultiple\npreventCollapse\nCopy\n<Accordion\n  items={[\n    {\n      trigger: 'Is it accessible?',\n      value: 'accessible',\n      content: 'Yes! It uses HTML native elements: <details> and <summary>.'\n    },\n    {\n      trigger: 'Can I customize the styling?',\n      value: 'styling',\n      content: 'Of course! See the section on CSS Styling below.'\n    },\n    {\n      trigger: 'Is it a great way to organize content?',\n      value: 'content',\n      content: 'Most definitely!'\n    }\n  ]}\n/>\nUsage\n\nImport the Accordion and Accordion.Item components and styles.\n\nWhat is an Accordion?\nThis is the item title\nCopy\nimport * as React from 'react';\n\nimport { Accordion } from '@aws-amplify/ui-react';\n\nexport const DefaultAccordionExample = () => {\n  return (\n    <Accordion.Container>\n      <Accordion.Item value=\"Accordion-item\">\n        <Accordion.Trigger>\n          What is an Accordion?\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          An Accordion contains all the parts of a collapsible section.\n        </Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"unique-value\">\n        <Accordion.Trigger>\n          This is the item title\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          The `children` of the Accordion are displayed here.\n        </Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n\nSingle or multiple\n\nThe accordion by default only allows 1 item to be displayed at a time. To allow multiple items to be opened at a time, add the allowMultiple prop.\n\nClick me first!\nThen click me!\nCopy\nimport * as React from 'react';\n\nimport { Accordion } from '@aws-amplify/ui-react';\n\nexport const BasicMultipleAccordion = () => {\n  return (\n    <Accordion.Container allowMultiple>\n      <Accordion.Item value=\"item-1\">\n        <Accordion.Trigger>\n          Click me first!\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Now when you click the second item, this item will stay open until you\n          close it.\n        </Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"item-2\">\n        <Accordion.Trigger>\n          Then click me!\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Notice how both items can be open at the same time for the multiple\n          Accordion.\n        </Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n\n\nThe default behavior allows opening a single item at once.\n\nClick me first!\nThen click me!\nCopy\nimport * as React from 'react';\n\nimport { Accordion } from '@aws-amplify/ui-react';\n\nexport const BasicSingleAccordion = () => {\n  return (\n    <Accordion.Container>\n      <Accordion.Item value=\"item-1\">\n        <Accordion.Trigger>\n          Click me first!\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Now when you click the second item, this item will automatically\n          collapse.\n        </Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"item-2\">\n        <Accordion.Trigger>\n          Then click me!\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Notice how only one item can be open at a time for the single\n          Accordion type.\n        </Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n\nAlways open\n\nTo allow for the accordion to always have at least 1 item open, set the preventCollapse to true.\n\nCan I collapse this item?\nOnly by opening the other item\nWhat about the multiple Accordion?\nCopy\nimport * as React from 'react';\n\nimport { Accordion } from '@aws-amplify/ui-react';\n\nexport const AlwaysOpenAccordionExample = () => {\n  return (\n    <Accordion.Container preventCollapse defaultValue={['item-1']}>\n      <Accordion.Item value=\"item-1\">\n        <Accordion.Trigger>\n          Can I collapse this item?\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>Only by opening the other item</Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"item-2\">\n        <Accordion.Trigger>\n          What about the multiple Accordion?\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Yes, you can set the preventCollapse prop along with allowMultiple\n        </Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n\nExpanded by default\n\nTo expand specific items by default, pass a string[] of value(s) to the defaultValue prop. Each Accordion.Item should have a value string that lets the Accordion know which items are expanded.\n\nLine 1\nHaikus can be fun\nLine 2\nBut sometimes they don‘t make sense...\nLine 3\nCopy\nimport * as React from 'react';\n\nimport { Accordion } from '@aws-amplify/ui-react';\n\nexport const ExpandedByDefaultMultipleAccordion = () => {\n  return (\n    <Accordion.Container defaultValue={['line-1', 'line-2']}>\n      <Accordion.Item value=\"line-1\">\n        <Accordion.Trigger>\n          Line 1\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>Haikus can be fun</Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"line-2\">\n        <Accordion.Trigger>\n          Line 2\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          But sometimes they don&lsquo;t make sense...\n        </Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"line-3\">\n        <Accordion.Trigger>\n          Line 3\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>Refrigerator</Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n\nControlled component\n\nTo use the Accordion as controlled component, specify the value of the item(s) to expand and use in conjunction with onChange.\n\nWhat do you call a deer with no eyes?\nWhat do you call a deer with no eyes or legs?\nCopy\nimport * as React from 'react';\n\nimport { Accordion } from '@aws-amplify/ui-react';\n\nexport const ControlledSingleAccordion = () => {\n  const [value, setValue] = React.useState([]);\n  return (\n    <Accordion.Container value={value} onValueChange={setValue}>\n      <Accordion.Item value=\"joke-1\">\n        <Accordion.Trigger>\n          What do you call a deer with no eyes?\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>No eye-deer.</Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"joke-2\">\n        <Accordion.Trigger>\n          What do you call a deer with no eyes or legs?\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>Still, no eye-deer.</Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n\nCustom title component\n\nFor more control over the layout or styling of the Accordion item header, pass a custom component to the <Accordion.Item> title prop.\n\nCS 103\nMathematical Foundations of Computing\nCS 106A\nProgramming Methodology\nCopy\nimport * as React from 'react';\nimport { Accordion, Flex, View } from '@aws-amplify/ui-react';\n\nexport const CustomTitle = ({ courseNumber, courseName }) => {\n  return (\n    <Flex gap=\"small\">\n      <View width=\"xxl\" color=\"teal.80\">\n        {courseNumber}\n      </View>\n      <View>{courseName}</View>\n    </Flex>\n  );\n};\n\nexport const CustomTitleComponent = () => {\n  return (\n    <Accordion.Container>\n      <Accordion.Item value=\"item-1\">\n        <Accordion.Trigger>\n          <CustomTitle\n            courseNumber=\"CS 103\"\n            courseName=\"Mathematical Foundations of Computing\"\n          />\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>Example content for CS 103</Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"item-2\">\n        <Accordion.Trigger>\n          <CustomTitle\n            courseNumber=\"CS 106A\"\n            courseName=\"Programming Methodology\"\n          />\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>Example content for CS 106A</Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n\nStyling\nTheme\n\nYou can customize the appearance of all Accordion components in your application with a Theme.\n\nAccordion Theme Source\n\nCheck out this themed Accordion\nIt is very customizable\nCopy\nimport { Accordion, ThemeProvider, createTheme } from '@aws-amplify/ui-react';\n\nconst theme = createTheme({\n  name: 'Accordion-theme',\n  tokens: {\n    components: {\n      accordion: {\n        backgroundColor: '{colors.blue.10}',\n        item: {\n          trigger: {\n            color: '{colors.blue.80}',\n            _hover: {\n              color: '{colors.blue.90}',\n              backgroundColor: '{colors.blue.20}',\n            },\n          },\n          content: {\n            color: '{colors.blue.80}',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const AccordionThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Accordion.Container>\n      <Accordion.Item value=\"item1\">\n        <Accordion.Trigger>\n          Check out this themed Accordion\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>Pretty cool!</Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"item2\">\n        <Accordion.Trigger>\n          It is very customizable\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>I love it.</Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-accordion\tTop level element that wraps the Accordion primitive\namplify-accordion__item\tAccordion item (containier for header, trigger, and content)\namplify-accordion__item__content\tAccordion content container\namplify-accordion__item__icon\tIcon to indicate whether an item is expanded or collapsed\namplify-accordion__item__trigger\tAccordion item trigger (summary element)\nGlobal styling\n\nTo override styling on all Accordions, you can set the Amplify CSS variables with the built-in classes.\n\n/* styles.css */\n.amplify-accordion {\n  --amplify-components-accordion-background-color: var(--amplify-colors-primary-80);\n}\n\nClick me first!\nThen click me!\nLocal styling\n\nTo override styling on a specific Accordion, you can use (in order of increasing specificity): a class selector and style props.\n\nUsing a class selector:\n\n/* styles.css */\n.my-accordion {\n  background-color: var(--amplify-colors-primary-80);\n  color: var(--amplify-colors-white);\n}\n\n.amplify-accordion__item__body {\n  color: var(--amplify-colors-white);\n}\n\nSection 1 title\nSection 2 title\nSection 3 title\nCopy\nimport * as React from 'react';\nimport { Accordion } from '@aws-amplify/ui-react';\n\nconst accordionItems = [\n  {\n    title: 'Section 1 title',\n    value: 'item-1',\n    content:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n  },\n  {\n    title: 'Section 2 title',\n    value: 'item-2',\n    content:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n  },\n  {\n    title: 'Section 3 title',\n    value: 'item-3',\n    content:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n  },\n];\n\nexport const ClassStylingAccordion = () => {\n  return (\n    <Accordion.Container className=\"my-accordion\">\n      {accordionItems.map(({ title, value, content }) => (\n        <Accordion.Item value={value} key={value}>\n          <Accordion.Trigger>\n            {title}\n            <Accordion.Icon />\n          </Accordion.Trigger>\n          <Accordion.Content>{content}</Accordion.Content>\n        </Accordion.Item>\n      ))}\n    </Accordion.Container>\n  );\n};\n\n\nUsing style props:\n\nSection 1 title\nSection 2 title\nSection 3 title\nCopy\nimport * as React from 'react';\n\nimport { Accordion } from '@aws-amplify/ui-react';\n\nexport const StylePropsAccordion = () => {\n  return (\n    <Accordion.Container backgroundColor=\"secondary.80\" color=\"font.inverse\">\n      <Accordion.Item value=\"item-1\">\n        <Accordion.Trigger>\n          Section 1 title\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"item-2\">\n        <Accordion.Trigger>\n          Section 2 title\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item value=\"item-3\">\n        <Accordion.Trigger>\n          Section 3 title\n          <Accordion.Icon />\n        </Accordion.Trigger>\n        <Accordion.Content>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Container>\n  );\n};\n"
  },
  {
    "title": "ToggleButton | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/togglebutton",
    "html": "ToggleButton\n\nToggleButton allows users to toggle the on/off state for some configuration.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nPress me!\nvariation\ndefault\nprimary\nlink\nsize\ndefault\nsmall\nlarge\nisDisabled\nCopy\n<ToggleButton>\n  Press me!\n</ToggleButton>\nUsage\n\nImport the ToggleButton primitive.\n\nPress me!\nCopy\nimport { ToggleButton } from '@aws-amplify/ui-react';\n\nexport const DefaultToggleButtonExample = () => {\n  return <ToggleButton>Press me!</ToggleButton>;\n};\n\nControlled component\n\nA toggle button can be a controlled component when given isPressed prop and onChange prop must be provided in this case.\n\nPress me!\nCopy\nimport * as React from 'react';\nimport { ToggleButton } from '@aws-amplify/ui-react';\n\nexport const ControlledToggleButtonExample = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return (\n    <ToggleButton\n      isPressed={isPressed}\n      onChange={() => setIsPressed(!isPressed)}\n    >\n      Press me!\n    </ToggleButton>\n  );\n};\n\nSizes\n\nUse the size prop to change the Button size. Available options are small, large, and none (default).\n\nPress me!\nPress me!\nPress me!\nCopy\nimport { Flex, ToggleButton } from '@aws-amplify/ui-react';\n\nexport const ToggleButtonSizeExample = () => {\n  return (\n    <Flex>\n      <ToggleButton size=\"small\">Press me!</ToggleButton>\n      <ToggleButton>Press me!</ToggleButton>\n      <ToggleButton size=\"large\">Press me!</ToggleButton>\n    </Flex>\n  );\n};\n\nVariations\n\nUse the variation prop to change the Button variation. Available options are primary, link, and none (default).\n\nPress me!\nPress me!\nPress me!\nCopy\nimport { Flex, ToggleButton } from '@aws-amplify/ui-react';\n\nexport const ToggleButtonVariationsExample = () => {\n  return (\n    <Flex>\n      <ToggleButton defaultPressed>Press me!</ToggleButton>\n      <ToggleButton variation=\"primary\" defaultPressed>\n        Press me!\n      </ToggleButton>\n      <ToggleButton variation=\"link\" defaultPressed>\n        Press me!\n      </ToggleButton>\n    </Flex>\n  );\n};\n\nDisabled\n\nA disabled toggle button will not be able to switch state and will not be focusable.\n\nPress me!\nPress me!\nCopy\nimport { Flex, ToggleButton } from '@aws-amplify/ui-react';\n\nexport const DisabledToggleButtonExample = () => {\n  return (\n    <Flex>\n      <ToggleButton isDisabled>Press me!</ToggleButton>\n      <ToggleButton isDisabled defaultPressed>\n        Press me!\n      </ToggleButton>\n    </Flex>\n  );\n};\n\nToggleButtonGroup\n\nYou can group related Toggle buttons easily with a ToggleButtonGroup out of box. To control the selected state of its child buttons, both value and onChange props must be provided.\n\nCopy\nimport * as React from 'react';\nimport {\n  MdFormatBold,\n  MdFormatColorFill,\n  MdFormatItalic,\n  MdFormatUnderlined,\n} from 'react-icons/md';\nimport { ToggleButton, ToggleButtonGroup } from '@aws-amplify/ui-react';\n\nexport const DefaultToggleButtonGroupExample = () => {\n  const [multipleValue, setMultipleValue] = React.useState(['bold']);\n  return (\n    <ToggleButtonGroup\n      value={multipleValue}\n      onChange={(value) => setMultipleValue(value as string[])}\n    >\n      <ToggleButton value=\"bold\">\n        <MdFormatBold />\n      </ToggleButton>\n      <ToggleButton value=\"italic\">\n        <MdFormatItalic />\n      </ToggleButton>\n      <ToggleButton value=\"underlined\">\n        <MdFormatUnderlined />\n      </ToggleButton>\n      <ToggleButton value=\"color-fill\">\n        <MdFormatColorFill />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n\n\nTo make your toggle button group exclusive, set the isExclusive prop to true.\n\nCopy\nimport * as React from 'react';\nimport {\n  MdFormatAlignCenter,\n  MdFormatAlignJustify,\n  MdFormatAlignLeft,\n  MdFormatAlignRight,\n} from 'react-icons/md';\nimport { ToggleButton, ToggleButtonGroup } from '@aws-amplify/ui-react';\n\nexport const ExclusiveToggleButtonGroupExample = () => {\n  const [exclusiveValue, setExclusiveValue] = React.useState('align-left');\n  return (\n    <ToggleButtonGroup\n      value={exclusiveValue}\n      isExclusive\n      onChange={(value) => setExclusiveValue(value as string)}\n    >\n      <ToggleButton value=\"align-left\">\n        <MdFormatAlignLeft />\n      </ToggleButton>\n      <ToggleButton value=\"align-center\">\n        <MdFormatAlignCenter />\n      </ToggleButton>\n      <ToggleButton value=\"align-right\">\n        <MdFormatAlignRight />\n      </ToggleButton>\n      <ToggleButton value=\"align-justify\">\n        <MdFormatAlignJustify />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n\n\nIn cases where you need to have at least one option on, you can set the isSelectionRequired prop to true.\n\nCopy\nimport * as React from 'react';\nimport {\n  MdFormatBold,\n  MdFormatColorFill,\n  MdFormatItalic,\n  MdFormatUnderlined,\n} from 'react-icons/md';\nimport { ToggleButton, ToggleButtonGroup } from '@aws-amplify/ui-react';\n\nexport const SelectionRequiredToggleButtonGroupExample = () => {\n  const [value, setValue] = React.useState('bold');\n  return (\n    <ToggleButtonGroup\n      value={value}\n      onChange={(value) => setValue(value as string)}\n      isExclusive\n      isSelectionRequired\n    >\n      <ToggleButton value=\"bold\">\n        <MdFormatBold />\n      </ToggleButton>\n      <ToggleButton value=\"italic\">\n        <MdFormatItalic />\n      </ToggleButton>\n      <ToggleButton value=\"underlined\">\n        <MdFormatUnderlined />\n      </ToggleButton>\n      <ToggleButton value=\"color-fill\">\n        <MdFormatColorFill />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n\nStandard HTML attributes\n\nThe ToggleButton will accept any of the standard HTML attributes that a <button> element accepts. Standard <button> attributes can be found in the MDN Documentation\n\nPress me!\nCopy\n<ToggleButton name=\"button\">Press me!</ToggleButton>\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all ToggleButton components in your application with a Theme.\n\nToggleButton Theme Source\n\nDefault\nPrimary\nCopy\nimport {\n  ToggleButton,\n  Flex,\n  ThemeProvider,\n  Theme,\n} from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'toggleButton-theme',\n  tokens: {\n    components: {\n      togglebutton: {\n        borderColor: { value: '{colors.blue.90}' },\n        color: { value: '{colors.blue.90}' },\n        _hover: {\n          backgroundColor: { value: '{colors.blue.40}' },\n        },\n        _focus: {\n          color: { value: 'white' },\n        },\n        _active: {\n          backgroundColor: { value: '{colors.blue.60}' },\n        },\n        _pressed: {\n          backgroundColor: { value: '{colors.blue.80}' },\n          color: { value: 'white' },\n          _hover: {\n            backgroundColor: { value: 'blue' },\n          },\n        },\n        primary: {\n          backgroundColor: { value: '{colors.teal.20}' },\n        },\n      },\n    },\n  },\n};\n\nexport const ToggleButtonThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Flex>\n        <ToggleButton>Default</ToggleButton>\n        <ToggleButton variation=\"primary\">Primary</ToggleButton>\n      </Flex>\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-togglebutton\tTop level element that wraps the ToggleButton primitive\namplify-togglebuttongroup\tTop level element that wraps the ToggleButtonGroup primitive\nGlobal styling\n\nTo override styling on all ToggleButtons, you can set the Amplify CSS variables or use the built-in .amplify-togglebutton class.\n\nPress me!\nCopy\n:root {\n  --amplify-components-togglebutton-color: var(--amplify-colors-purple-60);\n}\n\n.amplify-togglebutton {\n  color: var(--amplify-colors-purple-60);\n}\n\nCopy\n<ToggleButton className=\"my-togglebutton-global\">Press me!</ToggleButton>\n\nLocal styling\n\nTo override styling on a specific ToggleButton, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nPress me!\nCopy\n.my-togglebutton {\n  border-radius: 20px;\n}\n\nCopy\n<ToggleButton className=\"my-togglebutton\">Press me!</ToggleButton>\n\n\nUsing data attributes:\n\nPress me!\nCopy\n.amplify-togglebutton[data-variation='primary'] {\n  color: var(--amplify-colors-blue-60);\n}\n\nCopy\n<ToggleButton className=\"my-togglebutton-data-attribute\" variation=\"primary\">\n  'Press me!'\n</ToggleButton>\n\n\nUsing style props:\n\nPress me!\nCopy\nimport { Flex, ToggleButton, useTheme } from '@aws-amplify/ui-react';\n\nexport const ToggleButtonStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex>\n      <ToggleButton color={tokens.colors.orange[60]}>Press me!</ToggleButton>\n    </Flex>\n  );\n};\n"
  },
  {
    "title": "TextAreaField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/textareafield",
    "html": "TextAreaField\n\nTextAreaField allows users to input multiline text content.\n\nReact source\nFeedback\nDocumentation\nProps\nDemo\nLast name\n\nEnter a valid last name\n\nlabel\nname\nplaceholder\nrows\ndescriptiveText\nerrorMessage\nhasError\nlabelHidden\nisDisabled\nisReadOnly\nsize\ndefault\nsmall\nlarge\nvariation\ndefault\nquiet\nCopy\n<TextAreaField\n  descriptiveText=\"Enter a valid last name\"\n  label=\"Last name\"\n  name=\"last_name\"\n  placeholder=\"Baggins\"\n  rows={3}/>\nUsage\n\nImport the TextAreaField component and styles and provide a label for accessibility/usability.\n\nComments\nCopy\nimport { TextAreaField } from '@aws-amplify/ui-react';\n\nexport const DefaultTextAreaExample = () => {\n  return (\n    <TextAreaField label=\"Comments\" defaultValue=\"Amplify UI is awesome!\" />\n  );\n};\n\nAccessibility\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nResizeable\n\nFor a resizeable multiline field, use resize prop. Common values are horizontal, vertical, both. See MDN resize docs for supported values.\n\nAddress\n\nPlease enter a USPS validated address\n\nCopy\nimport { TextAreaField } from '@aws-amplify/ui-react';\n\nexport const TextAreaResizableExample = () => {\n  return (\n    <TextAreaField\n      label=\"Address\"\n      placeholder=\"1234 Main St.\"\n      descriptiveText=\"Please enter a USPS validated address\"\n      resize=\"vertical\"\n    />\n  );\n};\n\nSize\n\nTo change the general size, use the size prop. Available options are small, none (default), and large.\n\nSmall\nDefault\nLarge\nCopy\nimport { Flex, TextAreaField } from '@aws-amplify/ui-react';\n\nexport const TextAreaSizeExample = () => {\n  return (\n    <Flex direction=\"column\" gap=\"1.5rem\">\n      <TextAreaField\n        label=\"Small\"\n        size=\"small\"\n        defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n      />\n\n      <TextAreaField\n        label=\"Default\"\n        defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n      />\n      <TextAreaField\n        label=\"Large\"\n        size=\"large\"\n        defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n      />\n    </Flex>\n  );\n};\n\nRows\n\nTo change the number of rows of text displayed, use the rows prop with desired number.\n\n6 rows\nCopy\nimport { TextAreaField } from '@aws-amplify/ui-react';\n\nexport const TextAreaRowsExample = () => {\n  return (\n    <TextAreaField\n      label=\"6 rows\"\n      rows={6}\n      defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n    />\n  );\n};\n\nMaximum length\n\nTo enforce a maximum length of multiline text, use the maxLength prop.\n\nMaximum length of 100 characters\nCopy\nimport { TextAreaField } from '@aws-amplify/ui-react';\n\nexport const TextAreaMaxLengthExample = () => {\n  return (\n    <TextAreaField\n      label=\"Maximum length of 100 characters\"\n      defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut laboree\"\n      maxLength={100}\n    />\n  );\n};\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\nDefault\nQuiet\nCopy\nimport { TextAreaField } from '@aws-amplify/ui-react';\n\nexport const TextAreaFieldVariationExample = () => {\n  return (\n    <>\n      <TextAreaField label=\"Default\" />\n      <TextAreaField label=\"Quiet\" variation=\"quiet\" />\n    </>\n  );\n};\n\nDescriptive text\n\nTo provide additional descriptive text of requirements of the field, use the descriptiveText field:\n\nAddress\n\nPlease enter a USPS validated address\n\nCopy\nimport { Text, TextAreaField, View } from '@aws-amplify/ui-react';\n\nexport const TextAreaFieldDescriptiveExample = () => {\n  return (\n    <View width=\"100%\">\n      <TextAreaField\n        label=\"Address\"\n        descriptiveText={\n          <Text\n            as=\"span\"\n            fontStyle=\"italic\"\n            fontSize=\"var(--amplify-font-sizes-small)\"\n          >\n            Please enter a USPS validated address\n          </Text>\n        }\n      />\n    </View>\n  );\n};\n\nStates\n\nThe available TextAreaField states include isDisabled and isReadOnly. A disabled field will be not be focusable not mutable and will not be submitted with form data. A readonly field cannot be edited by the user.\n\nDisabled\nReadonly\nCopy\nimport { Flex, TextAreaField } from '@aws-amplify/ui-react';\n\nexport const TextAreaFieldStatesExample = () => {\n  return (\n    <Flex direction=\"column\" gap=\"1rem\">\n      <TextAreaField\n        label=\"Disabled\"\n        defaultValue=\"Disabled\"\n        isDisabled={true}\n      />\n      <TextAreaField\n        label=\"Readonly\"\n        defaultValue=\"You can't edit me!\"\n        isReadOnly={true}\n      />\n    </Flex>\n  );\n};\n\nRequired fields\n\nUse the isRequired prop to specify a required field.\n\nEssay question #1\nSubmit\nCopy\nimport { Button, Flex, TextAreaField } from '@aws-amplify/ui-react';\n\nexport const DefaultRequiredTextAreaFieldExample = () => {\n  return (\n    <Flex as=\"form\" direction=\"column\">\n      <TextAreaField label=\"Essay question #1\" isRequired={true} />\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\n\nThere is no default styling for required fields. Customize the label or descriptiveText to instruct the form user of the required field.\n\nEssay Question #1 (required)\n\nEssay Question #1\n\nRequired\n\nSubmit\nCopy\nimport { Button, Flex, Text, TextAreaField } from '@aws-amplify/ui-react';\n\nexport const RequiredTextAreaFieldExample = () => {\n  return (\n    <Flex as=\"form\" direction=\"column\">\n      <TextAreaField\n        label={\n          <Text>\n            Essay Question #1\n            <Text\n              as=\"span\"\n              fontSize=\"var(--amplify-font-sizes-small)\"\n              color=\"var(--amplify-colors-font-error)\"\n            >\n              {' '}\n              (required)\n            </Text>\n          </Text>\n        }\n        isRequired={true}\n      />\n      <TextAreaField\n        label=\"Essay Question #1\"\n        descriptiveText={\n          <Text\n            as=\"span\"\n            fontSize=\"var(--amplify-font-sizes-small)\"\n            color=\"var(--amplify-colors-font-error)\"\n            fontStyle=\"italic\"\n          >\n            Required\n          </Text>\n        }\n        isRequired={true}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\nValidation error styling\n\nUse the hasError and errorMessage fields to mark a TextAreaField with a validation error.\n\nComments\n\nPlease enter a comment\n\nCopy\nimport { Flex, TextAreaField } from '@aws-amplify/ui-react';\n\nexport const TextAreaFieldValidationErrorExample = () => {\n  return (\n    <Flex gap=\"1rem\" direction=\"column\">\n      <TextAreaField\n        label=\"Comments\"\n        hasError={true}\n        errorMessage=\"Please enter a comment\"\n      />\n    </Flex>\n  );\n};\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all TextAreaField components in your application with a Theme.\n\nTextAreaField Theme Source\n\nName\nCopy\nimport { TextAreaField, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'textareafield-theme',\n  tokens: {\n    components: {\n      textareafield: {\n        color: { value: '{colors.blue.90}' },\n        _focus: {\n          borderColor: { value: '{colors.blue.40}' },\n        },\n      },\n    },\n  },\n};\n\nexport const TextAreaFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <TextAreaField label=\"Name\" defaultValue=\"Default Value\" />\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-textarea\tClass applied to the text area\namplify-textareafield\tTop level element that wraps the TextAreaField primitive\nGlobal styling\n\nTo override styling on all TextAreaField primitives, you can set the Amplify CSS variables with the built-in .amplify-textareafield class.\n\nGlobally styled field\nCopy\n/* styles.css */\n.amplify-textareafield {\n  --amplify-components-fieldcontrol-border-color: rebeccapurple;\n}\n\nLocal styling\n\nTo override styling on a specific TextAreaField, you can use a class selector or style props.\n\nUsing a class selector:\n\nSquare field\nCopy\n/* styles.css */\n.custom-textareafield-class .amplify-textarea {\n  border-radius: 0;\n}\n\n\nUsing style props:\n\nAll style props will be applied to the Flex wrapper of the TextAreaField. To style the textarea of the TextAreaField, you can pass a inputStyles prop with the style props you want to apply to the input.\n\nAddress:\n\nSpecial Field\nCopy\nimport { Text, TextAreaField, useTheme } from '@aws-amplify/ui-react';\n\nexport const TextAreaFieldStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <TextAreaField\n        label={\n          <Text\n            fontWeight={tokens.fontWeights.bold}\n            fontSize={tokens.fontSizes.xl}\n          >\n            Address:\n          </Text>\n        }\n        padding=\"xl\"\n        border={`1px solid ${tokens.colors.primary[60]}`}\n      />\n      <TextAreaField\n        label=\"Special Field\"\n        inputStyles={{\n          backgroundColor: 'primary.10',\n          border: `1px solid ${tokens.colors.primary[60]}`,\n        }}\n      />\n    </>\n  );\n};\n"
  },
  {
    "title": "TextField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/textfield",
    "html": "TextField\n\nTextField allows users to input text content.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nLast name\n\nEnter a valid last name\n\nvariation\ndefault\nquiet\nsize\nsmall\ndefault\nlarge\ndescriptiveText\nplaceholder\nlabel\nlabelHidden\nerrorMessage\nhasError\nisDisabled\nCopy\n<TextField\n  descriptiveText=\"Enter a valid last name\"\n  placeholder=\"Baggins\"\n  label=\"Last name\"\n  errorMessage=\"There is an error\"\n/>\nUsage\n\nImport the TextField component and styles and provide a label for accessibility/usability.\n\nName\nCopy\nimport { TextField } from '@aws-amplify/ui-react';\n\nexport const DefaultTextFieldExample = () => <TextField label=\"Name\" />;\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nSearch\nSearch\nCopy\nimport { Button, Flex, TextField } from '@aws-amplify/ui-react';\n\nexport const TextFieldAccessibilityExample = () => {\n  return (\n    <Flex>\n      <TextField label=\"Search\" labelHidden={true} />\n      <Button>Search</Button>\n    </Flex>\n  );\n};\n\nSizes\n\nTextField sizes are designed to match styling of other field components such as Buttons. There are three sizes: small, (default), and large.\n\nSmall\nDefault\nLarge\nCopy\nimport { Flex, TextField } from '@aws-amplify/ui-react';\n\nexport const TextFieldSizeExample = () => {\n  return (\n    <Flex direction=\"column\">\n      <TextField label=\"Small\" size=\"small\" width=\"50%\" />\n      <TextField label=\"Default\" width=\"75%\" />\n      <TextField label=\"Large\" size=\"large\" width=\"100%\" />\n    </Flex>\n  );\n};\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\nDefault\nQuiet\nCopy\nimport { TextField } from '@aws-amplify/ui-react';\n\nexport const TextFieldVariationExample = () => {\n  return (\n    <>\n      <TextField label=\"Default\" />\n      <TextField label=\"Quiet\" variation=\"quiet\" />\n    </>\n  );\n};\n\nOuter components\n\nCompose field components such as Button and Select at the start or end of an TextField input using the outerStartComponent or outerEndComponent props.\n\nStart\nStart\nStart and End\nStart\nEnd\nEnd\nEnd\nMultiple End\nEnd\nEnd\nMultiple Start\nStart\nStart\nCopy\nimport { Button, Flex, TextField } from '@aws-amplify/ui-react';\n\nexport const TextFieldOuterComponentsExample = () => (\n  <Flex gap=\"1rem\" direction=\"column\">\n    <TextField label=\"Start\" outerStartComponent={<Button>Start</Button>} />\n    <TextField\n      label=\"Start and End\"\n      outerStartComponent={<Button>Start</Button>}\n      outerEndComponent={<Button>End</Button>}\n    />\n    <TextField label=\"End\" outerEndComponent={<Button>End</Button>} />\n    <TextField\n      label=\"Multiple End\"\n      outerEndComponent={\n        <>\n          <Button>End</Button>\n          <Button>End</Button>\n        </>\n      }\n    />\n    <TextField\n      label=\"Multiple Start\"\n      outerStartComponent={\n        <>\n          <Button>Start</Button>\n          <Button>Start</Button>\n        </>\n      }\n    />\n  </Flex>\n);\n\nInner components (icons)\n\nCompose FieldGroupIcon or FieldGroupIconButton components inside TextField input using innerStartComponent and innerEndComponent. To create an interactive icon button, use the FieldGroupIconButton component. To add an icon that's not interactive, use FieldGroupIcon component.\n\nNote: When clicked, FieldGroupIcon will focus the field, whereas the FieldGroupIconButton will trigger its onClick event.\n\nStart and End\nCopy\nimport {\n  Flex,\n  FieldGroupIcon,\n  FieldGroupIconButton,\n  TextField,\n} from '@aws-amplify/ui-react';\nimport { MdInfo, MdSearch } from 'react-icons/md';\n\nexport const TextFieldInnerComponentsExample = () => (\n  <Flex gap=\"1rem\" direction=\"column\">\n    <TextField\n      label=\"Start and End\"\n      innerStartComponent={\n        <FieldGroupIcon ariaLabel=\"\">\n          {/** Accessibility tip: pass empty ariaLabel for decorative icons. */}\n          <MdInfo />\n        </FieldGroupIcon>\n      }\n      innerEndComponent={\n        <FieldGroupIconButton\n          ariaLabel=\"Search\"\n          variation=\"link\"\n          onClick={() => alert('😎')}\n        >\n          <MdSearch />\n        </FieldGroupIconButton>\n      }\n    />\n  </Flex>\n);\n\n\nYou can also both inner and outer components together\n\nStart and End inner and outer components\nStart\nEnd\nCopy\nimport {\n  Button,\n  Flex,\n  FieldGroupIcon,\n  FieldGroupIconButton,\n  TextField,\n} from '@aws-amplify/ui-react';\nimport { MdInfo, MdSearch } from 'react-icons/md';\n\nexport const TextFieldOuterAndInnerComponentsExample = () => (\n  <Flex gap=\"1rem\" direction=\"column\">\n    <TextField\n      label=\"Start and End inner and outer components\"\n      outerStartComponent={<Button>Start</Button>}\n      outerEndComponent={<Button>End</Button>}\n      innerStartComponent={\n        <FieldGroupIcon ariaLabel=\"\">\n          {/** Accessibility tip: pass empty ariaLabel for decorative icons. */}\n          <MdInfo />\n        </FieldGroupIcon>\n      }\n      innerEndComponent={\n        <FieldGroupIconButton\n          ariaLabel=\"Search\"\n          variation=\"link\"\n          onClick={() => alert('😎')}\n        >\n          <MdSearch />\n        </FieldGroupIconButton>\n      }\n    />\n  </Flex>\n);\n\nDescriptive text\n\nTo provide additional descriptive text of requirements of the field, use the descriptiveText field:\n\nPassword\n\nPassword length must be greater than 8 characters\n\nCopy\nimport { Text, TextField, View } from '@aws-amplify/ui-react';\n\nexport const TextFieldDescriptiveTextExample = () => {\n  return (\n    <View width=\"100%\">\n      <TextField\n        type=\"password\"\n        label=\"Password\"\n        descriptiveText={\n          <Text\n            as=\"span\"\n            color=\"purple.60\"\n            fontStyle=\"italic\"\n            fontSize=\"0.8rem\"\n          >\n            Password length must be greater than 8 characters\n          </Text>\n        }\n      />\n    </View>\n  );\n};\n\nStates\n\nThe available TextField states include isDisabled and isReadOnly. A disabled field will be not be focusable not mutable and will not be submitted with form data. A readonly field cannot be edited by the user.\n\nDisabled\nReadonly\nCopy\nimport { Flex, TextField } from '@aws-amplify/ui-react';\n\nexport const TextFieldStatesExample = () => {\n  return (\n    <Flex direction=\"column\" gap=\"1rem\">\n      <TextField label=\"Disabled\" defaultValue=\"Disabled\" isDisabled={true} />\n      <TextField\n        label=\"Readonly\"\n        defaultValue=\"You can't edit me!\"\n        isReadOnly={true}\n      />\n    </Flex>\n  );\n};\n\nRequired fields\n\nUse the isRequired prop to specify a required field.\n\nEmail\nSubmit\nCopy\nimport { Button, Flex, TextField } from '@aws-amplify/ui-react';\n\nexport const DefaultRequiredTextFieldExample = () => {\n  return (\n    <Flex as=\"form\" direction=\"column\" width=\"20rem\">\n      <TextField label=\"Email\" type=\"email\" isRequired={true} />\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\n\nThere is no default styling for required fields. Customize the label or descriptiveText to instruct the form user of the required field.\n\nEmail (required)\n\nPassword\n\nRequired\n\nSubmit\nCopy\nimport { Button, Flex, Text, TextField } from '@aws-amplify/ui-react';\n\nexport const RequiredTextFieldExample = () => {\n  return (\n    <Flex as=\"form\" direction=\"column\" width=\"20rem\">\n      <TextField\n        label={\n          <Text>\n            Email\n            <Text as=\"span\" fontSize=\"0.8rem\" color=\"red\">\n              {' '}\n              (required)\n            </Text>\n          </Text>\n        }\n        type=\"email\"\n        isRequired={true}\n      />\n      <TextField\n        label=\"Password\"\n        type=\"password\"\n        descriptiveText={\n          <Text as=\"span\" fontSize=\"0.8rem\" color=\"red\" fontStyle=\"italic\">\n            Required\n          </Text>\n        }\n        isRequired={true}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\nValidation error styling\n\nUse the hasError and errorMessage props to mark a TextField as having a validation error.\n\nUsername\n\nUsername must include at least one digit\n\nCopy\nimport { TextField } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const TextFieldValidationErrorExample = () => {\n  const [hasError, setHasError] = React.useState(true);\n\n  const validateUsername = (e) => {\n    const containsDigit = /\\d/.test(e.currentTarget.value);\n    setHasError(!containsDigit);\n  };\n\n  return (\n    <TextField\n      label=\"Username\"\n      hasError={hasError}\n      errorMessage=\"Username must include at least one digit\"\n      onChange={validateUsername}\n    />\n  );\n};\n\nEvent handlers\n\nTextField provides several event handlers: onSelect, onInput, onChange, onCopy, onPaste, and onCut. Open the console to interact with the demo below.\n\nEvent handlers\nCopy\nimport { TextField } from '@aws-amplify/ui-react';\n\nexport const TextFieldEventHandlersExample = () => (\n  <TextField\n    label=\"Event handlers\"\n    onSelect={(e) => console.info('onSelect fired:', e.currentTarget.value)}\n    onInput={(e) => console.info('onInput fired:', e.currentTarget.value)}\n    onChange={(e) => console.info('onChange fired:', e.currentTarget.value)}\n    onCopy={(e) => console.info('onCopy fired:', e.currentTarget.value)}\n    onPaste={(e) => console.info('onPaste fired:', e.currentTarget.value)}\n    onCut={(e) => console.info('onCut fired:', e.currentTarget.value)}\n  />\n);\n\nStandard HTML attributes\n\nThe TextField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation\n\nName\nCopy\n<TextField\n  label=\"Name\"\n  placeholder=\"Galadriel\"\n  name=\"name\"\n/>\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all TextField components in your application with a Theme.\n\nTextField Theme Source\n\nName\nCopy\nimport { TextField, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'textfield-theme',\n  tokens: {\n    components: {\n      textfield: {\n        color: { value: '{colors.blue.90}' },\n        _focus: {\n          borderColor: { value: '{colors.blue.40}' },\n        },\n      },\n    },\n  },\n};\n\nexport const TextFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <TextField label=\"Name\" />\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-textfield\tTop level element that wraps the TextField primitive\nGlobal styling\n\nTo override styling on all TextField primitives, you can set the Amplify CSS variables with the built-in .amplify-textfield class.\n\nGlobally styled field\nCopy\n/* styles.css */\n.amplify-textfield {\n  --amplify-components-fieldcontrol-border-color: rebeccapurple;\n}\n\nLocal styling\n\nTo override styling on a specific TextField, you can use a class selector or style props.\n\nUsing a class selector:\n\nSquare field\nCopy\n/* styles.css */\n.custom-textfield-class .amplify-input {\n  border-radius: 0;\n}\n\n\nUsing style props:\n\nAll style props will be applied to the Flex wrapper of the TextField. To style the input of the TextField, you can pass a inputStyles prop with the style props you want to apply to the input.\n\nName:\n\nSpecial Field\nCopy\nimport { Text, TextField, useTheme } from '@aws-amplify/ui-react';\n\nexport const TextFieldStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <TextField\n        label={\n          <Text\n            fontWeight={tokens.fontWeights.bold}\n            fontSize={tokens.fontSizes.xl}\n          >\n            Name:\n          </Text>\n        }\n        padding=\"xl\"\n        border={`1px solid ${tokens.colors.primary[60]}`}\n      />\n      <TextField\n        label=\"Special Field\"\n        inputStyles={{\n          backgroundColor: 'primary.10',\n          border: `1px solid ${tokens.colors.primary[60]}`,\n        }}\n      />\n    </>\n  );\n};\n"
  },
  {
    "title": "SwitchField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/switchfield",
    "html": "SwitchField\n\nSwitchField allows users to toggle an input.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nSwitchField\nthumbColor\ntrackColor\ntrackCheckedColor\nsize\ndefault\nsmall\nlarge\nlabel\nlabelPosition\nstart\nend\ntop\nbottom\nisDisabled\nisChecked\nUnset\nCopy\n<SwitchField\n  isDisabled={false}\n  label=\"SwitchField\"\n  labelPosition=\"start\"\n/>\nUsage\n\nThe most basic usage simply includes a SwitchField component passing in a required label prop.\n\nThis is a switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const DefaultSwitchFieldExample = () => {\n  return <SwitchField label=\"This is a switch\" />;\n};\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nControlled component\n\nThe SwitchFIeld can be a controlled component by passing in the controlled boolean value as the isChecked prop. To allow the user to toggle a controlled SwitchField, the onChange handler must be passed in and update the controlled value. An example of this pattern is displayed below.\n\nThis is a switch\nSwitch\nCopy\nimport { SwitchField, Button } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const SwitchFieldIsCheckedExample = () => {\n  const [isChecked, setIsChecked] = React.useState(true);\n\n  return (\n    <>\n      <SwitchField\n        label=\"This is a switch\"\n        isChecked={isChecked}\n        onChange={(e) => {\n          setIsChecked(e.target.checked);\n        }}\n      />\n      <Button\n        onClick={() => {\n          setIsChecked((isChecked) => !isChecked);\n        }}\n      >\n        Switch\n      </Button>\n    </>\n  );\n};\n\ndefaultChecked\n\nThe defaultChecked property is a boolean value and will define the starting value for an uncontrolled switchField.\n\nThis is a switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldDefaultCheckedExample = () => {\n  return <SwitchField label=\"This is a switch\" defaultChecked={true} />;\n};\n\nthumbColor\n\nThe thumbColor property is a CSS color value and will define the color of the thumb in the switchField.\n\nThis is a switch\nCopy\nimport { SwitchField, useTheme } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldThumbColorExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <SwitchField\n      label=\"This is a switch\"\n      thumbColor={tokens.colors.orange[10]}\n    />\n  );\n};\n\ntrackColor\n\nThe trackColor property is a CSS color value that will define the color of the track of the switchField while in the off position.\n\nThis is a switch\nCopy\nimport { SwitchField, useTheme } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldTrackColorExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <SwitchField label=\"This is a switch\" trackColor={tokens.colors.blue[60]} />\n  );\n};\n\ntrackCheckedColor\n\nThe trackCheckedColor property is a CSS color value that will define the color of the track of the switchField while in the on position.\n\nThis is a switch\nCopy\nimport { SwitchField, useTheme } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldTrackCheckedColorExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <SwitchField\n      label=\"This is a switch\"\n      trackCheckedColor={tokens.colors.green[60]}\n      defaultChecked={true}\n    />\n  );\n};\n\nisDisabled\n\nThe isDisabled property is a boolean value that when set to true will disable the switchField from being toggled.\n\nThis is a switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const DisabledSwitchFieldExample = () => {\n  return <SwitchField label=\"This is a switch\" isDisabled={true} />;\n};\n\nname\n\nThe name property is a string that defines the name of the field that will be submitted with the form as a name/value pair.\n\nThis is a switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldNameExample = () => {\n  return <SwitchField label=\"This is a switch\" name=\"switchName\" />;\n};\n\nsize\n\nThe size property is an enum value that modifies the size of the switchField component. The available sizes are small, (default), and large.\n\nThis is a small switch\nThis is a switch\nThis is a large switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldSizeExample = () => {\n  return (\n    <>\n      <SwitchField label=\"This is a small switch\" size=\"small\" />\n      <SwitchField label=\"This is a switch\" />\n      <SwitchField label=\"This is a large switch\" size=\"large\" />\n    </>\n  );\n};\n\nlabel\n\nThe label property is a required string or ReactNode that will display next to the switchField component and wrapped in an html label tag.\n\nThis is a switch\nThis is a JSX label\nCopy\nimport { SwitchField, View } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldLabelExample = () => {\n  return (\n    <>\n      <SwitchField label=\"This is a switch\" />\n      <SwitchField label={<View as=\"span\">This is a JSX label</View>} />\n    </>\n  );\n};\n\nlabelPosition\n\nThe labelPosition property is an enum value that defines the label's position in relation to the switchField. Available values are start, end, top, and bottom.\n\nThis is a switch\nThis is a switch\nThis is a switch\nThis is a switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldLabelPositionExample = () => {\n  return (\n    <>\n      <SwitchField label=\"This is a switch\" labelPosition=\"start\" />\n      <SwitchField label=\"This is a switch\" labelPosition=\"end\" />\n      <SwitchField label=\"This is a switch\" labelPosition=\"top\" />\n      <SwitchField label=\"This is a switch\" labelPosition=\"bottom\" />\n    </>\n  );\n};\n\nisLabelHidden\n\nThe isLabelHidden property is a boolean value that will visually hide the label.\n\nThis is a visually hidden label\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldLabelHiddenExample = () => {\n  return (\n    <SwitchField label=\"This is a visually hidden label\" isLabelHidden={true} />\n  );\n};\n\nvalue\n\nThe value property is a string value that defines the value of the field that will be submitted with the form as a name/value pair.\n\nThis is a switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldValueExample = () => {\n  return <SwitchField label=\"This is a switch\" value=\"Switch Form Value\" />;\n};\n\nonChange\n\nThe onChange property is a callback function that will be called with a change event to the switchField.\n\nThis is a switch\n\nNumber of times the switch has changed 0\n\nCopy\nimport * as React from 'react';\nimport { Text, SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldOnChangeExample = () => {\n  const [switchCount, setSwitchCount] = React.useState(0);\n  const changeCount = () => {\n    setSwitchCount(switchCount + 1);\n  };\n  return (\n    <>\n      <SwitchField label=\"This is a switch\" onChange={changeCount} />\n      <Text>Number of times the switch has changed {switchCount}</Text>\n    </>\n  );\n};\n\nError state\nI agree to the terms and conditions\nSubmit\nCopy\nimport { SwitchField, Button, Flex } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const SwitchFieldErrorExample = () => {\n  const [isChecked, setIsChecked] = React.useState(false);\n  const [hasError, setHasError] = React.useState(false);\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (!isChecked) {\n      setHasError(true);\n    } else {\n      setHasError(false);\n      alert(`success`);\n    }\n  };\n\n  return (\n    <Flex\n      as=\"form\"\n      direction=\"column\"\n      alignItems=\"flex-start\"\n      onSubmit={onSubmit}\n    >\n      <SwitchField\n        label=\"I agree to the terms and conditions\"\n        labelPosition=\"end\"\n        isChecked={isChecked}\n        hasError={hasError}\n        errorMessage=\"Please agree to the terms and conditions\"\n        onChange={(e) => {\n          setIsChecked(e.target.checked);\n        }}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all SwitchField components in your application with a Theme.\n\nSwitchField Theme Source\n\nThemed Switch\nCopy\nimport { SwitchField, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'switchfield-theme',\n  tokens: {\n    components: {\n      switchfield: {\n        thumb: {\n          backgroundColor: { value: '{colors.background.primary}' },\n          borderColor: { value: '{colors.border.primary}' },\n          transition: {\n            duration: { value: '{time.long}' },\n          },\n        },\n\n        track: {\n          backgroundColor: { value: '{colors.background.tertiary}' },\n          checked: {\n            backgroundColor: { value: '{colors.secondary.60}' },\n          },\n          transition: {\n            duration: { value: '{time.long}' },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SwitchFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <SwitchField label=\"Themed Switch\" />\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-switchfield\tTop level element that wraps the SwitchField primitive\namplify-switch__label\tClass applied to the SwitchField label text\namplify-switch__thumb\tClass applied to the SwitchField thumb\namplify-switch__track\tClass applied to the SwitchField track\namplify-switch__wrapper\tClass applied to the label element that wraps the SwitchField label and track\nGlobal Styling\n\nTo override styling on all SwitchFields, you can set the Amplify CSS variables or use the built-in .amplify-switchfield class.\n\nThis is a switch\nCopy\n/* styles.css */\n:root {\n  --amplify-components-switchfield-default-font-size: 0.5rem;\n}\n/* OR */\n.amplify-switchfield {\n  font-size: 0.5rem;\n}\n\nLocal styling\n\nTo override styling on a specific SwitchField, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nThis is a switch\nCopy\n/* styles.css */\n.my-custom-switchfield {\n  font-size: 0.75rem;\n}\n\nCopy\nimport './styles.css';\n\n<SwitchField label=\"This is a switch\" className=\"my-custom-switchfield\" />;\n\n\nUsing data attributes:\n\nlarge switchfield\nCopy\n/* styles.css */\n/* Override only large size styles */\n.amplify-switchfield[data-size='large'] {\n  font-size: 2.5rem;\n}\n\nCopy\nimport './styles.css';\n\n<SwitchField label=\"large switchfield\" size=\"large\" />;\n\n\nUsing style props:\n\nThis is a switch\nCopy\nimport { SwitchField } from '@aws-amplify/ui-react';\n\nexport const SwitchFieldStylePropsExample = () => {\n  return <SwitchField label=\"This is a switch\" fontSize=\"xs\" />;\n};\n"
  },
  {
    "title": "StepperField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/stepperfield",
    "html": "StepperField\n\nStepperField allows users to increment or decrement a number input.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nStepper\nlabel\nmin\nmax\nstep\nsize\ndefault\nsmall\nlarge\nvariation\ndefault\nquiet\nlabelHidden\nisDisabled\nCopy\n<StepperField\n  max={10}\n  min={0}\n  step={1}\n  label=\"Stepper\"\n/>\nUsage\n\nImport StepperField and styles. You could edit the stepping value directly but it will be validated and rounded to a valid one when the field loses focus.\n\nStepper\nCopy\nimport { StepperField } from '@aws-amplify/ui-react';\n\nexport const DefaultStepperFieldExample = () => {\n  return (\n    <StepperField\n      label=\"Stepper\"\n      defaultValue={0}\n      min={0}\n      max={10}\n      step={1}\n      labelHidden\n    />\n  );\n};\n\nControlled component\n\nTo use the StepperField as a controlled component, use the value prop and onStepChange handler.\n\nNote that onStepChange returns a new value (number), not the event object. This is because the StepperField is a complex component which is handling input, blur, and change events on the input element as well as click events on the button elements. The onStepChange handler simplifies all of this and returns the new value of the input in response to any of these events.\n\nControlled stepper\nCopy\nimport * as React from 'react';\nimport { StepperField } from '@aws-amplify/ui-react';\n\nexport const ControlledStepperFieldExample = () => {\n  const [value, setValue] = React.useState<number>(0);\n\n  const handleOnStepChange = (newValue: number) => {\n    alert(`New value: ${newValue}`);\n    setValue(newValue);\n  };\n\n  return (\n    <StepperField\n      label=\"Controlled stepper\"\n      value={value}\n      onStepChange={handleOnStepChange}\n    />\n  );\n};\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nStepper\nCopy\nimport { StepperField } from '@aws-amplify/ui-react';\n\nexport const StepperFieldAccessibilityExample = () => {\n  return (\n    <StepperField label=\"Stepper\" defaultValue={0} min={0} max={10} step={1} />\n  );\n};\n\nSizes\n\nUse the size prop to change the StepperField size. Available options are small, large, and none (default).\n\nStepper\nStepper\nStepper\nCopy\nimport { StepperField } from '@aws-amplify/ui-react';\n\nexport const StepperFieldSizeExample = () => {\n  return (\n    <>\n      <StepperField\n        label=\"Stepper\"\n        defaultValue={0}\n        min={0}\n        max={10}\n        step={1}\n        size=\"small\"\n        labelHidden\n      />\n      <StepperField\n        label=\"Stepper\"\n        defaultValue={0}\n        min={0}\n        max={10}\n        step={1}\n        labelHidden\n      />\n      <StepperField\n        label=\"Stepper\"\n        defaultValue={0}\n        min={0}\n        max={10}\n        step={1}\n        size=\"large\"\n        labelHidden\n      />\n    </>\n  );\n};\n\nState\n\nThe available StepperField states include isDisabled and isReadOnly. A disabled field will not be focusable or mutable and will not be submitted with form data. A read-only field cannot be edited by the user.\n\nDisabled StepperField\nStepper\nCopy\nimport { StepperField } from '@aws-amplify/ui-react';\n\nexport const DisabledStepperFieldExample = () => {\n  return (\n    <StepperField\n      label=\"Stepper\"\n      defaultValue={0}\n      min={0}\n      max={10}\n      step={1}\n      labelHidden\n      isDisabled\n    />\n  );\n};\n\nRead-only StepperField\nStepper\nCopy\nimport { StepperField } from '@aws-amplify/ui-react';\n\nexport const ReadOnlyStepperFieldExample = () => {\n  return (\n    <StepperField\n      label=\"Stepper\"\n      defaultValue={5}\n      min={0}\n      max={10}\n      step={1}\n      labelHidden\n      isReadOnly\n    />\n  );\n};\n\nValidation error\n\nUse the hasError and errorMessage props to mark a StepperField as having an validation error.\n\nStepper\n\nThe is an error message.\n\nCopy\nimport { StepperField } from '@aws-amplify/ui-react';\n\nexport const StepperFieldValidationErrorExample = () => {\n  return (\n    <StepperField\n      label=\"Stepper\"\n      defaultValue={0}\n      min={0}\n      max={10}\n      step={1}\n      errorMessage=\"The is an error message.\"\n      hasError\n      labelHidden\n    />\n  );\n};\n\nStandard HTML attributes\n\nThe StepperField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation\n\nStepper\nCopy\n<StepperField\n  label=\"Stepper\"\n  min={0}\n  max={10}\n  step={1}\n  name=\"stepper\"\n/>\n\nStyling\nTheme\n\nYou can customize the appearance of all StepperField components in your application with a Theme.\n\nStepperField Theme Source\n\nThemed stepper\nCopy\nimport { StepperField, ThemeProvider } from '@aws-amplify/ui-react';\n\nconst theme = {\n  name: 'stepper-theme',\n  tokens: {\n    components: {\n      stepperfield: {\n        borderColor: { value: '{colors.secondary.20}' },\n        input: {\n          color: { value: '{colors.primary.80}' },\n          fontSize: { value: '{fontSizes.large}' },\n        },\n        button: {\n          color: { value: '{colors.primary.80}' },\n          backgroundColor: { value: '{colors.neutral.20}' },\n          _disabled: {\n            color: { value: '{colors.primary.80}' },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const StepperFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <StepperField\n      label=\"Themed stepper\"\n      defaultValue={0}\n      min={0}\n      max={10}\n      step={1}\n      labelHidden\n    />\n  </ThemeProvider>\n);\n\nIcons\nThemed stepper\nCopy\nimport { StepperField, IconsProvider } from '@aws-amplify/ui-react';\nimport { FiMinusSquare, FiPlusSquare } from 'react-icons/fi';\n\nexport const StepperFieldIconProviderExample = () => (\n  <IconsProvider\n    icons={{\n      stepperField: {\n        add: <FiPlusSquare />,\n        remove: <FiMinusSquare />,\n      },\n    }}\n  >\n    <StepperField\n      label=\"Themed stepper\"\n      defaultValue={0}\n      min={0}\n      max={10}\n      step={1}\n      labelHidden\n    />\n  </IconsProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-stepperfield\tTop level element that wraps the StepperField primitive\namplify-stepperfield__button--decrease\tClass applied to the decrease button\namplify-stepperfield__button--increase\tClass applied to the increase button\namplify-stepperfield__input\tClass applied to the StepperField input\nGlobal styling\n\nTo override styling on all StepperFields, you can set the Amplify CSS variables or use the built-in .amplify-stepperfield, .amplify-stepperfield__input, amplify-stepperfield__button--decrease and amplify-stepperfield__button--increase class.\n\nStepper\nCopy\n/* styles.css */\n:root {\n  --amplify-components-stepperfield-input-border-color: var(\n    --amplify-colors-purple-80\n  );\n}\n/* OR */\n.amplify-stepperfield__input {\n  border-color: var(--amplify-colors-purple-80);\n}\n\nLocal styling\n\nTo override styling on a specific StepperField, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nStepper\nCopy\n/* styles.css */\n.custom-button .amplify-stepperfield__button--decrease,\n.amplify-stepperfield__button--increase {\n  color: var(--amplify-colors-white);\n  background-color: var(--amplify-colors-purple-80);\n}\n\nCopy\nimport { StepperField } from '@aws-amplify/ui-react';\n\nimport './styles.css';\n\n<StepperField\n  label=\"Stepper\"\n  classname=\"custom-button\"\n  defaultValue={0}\n  min={0}\n  max={10}\n  step={1}\n  labelHidden\n/>;\n\n\nUsing data attributes:\n\nStepper\nCopy\n/* styles.css */\n\n/* Override only large size styles */\n.amplify-stepperfield[data-size='large'] {\n  width: 50%;\n}\n\n\nUsing style props:\n\nAll style props will be applied to the Flex wrapper of the StepperField. To style the input of the StepperField, you can pass a inputStyles prop with the style props you want to apply to the input.\n\nStepper\nStepper\nCopy\nimport { StepperField, useTheme } from '@aws-amplify/ui-react';\n\nexport const StepperFieldStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <StepperField\n        label=\"Stepper\"\n        defaultValue={0}\n        min={0}\n        max={10}\n        step={1}\n        padding=\"large\"\n        border={`1px solid ${tokens.colors.primary[60]}`}\n      />\n      <StepperField\n        label=\"Stepper\"\n        defaultValue={0}\n        min={0}\n        max={10}\n        step={1}\n        inputStyles={{\n          backgroundColor: 'primary.10',\n        }}\n      />\n    </>\n  );\n};\n"
  },
  {
    "title": "SelectField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/selectfield",
    "html": "SelectField\n\nSelectField allows users to select from a menu of options.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nFruit\n\nWhat's your favorite fruit?\n\nPlease select a fruit\nApple\nBanana\nOrange\nPineapple\nKiwi\nTangerine\nsize\ndefault\nsmall\nlarge\nvariation\ndefault\nquiet\nlabel\ndescriptiveText\nerrorMessage\nselectSize\n1\n2\n3\n4\n5\n6\nlabelHidden\nhasError\nisDisabled\nisMultiple\nCopy\n<SelectField\n  label=\"Fruit\"\n  descriptiveText=\"What's your favorite fruit?\"\n>\n    <option value=\"apple\">Apple</option>\n    <option value=\"banana\">Banana</option>\n    <option value=\"orange\" disabled>Orange</option>\n    <option value=\"pineapple\">Pineapple</option>\n    <option value=\"kiwi\">Kiwi</option>\n    <option value=\"tangerine\">Tangerine</option>\n</SelectField>\nUsage\n\nImport the SelectField primitive, and provide a label for accessibility. The <option> tags nested inside the component define the available options in the drop-down list.\n\nFruit\nApple\nBanana\nOrange\nZucchini\nCopy\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const DefaultSelectFieldExample = () => (\n  <SelectField label=\"Fruit\">\n    <option value=\"apple\">Apple</option>\n    <option value=\"banana\">Banana</option>\n    <option value=\"orange\">Orange</option>\n    <option value=\"zucchini\" disabled>\n      Zucchini\n    </option>\n  </SelectField>\n);\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nControlled component\n\nTo manually control the SelectField state, you can use the value and onChange props along with React's useState hook.\n\nFruit\nThis SelectField is manually controlled\nX\nY\nZ\nCopy\nimport * as React from 'react';\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const SelectFieldControlledExample = () => {\n  const [value, setValue] = React.useState('');\n\n  return (\n    <SelectField\n      label=\"Fruit\"\n      labelHidden\n      placeholder=\"This SelectField is manually controlled\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    >\n      <option value=\"x\">X</option>\n      <option value=\"y\">Y</option>\n      <option value=\"z\">Z</option>\n    </SelectField>\n  );\n};\n\nOptions\n\nCreate a simple SelectField by passing a list to the options prop.\n\nAnimals\nlions\ntigers\nbears\nThis is the same as the example above\nlions\ntigers\nbears\nCopy\nimport { SelectField, Flex } from '@aws-amplify/ui-react';\n\nexport const SelectFieldOptionsExample = () => (\n  <Flex direction=\"column\">\n    <SelectField\n      label=\"Animals\"\n      options={['lions', 'tigers', 'bears']}\n    ></SelectField>\n\n    <SelectField label=\"This is the same as the example above\">\n      <option value=\"lions\" label=\"lions\">\n        lions\n      </option>\n      <option value=\"tigers\" label=\"tigers\">\n        tigers\n      </option>\n      <option value=\"bears\" label=\"bears\">\n        bears\n      </option>\n    </SelectField>\n  </Flex>\n);\n\nSizes\n\nUse the size prop to change the SelectField size. Available options are small, large, and none (default).\n\nsmall\nsmall\ndefault\ndefault\nlarge\nlarge\nCopy\nimport { SelectField, Flex } from '@aws-amplify/ui-react';\n\nexport const SelectFieldSizeExample = () => (\n  <Flex direction=\"column\">\n    <SelectField size=\"small\" label=\"small\" labelHidden>\n      <option>small</option>\n    </SelectField>\n    <SelectField label=\"default\" labelHidden>\n      <option>default</option>\n    </SelectField>\n    <SelectField size=\"large\" label=\"large\" labelHidden>\n      <option>large</option>\n    </SelectField>\n  </Flex>\n);\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\ndefault\ndefault\nquiet\nquiet\nCopy\nimport { SelectField, Flex } from '@aws-amplify/ui-react';\n\nexport const SelectFieldVariationExample = () => (\n  <Flex direction=\"column\">\n    <SelectField label=\"default\" labelHidden>\n      <option>default</option>\n    </SelectField>\n    <SelectField variation=\"quiet\" label=\"quiet\" labelHidden>\n      <option>quiet</option>\n    </SelectField>\n  </Flex>\n);\n\nPlaceholder\n\nText that appears in the form control when it has no value set.\n\nplaceholderExample\nThis is the placeholder...\nThis is the option\nCopy\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const SelectFieldPlaceholderExample = () => (\n  <SelectField\n    placeholder=\"This is the placeholder...\"\n    label=\"placeholderExample\"\n    labelHidden\n  >\n    <option value=\"option\">This is the option</option>\n  </SelectField>\n);\n\nDescriptive text\n\nThe descriptiveText prop will only be visible when label is not hidden (i.e., labelHidden={false}). You can use it to provide some additional description of the field.\n\nSelectField\n\nWhat do you think of the SelectField?\n\nIt is amazing\nWOW!\nJust incredible\nCopy\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const SelectFieldDescriptiveTextExample = () => (\n  <SelectField\n    label=\"SelectField\"\n    descriptiveText=\"What do you think of the SelectField?\"\n  >\n    <option value=\"amazing\">It is amazing</option>\n    <option value=\"wow\">WOW!</option>\n    <option value=\"incredible\">Just incredible</option>\n  </SelectField>\n);\n\nIcon\n\nYou can change the icon used to expand the SelectField by using the icon prop. You can also change the icon's color by passing the iconColor prop.\n\nIcon example\nCheck out that Icon! --->\nPretty cool, right?\nCopy\nimport { Icon, SelectField } from '@aws-amplify/ui-react';\n\nconst IconArrowDropDown = () => {\n  return <Icon pathData=\"M7 10L12 15L17 10H7Z\" ariaLabel=\"Down arrow\" />;\n};\n\nexport const SelectFieldIconExample = () => (\n  <SelectField\n    label=\"Icon example\"\n    labelHidden\n    icon={<IconArrowDropDown />}\n    iconColor=\"red\"\n    placeholder=\"Check out that Icon! ---> \"\n  >\n    <option value=\"cool\">Pretty cool, right?</option>\n  </SelectField>\n);\n\nDisabled state\n\nA disabled field will not be focusable or mutable, and it will not be submitted with form data. Use the isDisabled prop to set the state for the SelectField.\n\nSelectField\nYou cannot view or select this option\nCopy\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const SelectFieldDisabledStateExample = () => (\n  <SelectField isDisabled label=\"SelectField\" labelHidden>\n    <option value=\"option\">You cannot view or select this option</option>\n  </SelectField>\n);\n\nMultiple selections\n\nUse the isMultiple prop to specify that multiple options can be selected at once.\n\nFor Mac: Hold down the command button to select multiple options\nFor Windows: Hold down the control button to select multiple options\nFruit\n\nWhat's your favorite fruit?\n\nApple\nBanana\nOrange\nPineapple\nKiwi\nTangerine\nCopy\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const SelectFieldMultipleStateExample = () => (\n  <SelectField\n    label=\"Fruit\"\n    descriptiveText=\"What's your favorite fruit?\"\n    isMultiple={true}\n  >\n    <option value=\"apple\">Apple</option>\n    <option value=\"banana\">Banana</option>\n    <option value=\"orange\">Orange</option>\n    <option value=\"pineapple\">Pineapple</option>\n    <option value=\"kiwi\">Kiwi</option>\n    <option value=\"tangerine\">Tangerine</option>\n  </SelectField>\n);\n\nSelect size\n\nUse the selectSize prop to set the number of visible options in a drop-down list. If the value of the selectSize attribute is greater than 1, but lower than the total number of options in the list, the browser will add a scroll bar to indicate that there are more options to view.\n\nFruit\n\nWhat's your favorite fruit?\n\nApple\nBanana\nOrange\nPineapple\nKiwi\nTangerine\nCopy\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const SelectFieldSelectSizeExample = () => (\n  <SelectField\n    label=\"Fruit\"\n    descriptiveText=\"What's your favorite fruit?\"\n    selectSize={3}\n  >\n    <option value=\"apple\">Apple</option>\n    <option value=\"banana\">Banana</option>\n    <option value=\"orange\">Orange</option>\n    <option value=\"pineapple\">Pineapple</option>\n    <option value=\"kiwi\">Kiwi</option>\n    <option value=\"tangerine\">Tangerine</option>\n  </SelectField>\n);\n\nValidation error\n\nUse the hasError and errorMessage props to mark a SelectField as having a validation error.\n\nFruit\nUh oh\n\nThis is a required field.\n\nCopy\nimport { SelectField } from '@aws-amplify/ui-react';\n\nexport const SelectFieldValidationErrorExample = () => (\n  <SelectField\n    label=\"Fruit\"\n    labelHidden\n    hasError={true}\n    errorMessage=\"This is a required field.\"\n  >\n    <option value=\"uh oh\">Uh oh</option>\n  </SelectField>\n);\n\nStandard HTML attributes\n\nThe SelectField will accept any of the standard HTML attributes that a <select> element accepts. Standard <select> attributes can be found in the MDN Documentation\n\nFruit\nApple\nBanana\nOrange\nCopy\n<SelectField label=\"Fruit\" name=\"fruit\">\n  <option value=\"apple\">Apple</option>\n  <option value=\"banana\">Banana</option>\n  <option value=\"orange\">Orange</option>\n</SelectField>\n\nStyling\nTheme\n\nYou can customize the appearance of all SelectField components in your application with a Theme.\n\nSelectField Theme Source\n\nFruit\nApple\nBanana\nOrange\nCopy\nimport { SelectField, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'selectfield-theme',\n  tokens: {\n    components: {\n      selectfield: {\n        color: { value: '{colors.blue.60}' },\n        fontSize: { value: '{fontSizes.large}' },\n        borderColor: { value: '{colors.red.60}' },\n        _focus: {\n          borderColor: { value: '{colors.red.80}' },\n        },\n        label: {\n          color: { value: '{colors.blue.60}' },\n        },\n      },\n    },\n  },\n};\n\nexport const SelectFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <SelectField label=\"Fruit\">\n      <option value=\"apple\">Apple</option>\n      <option value=\"banana\">Banana</option>\n      <option value=\"orange\">Orange</option>\n    </SelectField>\n  </ThemeProvider>\n);\n\nIcons\nFruit\nApple\nBanana\nOrange\nCopy\nimport { SelectField, IconsProvider } from '@aws-amplify/ui-react';\nimport { FiChevronsDown } from 'react-icons/fi';\n\nexport const SelectFieldIconProviderExample = () => (\n  <IconsProvider\n    icons={{\n      select: {\n        expand: <FiChevronsDown />,\n      },\n    }}\n  >\n    <SelectField label=\"Fruit\">\n      <option value=\"apple\">Apple</option>\n      <option value=\"banana\">Banana</option>\n      <option value=\"orange\">Orange</option>\n    </SelectField>\n  </IconsProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-select\tClass applied to the select element\namplify-selectfield\tTop level element that wraps the SelectField primitive\namplify-select__wrapper\tClass applied to the select wrapper\namplify-select__icon\tClass applied to the select icon wrapper\nGlobal styling\n\nTo override styling on all SelectFields, you can set the Amplify CSS variables with the built-in .amplify-selectfield class.\n\nGlobally styled field\nCopy\n/* styles.css */\n.amplify-selectfield {\n  --amplify-components-fieldcontrol-border-color: rebeccapurple;\n}\n\nLocal styling\n\nTo override styling on a specific SelectField, you can use a class selector or style props.\n\nUsing a class selector:\n\nFruit\nPlease select a fruit\nApple\nBanana\nOrange\nCopy\n/* styles.css */\n.my-custom-selectfield .amplify-select {\n  border-radius: 0;\n}\n\n\nUsing style props:\n\nFruit\nApple\nBanana\nOrange\nFruit\nApple\nBanana\nOrange\nCopy\nimport { SelectField, useTheme } from '@aws-amplify/ui-react';\n\nexport const SelectFieldStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <SelectField\n        label=\"Fruit\"\n        padding=\"xl\"\n        border={`1px solid ${tokens.colors.primary[60]}`}\n      >\n        <option value=\"apple\">Apple</option>\n        <option value=\"banana\">Banana</option>\n        <option value=\"orange\">Orange</option>\n      </SelectField>\n      <SelectField\n        label=\"Fruit\"\n        inputStyles={{\n          backgroundColor: 'primary.10',\n          border: `1px solid ${tokens.colors.primary[60]}`,\n        }}\n      >\n        <option value=\"apple\">Apple</option>\n        <option value=\"banana\">Banana</option>\n        <option value=\"orange\">Orange</option>\n      </SelectField>\n    </>\n  );\n};\n"
  },
  {
    "title": "SliderField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/sliderfield",
    "html": "SliderField\n\nSliderField allows users to select a value within a defined range.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nSlider\n50\nlabel\nmin\nmax\nstep\nsize\ndefault\nlarge\nsmall\ntrackSize\nemptyTrackColor\nfilledTrackColor\nthumbColor\norientation\nhorizontal\nvertical\nisDisabled\nisValueHidden\nlabelHidden\nCopy\n<SliderField\n  label=\"Slider\"\n  max={100}\n/>\nUsage\n\nImport the SliderField component.\n\nDefault slider\n0\nCopy\nimport { SliderField } from '@aws-amplify/ui-react';\n\nexport const DefaultSliderFieldExample = () => {\n  return <SliderField label=\"Default slider\" />;\n};\n\nControlled component\n\nTo use the SliderField as a controlled component, handle the current value using the value and onChange props.\n\nControlled slider\n50\nCopy\nimport { SliderField } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const ControlledSliderFieldExample = () => {\n  const [value, setValue] = React.useState(50);\n\n  return (\n    <SliderField label=\"Controlled slider\" value={value} onChange={setValue} />\n  );\n};\n\nBasics\n\nTo control the range of the SliderField, use the min and max props. To control the interval between selectable values, use the step prop (defaults to 1). You may also set a defaultValue.\n\nSelect your favorite odd number between 1 and 9\n5\nCopy\nimport { SliderField } from '@aws-amplify/ui-react';\n\nexport const SliderFieldBasicsExample = () => {\n  return (\n    <SliderField\n      label=\"Select your favorite odd number between 1 and 9\"\n      min={1}\n      max={9}\n      step={2}\n      defaultValue={5}\n    />\n  );\n};\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nYou can hide the value to the right of the label with isValueHidden prop.\n\nAccessibility demo\n50\nHide label\nHide value\nCopy\nimport { SliderField, Flex, Button } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const SliderFieldAccessibilityExample = () => {\n  const [labelHidden, setLabelHidden] = React.useState(false);\n  const [isValueHidden, setIsValueHidden] = React.useState(false);\n\n  return (\n    <>\n      <SliderField\n        label=\"Accessibility demo\"\n        labelHidden={labelHidden}\n        isValueHidden={isValueHidden}\n        defaultValue={50}\n      />\n      <Flex>\n        <Button onClick={() => setLabelHidden(!labelHidden)}>\n          {labelHidden ? 'Show label' : 'Hide label'}\n        </Button>\n        <Button onClick={() => setIsValueHidden(!isValueHidden)}>\n          {isValueHidden ? 'Show value' : 'Hide value'}\n        </Button>\n      </Flex>\n    </>\n  );\n};\n\n\nThe SliderField will programmatically update the value of aria-valuenow in response to user input. However, a slider sometimes is used to choose a value that is not, semantically, a number. In these cases, the ariaValuetext attribute is used to provide the appropriate text name for the currently selected value. See MDN using the slider role.\n\nI tend to be more introverted.\n\nNeutral\n\nCopy\nimport { SliderField, Text } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst userFeedback = [\n  'Strongly disagree',\n  'Disagree',\n  'Neutral',\n  'Agree',\n  'Strongly agree',\n];\n\nexport const SliderFieldAriaExample = () => {\n  const [index, setIndex] = React.useState(2);\n\n  return (\n    <>\n      <SliderField\n        ariaValuetext={userFeedback[index]}\n        label=\"I tend to be more introverted.\"\n        value={index}\n        onChange={setIndex}\n        max={4}\n        isValueHidden\n      />\n      <Text>{userFeedback[index]}</Text>\n    </>\n  );\n};\n\nForms\n\nTo use the SliderField in a form, pass a name prop to the SliderField to access its current value. To disable the SliderField, set the isDisabled prop. A disabled SliderField will not be focusable, mutable, or submit a value with form data.\n\nOn a scale from 1-10, how much do you enjoy waterslides?\n5\nSubmit\nDisable SelectField\nCopy\nimport { SliderField, Button, Flex } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const SliderFieldFormExample = () => {\n  const [value, setValue] = React.useState(5);\n  const [isDisabled, setIsDisabled] = React.useState(false);\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n    alert(`Waterslide enjoyment: ${event.target.waterslides.value}`);\n  };\n\n  return (\n    <form onSubmit={handleOnSubmit}>\n      <SliderField\n        label=\"On a scale from 1-10, how much do you enjoy waterslides?\"\n        name=\"waterslides\"\n        min={1}\n        max={10}\n        value={value}\n        onChange={setValue}\n        isDisabled={isDisabled}\n      />\n      <Flex>\n        <Button type=\"submit\">Submit</Button>\n        <Button onClick={() => setIsDisabled(!isDisabled)}>\n          {isDisabled ? 'Enable SelectField' : 'Disable SelectField'}\n        </Button>\n      </Flex>\n    </form>\n  );\n};\n\nOrientation\n\nTo change the orientation from horizontal (default) to vertical, use the orientation prop.\n\nHow tall is your cat (in inches)?\n9\nCopy\nimport { SliderField } from '@aws-amplify/ui-react';\n\nexport const SliderFieldOrientationExample = () => {\n  return (\n    <SliderField\n      label=\"How tall is your cat (in inches)?\"\n      orientation=\"vertical\"\n      min={3}\n      max={20}\n      defaultValue={9}\n    />\n  );\n};\n\nIcons\n\nTo add icons on either side of the SliderField, you may use the outerStartComponent or outerEndComponent props.\n\nVolume slider\n50\nCopy\nimport { SliderField, Icon } from '@aws-amplify/ui-react';\n\nexport const SliderFieldIconsExample = () => {\n  return (\n    <SliderField\n      label=\"Volume slider\"\n      outerStartComponent={\n        <Icon\n          ariaLabel=\"volume-down-icon\"\n          pathData=\"M16 7.97V16.02C17.48 15.29 18.5 13.77 18.5 12C18.5 10.23 17.48 8.71 16 7.97ZM5 9V15H9L14 20V4L9 9H5ZM12 8.83V15.17L9.83 13H7V11H9.83L12 8.83Z\"\n        />\n      }\n      outerEndComponent={\n        <Icon\n          ariaLabel=\"volume-up-icon\"\n          pathData=\"M3 8.99998V15H7L12 20V3.99998L7 8.99998H3ZM10 8.82998V15.17L7.83 13H5V11H7.83L10 8.82998ZM16.5 12C16.5 10.23 15.48 8.70998 14 7.96998V16.02C15.48 15.29 16.5 13.77 16.5 12ZM14 3.22998V5.28998C16.89 6.14998 19 8.82998 19 12C19 15.17 16.89 17.85 14 18.71V20.77C18.01 19.86 21 16.28 21 12C21 7.71998 18.01 4.13998 14 3.22998V3.22998Z\"\n        />\n      }\n      defaultValue={50}\n      size=\"large\"\n    />\n  );\n};\n\nFormat value\n\nTo format how the value is displayed, you can pass in a render function to formatValue prop.\n\nSliderField with formatted value\n50%\nCopy\nimport { SliderField } from '@aws-amplify/ui-react';\n\nexport const SliderFieldFormatValueExample = () => {\n  const formatValue = (value: number) => {\n    return `${value}%`;\n  };\n  return (\n    <SliderField\n      label=\"SliderField with formatted value\"\n      defaultValue={50}\n      formatValue={formatValue}\n    />\n  );\n};\n\nValidation error\n\nTo validate the SliderField input, use the hasError and errorMessage props.\n\nSelect your age\n13\n\nYou must be at least 18 years old.\n\nCopy\nimport { SliderField } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const SliderFieldValidationExample = () => {\n  const [age, setAge] = React.useState(13);\n\n  return (\n    <SliderField\n      label=\"Select your age\"\n      value={age}\n      onChange={setAge}\n      hasError={age < 18}\n      errorMessage=\"You must be at least 18 years old.\"\n    />\n  );\n};\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all SliderField components in your application with a Theme.\n\nSliderField Theme Source\n\nThemed Slider\n50\nCopy\nimport { SliderField, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'slider-theme',\n  tokens: {\n    components: {\n      sliderfield: {\n        thumb: {\n          width: { value: '{space.xl}' },\n          height: { value: '{space.xl}' },\n          backgroundColor: { value: '{colors.neutral.90}' },\n          borderRadius: { value: '{radii.medium}' },\n          _hover: {\n            backgroundColor: { value: '{colors.neutral.80}' },\n            borderColor: { value: '{colors.neutral.90}' },\n          },\n          _focus: {\n            borderColor: { value: '{colors.green.80}' },\n            boxShadow: {\n              // @ts-ignore //IGNORE\n              value: {\n                spreadRadius: '3px',\n                color: '{colors.green.20}',\n              },\n            },\n          },\n        },\n        track: {\n          backgroundColor: {\n            value: '{colors.blue.20}',\n          },\n          height: { value: '{fontSizes.medium}' },\n        },\n        range: {\n          backgroundColor: { value: '{colors.blue.80}' },\n        },\n      },\n    },\n  },\n};\n\nexport const SliderFieldThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <SliderField label=\"Themed Slider\" defaultValue={50} labelHidden />\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-sliderfield\tTop level element that wraps the SliderField primitive\namplify-sliderfield__group\tClass applied to the element that wraps the slider root\namplify-sliderfield__label\tClass applied to the slider label\namplify-sliderfield__range\tClass applied to the filled in portion of the slider track\namplify-sliderfield__root\tClass applied to the slider root which wraps the track and thumb\namplify-sliderfield__thumb\tClass applied to the slider thumb\namplify-sliderfield__track\tClass applied to the slider track\nGlobal styling\n\nTo override styling on all SliderField components, you can set the Amplify CSS variables or use the target classes.\n\nGlobally Styled Slider\n50\n/* styles.css */\n.amplify-sliderfield {\n  --amplify-components-sliderfield-range-background-color: var(\n    --amplify-colors-orange-60\n  );\n}\n\nLocal styling\n\nTo override styling on a specific SliderField, you can use class selectors or style props.\n\nUsing a class selector:\n\nNote that .amplify-sliderfield__range applies to the filled-in portion of the SliderField track, and .amplify-sliderfield__track applies to the empty portion.\n\nClassname Slider\n50\n/* styles.css */\n.custom-slider .amplify-sliderfield__track {\n  background-color: var(--amplify-colors-purple-80);\n}\n\nimport { SliderField } from '@aws-amplify/ui-react';\nimport './styles.css';\n\n<SliderField\n  className=\"custom-slider\"\n  label=\"Classname Slider\"\n  defaultValue={50}\n/>;\n\n\nUsing style props:\n\nThere are several props you can use to style different parts of the SliderField:\n\nfilledTrackColor applies to the filled-in part of the SliderField\nemptyTrackColor applies to the empty part of the SliderField\nthumbColor applies to the thumb component that users can slide\ntrackSize applies to the width of the track itself (e.g., 15px)\nsize applies to the overall size of the SliderField, including the thumb (options include 'small', 'large', and default)\nStyle Props Slider\n50\nCopy\nimport { SliderField, useTheme } from '@aws-amplify/ui-react';\n\nexport const SliderFieldStylePropsExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <SliderField\n      label=\"Style Props Slider\"\n      filledTrackColor={tokens.colors.green[80]}\n      emptyTrackColor={tokens.colors.green[20]}\n      thumbColor={tokens.colors.red[60]}\n      trackSize=\"15px\"\n      defaultValue={50}\n    />\n  );\n};\n"
  },
  {
    "title": "SearchField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/searchfield",
    "html": "SearchField\n\nSearchField accepts query text for search.\n\nReact source\nFeedback\nDocumentation\nProps\n\nUsers may clear the field by hitting the Esc key or by clicking the clear button. When users hit Enter key or click the search icon, the onSubmit event handler will be fired.\n\nDemo\nSearch\nlabel\nplaceholder\nsize\ndefault\nsmall\nlarge\nvariation\ndefault\nquiet\nhasSearchButton\nhasSearchIcon\nlabelHidden\nisDisabled\nCopy\n<SearchField\n  label=\"Search\"\n  placeholder=\"Search here...\"\n/>\nUsage\n\nImport the SearchField primitive, and provide a label for accessibility/usability.\n\nsearch\nCopy\nimport { SearchField } from '@aws-amplify/ui-react';\n\nexport const DefaultSearchFieldExample = () => <SearchField label=\"search\" />;\n\n\nNote: The clear text (x) button will show after user has entered text.\n\nControlled component\nsearch\nCopy\nimport { SearchField } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const SearchFieldControlledExample = () => {\n  const [value, setValue] = React.useState('');\n\n  const onChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  // It is your responsibility to set up onClear\n  const onClear = () => {\n    setValue('');\n  };\n\n  return (\n    <SearchField\n      label=\"search\"\n      onChange={onChange}\n      onClear={onClear}\n      value={value}\n    />\n  );\n};\n\n\nNote: When you use SearchField in controlled way, it is your responsibility to set up onClear other than onChange since the input value is under your control.\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nPlaceholder\n\nText that appears in the form control when it has no value set.\n\nsearch\nCopy\nimport { SearchField } from '@aws-amplify/ui-react';\n\nexport const PlaceholderSearchFieldExample = () => (\n  <SearchField label=\"search\" placeholder=\"Search...\" />\n);\n\nSizes\n\nUse the size prop to change SearchField size. Available options are small, large, and none (default).\n\nsearch\nsearch\nsearch\nCopy\nimport { SearchField, Flex } from '@aws-amplify/ui-react';\n\nexport const SizeSearchFieldExample = () => (\n  <Flex direction=\"column\">\n    <SearchField label=\"search\" size=\"small\" />\n    <SearchField label=\"search\" />\n    <SearchField label=\"search\" size=\"large\" />\n  </Flex>\n);\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\nsearch\nsearch\nCopy\nimport { SearchField, Flex } from '@aws-amplify/ui-react';\n\nexport const VariationSearchFieldExample = () => (\n  <Flex direction=\"column\">\n    <SearchField label=\"search\" />\n    <SearchField label=\"search\" variation=\"quiet\" />\n  </Flex>\n);\n\nForward refs\nImportant\n\nRefs are an escape hatch to the underlying DOM element of our primitives, but are typically not necessary for most applications.\n\nSee Refs and the DOM and Forwarding Refs for more information.\n\nThe standard ref prop will forward to the input element, the searchButtonRef prop forwards to the search button element.\n\nThe following is a contrived example demonstrating use of the ref props:\n\nPassword\nCopy\nimport * as React from 'react';\nimport { SearchField } from '@aws-amplify/ui-react';\n\nexport const RefExample = () => {\n  const inputRef = React.useRef(null);\n  const searchButtonRef = React.useRef(null);\n\n  const onClick = React.useCallback(() => {\n    inputRef.current.focus();\n    alert(`You searched for: ${inputRef.current.value}`);\n  }, []);\n\n  React.useEffect(() => {\n    const searchButtonRefCurrent = searchButtonRef.current;\n    if (searchButtonRef && searchButtonRefCurrent) {\n      // Note: this example is contrived to demonstrate using refs.\n      // Use the `onSubmit` prop on `SearchField` instead which\n      // responds to input field `Enter` keypresses and Submit button clicks.\n      searchButtonRefCurrent.addEventListener('click', onClick, false);\n      return () => {\n        searchButtonRefCurrent.removeEventListener('click', onClick, false);\n      };\n    }\n  }, [onClick]);\n\n  return (\n    <SearchField\n      label=\"Password\"\n      ref={inputRef}\n      searchButtonRef={searchButtonRef}\n    />\n  );\n};\n\nStandard HTML attributes\n\nThe SearchField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation\n\nSearch\nCopy\n<SearchField label=\"Search\" name=\"search\"/>\n\nStyling\nTheme\n\nYou can customize the appearance of all SearchField components in your application with a Theme.\n\nSearchField Theme Source\n\nsearch\nCopy\nimport { SearchField, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'searchfield-theme',\n  tokens: {\n    components: {\n      searchfield: {\n        button: {\n          color: { value: '{colors.blue.80}' },\n          backgroundColor: { value: '{colors.blue.20}' },\n          _focus: {\n            backgroundColor: {\n              value: '{colors.blue.60}',\n            },\n            color: { value: 'white' },\n          },\n          _hover: {\n            backgroundColor: {\n              value: '{colors.blue.80}',\n            },\n            color: { value: 'white' },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SearchFieldThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <SearchField label=\"search\" />\n    </ThemeProvider>\n  );\n};\n\nIcons\nPassword\nCopy\nimport { SearchField, IconsProvider } from '@aws-amplify/ui-react';\nimport { FiSearch } from 'react-icons/fi';\n\nexport const SearchFieldIconExample = () => (\n  <IconsProvider\n    icons={{\n      searchField: {\n        search: <FiSearch />,\n      },\n    }}\n  >\n    <SearchField label=\"Password\" />\n  </IconsProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-searchfield\tTop level element that wraps the SearchField primitive\namplify-searchfield__clear\tClass applied to the search field clear button\namplify-searchfield__search\tClass applied to the search button\nGlobal styling\n\nTo override styling on all SearchField primitives, you can set the Amplify CSS variables or use the built-in .amplify-searchfield class.\n\n/* styles.css */\n:root {\n  --amplify-components-button-color: black;\n  --amplify-components-button-border-color: black;\n  --amplify-components-fieldcontrol-border-color: black;\n}\n/* OR */\n.amplify-searchfield {\n  --amplify-components-button-color: black;\n  --amplify-components-button-border-color: black;\n  --amplify-components-fieldcontrol-border-color: black;\n}\n\nGlobally styled search field\nCopy\n/* styles.css */\n.amplify-searchfield {\n  --amplify-components-button-color: rebeccapurple;\n  --amplify-components-button-border-color: rebeccapurple;\n  --amplify-components-fieldcontrol-border-color: rebeccapurple;\n}\n\nLocal styling\n\nTo override styling on a specific SearchField, you can use a class selector or style props.\n\nUsing a class selector:\n\nSquare password field\nCopy\n/* styles.css */\n.custom-searchfield-class .amplify-input,\n.custom-searchfield-class .amplify-button {\n  border-radius: 0;\n}\n\n\nUsing style props:\n\nAll style props will be applied to the Flex wrapper of the SearchField. To style the input of the SearchField, you can pass a inputStyles prop with the style props you want to apply to the input.\n\nsearch\nsearch\nCopy\nimport { SearchField, useTheme } from '@aws-amplify/ui-react';\n\nexport const SearchFieldStyledPropsExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <>\n      <SearchField\n        label=\"search\"\n        padding=\"xl\"\n        border={`1px solid ${tokens.colors.primary[60]}`}\n      />\n      <SearchField\n        label=\"search\"\n        inputStyles={{\n          border: `1px solid ${tokens.colors.primary[60]}`,\n          backgroundColor: tokens.colors.primary[10],\n        }}\n      />\n    </>\n  );\n};\n"
  },
  {
    "title": "RadioGroupField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/radiogroupfield",
    "html": "RadioGroupField\n\nRadioGroupField allows users to select a single option from a list of mutually exclusive options.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nLanguage\nLanguage\nHTML\nCSS\nJavaScript\nlegend\nlabelPosition\ndefault\nstart\nend\ntop\nbottom\nvariation\nplain (default)\noutlined\ndirection\ncolumn\nrow\nsize\ndefault\nsmall\nlarge\nisDisabled\nCopy\n<RadioGroupField\n  legend=\"Language\"\n  name=\"language\"\n>\n  <Radio value=\"HTML\">HTML</Radio>\n  <Radio value=\"CSS\">CSS</Radio>\n  <Radio value=\"JavaScript\">JavaScript</Radio>\n</RadioGroupField>\nUsage\n\nImport the Radio and RadioGroupField components, and nest the Radio options inside the RadioGroupField.\n\nRadioGroupField requires both legend and name for accessibility and form submission, respectively. Radio only requires the value prop, which will be submitted with form data.\n\nYou also have the option to set a Radio as pre-selected by passing its value to the defaultValue prop on the RadioGroupField.\n\nAnimal\nAnimal\nDog\nCat\nBird\nCopy\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\nexport const BasicExample = () => (\n  <RadioGroupField legend=\"Animal\" name=\"animal\" defaultValue=\"Dog\">\n    <Radio value=\"Dog\">Dog</Radio>\n    <Radio value=\"Cat\">Cat</Radio>\n    <Radio value=\"Bird\">Bird</Radio>\n  </RadioGroupField>\n);\n\nControlled component\n\nTo manually control the RadioGroupField state, you can use the value and onChange props.\n\nFruit\nFruit\n🍎\n🍌\n🥕\nCopy\nimport * as React from 'react';\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\nexport const ControlledExample = () => {\n  const [value, setValue] = React.useState('apple');\n\n  return (\n    <RadioGroupField\n      legend=\"Fruit\"\n      name=\"fruit\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    >\n      <Radio value=\"apple\">🍎</Radio>\n      <Radio value=\"banana\">🍌</Radio>\n      <Radio value=\"carrot\">🥕</Radio>\n    </RadioGroupField>\n  );\n};\n\nSizes\n\nUse the size prop to change the RadioGroupField size. Available options are small, large, and none (default).\n\nsmall\nsmall\nSmall\ndefault\ndefault\nDefault\nlarge\nlarge\nLarge\nCopy\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\nexport const SizeExample = () => (\n  <>\n    <RadioGroupField legend=\"small\" name=\"small\" size=\"small\" legendHidden>\n      <Radio value=\"small\">Small</Radio>\n    </RadioGroupField>\n    <RadioGroupField legend=\"default\" name=\"default\" legendHidden>\n      <Radio value=\"default\">Default</Radio>\n    </RadioGroupField>\n    <RadioGroupField legend=\"large\" name=\"large\" size=\"large\" legendHidden>\n      <Radio value=\"large\">Large</Radio>\n    </RadioGroupField>\n  </>\n);\n\nDirection\n\nUse the direction prop to change the RadioGroupField direction. Available options are row and column (default).\n\nColumn\nColumn\nTop\nTo\nBottom\nRow\nRow\nLeft\nTo\nRight\nCopy\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\nexport const DirectionExample = () => (\n  <>\n    <RadioGroupField legend=\"Column\" name=\"column\">\n      <Radio value=\"top\">Top</Radio>\n      <Radio value=\"to-column\">To</Radio>\n      <Radio value=\"bottom\">Bottom</Radio>\n    </RadioGroupField>\n    <RadioGroupField legend=\"Row\" name=\"row\" direction=\"row\">\n      <Radio value=\"left\">Left</Radio>\n      <Radio value=\"to-row\">To</Radio>\n      <Radio value=\"right\">Right</Radio>\n    </RadioGroupField>\n  </>\n);\n\nLabel position\n\nUse the labelPosition prop to control where the label is in relation to the Radio. You may pass labelPosition to either the RadioGroupField or individual Radios.\n\nDefault\nDefault\nDefault\nStart\nStart\nStart\nTop\nTop\nTop\nBottom\nBottom\nBottom\nCopy\nimport { Radio, RadioGroupField, Flex } from '@aws-amplify/ui-react';\n\nexport const LabelPositionExample = () => (\n  <Flex>\n    <RadioGroupField legend=\"Default\" name=\"default\" legendHidden>\n      <Radio value=\"default\">Default</Radio>\n    </RadioGroupField>\n\n    <RadioGroupField\n      legend=\"Start\"\n      name=\"start\"\n      labelPosition=\"start\"\n      legendHidden\n    >\n      <Radio value=\"start\">Start</Radio>\n    </RadioGroupField>\n\n    <RadioGroupField legend=\"Top\" name=\"top\" labelPosition=\"top\" legendHidden>\n      <Radio value=\"top\">Top</Radio>\n    </RadioGroupField>\n\n    <RadioGroupField\n      legend=\"Bottom\"\n      name=\"bottom\"\n      labelPosition=\"bottom\"\n      legendHidden\n    >\n      <Radio value=\"bottom\">Bottom</Radio>\n    </RadioGroupField>\n  </Flex>\n);\n\nState\n\nThe available RadioGroupField states include isDisabled and isReadOnly. A disabled field will be not be focusable not mutable and will not be submitted with form data. A readonly field cannot be edited by the user, but will be submitted with form data.\n\nDisabled radios and radio group\nDisabled Radio\nDisabled Radio\nOption 1\nOption 2 is disabled\nOption 3\nDisabled RadioGroupField\nDisabled RadioGroupField\nAll\nOptions\nDisabled\nCopy\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\nexport const DisabledExample = () => (\n  <>\n    <RadioGroupField legend=\"Disabled Radio\" name=\"disabled-radio\">\n      <Radio value=\"option-1\">Option 1</Radio>\n      <Radio value=\"option-2\" isDisabled>\n        Option 2 is disabled\n      </Radio>\n      <Radio value=\"option-3\">Option 3</Radio>\n    </RadioGroupField>\n\n    <RadioGroupField\n      legend=\"Disabled RadioGroupField\"\n      name=\"disabled-field\"\n      isDisabled\n    >\n      <Radio value=\"all\">All</Radio>\n      <Radio value=\"options\">Options</Radio>\n      <Radio value=\"disabled\">Disabled</Radio>\n    </RadioGroupField>\n  </>\n);\n\nRead-only radio group\nRead-only\nRead-only\nI love Amplify UI 😍\nI like Amplify UI 👍\nI appreciate Amplify UI 🙏\nCopy\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\nexport const ReadOnlyExample = () => (\n  <RadioGroupField\n    legend=\"Read-only\"\n    name=\"read-only\"\n    defaultValue=\"love\"\n    isReadOnly\n  >\n    <Radio value=\"love\">I love Amplify UI 😍</Radio>\n    <Radio value=\"like\">I like Amplify UI 👍</Radio>\n    <Radio value=\"appreciate\">I appreciate Amplify UI 🙏</Radio>\n  </RadioGroupField>\n);\n\nValidation error\n\nUse the hasError and errorMessage props to mark a RadioGroupField as having a validation error.\n\nLanguage\nLanguage\nHTML\nCSS\nJavaScript\n\nThis is a required field. Please select an option.\n\nCopy\nimport * as React from 'react';\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\nconst options = ['HTML', 'CSS', 'JavaScript'];\n\nexport const ErrorExample = () => {\n  const [language, setLanguage] = React.useState(null);\n\n  return (\n    <RadioGroupField\n      legend=\"Language\"\n      name=\"example-12\"\n      onChange={(e) => setLanguage(e.target.value)}\n      errorMessage=\"This is a required field. Please select an option.\"\n      hasError={!language}\n      legendHidden\n    >\n      {options.map((option) => (\n        <Radio key={option} value={option}>\n          {option}\n        </Radio>\n      ))}\n    </RadioGroupField>\n  );\n};\n\nAccessibility\n\nAn HTML <legend> element is automatically associated with the RadioGroupField's <fieldset> via the legend prop so that the radiogroup is accessibly labelled. For Radio, a <label> element will be automatically generated via the label prop. Both can accept a string or ReactNode.\n\nIf no id is provided to <Radio>, one will be automatically generated and connected to both the label and the form control; in this case the input[type=\"radio\"].\n\nHow can I visually hide the legend or labels while maintaining accessibility?\n\nIn some applications it may be desirable to hide the legend when the field purpose is visually apparent such as a search field with button. The legendHidden prop can be used on RadioGroupField to visually hide the <legend> while still keeping it available to screenreaders. Similarily, the labelHidden prop can be used to accessibly hide a <Radio> element's <label>\n\nUX Tip: refrain hiding legends and labels if doing so hides important information needed by the user to fill out the field.\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all RadioGroupField components in your application with a Theme.\n\nRadioGroupField Theme Source\n\nThemed example\nThemed example\nBlue\nNavy\nCerulean\nCopy\nimport { Radio, RadioGroupField, ThemeProvider } from '@aws-amplify/ui-react';\n\nconst theme = {\n  name: 'radiogroup-theme',\n  tokens: {\n    components: {\n      radiogroup: {\n        radio: {\n          borderWidth: { value: '{borderWidths.small}' },\n          borderColor: { value: '{colors.blue.60}' },\n          backgroundColor: { value: '{colors.blue.20}' },\n          _checked: {\n            color: { value: '{colors.blue.80}' },\n          },\n          label: {\n            color: { value: '{colors.blue.80}' },\n          },\n        },\n        legend: {\n          color: { value: '{colors.blue.80}' },\n          fontWeight: { value: '{fontWeights.bold}' },\n        },\n      },\n    },\n  },\n};\n\nexport const RadioGroupFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <RadioGroupField legend=\"Themed example\" name=\"themed\" defaultValue=\"blue\">\n      <Radio value=\"blue\">Blue</Radio>\n      <Radio value=\"navy\">Navy</Radio>\n      <Radio value=\"cerulean\">Cerulean</Radio>\n    </RadioGroupField>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-radio\tTop level element that wraps the Radio primitive\namplify-radio__button\tClass applied to the displayed radio button\namplify-radio__input\tClass applied to the visually hidden radio input\namplify-radio__label\tClass applied to the radio label\namplify-radiogroupfield\tTop level element that wraps the RadioGroupField primitive\namplify-radiogroup\tClass applied to the radio group wrapper\nGlobal styling\n\nTo override styling on all Radio buttons, you can set the Amplify CSS variables or use the built-in .amplify-radio__button class.\n\nColors\nColors\n\nA\n\nB\n\nC\n\n/* styles.css */\n[data-amplify-theme] {\n  --amplify-components-radio-button-background-color: green;\n  --amplify-components-radio-button-border-color: lightgreen;\n}\n/* OR */\n.amplify-radio__button {\n  background-color: green;\n  border-color: lightgreen;\n}\n\n\nTo replace Radio button styling, unset it:\n\n.amplify-radio__button {\n  all: unset;\n  /* Add your styling here*/\n}\n\nLocal styling\n\nTo override styling on a specific Radio, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nColors\nColors\n\nRed\n\nOrange\n\nYellow\n\nCopy\n/* styles.css */\n.custom-radio .amplify-radio__input:checked + .amplify-radio__button {\n  background-color: orange;\n  border-color: red;\n  color: yellow;\n}\n\nimport { Radio, RadioGroupField } from '@aws-amplify/ui-react';\n\n<RadioGroupField legend=\"Language\" name=\"language\" defaultValue=\"html\">\n  <Radio value=\"html\" className=\"custom-radio\">\n    html\n  </Radio>\n</RadioGroupField>;\n\n\nUsing data attributes:\n\n/* styles.css */\n\n/* Override only large size styles */\n.amplify-radiogroupfield[data-size='large'] {\n  font-size: 1.25rem;\n}\n"
  },
  {
    "title": "PhoneNumberField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/phonenumberfield",
    "html": "PhoneNumberField\n\nPhoneNumberField allows users to input phone numbers.\n\nReact source\nFeedback\nDocumentation\nProps\nDemo\nPhone number\n\nPlease enter your phone number\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nlabel\nlabelHidden\ndescriptiveText\nplaceholder\nsize\ndefault\nsmall\nlarge\nvariation\ndefault\nquiet\nerrorMessage\nhasError\nisDisabled\nisReadOnly\nCopy\n<PhoneNumberField\n  defaultDialCode=\"+1\"\n  label=\"Phone number\"\n  descriptiveText=\"Please enter your phone number\"\n  placeholder=\"234-567-8910\"\n/>\nUsage\n\nImport the PhoneNumberField component and provide a label for accessibility/usability as well as a defaultDialCode which will auto-populate the dial code select field.\n\nPhone Number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\nimport { PhoneNumberField } from '@aws-amplify/ui-react';\n\nexport const DefaultPhoneNumberFieldExample = () => (\n  <PhoneNumberField label=\"Phone Number\" defaultDialCode=\"+1\" />\n);\n\nDial Code Select Properties\nAll countryCode fields are being deprecated in favor of the new dialCode fields. If you still have instances of defaultCountryCode, countryCodeList, countryCodeName, countryCodeLabel, and onCountryCodeChange then please update these to the new dialCode props listed below.\n\nThe dial code selector can be customized by setting several properties when using the PhoneNumberField primitive. The custom properties specific to the dial code selector are the following:\n\ndefaultDialCode (required): The default dial code that will be selected upon render\ndialCodeList: An array of dial codes (strings) used as options in the dial code selector\ndialCodeName: A name used when handling form submission for the dial code selector\ndialCodeLabel: A hidden accessible label for the dial code selector\nonDialCodeChange: A custom change handler for the dial code selector\nIf both defaultDialCode, dialCodeList, dialCodeName, dialCodeLabel, and onDialCodeChange and the corresponding countryCode prop are provided, then the value in the dialCode prop will be preferred.\nPhone Number\nDial Code\n+1\n+44\n+52\n+86\n+91\nCopy\nimport { PhoneNumberField } from '@aws-amplify/ui-react';\n\nexport const DialCodeSelectExample = () => (\n  <PhoneNumberField\n    label=\"Phone Number\"\n    defaultDialCode=\"+7\"\n    dialCodeList={['+1', '+44', '+52', '+86', '+91']}\n    dialCodeName=\"dial_code\"\n    dialCodeLabel=\"Dial Code\"\n    onDialCodeChange={(e) => alert(`Dial Code changed to: ${e.target.value}`)}\n  />\n);\n\nAutocomplete - supporting password managers\n\nUse the autoComplete prop to tell the browser how to populate the PhoneNumberField. By default, the PhoneNumberField primitive uses tel-national as the autoComplete property for the text field and tel-country-code as the autoComplete property for the dial code selector.\n\nIf the PhoneNumberField primitive is intended to be used in a form that is compatible with most password managers, the autoComplete property should be set to username (see Password Form Styles that Chromium Understands).\n\nPhone Number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nSign In\nCopy\nimport { Flex, PhoneNumberField, Button } from '@aws-amplify/ui-react';\n\nexport const AutoCompleteExample = () => {\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\n      `Phone number submitted with form: ${event.target.phone_number.value}`\n    );\n  };\n\n  return (\n    <Flex as=\"form\" direction=\"column\" gap=\"1rem\" onSubmit={handleSubmit}>\n      <PhoneNumberField\n        autoComplete=\"username\"\n        label=\"Phone Number\"\n        name=\"phone_number\"\n        defaultDialCode=\"+1\"\n      />\n      <Button type=\"submit\">Sign In</Button>\n    </Flex>\n  );\n};\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nPhone Number\nDial code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\nimport { PhoneNumberField } from '@aws-amplify/ui-react';\n\nexport const AccessibilityExample = () => (\n  <PhoneNumberField\n    label=\"Phone Number\"\n    labelHidden={true}\n    defaultDialCode=\"+1\"\n    placeholder=\"Phone Number\"\n    dialCodeLabel=\"Dial code\"\n  />\n);\n\nSizes\n\nPhoneNumberField sizes are designed to match the styling of other form field components such as Buttons. There are three sizes: 'small', (default), and 'large'.\n\nSmall\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nSmall\nDefault\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nDefault\nLarge\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nLarge\nCopy\nimport { PhoneNumberField, Flex, Button } from '@aws-amplify/ui-react';\n\nexport const SizeExample = () => (\n  <Flex direction=\"column\" gap=\"1rem\">\n    <Flex>\n      <PhoneNumberField\n        defaultDialCode=\"+1\"\n        label=\"Small\"\n        size=\"small\"\n        labelHidden\n      />\n      <Button size=\"small\">Small</Button>\n    </Flex>\n    <Flex>\n      <PhoneNumberField defaultDialCode=\"+1\" label=\"Default\" labelHidden />\n      <Button>Default</Button>\n    </Flex>\n    <Flex>\n      <PhoneNumberField\n        defaultDialCode=\"+1\"\n        label=\"Large\"\n        size=\"large\"\n        labelHidden\n      />\n      <Button size=\"large\">Large</Button>\n    </Flex>\n  </Flex>\n);\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\nDefault\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nQuiet\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\nimport { PhoneNumberField, Flex } from '@aws-amplify/ui-react';\n\nexport const VariationExample = () => (\n  <Flex direction=\"column\">\n    <PhoneNumberField defaultDialCode=\"+1\" label=\"Default\" />\n    <PhoneNumberField defaultDialCode=\"+1\" label=\"Quiet\" variation=\"quiet\" />\n  </Flex>\n);\n\nDescriptive text\n\nTo provide additional descriptive text of the field's requirements, use the descriptiveText prop. To customize the descriptive text, you may pass a Text component as the prop's value.\n\nPhone Number\n\nThis is basic descriptive text\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nPhone Number\n\nThis is customized descriptive text\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\nimport { PhoneNumberField, Text } from '@aws-amplify/ui-react';\n\nexport const DescriptiveTextExample = () => (\n  <>\n    <PhoneNumberField\n      defaultDialCode=\"+1\"\n      label=\"Phone Number\"\n      descriptiveText=\"This is basic descriptive text\"\n    />\n    <PhoneNumberField\n      defaultDialCode=\"+1\"\n      label=\"Phone Number\"\n      descriptiveText={\n        <Text\n          color=\"rebeccapurple\"\n          fontStyle=\"normal\"\n          fontSize=\"1.2rem\"\n          as=\"span\"\n        >\n          This is customized descriptive text\n        </Text>\n      }\n    />\n  </>\n);\n\nStates\n\nThe available PhoneNumberField states include isDisabled and isReadOnly. A disabled field will be not be focusable, mutable, or submitted with form data. A readonly field cannot be edited by the user.\n\nDisabled\n\nYou can't submit me\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nReadonly\n\nYou can't edit me\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\nimport { PhoneNumberField, Flex } from '@aws-amplify/ui-react';\n\nexport const StatesExample = () => (\n  <Flex direction=\"column\" gap=\"2rem\">\n    <PhoneNumberField\n      defaultDialCode=\"+1\"\n      label=\"Disabled\"\n      isDisabled={true}\n      descriptiveText=\"You can't submit me\"\n    />\n    <PhoneNumberField\n      defaultDialCode=\"+1\"\n      label=\"Readonly\"\n      isReadOnly={true}\n      descriptiveText=\"You can't edit me\"\n    />\n  </Flex>\n);\n\nRequired field\n\nUse the isRequired prop to specify a required field. If a user attempts to submit a field that is both required and empty, they will be prompted to fill out the field.\n\nPhone Number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nSubmit\nCopy\nimport { PhoneNumberField, Flex, Button } from '@aws-amplify/ui-react';\n\nexport const RequiredFieldExample = () => {\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\n      `Phone number submitted with form: ${event.target.phone_number.value}`\n    );\n  };\n\n  return (\n    <Flex as=\"form\" direction=\"column\" onSubmit={handleSubmit}>\n      <PhoneNumberField\n        defaultDialCode=\"+1\"\n        label=\"Phone Number\"\n        name=\"phone_number\"\n        isRequired={true}\n      />\n      <Button type=\"submit\" width=\"10rem\">\n        Submit\n      </Button>\n    </Flex>\n  );\n};\n\n\nThere is no default styling for required form fields. Customize the label or descriptiveText to instruct the user of the required field.\n\nPrimary phone number\n\nRequired\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\n\nSecondary phone number(required)\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nSubmit\nCopy\nimport { PhoneNumberField, Flex, Button, Text } from '@aws-amplify/ui-react';\n\nexport const RequiredFieldStyledExample = () => {\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\n      `Primary phone number: ${event.target.primary_phone.value} \\nSecondary phone number: ${event.target.secondary_phone.value}`\n    );\n  };\n\n  return (\n    <Flex as=\"form\" direction=\"column\" onSubmit={handleSubmit}>\n      <PhoneNumberField\n        defaultDialCode=\"+1\"\n        label=\"Primary phone number\"\n        name=\"primary_phone\"\n        descriptiveText={\n          <Text as=\"span\" fontSize=\"0.8rem\" color=\"red\" fontStyle=\"italic\">\n            Required\n          </Text>\n        }\n        isRequired={true}\n      />\n      <PhoneNumberField\n        defaultDialCode=\"+1\"\n        label={\n          <Text>\n            Secondary phone number\n            <Text as=\"span\" fontSize=\"0.8rem\" color=\"red\" padding=\"0.25rem\">\n              (required)\n            </Text>\n          </Text>\n        }\n        name=\"secondary_phone\"\n        isRequired={true}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\nValidation error\n\nUse the hasError and errorMessage fields to mark a PhoneNumberField as having a validation error.\n\nPhone number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\n\nNot a valid phone number! 😱\n\nCopy\nimport { PhoneNumberField } from '@aws-amplify/ui-react';\n\nexport const ValidationErrorExample = () => (\n  <PhoneNumberField\n    defaultDialCode=\"+1\"\n    label=\"Phone number\"\n    defaultValue=\"1234\"\n    hasError={true}\n    errorMessage=\"Not a valid phone number! 😱\"\n  />\n);\n\nForward refs\nImportant\n\nRefs are an escape hatch to the underlying DOM element of our primitives, but are typically not necessary for most applications.\n\nSee Refs and the DOM and Forwarding Refs for more information.\n\nThe standard ref prop will forward to the underlying input element, and the dialCodeRef prop forwards to the dial code select element.\n\nThe following is a contrived example demonstrating use of the ref and dialCodeRef props:\n\nPhone number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\n\n`inputRef` value:\n\nCopy\nimport { PhoneNumberField, Flex, Text } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const RefsExample = () => {\n  const inputRef = React.useRef(null);\n  const dialCodeRef = React.useRef(null);\n\n  const [inputRefValue, setInputRefValue] = React.useState('');\n\n  const onBlur = () => {\n    dialCodeRef.current.focus();\n    setInputRefValue(inputRef.current.value);\n  };\n\n  return (\n    <Flex direction=\"column\">\n      <PhoneNumberField\n        ref={inputRef}\n        dialCodeRef={dialCodeRef}\n        label=\"Phone number\"\n        defaultDialCode=\"+1\"\n        onBlur={onBlur}\n      />\n      <Text>`inputRef` value: {inputRefValue}</Text>\n    </Flex>\n  );\n};\n\nStandard HTML attributes\n\nThe PhoneNumberField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation\n\nPhone Number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\n<PhoneNumberField label=\"Phone Number\" name=\"phone\"/>\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all PhoneNumberField components in your application with a Theme.\n\nPhoneNumberField Theme Source\n\nThemed field\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\nimport { ThemeProvider, PhoneNumberField } from '@aws-amplify/ui-react';\n\nconst theme = {\n  name: 'phonenumber-theme',\n  tokens: {\n    components: {\n      phonenumberfield: {\n        //these design tokens will apply to both the select and input that are part of the phonenumber field\n        color: { value: '{colors.blue.60}' },\n        fontSize: { value: '{fontSizes.large}' },\n        borderColor: { value: '{colors.neutral.80}' },\n        _focus: {\n          borderColor: { value: '{colors.neutral.100}' },\n        },\n      },\n    },\n  },\n};\n\nexport const PhoneNumberFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <PhoneNumberField\n      label=\"Themed field\"\n      defaultDialCode=\"+1\"\n      labelHidden={true}\n    />\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-countrycodeselect\tClass applied to the Dial Code Select within the PhoneNumberField primitive\namplify-dialcodeselect\tClass applied to the Dial Code Select within the PhoneNumberField primitive\namplify-phonenumberfield\tTop level element that wraps the PhoneNumberField primitive\nGlobal styling\n\nTo override styling on all PhoneNumberField primitives, you can set the Amplify CSS variables with the built-in .amplify-phonenumberfield and .amplify-dialcodeselect class.\n\nGlobally styled field\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\n/* styles.css */\n.amplify-phonenumberfield,\n.amplify-dialcodeselect {\n  --amplify-components-fieldcontrol-border-color: rebeccapurple;\n}\n\nLocal styling\n\nTo override styling on a specific PhoneNumberField, you can use a class selector or style props.\n\nUsing a class selector:\n\nSquare field\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\n/* styles.css */\n.custom-phonenumberfield-class .amplify-phonenumberfield,\n.custom-phonenumberfield-class .amplify-dialcodeselect {\n  border-radius: 0;\n}\n\n\nUsing style props:\n\nAll style props will be applied to the Flex wrapper of the PhoneNumberField. To style the input of the PhoneNumberField, you can pass a inputStyles prop with the style props you want to apply to the input.\n\nPhone Number:\n\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nPhone number\nCountry code\n+1\n+7\n+20\n+27\n+30\n+31\n+32\n+33\n+34\n+36\n+39\n+40\n+41\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+81\n+82\n+84\n+86\n+90\n+91\n+92\n+93\n+94\n+95\n+98\n+212\n+213\n+216\n+218\n+220\n+221\n+222\n+223\n+224\n+225\n+226\n+227\n+228\n+229\n+230\n+231\n+232\n+233\n+234\n+235\n+236\n+237\n+238\n+239\n+240\n+241\n+242\n+243\n+244\n+245\n+246\n+248\n+249\n+250\n+251\n+252\n+253\n+254\n+255\n+256\n+257\n+258\n+260\n+261\n+262\n+263\n+264\n+265\n+266\n+267\n+268\n+269\n+290\n+291\n+297\n+298\n+299\n+345\n+350\n+351\n+352\n+353\n+354\n+355\n+356\n+357\n+358\n+359\n+370\n+371\n+372\n+373\n+374\n+375\n+376\n+377\n+378\n+379\n+380\n+381\n+382\n+385\n+386\n+387\n+389\n+420\n+421\n+423\n+500\n+501\n+502\n+503\n+504\n+505\n+506\n+507\n+508\n+509\n+537\n+590\n+591\n+593\n+594\n+595\n+596\n+597\n+598\n+599\n+670\n+672\n+673\n+674\n+675\n+676\n+677\n+678\n+679\n+680\n+681\n+682\n+683\n+685\n+686\n+687\n+688\n+689\n+690\n+691\n+692\n+850\n+852\n+853\n+855\n+856\n+872\n+880\n+886\n+960\n+961\n+962\n+963\n+964\n+965\n+966\n+967\n+968\n+970\n+971\n+972\n+973\n+974\n+975\n+976\n+977\n+992\n+993\n+994\n+995\n+996\n+998\nCopy\nimport { PhoneNumberField, Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const StylePropsExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <>\n      <PhoneNumberField\n        defaultDialCode=\"+1\"\n        label={\n          <Text fontWeight=\"bold\" fontSize={tokens.fontSizes.large}>\n            Phone Number:\n          </Text>\n        }\n        padding=\"xl\"\n        border={`1px solid ${tokens.colors.primary[60]}`}\n      />\n      <PhoneNumberField\n        defaultDialCode=\"+1\"\n        label=\"Phone number\"\n        inputStyles={{\n          backgroundColor: 'primary.10',\n        }}\n      />\n    </>\n  );\n};\n"
  },
  {
    "title": "PasswordField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/passwordfield",
    "html": "PasswordField\n\nPasswordField allows users to input passwords with the convenience of full password manager support.\n\nReact source\nFeedback\nDocumentation\nProps\nDemo\nPassword\n\nPlease enter password\n\nPassword is hidden\nautoComplete\ncurrent-password\nnew-password\ndefaultValue\ndescriptiveText\nerrorMessage\nhasError\nisDisabled\nisReadOnly\nisRequired\nlabel\nlabelHidden\nname\nplaceholder\nsize\nDefaul\nSmall\nLarge\nvalue\nvariation\nDefault\nQuiet\nhideShowPassword\nCopy\n\n\n<PasswordField\n  autoComplete=\"new-password\"\n  descriptiveText=\"Please enter password\"\n  label=\"Password\"\n  name=\"password\"\n  size=\"small\"\n/>\nUsage\n\nImport the PasswordField component and provide a label for accessibility/usability.\n\nPassword\nPassword is hidden\nCopy\nimport { PasswordField } from '@aws-amplify/ui-react';\n\nexport const DefaultPasswordFieldExample = () => {\n  return <PasswordField label=\"Password\" />;\n};\n\nHiding the show password button\n\nUse the hideShowPassword prop to hide the show password button.\n\nPassword\nHideShowPassword: true\nCopy\nimport * as React from 'react';\nimport { PasswordField, Button, Flex } from '@aws-amplify/ui-react';\n\nexport const HidePasswordFieldExample = () => {\n  const [hideShowPassword, setHideShowPassword] = React.useState(true);\n  const toggleHide = () => {\n    setHideShowPassword(!hideShowPassword);\n  };\n  return (\n    <Flex direction=\"column\">\n      <PasswordField\n        label=\"Password\"\n        name=\"password\"\n        hideShowPassword={hideShowPassword}\n      />\n      <Button onClick={toggleHide}>\n        HideShowPassword: {hideShowPassword.toString()}\n      </Button>\n    </Flex>\n  );\n};\n\nAutocomplete - supporting password managers\n\nUse the autoComplete prop to tell browser how to populate a password field. Options for autoComplete are current-password (default) and new-password.\n\nIf customers are logging in, setting autoComplete is not required because current-password is the default. If customers are signing up for a new account, set autoComplete to new-password.\n\nSee MDN for more information on autocomplete.\n\nSignup form example: new-password\n\nSign Up\nUsername\nPassword\n\nPassword must be at least 8 characters\n\nPassword is hidden\nSign Up\nCopy\nimport {\n  Flex,\n  Heading,\n  TextField,\n  PasswordField,\n  Button,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const SignUpFormExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex as=\"form\" direction=\"column\" gap={tokens.space.medium}>\n      <Heading level={3}>Sign Up</Heading>\n      <TextField label=\"Username\" name=\"username\" autoComplete=\"username\" />\n      <PasswordField\n        label=\"Password\"\n        name=\"password\"\n        autoComplete=\"new-password\"\n        descriptiveText=\"Password must be at least 8 characters\"\n      />\n      <Button type=\"submit\" onClick={(e) => e.preventDefault()}>\n        Sign Up\n      </Button>\n    </Flex>\n  );\n};\n\n\nLogin form example: current-password (default)\n\nLogin\nUsername\nPassword\nPassword is hidden\nLogin\nCopy\nimport {\n  Button,\n  Flex,\n  Heading,\n  PasswordField,\n  TextField,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const LoginFormExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex as=\"form\" direction=\"column\" gap={tokens.space.medium}>\n      <Heading level={3}>Login</Heading>\n      <TextField label=\"Username\" name=\"username\" autoComplete=\"username\" />\n      <PasswordField\n        label=\"Password\"\n        name=\"password\"\n        autoComplete=\"current-password\"\n      />\n      <Button type=\"submit\" onClick={(e) => e.preventDefault()}>\n        Login\n      </Button>\n    </Flex>\n  );\n};\n\n\nChange password example: current-password and new-password\n\nChange Password\nUsername\nCurrent password\n\nPassword must be at least 8 characters\n\nPassword is hidden\nNew password\n\nPassword must be at least 8 characters\n\nPassword is hidden\nConfirm password\nPassword is hidden\nSubmit\nCopy\nimport {\n  Flex,\n  Heading,\n  TextField,\n  PasswordField,\n  Button,\n  useTheme,\n} from '@aws-amplify/ui-react';\n\nexport const ChangePasswordFormExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex as=\"form\" direction=\"column\" gap={tokens.space.medium}>\n      <Heading level={3}>Change Password</Heading>\n      <TextField label=\"Username\" name=\"username\" autoComplete=\"username\" />\n      <PasswordField\n        label=\"Current password\"\n        name=\"current_password\"\n        autoComplete=\"current-password\"\n        descriptiveText=\"Password must be at least 8 characters\"\n      />\n      <PasswordField\n        label=\"New password\"\n        name=\"new_password\"\n        autoComplete=\"new-password\"\n        descriptiveText=\"Password must be at least 8 characters\"\n      />\n      <PasswordField\n        label=\"Confirm password\"\n        name=\"confirm_password\"\n        autoComplete=\"new-password\"\n      />\n      <Button type=\"submit\" onClick={(e) => e.preventDefault()}>\n        Submit\n      </Button>\n    </Flex>\n  );\n};\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\n🚀\n\nSpace Rocket Launch Codes\nPassword is hidden\nCopy\nimport { PasswordField, Text, Flex, useTheme } from '@aws-amplify/ui-react';\n\nexport const LabelHiddenExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex>\n      <Text paddingTop={tokens.space.small}>🚀</Text>\n      <PasswordField label=\"Space Rocket Launch Codes\" labelHidden={true} />\n    </Flex>\n  );\n};\n\nShowPasswordButton\n\nThe ShowPasswordButton renders a <button> element with role=\"switch\". Its aria-checked attribute is set to false when the password is hidden, and true when the password is shown.\n\nThere are several optional props for customizing the accessibility of the ShowPasswordButton:\n\nshowPasswordButtonLabel: Sets the aria-label for the ShowPasswordButton (defaults to \"Show password\")\npasswordIsHiddenLabel: Sets the text read by screen readers when the password is hidden (defaults to \"Password is hidden\")\npasswordIsShownLabel: Sets the text read by screen readers when the password is shown (defaults to \"Password is shown\")\nPassword\nYour password is hidden\nCopy\nimport { PasswordField } from '@aws-amplify/ui-react';\n\nexport const ShowPasswordButtonExample = () => {\n  return (\n    <PasswordField\n      label=\"Password\"\n      showPasswordButtonLabel=\"Toggle password shown/hidden\"\n      passwordIsHiddenLabel=\"Your password is hidden\"\n      passwordIsShownLabel=\"Your password is shown\"\n    />\n  );\n};\n\nSizes\n\nUse the size prop to change the visual size of the PasswordField. Three sizes are available: small, (default), and large.\n\nPassword\nPassword is hidden\nPassword\nPassword is hidden\nPassword\nPassword is hidden\nCopy\nimport { Flex, PasswordField, useTheme } from '@aws-amplify/ui-react';\n\nexport const SizeExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex direction=\"column\" gap={tokens.space.medium}>\n      <PasswordField label=\"Password\" name=\"password\" size=\"small\" />\n      <PasswordField label=\"Password\" name=\"password\" />\n      <PasswordField label=\"Password\" name=\"password\" size=\"large\" />\n    </Flex>\n  );\n};\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\nPassword\nPassword is hidden\nPassword\nPassword is hidden\nCopy\nimport { Flex, PasswordField, useTheme } from '@aws-amplify/ui-react';\n\nexport const VariationExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex direction=\"column\" gap={tokens.space.medium}>\n      <PasswordField label=\"Password\" name=\"password\" />\n      <PasswordField label=\"Password\" name=\"password\" variation=\"quiet\" />\n    </Flex>\n  );\n};\n\nDescriptive text\n\nTo provide additional descriptive text of requirements of the field, use the descriptiveText field.\n\nPassword\n\nPassword length must be greater than 8 characters\n\nPassword is hidden\nCopy\nimport { PasswordField, Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const DescriptiveTextExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <PasswordField\n      label=\"Password\"\n      name=\"password\"\n      descriptiveText={\n        <Text\n          as=\"span\"\n          color=\"rebeccapurple\"\n          fontStyle=\"italic\"\n          fontSize={tokens.fontSizes.small}\n        >\n          Password length must be greater than 8 characters\n        </Text>\n      }\n    />\n  );\n};\n\nRequired fields\n\nUse the isRequired prop to specify a required field.\n\nPassword\nPassword is hidden\nSubmit\nCopy\nimport { Flex, PasswordField, Button } from '@aws-amplify/ui-react';\n\nexport const IsRequiredExample = () => {\n  return (\n    <Flex as=\"form\" direction=\"column\" width=\"20rem\">\n      <PasswordField label=\"Password\" name=\"password\" isRequired={true} />\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\n\nThere is no default styling for required fields. Customize the label or descriptiveText to instruct the form user of the required field.\n\nPassword (required)\n\nPassword is hidden\nPassword\n\nRequired\n\nPassword is hidden\nSubmit\nCopy\nimport { Flex, PasswordField, Text, Button } from '@aws-amplify/ui-react';\n\nexport const RequiredPasswordFieldExample = () => (\n  <Flex as=\"form\" direction=\"column\" width=\"20rem\">\n    <PasswordField\n      label={\n        <Text>\n          Password\n          <Text as=\"span\" fontSize=\"0.8rem\" color=\"red\">\n            {' '}\n            (required)\n          </Text>\n        </Text>\n      }\n      name=\"password\"\n      isRequired={true}\n    />\n    <PasswordField\n      label=\"Password\"\n      descriptiveText={\n        <Text as=\"span\" fontSize=\"0.8rem\" color=\"red\" fontStyle=\"italic\">\n          Required\n        </Text>\n      }\n      name=\"password\"\n      isRequired={true}\n    />\n    <Button type=\"submit\">Submit</Button>\n  </Flex>\n);\n\nValidation error styling\n\nUse the hasError and errorMessage fields to mark a PasswordField as having a validation error.\n\nPassword\nPassword is hidden\n\nRequires uppercase, lowercase, and number with a minimum of 8 chars\n\nCopy\nimport * as React from 'react';\nimport { Flex, PasswordField } from '@aws-amplify/ui-react';\n\nexport const ValidationErrorExample = () => {\n  const [password, setPassword] = React.useState('1234');\n  const validationRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n  const errorMessage = `Requires uppercase, lowercase, and number with a minimum of 8 chars`;\n  return (\n    <Flex gap=\"1rem\" direction=\"column\">\n      <PasswordField\n        onChange={(e) => {\n          setPassword(e.target.value);\n        }}\n        label=\"Password\"\n        value={password}\n        hasError={!validationRegex.test(password)}\n        errorMessage={errorMessage}\n      />\n    </Flex>\n  );\n};\n\nForward refs\nImportant\n\nRefs are an escape hatch to the underlying DOM element of our primitives, but are typically not necessary for most applications.\n\nSee Refs and the DOM and Forwarding Refs for more information.\n\nThe standard ref prop will forward to the underlying input element, and the showPasswordButtonRef prop forwards to the show password button element.\n\nThe following is an example demonstrating use of the ref and showPasswordButtonRef props to put the focus on the password input field when the showPassword button is clicked:\n\nPassword\nPassword is hidden\nCopy\nimport * as React from 'react';\nimport { PasswordField } from '@aws-amplify/ui-react';\n\nexport const RefExample = () => {\n  const inputRef = React.useRef(null);\n  const showPasswordButtonRef = React.useRef(null);\n\n  const onShowPasswordClick = React.useCallback(() => {\n    inputRef.current.focus();\n  }, []);\n\n  React.useEffect(() => {\n    const showPasswordButtonRefCurrent = showPasswordButtonRef.current;\n    if (showPasswordButtonRefCurrent) {\n      showPasswordButtonRefCurrent.addEventListener(\n        'click',\n        onShowPasswordClick,\n        false\n      );\n      return () => {\n        showPasswordButtonRefCurrent.removeEventListener(\n          'click',\n          onShowPasswordClick,\n          false\n        );\n      };\n    }\n  }, [onShowPasswordClick]);\n\n  return (\n    <PasswordField\n      label=\"Password\"\n      ref={inputRef}\n      showPasswordButtonRef={showPasswordButtonRef}\n    />\n  );\n};\n\nStandard HTML attributes\n\nThe PasswordField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation\n\nPassword\nPassword is hidden\nCopy\nimport { PasswordField } from '@aws-amplify/ui-react';\n\nexport const MaxLengthExample = () => {\n  return <PasswordField label=\"Password\" name=\"password\" maxLength={10} />;\n};\n\nStyling\nTheme\n\nYou can customize the appearance of all PasswordField components in your application with a Theme.\n\nPasswordField Theme Source\n\nPassword\nPassword is hidden\nPassword with Error\nPassword is hidden\nCopy\nimport {\n  PasswordField,\n  ThemeProvider,\n  Theme,\n  Button,\n} from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'passwordfield-theme',\n  tokens: {\n    components: {\n      passwordfield: {\n        button: {\n          color: { value: 'red' },\n          _hover: {\n            backgroundColor: { value: '{colors.blue.60}' },\n            color: { value: 'white' },\n          },\n          _active: {\n            backgroundColor: { value: '{colors.green.60}' },\n            color: { value: 'white' },\n          },\n          _focus: {\n            color: { value: 'white' },\n          },\n          _error: {\n            backgroundColor: { value: 'orange' },\n            _hover: { backgroundColor: { value: 'lavender' } },\n            _focus: { borderColor: { value: 'green' } },\n            _active: { borderColor: { value: 'white' } },\n          },\n        },\n      },\n      fieldcontrol: {\n        borderColor: {\n          value: '{colors.blue.60}',\n        },\n        color: {\n          value: '{colors.red.80}',\n        },\n      },\n    },\n  },\n};\n\nexport const PasswordFieldThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <PasswordField label=\"Password\" />\n      <PasswordField hasError={true} label=\"Password with Error\" />\n    </ThemeProvider>\n  );\n};\n\nIcons\nPassword\nPassword is hidden\nCopy\nimport { PasswordField, IconsProvider } from '@aws-amplify/ui-react';\nimport { FiLock, FiUnlock } from 'react-icons/fi';\n\nexport const PasswordFieldIconExample = () => (\n  <IconsProvider\n    icons={{\n      passwordField: {\n        visibility: <FiLock />,\n        visibilityOff: <FiUnlock />,\n      },\n    }}\n  >\n    <PasswordField label=\"Password\" />\n  </IconsProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-passwordfield\tTop level element that wraps the PasswordField primitive\nGlobal styling\n\nTo override styling on all TextField primitives, you can set the Amplify CSS variables or use the built-in .amplify-textfield class.\n\nGlobally styled password field\nPassword is hidden\nCopy\n/* styles.css */\n[data-amplify-theme] {\n  --amplify-components-field-border-color: var(--amplify-colors-purple-80);\n}\n/* OR */\n.amplify-passwordfield {\n  --amplify-components-field-border-color: var(--amplify-colors-purple-80);\n}\n\nLocal styling\n\nTo override styling on a specific TextField, you can use a class selector or style props.\n\nUsing a class selector:\n\nSquare password field\nPassword is hidden\nCopy\n/* styles.css */\n.custom-passwordfield-class .amplify-input,\n.custom-passwordfield-class .amplify-button {\n  border-radius: 0;\n}\n\n\nUsing style props:\n\nFlex styling props will be applied to the PasswordField wrapping Flex component, whereas other style props will be applied to the input field. This allows us to change the layout of the label and input field, while also styling the input field directly.\n\nPassword:\n\nPassword is hidden\nPassword\nPassword is hidden\nCopy\nimport { PasswordField, Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const PasswordFieldStyledPropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <PasswordField\n        label={\n          <Text fontWeight=\"bold\" fontSize={tokens.fontSizes.xl}>\n            Password:\n          </Text>\n        }\n        padding=\"xl\"\n        border={`1px solid ${tokens.colors.primary[60]}`}\n      />\n      <PasswordField\n        label=\"Password\"\n        inputStyles={{\n          backgroundColor: 'primary.10',\n        }}\n      />\n    </>\n  );\n};\n"
  },
  {
    "title": "Label | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/label",
    "html": "Label\n\nLabel represents a caption for a UI element.\n\nReact source\nFeedback\nDocumentation\nProps\nUsage\n\nImport the Label component and pair it with a field control.\n\nFirst Name:\nCopy\nimport { Flex, Input, Label } from '@aws-amplify/ui-react';\n\nexport const DefaultLabelExample = () => (\n  <Flex direction=\"column\" gap=\"small\">\n    <Label htmlFor=\"first_name\">First Name:</Label>\n    <Input id=\"first_name\" name=\"first_name\" />\n  </Flex>\n);\n\nAccessibility\n\nLabel is used to visually and programmatically associate a text label with a form control. Clicking on a label will highligh the associated field, and a screen reader can read the text label, allowing an accessibility technology user to understand the purpose of a form control.\n\nDeparture date\nCopy\nimport { Flex, Input, Label } from '@aws-amplify/ui-react';\n\nexport const AccessibilityExample = () => (\n  <Flex direction=\"column\" gap=\"small\">\n    <Label htmlFor=\"departure\">Departure date</Label>\n    <Input id=\"departure\" type=\"date\" />\n  </Flex>\n);\n\nStandard HTML attributes\n\nThe Label will accept any of the standard HTML attributes that a <label> element accepts. Standard <label> attributes can be found in the MDN Documentation\n\nCSS Styling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-label\tClass applied to the label element\nGlobal styling\n\nTo override styling on all Input primitives, you can set the Amplify CSS variables with the built-in .amplify-input class.\n\nGlobally styled label\n\nCopy\n/* styles.css */\n.amplify-input {\n  font-style: italic;\n}\n\nLocal styling\n\nTo override styling on a specific Input, you can use a class selector or style props.\n\nUsing a class selector:\n\nCustom styled label\nCopy\n/* styles.css */\n.custom-label-class.amplify-label {\n  color: rebeccapurple;\n}\n\n\nUsing style props:\n\nAwesome label\nCopy\nimport { Label, useTheme } from '@aws-amplify/ui-react';\n\nexport const StylePropsExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <Label fontSize={tokens.fontSizes.xl} fontStyle=\"italic\">\n      Awesome label\n    </Label>\n  );\n};\n"
  },
  {
    "title": "Fieldset | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/fieldset",
    "html": "Fieldset\n\nFieldsets are used to group related form fields.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nFavorite fruits\nFavorite fruits\nApple\nPear\nLegend\nVariation\nplain (default)\noutlined\ndirection\ncolumn\ncolumn-reverse\nrow\nrow-reverse\nSize\nsmall\ndefault\nlarge\nisDisabled\nlegendHidden\nCopy\n<Fieldset\n  legend=\"Favorite fruits\"\n  variation=\"plain\"\n  direction=\"column\">\n  <CheckboxField\n    label=\"Apple\"\n    name=\"apple\"\n  />\n  <CheckboxField\n    label=\"Pear\"\n    name=\"pear\"\n  />\n</Fieldset>\nUsage\nBasic fieldset\nBasic fieldset\nFieldset content\nCopy\nimport { Fieldset } from '@aws-amplify/ui-react';\n\nexport const BasicFieldset = () => {\n  return <Fieldset legend=\"Basic fieldset\">Fieldset content</Fieldset>;\n};\n\nSizes\n\nFieldset size can be changed via the size prop. It affects the Fieldset's padding and gap size and the font size of its legend element.\n\nSmall fieldset\nSmall fieldset\nSmall fieldset size content.\nDefault fieldset\nDefault fieldset\nDefault fieldset size content.\nLarge fieldset\nLarge fieldset\nLarge fieldset size content.\nCopy\nimport { Flex, Fieldset } from '@aws-amplify/ui-react';\n\nexport const FieldsetSizes = () => {\n  return (\n    <Flex direction=\"column\">\n      <Fieldset legend=\"Small fieldset\" size=\"small\">\n        Small fieldset size content.\n      </Fieldset>\n      <Fieldset legend=\"Default fieldset\">\n        Default fieldset size content.\n      </Fieldset>\n      <Fieldset legend=\"Large fieldset\" size=\"large\">\n        Large fieldset size content.\n      </Fieldset>\n    </Flex>\n  );\n};\n\nVariation\n\nFieldset by default uses the plain variation which has no border or padding. Use the outlined variation to add a border and padding.\n\nOutlined fieldset\nOutlined fieldset\nOutlined fieldset variation content.\nPlain fieldset\nPlain fieldset\nPlain fieldset variation content.\nCopy\nimport { Flex, Fieldset } from '@aws-amplify/ui-react';\n\nexport const FieldsetVariations = () => {\n  return (\n    <Flex direction=\"column\">\n      <Fieldset legend=\"Outlined fieldset\" variation=\"outlined\">\n        Outlined fieldset variation content.\n      </Fieldset>\n      <Fieldset legend=\"Plain fieldset\" variation=\"plain\">\n        Plain fieldset variation content.\n      </Fieldset>\n    </Flex>\n  );\n};\n\nDirection\n\nFieldset uses the Flex primitive for layout which allows you to use Flex props to control the direction and alignment of the Fieldset. Use direction=\"row|row-reverse|column|column-reverse\" to change the direction of the Fieldset.\n\nrow\nrow\nItem 1\nItem 2\nrow-reverse\nrow-reverse\nItem 3\nItem 4\ncolumn\ncolumn\nItem 5\nItem 6\ncolumn-reverse\ncolumn-reverse\nItem 7\nItem 8\nCopy\nimport { Flex, Fieldset, Text, CheckboxField } from '@aws-amplify/ui-react';\n\nexport const FieldsetDirection = () => {\n  return (\n    <Flex direction=\"column\">\n      <Fieldset legend=\"row\" direction=\"row\" variation=\"outlined\">\n        <CheckboxField label=\"Item 1\" name=\"Item 1\" />\n        <CheckboxField label=\"Item 2\" name=\"Item 2\" />\n      </Fieldset>\n      <Fieldset\n        legend=\"row-reverse\"\n        direction=\"row-reverse\"\n        variation=\"outlined\"\n      >\n        <CheckboxField label=\"Item 3\" name=\"Item 3\" />\n        <CheckboxField label=\"Item 4\" name=\"Item 4\" />\n      </Fieldset>\n      <Fieldset legend=\"column\" direction=\"column\" variation=\"outlined\">\n        <CheckboxField label=\"Item 5\" name=\"Item 5\" />\n        <CheckboxField label=\"Item 6\" name=\"Item 6\" />\n      </Fieldset>\n      <Fieldset\n        legend=\"column-reverse\"\n        direction=\"column-reverse\"\n        variation=\"outlined\"\n      >\n        <CheckboxField label=\"Item 7\" name=\"Item 7\" />\n        <CheckboxField label=\"Item 8\" name=\"Item 8\" />\n      </Fieldset>\n    </Flex>\n  );\n};\n\nDisabled\n\nFieldset can be disabled by using isDisabled={true} prop which will apply the [disabled] attribute to the fieldset. Fieldset has no special disabled styles.\n\nNote about disabled fieldsets:\n\nDisabled fieldsets in HTML will disable all inputs nested within them; even those nested within fieldsets that are not disabled. This is default browser behavior that the Fieldset primitive supports.\n\nDisabled Fieldset\nDisabled Fieldset\n\nThe input in this fieldset is disabled because of the parent fieldset.\n\nTest input\nNested fieldset\nNested fieldset\n\nThis input is also disabled because the fieldset above it is disabled, even though its immediate parent fieldset is not disabled.\n\nTest nested input\nCopy\nimport { Fieldset, Text, TextField } from '@aws-amplify/ui-react';\n\nexport const DisabledFieldset = () => {\n  return (\n    <Fieldset legend=\"Disabled Fieldset\" isDisabled variation=\"outlined\">\n      <Text fontStyle=\"italic\" variation=\"tertiary\">\n        The input in this fieldset is disabled because of the parent fieldset.\n      </Text>\n      <TextField label=\"Test input\" />\n      <Fieldset legend=\"Nested fieldset\" variation=\"outlined\">\n        <Text fontStyle=\"italic\" variation=\"tertiary\">\n          This input is also disabled because the fieldset above it is disabled,\n          even though its immediate parent fieldset is not disabled.\n        </Text>\n        <TextField label=\"Test nested input\" />\n      </Fieldset>\n    </Fieldset>\n  );\n};\n\nName attribute\n\nFieldset supports the [name] attribute. Use the name prop to supply a name for your Fieldset. This can be useful if parsing form controls using the form.elements api\n\nFieldset with a name\nFieldset with a name\nFieldset content\nFieldset name: Fieldset #1\nCopy\nimport { Flex, Fieldset, Text } from '@aws-amplify/ui-react';\nimport { useRef, useEffect, useState } from 'react';\n\nexport const NameAttribute = () => {\n  const formRef = useRef(null);\n  const [fieldsetName, setFieldsetName] = useState('');\n\n  useEffect(() => {\n    if (formRef.current) {\n      setFieldsetName(formRef.current.elements[0].name);\n    }\n  }, [setFieldsetName]);\n  return (\n    <Flex as=\"form\" ref={formRef} direction=\"column\">\n      <Fieldset\n        legend=\"Fieldset with a name\"\n        name=\"Fieldset #1\"\n        variation=\"outlined\"\n      >\n        Fieldset content\n      </Fieldset>\n      Fieldset name: {fieldsetName}\n    </Flex>\n  );\n};\n\nStyling\nTheme\n\nYou can customize the appearance of all Fieldset components in your application with a Theme.\n\nFieldset Theme Source\n\nDefault fieldset with theming\nDefault fieldset with theming\nSome content of the fieldset.\nCopy\nimport { Fieldset, ThemeProvider, createTheme } from '@aws-amplify/ui-react';\n\nconst theme = createTheme({\n  name: 'fieldset-theme',\n  tokens: {\n    components: {\n      fieldset: {\n        outlined: {\n          borderStyle: 'dashed',\n          borderWidth: '2px',\n          borderColor: '{colors.primary.20}',\n          padding: '{space.large}',\n        },\n        legend: {\n          fontSize: '{fontSizes.large}',\n          color: '{colors.primary.80}',\n          fontWeight: '400',\n        },\n      },\n    },\n  },\n});\n\nexport const FieldsetThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Fieldset legend=\"Default fieldset with theming\">\n      Some content of the fieldset.\n    </Fieldset>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-fieldset\tTop level element that wraps the Fieldset primitive\namplify-fieldset__legend\tVisual label for the Fieldset primitive\nGlobal Styling\n\nTo override styling on all Fieldsets, you can set the Amplify CSS variables or use the target classes.\n\nA fieldset with a larger border radius\nA fieldset with a larger border radius\nA Fieldset styled with CSS.\nCopy\n/* styles.css */\n:root {\n  --amplify-components-fieldset-border-radius: 12px;\n}\n/* OR */\n.amplify-fieldset {\n  border-radius: 12px;\n}\n\nLocal styling\n\nTo override styling on a specific Fieldset, you can use (in order of increasing specificity): a class selector or style props.\n\nUsing a class selector\nA purple fieldset\nA purple fieldset\n\nThis is a purple fieldset\n\nCopy\n/* styles.css */\n.purple-fieldset {\n  background-color: var(--amplify-colors-purple-10);\n  border-color: var(--amplify-colors-purple-60);\n}\n\nCopy\nimport './styles.css';\n\n<Fieldset className=\"purple-fieldset\" legend=\"A purple fieldset\">\n  This is a purple fieldset\n</Fieldset>\n\nUsing style props\nFieldset with style props\nFieldset with style props\nFieldset content\nCopy\nimport { Fieldset } from '@aws-amplify/ui-react';\n\nexport const FieldsetStylePropsExample = () => {\n  return (\n    <Fieldset\n      legend=\"Fieldset with style props\"\n      borderColor=\"teal.60\"\n      backgroundColor=\"teal.10\"\n    >\n      Fieldset content\n    </Fieldset>\n  );\n};\n\nAccessibility\n\nARIA attributes, roles, and other HTML attributes that are passed to Fieldset are passed to the parent DOM element which is a <fieldset>.\n\nLegend\n\nFieldset outputs a <legend> as the first nested element within the Fieldset. The <legend> element does not currently behave well as a flexbox child in browsers. To allow Fieldset to still operate well as a flex parent, Fieldset duplicates the contents of the legend prop:\n\nthe first is output as a VisuallyHidden <legend> which is accessible to screen readers.\nThe second is output as a visible <div> element set to aria-hidden={true} so that the content is not repeated for screenreaders.\n\nThis enables Fieldset to have a legend as the suggested way to accessibly label a fieldset."
  },
  {
    "title": "Input | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/input",
    "html": "Input\n\nInput allows users to enter text content.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nvariation\ndefault\nquiet\nsize\nsmall\ndefault\nlarge\nplaceholder\nhasError\nisDisabled\nCopy\n<Input\n  placeholder=\"Baggins\"\n/>\nUsage\n\nImport the Input component and styles and connect a Label for accessibility/usability.\n\nFirst Name:\nCopy\nimport { Input, Label, Flex } from '@aws-amplify/ui-react';\n\nexport const DefaultInputExample = () => (\n  <Flex direction=\"column\" gap=\"small\">\n    <Label htmlFor=\"first_name\">First Name:</Label>\n    <Input id=\"first_name\" name=\"first_name\" />\n  </Flex>\n);\n\nSizes\n\nInput sizes are designed to match styling of other field components such as Buttons. There are three sizes: small, (default), and large.\n\nSmall\nDefault\nLarge\nCopy\nimport { Flex, Input, Label } from '@aws-amplify/ui-react';\n\nexport const InputSizeExample = () => {\n  return (\n    <Flex direction=\"column\">\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"small\">Small</Label>\n        <Input id=\"small\" size=\"small\" width=\"50%\" />\n      </Flex>\n\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"default\">Default</Label>\n        <Input id=\"default\" width=\"75%\" />\n      </Flex>\n\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"large\">Large</Label>\n        <Input id=\"large\" size=\"large\" width=\"100%\" />\n      </Flex>\n    </Flex>\n  );\n};\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\nDefault\nQuiet\nCopy\nimport { Flex, Input, Label } from '@aws-amplify/ui-react';\n\nexport const InputVariationExample = () => {\n  return (\n    <Flex direction=\"column\">\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"Default\">Default</Label>\n        <Input id=\"default\" />\n      </Flex>\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"Quiet\">Quiet</Label>\n        <Input id=\"quiet\" variation=\"quiet\" />\n      </Flex>\n    </Flex>\n  );\n};\n\nStates\n\nThe available Input states include isDisabled and isReadOnly. A disabled field will be not be focusable, is not mutable, and will not be submitted with form data. A readonly field cannot be edited by the user.\n\nDisabled\nReadonly\nCopy\nimport { Flex, Input, Label } from '@aws-amplify/ui-react';\n\nexport const InputStatesExample = () => {\n  return (\n    <Flex direction=\"column\">\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"disabled\">Disabled</Label>\n        <Input id=\"disabled\" defaultValue=\"Disabled\" isDisabled />\n      </Flex>\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"readonly\">Readonly</Label>\n        <Input id=\"readonly\" defaultValue=\"You can't edit me!\" isReadOnly />\n      </Flex>\n    </Flex>\n  );\n};\n\nRequired fields\n\nUse the isRequired prop to specify a required field.\n\nEmail\nSubmit\nCopy\nimport { Button, Flex, Input, Label } from '@aws-amplify/ui-react';\n\nexport const DefaultRequiredInputExample = () => {\n  return (\n    <Flex as=\"form\" direction=\"column\" width=\"20rem\">\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input id=\"email\" type=\"email\" isRequired />\n      </Flex>\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\n\nThere is no default styling for required fields. Customize the label to instruct the form user of the required field.\n\nEmail (required)\nSubmit\nCopy\nimport { Button, Flex, Text, Input, Label } from '@aws-amplify/ui-react';\n\nexport const RequiredInputExample = () => {\n  return (\n    <Flex as=\"form\" direction=\"column\" width=\"100%\">\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"email\">\n          Email\n          <Text as=\"span\" fontSize=\"small\" color=\"font.error\">\n            {' '}\n            (required)\n          </Text>\n        </Label>\n        <Input id=\"email\" name=\"email\" type=\"email\" isRequired={true} />\n      </Flex>\n      <Button type=\"submit\">Submit</Button>\n    </Flex>\n  );\n};\n\nValidation error styling\n\nUse the hasError prop to mark an Input as having a validation error.\n\nUsername\nCopy\nimport * as React from 'react';\nimport { Input, Label, Flex } from '@aws-amplify/ui-react';\n\nexport const InputValidationErrorExample = () => {\n  const [hasError, setHasError] = React.useState(true);\n\n  const validateUsername = (e) => {\n    const containsDigit = /\\d/.test(e.currentTarget.value);\n    setHasError(!containsDigit);\n  };\n\n  return (\n    <Flex direction=\"column\" gap=\"small\">\n      <Label htmlFor=\"username\">Username</Label>\n      <Input id=\"username\" hasError={hasError} onChange={validateUsername} />\n    </Flex>\n  );\n};\n\nEvent handlers\n\nInput provides several event handlers: onSelect, onInput, onChange, onCopy, onPaste, and onCut. Open the console to interact with the demo below.\n\nEvent handlers\nCopy\nimport { Input, Label, Flex } from '@aws-amplify/ui-react';\n\nexport const InputEventHandlersExample = () => (\n  <Flex direction=\"column\" gap=\"small\">\n    <Label htmlFor=\"events\">Event handlers</Label>\n    <Input\n      id=\"events\"\n      onSelect={(e) => console.info('onSelect fired:', e.currentTarget.value)}\n      onInput={(e) => console.info('onInput fired:', e.currentTarget.value)}\n      onChange={(e) => console.info('onChange fired:', e.currentTarget.value)}\n      onCopy={(e) => console.info('onCopy fired:', e.currentTarget.value)}\n      onPaste={(e) => console.info('onPaste fired:', e.currentTarget.value)}\n      onCut={(e) => console.info('onCut fired:', e.currentTarget.value)}\n    />\n  </Flex>\n);\n\nStandard HTML attributes\n\nThe Input will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation\n\nInput Types\n\nInput primitive comes styled for text input only (type text, date, number, etc). For text component combining Input and Label, see TextField. For other input types, see TextAreaField, CheckBoxField, and SelectField.\n\nEnter departing date ✈️\nCopy\n<Flex direction=\"column\" gap=\"small\">\n  <Label htmlFor=\"departing\">Enter departing date ✈️</Label>\n  <Input\n    id=\"departing\"\n    type=\"date\"\n  />\n</Flex>\n\nEnter quantity needed:\nCopy\n<Flex direction=\"column\" gap=\"small\">\n  <Label htmlFor=\"quantity\">Enter quantity needed: </Label>\n  <Input\n    id=\"quantity\"\n    type=\"number\"\n  />\n</Flex>\n\nStyling\nTheme\n\nYou can customize the appearance of all Input components in your application with a Theme.\n\nInput Theme Source\n\nName\nCopy\nimport {\n  Flex,\n  Input,\n  Label,\n  ThemeProvider,\n  Theme,\n} from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'input-theme',\n  tokens: {\n    components: {\n      input: {\n        color: { value: '{colors.blue.90}' },\n        _focus: {\n          borderColor: { value: '{colors.blue.40}' },\n        },\n      },\n    },\n  },\n};\n\nexport const InputThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex direction=\"column\" gap=\"small\">\n      <Label htmlFor=\"name\">Name</Label>\n      <Input id=\"name\" />\n    </Flex>\n  </ThemeProvider>\n);\n\nGlobal styling\n\nTo override styling on all Input primitives, you can set the Amplify CSS variables with the built-in .amplify-input class.\n\nCopy\n/* styles.css */\n.amplify-input {\n  --amplify-components-input-border-color: rebeccapurple;\n}\n\nLocal styling\n\nTo override styling on a specific Input, you can use a class selector or style props.\n\nUsing a class selector:\n\nSquare field\nCopy\n/* styles.css */\n.custom-input-class.amplify-input {\n  border-radius: 0;\n}\n\n\nUsing style props:\n\nName:\n\nSpecial Field\nCopy\nimport { Text, Input, Label, useTheme, Flex } from '@aws-amplify/ui-react';\n\nexport const InputStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex direction=\"column\">\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"name\">\n          <Text\n            fontWeight={tokens.fontWeights.bold}\n            fontSize={tokens.fontSizes.xl}\n          >\n            Name:\n          </Text>\n        </Label>\n        <Input\n          id=\"name\"\n          fontWeight={tokens.fontWeights.bold}\n          fontSize={tokens.fontSizes.xl}\n          padding=\"xl\"\n          border={`1px solid ${tokens.colors.primary[60]}`}\n        />\n      </Flex>\n\n      <Flex direction=\"column\" gap=\"small\">\n        <Label htmlFor=\"special\">Special Field</Label>\n        <Input\n          id=\"special\"\n          backgroundColor=\"primary.10\"\n          border={`1px solid ${tokens.colors.primary[60]}`}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n"
  },
  {
    "title": "DropZone | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/dropzone",
    "html": "DropZone\n\nThe Dropzone component captures files from user with drag and drop\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nUsage\n\nThe DropZone component adds the necessary event handlers to an element and filters dropped files by file type. To get the files after they are dropped you can use the onDropComplete prop which is a function that has files and rejectedFiles arrays.\n\nDrag images here\nCopy\nimport * as React from 'react';\nimport { DropZone, Text } from '@aws-amplify/ui-react';\n\nexport default function DefaultDropZoneExample() {\n  const [files, setFiles] = React.useState([]);\n  return (\n    <>\n      <DropZone\n        onDropComplete={({ acceptedFiles, rejectedFiles }) => {\n          setFiles(acceptedFiles);\n        }}\n      >\n        Drag images here\n      </DropZone>\n      {files.map((file) => (\n        <Text key={file.name}>{file.name}</Text>\n      ))}\n    </>\n  );\n}\n\nDisabled\n\nAdd an isDisabled prop to DropZone to make it disabled. Disabling the DropZone will remove any drag/drop handlers and style the DropZone so it looks disabled.\n\nDrag images here\nCopy\nimport { DropZone } from '@aws-amplify/ui-react';\n\nexport default function DisabledDropZoneExample() {\n  return (\n    <DropZone\n      isDisabled\n      onDropComplete={({ acceptedFiles }) => {\n        console.log(acceptedFiles);\n      }}\n    >\n      Drag images here\n    </DropZone>\n  );\n}\n\nAccepted and Rejected files\n\nDropZone.Accept, DropZone.Reject and DropZone.Default are helper components that render at different times:\n\nDropZone.Accept is visible when the user drags files that are all acceptable based on the acceptedFileTypes prop\nDropzone.Reject is visible when the user drags files that any are not acceptable based on the acceptedFileTypes prop.\nDropZone.Default is the default state, visible when there is no drag interaction on the DropZone.\n\nAll of these helper components are mutually exclusive and cover all possible states. If the user is dragging files over the element the files will either be all acceptable or not.\n\nDrag images here\n\nCopy\nimport { DropZone, Flex, Text } from '@aws-amplify/ui-react';\nimport { MdCheckCircle, MdFileUpload, MdRemoveCircle } from 'react-icons/md';\n\nexport default function DefaultDropZoneExample() {\n  return (\n    <DropZone\n      acceptedFileTypes={['image/*']}\n      onDropComplete={({ acceptedFiles }) => {\n        console.log(acceptedFiles);\n      }}\n    >\n      <Flex direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n        <DropZone.Accepted>\n          <MdCheckCircle fontSize=\"2rem\" />\n        </DropZone.Accepted>\n        <DropZone.Rejected>\n          <MdRemoveCircle fontSize=\"2rem\" />\n        </DropZone.Rejected>\n        <DropZone.Default>\n          <MdFileUpload fontSize=\"2rem\" />\n        </DropZone.Default>\n        <Text>Drag images here</Text>\n      </Flex>\n    </DropZone>\n  );\n}\n\nOpening the file picker\n\nYou can add a button to open the file picker by adding a hidden input and firing the click event on the input element. Using an input element will automatically disable selecting files that don't match the accepted file types.\n\nDrag images here or\n\nBrowse\nCopy\nimport * as React from 'react';\nimport {\n  Button,\n  DropZone,\n  Flex,\n  Text,\n  VisuallyHidden,\n} from '@aws-amplify/ui-react';\n\nconst acceptedFileTypes = ['image/png', 'image/jpeg'];\n\nexport default function DropZoneInputExample() {\n  const [files, setFiles] = React.useState([]);\n  const hiddenInput = React.useRef(null);\n\n  const onFilePickerChange = (event) => {\n    const { files } = event.target;\n    if (!files || files.length === 0) {\n      return;\n    }\n    setFiles(Array.from(files));\n  };\n\n  return (\n    <>\n      <DropZone\n        acceptedFileTypes={acceptedFileTypes}\n        onDropComplete={({ acceptedFiles, rejectedFiles }) => {\n          setFiles(acceptedFiles);\n        }}\n      >\n        <Flex direction=\"column\" alignItems=\"center\">\n          <Text>Drag images here or</Text>\n          <Button size=\"small\" onClick={() => hiddenInput.current.click()}>\n            Browse\n          </Button>\n        </Flex>\n        <VisuallyHidden>\n          <input\n            type=\"file\"\n            tabIndex={-1}\n            ref={hiddenInput}\n            onChange={onFilePickerChange}\n            multiple={true}\n            accept={acceptedFileTypes.join(',')}\n          />\n        </VisuallyHidden>\n      </DropZone>\n      {files.map((file) => (\n        <Text key={file.name}>{file.name}</Text>\n      ))}\n    </>\n  );\n}\n\nStyling\nTheme\n\nYou can customize the appearance of all DropZone components in your application with a Theme.\n\nDropZone Theme Source\n\nDrag images here\nCopy\nimport { DropZone, ThemeProvider, createTheme } from '@aws-amplify/ui-react';\n\nconst theme = createTheme({\n  name: 'dropzone-theme',\n  tokens: {\n    components: {\n      dropzone: {\n        backgroundColor: '{colors.primary.10}',\n        borderColor: '{colors.primary.80}',\n      },\n    },\n  },\n});\n\nexport default function DropZoneThemeExample() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DropZone\n        onDropComplete={({ acceptedFiles }) => {\n          console.log(acceptedFiles);\n        }}\n      >\n        Drag images here\n      </DropZone>\n    </ThemeProvider>\n  );\n}\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-dropzone\tClass applied to the DropZone component\nGlobal styling\n\nTo override styling on all Breadcrumbs components, you can set Amplify CSS variables or use the target classes like .amplify-dropzone class.\n\nCopy\n/* styles.css */\n.amplify-dropzone {\n  background-color: pink;\n}\n\nLocal styling\n\nTo override styling on a specific DropZone component or sub-component, you can use (in order of increasing specificity): a class selector and style props.\n\nUsing a class selector:\n\nCopy\n<DropZone className=\"my-dropzone\">\n</DropZone>\n\n/* styles.css */\n.my-dropzone {\n   background-color: pink;\n}\n\n\nUsing style props:\n\nDrag images here\nCopy\nimport { DropZone } from '@aws-amplify/ui-react';\n\nexport default function DropZoneStyleExample() {\n  return (\n    <DropZone\n      onDropComplete={({ acceptedFiles }) => {\n        console.log(acceptedFiles);\n      }}\n      borderWidth=\"4px\"\n      borderColor=\"red\"\n    >\n      Drag images here\n    </DropZone>\n  );\n}\n"
  },
  {
    "title": "Button | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/button",
    "html": "Button\n\nButton allows users to perform actions.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nClick me!\nVariation\nDefault\nPrimary\nLink\nColorTheme\nDefault\nError\nInfo\nWarning\nSuccess\nOverlay\nSize\nDefault\nSmall\nLarge\nisFullWidth\nisDisabled\nisLoading\nloadingText\nCopy\n<Button\n  loadingText=\"\"\n  onClick={() => alert('hello')}\n>\n  Click me!\n</Button>\nUsage\n\nImport the Button primitive and styles.\n\nHello world\nCopy\nimport { Button } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\n<Button>Hello world</Button>;\n\nonClick\n\nUse the onClick prop to add a click handler to the Button.\n\nClick me\nCopy\n<Button onClick={() => alert('👋 hello')}>Click me</Button>\n\nSizes\n\nUse the size prop to change the Button size. Available options are small, large, and none (default).\n\nSmallDefaultLarge\nCopy\n<Button size=\"small\">Small</Button>\n<Button>Default</Button>\n<Button size=\"large\">Large</Button>\n\nVariations\n\nUse the variation prop to change the Button variation. Available options are primary, link, menu, warning, destructive and none (default).\n\nDefault\nPrimary\nLink\nCopy\n<Button>Default</Button>\n<Button variation=\"primary\">Primary</Button>\n<Button variation=\"link\">Link</Button>\n\nColor themes\n\nUse the colorTheme prop to change the Button's color theme. Available options are error, info, warning, success, and overlay.\n\nDefault\nSuccess\nWarning\nError\nInfo\nOverlay\nCopy\n<Button>Default</Button>\n<Button colorTheme=\"success\">Success</Button>\n<Button colorTheme=\"warning\">Warning</Button>\n<Button colorTheme=\"error\">Error</Button>\n<Button colorTheme=\"warning\">Info</Button>\n<Button colorTheme=\"overlay\">Overlay</Button>\n\n\nThe colorTheme prop can be combined with variation to provide more Button options.\n\nSuccess\nerror\nWarning\nInfo\nOverlay\nSuccess\nerror\nWarning\nInfo\nOverlay\nCopy\n// Primary variation with color themes\n<Button variation=\"primary\" colorTheme=\"success\">Success</Button>\n<Button variation=\"primary\" colorTheme=\"error\">error</Button>\n<Button variation=\"primary\" colorTheme=\"warning\">Warning</Button>\n<Button variation=\"primary\" colorTheme=\"info\">Info</Button>\n<Button variation=\"primary\" colorTheme=\"overlay\">Overlay</Button>\n\n// Link variation with color themes\n<Button variation=\"link\" colorTheme=\"success\">Success</Button>\n<Button variation=\"link\" colorTheme=\"error\">error</Button>\n<Button variation=\"link\" colorTheme=\"warning\">Warning</Button>\n<Button variation=\"link\" colorTheme=\"info\">Info</Button>\n<Button variation=\"link\" colorTheme=\"overlay\">Overlay</Button>\n\nIcon buttons\n\nIcons can be added to buttons and will adapt to the surrounding font-size.\n\nSave\nSave\nSave\nCopy\nimport * as React from 'react';\nimport { Button, Flex, Icon, View } from '@aws-amplify/ui-react';\n\nconst IconSave = () => {\n  return (\n    <Icon\n      ariaLabel=\"\"\n      pathData=\"M17 3H5C3.89 3 3 3.9 3 5V19C3 20.1 3.89 21 5 21H19C20.1 21 21 20.1 21 19V7L17 3ZM19 19H5V5H16.17L19 7.83V19ZM12 12C10.34 12 9 13.34 9 15C9 16.66 10.34 18 12 18C13.66 18 15 16.66 15 15C15 13.34 13.66 12 12 12ZM6 6H15V10H6V6Z\"\n    />\n  );\n};\n\nexport const IconButtonExample = () => {\n  return (\n    <Flex direction=\"column\" gap=\"1rem\">\n      <View>\n        <Button gap=\"0.1rem\" size=\"small\">\n          <IconSave /> Save\n        </Button>\n        <Button gap=\"0.2rem\">\n          <IconSave /> Save\n        </Button>\n        <Button gap=\"0.2rem\" size=\"large\">\n          <IconSave /> Save\n        </Button>\n      </View>\n      <View>\n        <Button size=\"small\">\n          <IconSave />\n        </Button>\n        <Button>\n          <IconSave />\n        </Button>\n        <Button size=\"large\">\n          <IconSave />\n        </Button>\n      </View>\n    </Flex>\n  );\n};\n\nLoading state\nLoading...\nCopy\n<Button isLoading={true} loadingText=\"Loading...\" variation=\"primary\">\n  Hello\n</Button>\n\nOther states\nDisabled\nFull width\nCopy\n<Button isDisabled={true}>Disabled</Button>\n<Button isFullWidth={true}>Full width</Button>\n\nAccessibility\n\nSetting an aria-label attribute for an icon Button:\n\n🚀\nCopy\n<Button ariaLabel=\"To the moon!\">🚀</Button>\n\nButtonGroup\n\nUse a ButtonGroup to group buttons with the same size or variation.\n\n🚀\n🚀\n🚀\n🚀\n🚀\n🚀\nCopy\nimport { Button, ButtonGroup } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\n// same size\n<ButtonGroup size=\"small\">\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n</ButtonGroup>;\n\n// same variation\n<ButtonGroup variation=\"primary\">\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n</ButtonGroup>;\n\n\nButtonGroup is also a flex container, so any flex props can apply to it for layout purpose. See Flex.\n\n🚀\n🚀\n🚀\n🚀\n🚀\n🚀\nCopy\nimport { Button, ButtonGroup } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\n<ButtonGroup justifyContent=\"center\">\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n</ButtonGroup>\n\n<ButtonGroup direction=\"column\">\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n  <Button>🚀</Button>\n</ButtonGroup>;\n\nStandard HTML attributes\n\nThe Button will accept any of the standard HTML attributes that a <button> element accepts. Standard <button> attributes can be found in the MDN Documentation\n\nNamed\nCopy\n<Button name=\"named\">Named</Button>\n\nCustomization\nTheme\n\nYou can customize the appearance of all Button components in your application with a Theme.\n\nButton Theme Source\n\nDefault\nPrimary\nPrimary error\nPrimary (disabled)\nDefault info\nCopy\nimport { Button, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'button-theme',\n  tokens: {\n    colors: {\n      border: {\n        // this will affect the default button's border color\n        primary: { value: 'black' },\n      },\n    },\n    components: {\n      button: {\n        // this will affect the font weight of all button variants\n        fontWeight: { value: '{fontWeights.extrabold}' },\n        backgroundColor: { value: '#f1fff5' },\n        borderColor: { value: '{colors.purple.80}' },\n        color: { value: '{colors.purple.100}' },\n        outlined: {\n          info: {\n            borderColor: '{colors.purple.60}',\n            color: '{colors.purple.90}',\n          },\n        },\n\n        // style the primary variation\n        primary: {\n          backgroundColor: { value: '{colors.blue.60}' },\n          _hover: {\n            backgroundColor: { value: '{colors.blue.80}' },\n          },\n          _focus: {\n            backgroundColor: { value: '{colors.blue.80}' },\n          },\n          _active: {\n            backgroundColor: { value: '{colors.blue.90}' },\n          },\n          _disabled: {\n            backgroundColor: { value: 'transparent' },\n            borderColor: { value: '{colors.neutral.30}' },\n          },\n          error: {\n            backgroundColor: { value: '{colors.pink.10}' },\n            color: { value: '{colors.red.80}' },\n            _hover: {\n              backgroundColor: { value: '#a51b34' },\n            },\n            _focus: {\n              backgroundColor: { value: '#9a0c26' },\n            },\n            _active: {\n              backgroundColor: { value: '#9a0c26' },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ButtonThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex direction=\"row\">\n      <Button>Default</Button>\n      <Button variation=\"primary\">Primary</Button>\n      <Button variation=\"primary\" colorTheme=\"error\">\n        Primary error\n      </Button>\n      <Button variation=\"primary\" isDisabled={true}>\n        Primary (disabled)\n      </Button>\n      <Button colorTheme=\"info\">Default info</Button>\n    </Flex>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-button\tTop level element that wraps the Button primitive\namplify-button__loader-wrapper\tClass applied to the Loader component within the Button Loading state\nCSS\n\nTo override styling on all Buttons, you can set the Amplify CSS variables or use the built-in .amplify-button class.\n\nCopy\n/* styles.css */\n[data-amplify-theme] {\n  --amplify-components-button-primary-background-color: #0057ff;\n  --amplify-components-button-primary-hover-background-color: #4d89fc;\n}\n/* OR */\n.amplify-button {\n  background-color: #0057ff;\n}\n.amplify-button:hover {\n  background-color: #4d89fc;\n}\n\n\nTo replace the Button styling, unset it:\n\nCopy\n.amplify-button {\n  all: unset;\n  /* Add your styling here*/\n}\n\nLocal styling\n\nTo override styling on a specific Button, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nI'm colorful!\nCopy\n/* Example: class selector styling override */\n.colorful-button {\n  background: linear-gradient(90deg, #fdbb2d 0%, #22c1c3 100%);\n}\n\nCopy\nimport './styles.css';\n\n<Button className=\"colorful-button\">I'm colorful!</Button>;\n\n\nUsing data attributes:\n\nCopy\n/* styles.css */\n/* Override only primary variation styles */\n.amplify-button[data-variation='primary'] {\n  background-color: teal;\n  color: white;\n}\n\n/* Override loading styles */\n.amplify-button[data-loading='true'] {\n  opacity: 0.8;\n}\n\n/* Override disabled styles */\n.amplify-button[disabled='true'] {\n  opacity: 0.8;\n}\n\nCopy\nimport './styles.css';\n\n<Button variation=\"primary\">Teal background</Button>\n<Button isLoading={true}>Loading...</Button>\n<Button isDisabled={true}>Lighter opacity</Button>\n\n\nUsing style props:\n\nGreenPurple\nCopy\n<Button style={{ backgroundColor: 'green', color: 'white' }}>Green</Button>;\n{\n  /* OR */\n}\n<Button backgroundColor=\"purple\" color=\"white\">\n  Purple\n</Button>;\n"
  },
  {
    "title": "CheckboxField | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/checkboxfield",
    "html": "CheckboxField\n\nCheckboxField allows users to mark items as selected.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nSubscribe\nlabel\nsize\ndefault\nsmall\nlarge\nlabelPosition\ndefault\nstart\nend\ntop\nbottom\nisDisabled\nisIndeterminate\nCopy\n<CheckboxField\n  label=\"Subscribe\"\n  name=\"subscribe\"\n  value=\"yes\"\n/>\nUsage\n\nImport the CheckboxField primitive.\n\nSubscribe\nCopy\nimport * as React from 'react';\nimport { CheckboxField } from '@aws-amplify/ui-react';\n\nexport const DefaultCheckboxFieldExample = () => (\n  <CheckboxField label=\"Subscribe\" name=\"subscribe\" value=\"yes\" />\n);\n\nControlled component\nSubscribe\nCopy\nimport * as React from 'react';\n\nimport { CheckboxField } from '@aws-amplify/ui-react';\n\nexport const CheckboxFieldControlledExample = () => {\n  const [checked, setChecked] = React.useState(false);\n  return (\n    <CheckboxField\n      name=\"subscribe-controlled\"\n      value=\"yes\"\n      checked={checked}\n      onChange={(e) => setChecked(e.target.checked)}\n      label=\"Subscribe\"\n    />\n  );\n};\n\nSizes\n\nUse the size prop to change the SelectField size. Available options are small, large, and none (default).\n\nSubscribe\nSubscribe\nSubscribe\nCopy\nimport * as React from 'react';\nimport { CheckboxField, Flex } from '@aws-amplify/ui-react';\n\nexport const CheckboxFieldSizesExample = () => (\n  <Flex>\n    <CheckboxField\n      label=\"Subscribe\"\n      name=\"subscribe\"\n      value=\"yes\"\n      size=\"small\"\n    />\n    <CheckboxField label=\"Subscribe\" name=\"subscribe\" value=\"yes\" />\n    <CheckboxField\n      label=\"Subscribe\"\n      name=\"subscribe\"\n      value=\"yes\"\n      size=\"large\"\n    />\n  </Flex>\n);\n\nValue\n\nThe value associated with the checkbox name in form data, used when submitting an HTML form. If a checkbox is unchecked when its form is submitted, its value will not be submitted. See MDN.\n\nSubscribe\nSubmit\nCopy\nimport { CheckboxField, Button } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const CheckboxFieldValueExample = () => {\n  const onSubmit = (event) => {\n    event.preventDefault();\n    alert(event.target.subscribe.value);\n  };\n  return (\n    <form onSubmit={onSubmit}>\n      <CheckboxField label=\"Subscribe\" name=\"subscribe\" value=\"yes\" />\n      <Button type=\"submit\">Submit</Button>\n    </form>\n  );\n};\n\n\nIn this example, we've got a name of subscribe, and a value of yes. When the form is submitted, the data name/value pair will be subscribe=yes.\n\nState\nDisabled\n\nA disabled checkbox will be not be focusable not mutable. A checked checkbox could also be disabled but it will not be submitted with form data.\n\nSubscribe\nSubscribe\nCopy\nimport * as React from 'react';\n\nimport { CheckboxField, Flex } from '@aws-amplify/ui-react';\n\nexport const CheckboxFieldDisabledExample = () => {\n  return (\n    <Flex>\n      <CheckboxField\n        label=\"Subscribe\"\n        name=\"subscribe\"\n        value=\"yes\"\n        isDisabled\n      />\n      <CheckboxField\n        label=\"Subscribe\"\n        name=\"subscribe\"\n        value=\"yes\"\n        defaultChecked\n        isDisabled\n      />\n    </Flex>\n  );\n};\n\nIndeterminate\n\nIn addition to the checked and unchecked states, there is a third state a checkbox can be in: indeterminate. This is a state in which it's impossible to say whether the item is toggled on or off.\n\nAll Pets\nCat\nDog\nCopy\nimport * as React from 'react';\n\nimport { CheckboxField, Flex, View } from '@aws-amplify/ui-react';\n\nexport const CheckboxFieldIndeterminateExample = () => {\n  const [checkedItems, setCheckedItems] = React.useState([false, false]);\n  const checkedItemsRef = React.useRef(null);\n  const allChecked = checkedItems.every(Boolean);\n  const isIndeterminate = checkedItems.some(Boolean) && !allChecked;\n\n  if (isIndeterminate) {\n    checkedItemsRef.current = [...checkedItems];\n  }\n  const handleAllPetsChange = () => {\n    if (isIndeterminate) {\n      setCheckedItems([true, true]);\n    } else if (allChecked) {\n      setCheckedItems([false, false]);\n    } else if (checkedItemsRef.current) {\n      setCheckedItems(checkedItemsRef.current);\n    } else {\n      setCheckedItems([true, true]);\n    }\n  };\n\n  const handleCatChange = (e) => {\n    const newCheckedItems = [e.target.checked, checkedItems[1]];\n    if (!newCheckedItems.some(Boolean) || newCheckedItems.every(Boolean)) {\n      checkedItemsRef.current = null;\n    }\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleDogChange = (e) => {\n    const newCheckedItems = [checkedItems[0], e.target.checked];\n    if (!newCheckedItems.some(Boolean) || newCheckedItems.every(Boolean)) {\n      checkedItemsRef.current = null;\n    }\n    setCheckedItems(newCheckedItems);\n  };\n\n  return (\n    <Flex direction=\"column\" gap=\"0\">\n      <CheckboxField\n        name=\"all-pets\"\n        label=\"All Pets\"\n        value=\"allPets\"\n        checked={allChecked}\n        isIndeterminate={isIndeterminate}\n        onChange={handleAllPetsChange}\n      />\n      <View paddingLeft=\"25px\">\n        <CheckboxField\n          name=\"cat\"\n          label=\"Cat\"\n          value=\"cat\"\n          checked={checkedItems[0]}\n          onChange={handleCatChange}\n        />\n        <CheckboxField\n          name=\"dog\"\n          label=\"Dog\"\n          value=\"dog\"\n          checked={checkedItems[1]}\n          onChange={handleDogChange}\n        />\n      </View>\n    </Flex>\n  );\n};\n\nValidation error\n\nUse the hasError and errorMessage props to mark a CheckboxField as having an validation error.\n\nI agree to the terms and conditions\nSubmit\nCopy\nimport * as React from 'react';\nimport { CheckboxField, Button } from '@aws-amplify/ui-react';\n\nexport const CheckboxFieldWithErrorExample = () => {\n  const [checked, setChecked] = React.useState(false);\n  const [hasError, setHasError] = React.useState(false);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (!checked) {\n      setHasError(true);\n    } else {\n      setHasError(false);\n      alert(`success`);\n    }\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <CheckboxField\n        label=\"I agree to the terms and conditions\"\n        name=\"toc\"\n        value=\"yes\"\n        checked={checked}\n        hasError={hasError}\n        errorMessage=\"Please agree to the terms and conditions\"\n        onChange={(e) => setChecked(e.target.checked)}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </form>\n  );\n};\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nSubscribe\nSubscribe\nCopy\nimport * as React from 'react';\nimport { CheckboxField, Flex } from '@aws-amplify/ui-react';\n\nexport const CheckboxFieldLabelHiddenExample = () => (\n  <Flex>\n    <CheckboxField label=\"Subscribe\" name=\"subscribe\" value=\"yes\" />\n    <CheckboxField\n      label=\"Subscribe\"\n      name=\"subscribe\"\n      value=\"yes\"\n      labelHidden={true}\n    />\n  </Flex>\n);\n\nStandard HTML attributes\n\nThe CheckboxField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation\n\nSubscribe to our newsletter\nCopy\n<CheckboxField label=\"Subscribe to our newsletter\" name=\"subscribe\" value=\"yes\" />\n\nStyling\nTheme\n\nYou can customize the appearance of all CheckboxField components in your application with a Theme.\n\nCheckboxField Theme Source\n\nSubscribe\nDisabled example\nCopy\nimport { CheckboxField, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'checkbox-theme',\n  tokens: {\n    components: {\n      checkbox: {\n        button: {\n          color: { value: '{colors.yellow.40}' },\n          _focus: {\n            outlineColor: { value: '{colors.blue.40}' },\n            borderColor: { value: '{colors.red.40}' },\n          },\n        },\n        icon: {\n          backgroundColor: { value: '{colors.secondary.80}' },\n        },\n        label: {\n          color: { value: '{colors.purple.80}' },\n          _disabled: {\n            color: { value: '{colors.purple.60}' },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const CheckboxFieldThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <CheckboxField label=\"Subscribe\" name=\"subscribe\" />\n    <CheckboxField\n      label=\"Disabled example\"\n      name=\"disabledExample\"\n      value=\"yes\"\n      isDisabled={true}\n    />\n  </ThemeProvider>\n);\n\nIcons\nCat\nDog\nCopy\nimport { CheckboxField, Flex, IconsProvider } from '@aws-amplify/ui-react';\nimport { HiMinus, HiCheck } from 'react-icons/hi';\n\nexport const CheckboxFieldIconExample = () => (\n  <IconsProvider\n    icons={{\n      checkbox: {\n        checked: <HiCheck />,\n        indeterminate: <HiMinus />,\n      },\n    }}\n  >\n    <Flex direction=\"column\">\n      <CheckboxField name=\"cat\" label=\"Cat\" value=\"cat\" defaultChecked={true} />\n      <CheckboxField name=\"dog\" label=\"Dog\" value=\"dog\" isIndeterminate />\n    </Flex>\n  </IconsProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-checkboxfield\tTop level element that wraps the CheckboxField primitive\nGlobal styling\n\nTo override styling on all Checkbox icons, you can set the Amplify CSS variables or use the built-in .amplify-checkbox__icon class.\n\n/* styles.css */\n:root {\n  --amplify-components-checkbox-icon-background-color: var(\n    --amplify-colors-blue-80\n  );\n}\n/* OR */\n.amplify-checkbox__icon {\n  background-color: var(--amplify-colors-blue-80);\n}\n\nSubscribe\nSubscribe\nLocal styling\n\nTo override styling on a specific Checkbox, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\n/* styles.css */\n.custom-checkbox .amplify-checkbox {\n  align-items: flex-start;\n  flex-direction: column-reverse;\n}\n\nimport { CheckboxField } from '@aws-amplify/ui-react';\nimport './styles.css';\n\n<CheckboxField\n  label=\"Subscribe\"\n  name=\"subscribe\"\n  value=\"yes\"\n  className=\"custom-checkbox\"\n/>;\n\nSubscribe\n\nUsing data attributes:\n\n/* styles.css */\n\n.amplify-checkbox__icon[data-checked='true'] {\n  background-color: var(--amplify-colors-purple-80);\n}\n\nimport { CheckboxField } from '@aws-amplify/ui-react';\nimport './styles.css';\n\n<CheckboxField label=\"Subscribe\" name=\"subscribe\" value=\"yes\" />;\n\nSubscribe\n\nUsing style props:\n\nimport { CheckboxField } from '@aws-amplify/ui-react';\n\n<CheckboxField label=\"Subscribe\" name=\"subscribe\" value=\"yes\" gap=\"1rem\" />;\n\nSubscribe"
  },
  {
    "title": "Autocomplete | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/autocomplete",
    "html": "Autocomplete\n\nAutocomplete is a SearchField enhanced by a list of suggested options.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nAutocomplete\nlabel\nplaceholder\nsize\ndefault\nsmall\nlarge\nvariation\ndefault\nquiet\nisLoading\nlabelHidden\nisDisabled\nCopy\n<Autocomplete\n  label=\"Autocomplete\"\n  options={[{\"id\":\"apple\",\"label\":\"apple\"},{\"id\":\"banana\",\"label\":\"banana\"},{\"id\":\"cherry\",\"label\":\"cherry\"},{\"id\":\"grape\",\"label\":\"grape\"},{\"id\":\"kiwis\",\"label\":\"kiwis\"},{\"id\":\"lemon\",\"label\":\"lemon\"},{\"id\":\"mango\",\"label\":\"mango\"},{\"id\":\"orange\",\"label\":\"orange\"},{\"id\":\"strawberry\",\"label\":\"strawberry\"}]}\n  placeholder=\"Search here...\"\n/>\nUsage\n\nImport the Autocomplete, provide options for autocomplete and a label for accessibility/usability.\n\nDefault autocomplete\nCopy\nimport { Autocomplete } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const DefaultAutocompleteExample = () => (\n  <Autocomplete label=\"Default autocomplete\" options={options} />\n);\n\nAccessibility / Label behavior\n\nThe form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.\n\nHow can I visually hide the label while maintaining accessibility?\n\nIn some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.\n\nUX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.\n\nControlled component\nControlled autocomplete\nCopy\nimport { Autocomplete } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompleteControlledExample = () => {\n  const [value, setValue] = React.useState('');\n\n  const onChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  // It is your responsibility to set up onSelect\n  const onSelect = (option) => {\n    const { label } = option;\n    setValue(label);\n  };\n\n  // It is your responsibility to set up onClear\n  const onClear = () => {\n    setValue('');\n  };\n\n  return (\n    <Autocomplete\n      label=\"Controlled autocomplete\"\n      options={options}\n      value={value}\n      onChange={onChange}\n      onClear={onClear}\n      onSelect={onSelect}\n    />\n  );\n};\n\n\nNote: When using Autocomplete in controlled way, you are also responsible to set up onClear and onSelect event handlers in addition to onChange since the input value is under your control.\n\nPlaceholder\n\nText that appears in Autocomplete when it has no value set.\n\nAutocomplete placeholder example\nCopy\nimport { Autocomplete } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompletePlaceholderExample = () => (\n  <Autocomplete\n    label=\"Autocomplete placeholder example\"\n    options={options}\n    placeholder=\"Search for fruit...\"\n  />\n);\n\nSizes\n\nUse the size prop to change Autocomplete size. Available options are small, large, and none (default).\n\nAutocomplete size example\nAutocomplete size example\nAutocomplete size example\nCopy\nimport { Autocomplete, Flex } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompleteSizeExample = () => (\n  <Flex direction=\"column\">\n    <Autocomplete\n      label=\"Autocomplete size example\"\n      options={options}\n      size=\"small\"\n    />\n    <Autocomplete label=\"Autocomplete size example\" options={options} />\n    <Autocomplete\n      label=\"Autocomplete size example\"\n      options={options}\n      size=\"large\"\n    />\n  </Flex>\n);\n\nVariations\n\nThere are two variation styles available: default and quiet.\n\nAutocomplete variation example\nAutocomplete variation example\nCopy\nimport { Autocomplete, Flex } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompleteVariationExample = () => (\n  <Flex direction=\"column\">\n    <Autocomplete label=\"Autocomplete variation example\" options={options} />\n    <Autocomplete\n      label=\"Autocomplete variation example\"\n      options={options}\n      variation=\"quiet\"\n    />\n  </Flex>\n);\n\nLoading state\n\nBy setting isLoading to true, Autocomplete will be in loading state.\n\nAutocomplete in loading state\nCopy\nimport { Autocomplete } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [];\n\nexport const AutocompleteLoadingStateExample = () => {\n  return (\n    <Autocomplete\n      label=\"Autocomplete in loading state\"\n      options={options}\n      isLoading\n    />\n  );\n};\n\nCustom filtering\n\nBy default, Autocomplete will filter against option label. You can customize the filtering behavior by providing optionFilter.\n\nAutocomplete with custom filtering\nCopy\nimport { Autocomplete, HighlightMatch } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  {\n    id: 'apple',\n    label: 'apple',\n    description: 'An apple is an edible fruit produced by an apple tree.',\n  },\n  {\n    id: 'banana',\n    label: 'banana',\n    description:\n      'A banana is an elongated, edible fruit produced by several kinds of large herbaceous flowering plants.',\n  },\n  {\n    id: 'cherry',\n    label: 'cherry',\n    description:\n      'A cherry is the fruit of many plants of the genus Prunus, and is a fleshy drupe.',\n  },\n  {\n    id: 'grape',\n    label: 'grape',\n    description:\n      'A grape is a fruit, botanically a berry, of the deciduous woody vines of the flowering plant genus Vitis.',\n  },\n  {\n    id: 'kiwis',\n    label: 'kiwis',\n    description:\n      'Kiwifruit or Chinese gooseberry is the edible berry of several species of woody vines in the genus Actinidia.',\n  },\n  {\n    id: 'lemon',\n    label: 'lemon',\n    description:\n      'The lemon is a species of small evergreen trees in the flowering plant family Rutaceae.',\n  },\n  {\n    id: 'mango',\n    label: 'mango',\n    description:\n      'A mango is an edible stone fruit produced by the tropical tree Mangifera indica.',\n  },\n  {\n    id: 'orange',\n    label: 'orange',\n    description:\n      'An orange is a fruit of various citrus species in the family Rutaceae.',\n  },\n  {\n    id: 'strawberry',\n    label: 'strawberry',\n    description:\n      'The garden strawberry is a widely grown hybrid species of the genus Fragaria, collectively known as the strawberries.',\n  },\n];\n\nconst renderOptions = (option, value) => {\n  return <HighlightMatch query={value}>{option?.description}</HighlightMatch>;\n};\n\nexport const AutocompleteCustomFilteringExample = () => {\n  const [value, setValue] = React.useState('');\n\n  // Create your own filtering\n  const optionFilter = (option, value) => {\n    // filter options against description\n    return option?.description?.includes(value);\n  };\n\n  return (\n    <Autocomplete\n      label=\"Autocomplete with custom filtering\"\n      optionFilter={optionFilter}\n      options={options}\n      value={value}\n      onChange={(event) => setValue(event.target.value)}\n      onClear={() => setValue('')}\n      onSelect={(option) => {\n        setValue(option?.description);\n      }}\n      renderOption={renderOptions}\n    />\n  );\n};\n\n\nNote: When you create your own filtering logic, match highlighting will be disabled. If you want to enable it, you can build a custom option and wrap the label with HighlightMatch. See custom option example.\n\nCustom option\n\nYou can create a custom option by providing renderOption.\n\nAutocomplete with custom options\nCopy\nimport {\n  Autocomplete,\n  Flex,\n  HighlightMatch,\n  Image,\n} from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\n// When you run the code locally, you need to update the url with yours.\nconst options = [\n  { id: 'cat-1', label: 'cat-1', url: '/cats/1.jpg' },\n  { id: 'cat-2', label: 'cat-2', url: '/cats/2.jpg' },\n  { id: 'cat-3', label: 'cat-3', url: '/cats/3.jpg' },\n  { id: 'cat-4', label: 'cat-4', url: '/cats/4.jpg' },\n  { id: 'cat-5', label: 'cat-5', url: '/cats/5.jpg' },\n];\n\nexport const AutocompleteCustomOptionExample = () => {\n  const renderOption = (option, value) => {\n    const { label, url } = option;\n    return (\n      <Flex alignItems=\"center\">\n        <Image src={url} alt={label} width=\"100px\" height=\"100px\" />\n        <HighlightMatch query={value}>{label}</HighlightMatch>\n      </Flex>\n    );\n  };\n\n  return (\n    <Autocomplete\n      label=\"Autocomplete with custom options\"\n      options={options}\n      renderOption={renderOption}\n    />\n  );\n};\n\nCustom menu\n\nYou can customize the option menu by setting menuSlots. The available slots accept a ReactNode.\n\nCustom header\nAutocomplete custom header example\nCopy\nimport { Autocomplete, Divider, View } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompleteCustomHeaderExample = () => (\n  <Autocomplete\n    label=\"Autocomplete custom header example\"\n    options={options}\n    menuSlots={{\n      Header: (\n        <View padding=\"xxxs\">\n          <View>Search results:</View>\n          <Divider />\n        </View>\n      ),\n    }}\n  />\n);\n\nCustom footer\nAutocomplete custom footer example\nCopy\nimport { Autocomplete, Divider, Link, View } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompleteCustomFooterExample = () => (\n  <Autocomplete\n    label=\"Autocomplete custom footer example\"\n    options={options}\n    menuSlots={{\n      Footer: (\n        <View padding=\"xxxs\">\n          <Divider />\n          <View>\n            <Link>See more results...</Link>\n          </View>\n        </View>\n      ),\n    }}\n  />\n);\n\nCustom empty\nAutocomplete custom empty example\nCopy\nimport { Autocomplete, View } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const AutocompleteCustomEmptyExample = () => (\n  <Autocomplete\n    label=\"Autocomplete custom empty example\"\n    options={[]}\n    menuSlots={{\n      Empty: <View>No results found :(</View>,\n    }}\n  />\n);\n\nCustom loading\nAutocomplete custom loading example\nCopy\nimport { Autocomplete, Flex, Loader } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nexport const AutocompleteCustomLoadingExample = () => (\n  <Autocomplete\n    label=\"Autocomplete custom loading example\"\n    options={[]}\n    menuSlots={{\n      LoadingIndicator: (\n        <Flex alignItems=\"center\" gap=\"0.25rem\">\n          <Loader />\n          Loading more cats...\n        </Flex>\n      ),\n    }}\n    isLoading={true}\n  />\n);\n\nStyling\nTheme\n\nYou can customize the appearance of all Autocomplete components in your application with a Theme.\n\nAutocomplete Theme Source\n\nAutocomplete theme example\nCopy\nimport { Autocomplete, ThemeProvider, Theme } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst theme: Theme = {\n  name: 'autocomplete-theme',\n  tokens: {\n    components: {\n      autocomplete: {\n        menu: {\n          option: {\n            _active: {\n              backgroundColor: {\n                value: '{colors.secondary.80}',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompleteThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Autocomplete label=\"Autocomplete theme example\" options={options} />\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-autocomplete\tTop level element that wraps the Autocomplete primitive\namplify-autocomplete__menu\tTop level element that wraps the dropdown menu\namplify-autocomplete__menu--empty\tClass applied to the no options slot of menu\namplify-autocomplete__menu__footer\tClass applied to menu footer\namplify-autocomplete__menu__header\tClass applied to menu header\namplify-autocomplete__menu--loading\tClass applied to the loading slot of menu\namplify-autocomplete__menu__option\tClass applied to each li option\namplify-autocomplete__menu__options\tClass applied to ul container element\nGlobal styling\n\nTo override styling on all Autocompletes, you can set the Amplify CSS variables with the built-in .amplify-autocomplete class.\n\nCopy\n/* styles.css */\n.amplify-autocomplete {\n  --amplify-components-autocomplete-menu-option-active-background-color: var(--amplify-colors-secondary-80);\n}\n\nLocal styling\n\nTo override styling on a specific Autocomplete, you can use (in order of increasing specificity): a class selector and style props.\n\nUsing a class selector:\n\nCopy\n/* styles.css */\n.my-autocomplete {\n  --amplify-components-autocomplete-menu-option-active-background-color: var(--amplify-colors-secondary-80);\n}\n\n\nUsing style props:\n\nAutocomplete style props example\nCopy\nimport { Autocomplete } from '@aws-amplify/ui-react';\nimport * as React from 'react';\n\nconst options = [\n  { id: 'apple', label: 'apple' },\n  { id: 'banana', label: 'banana' },\n  { id: 'cherry', label: 'cherry' },\n  { id: 'grape', label: 'grape' },\n  { id: 'kiwis', label: 'kiwis' },\n  { id: 'lemon', label: 'lemon' },\n  { id: 'mango', label: 'mango' },\n  { id: 'orange', label: 'orange' },\n  { id: 'strawberry', label: 'strawberry' },\n];\n\nexport const AutocompleteStylePropsExample = () => (\n  <Autocomplete\n    label=\"Autocomplete style props example\"\n    options={options}\n    borderRadius=\"10px\"\n  />\n);\n"
  },
  {
    "title": "Tabs | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/tabs",
    "html": "Tabs\n\nTabs allow users to navigate between sections of related content.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nTab 1\nTab 2\nDisabled tab\nTab content #1\nSpacing\ndefault\nequal\nrelative\nIndicator Position\ndefault\ntop\nJustify Content\nflex-start\nflex-end\ncenter\nspace-between\nspace-around\nspace-evenly\nCopy\n<Tabs\n  justifyContent=\"flex-start\"\n  defaultValue='Tab 1'\n  items={[\n    { label: 'Tab 1', value: 'Tab 1', content: 'Tab content #1' },\n    { label: 'Tab 2', value: 'Tab 2', content: 'Tab content #2' },\n    { label: 'Disabled tab', value: 'Tab 3', content: 'Tab content #3', isDisabled: true },\n  ]}\n/>\nUsage\n\nThe Tabs component had some breaking changes in v6. Please see the migration docs for more information.\n\nImport the Tabs component and pass an array of items and a defaultValue.\n\nTab 1\nTab 2\nTab 3\nTab content #1\nCopy\nimport { Tabs } from '@aws-amplify/ui-react';\n\nexport const DefaultTabUncontrolled = () => (\n  <Tabs\n    defaultValue={'Tab 1'}\n    items={[\n      { label: 'Tab 1', value: 'Tab 1', content: 'Tab content #1' },\n      { label: 'Tab 2', value: 'Tab 2', content: 'Tab content #2' },\n      { label: 'Tab 3', value: 'Tab 3', content: 'Tab content #3' },\n    ]}\n  />\n);\n\nControlled Tabs\n\nThe Tabs component also works as a controlled component. This allows you to programmatically set the current tab by setting the value prop. You can also use the onValueChange handler to know when a Tab would change.\n\nAlways include a defaultValue or value prop. If both are undefined, no initial tab is selected!\n\nFirst\nSecond\nContent of the first tab\nCopy\nimport { useState } from 'react';\nimport { Tabs, Button } from '@aws-amplify/ui-react';\n\nexport const ControlledTabExample = () => {\n  const [tab, setTab] = useState('1');\n  return (\n    <Tabs\n      value={tab}\n      onValueChange={(tab) => setTab(tab)}\n      items={[\n        {\n          label: 'First',\n          value: '1',\n          content: 'Content of the first tab',\n        },\n        {\n          label: 'Second',\n          value: '2',\n          content: (\n            <>\n              <p>Content of the second tab.</p>\n              <Button isFullWidth onClick={() => setTab('1')}>\n                Go to first tab\n              </Button>\n            </>\n          ),\n        },\n      ]}\n    />\n  );\n};\n\nLazy loading tabs\n\nBy default, each tab's content is always rendered into the DOM and hidden with CSS. This allows search engines and users (using cmd/ctrl+F) to see all the tab content. Sometimes this is not preferrable and you would rather only load tab content when a tab is shown. To do that use the isLazy prop.\n\nTab 1\nTab 2\nTab 3\nTab 1 content\nCopy\nimport { Tabs } from '@aws-amplify/ui-react';\n\nexport const LazyTabsExample = () => {\n  return (\n    <Tabs\n      defaultValue=\"1\"\n      items={[\n        { label: 'Tab 1', value: '1', content: 'Tab 1 content' },\n        { label: 'Tab 2', value: '2', content: 'Tab 2 content' },\n        { label: 'Tab 3', value: '3', content: 'Tab 3 content' },\n      ]}\n      isLazy\n    />\n  );\n};\n\nTab spacing\n\nIn the Tabs component, use the spacing prop to control how Tabs take up the remaining space. Pass equal to make each tab take up the same amount of space, and relative to make each tab take up space relative to the size of its title.\n\nFirst\nThis is the second tab\nReally long title for demonstration\nContent of the first tab\nFirst\nThis is the second tab\nReally long title for demonstration\nContent of the first tab\nCopy\nimport { Flex, Tabs } from '@aws-amplify/ui-react';\n\nexport const Spacing = () => (\n  <Flex direction=\"column\" gap=\"2rem\">\n    <Tabs.Container defaultValue=\"1\">\n      <Tabs.List spacing=\"equal\">\n        <Tabs.Item value=\"1\">First</Tabs.Item>\n        <Tabs.Item value=\"2\">This is the second tab</Tabs.Item>\n        <Tabs.Item value=\"3\">Really long title for demonstration</Tabs.Item>\n      </Tabs.List>\n      <Tabs.Panel value=\"1\">Content of the first tab</Tabs.Panel>\n      <Tabs.Panel value=\"2\">Content of the second tab</Tabs.Panel>\n      <Tabs.Panel value=\"3\">Content of the third tab</Tabs.Panel>\n    </Tabs.Container>\n    <Tabs.Container defaultValue=\"1\">\n      <Tabs.List spacing=\"relative\">\n        <Tabs.Item value=\"1\">First</Tabs.Item>\n        <Tabs.Item value=\"2\">This is the second tab</Tabs.Item>\n        <Tabs.Item value=\"3\">Really long title for demonstration</Tabs.Item>\n      </Tabs.List>\n      <Tabs.Panel value=\"1\">Content of the first tab</Tabs.Panel>\n      <Tabs.Panel value=\"2\">Content of the second tab</Tabs.Panel>\n      <Tabs.Panel value=\"3\">Content of the third tab</Tabs.Panel>\n    </Tabs.Container>\n  </Flex>\n);\n\nJustify Content\n\nIn the Tabs component, use the justifyContent prop to control how space is distributed between and around the Tabs. Available options include flex-start (default), flex-end, center, space-between, space-around, and space-evenly.\n\nNote: this prop only has an effect if the spacing prop is not set, otherwise the spacing prop will take precedence.\n\nFirst\nSecond\nThird\nTabs are centered\nFirst\nSecond\nThird\nTabs are stacked to the right\nCopy\nimport { Flex, Tabs } from '@aws-amplify/ui-react';\n\nexport const JustifyContent = () => (\n  <Flex direction=\"column\" gap=\"2rem\">\n    <Tabs.Container defaultValue=\"First\">\n      <Tabs.List justifyContent=\"center\">\n        <Tabs.Item value=\"First\">First</Tabs.Item>\n        <Tabs.Item value=\"Second\">Second</Tabs.Item>\n        <Tabs.Item value=\"Third\">Third</Tabs.Item>\n      </Tabs.List>\n      <Tabs.Panel value=\"First\">Tabs are centered</Tabs.Panel>\n      <Tabs.Panel value=\"Second\">Content of the second tab</Tabs.Panel>\n      <Tabs.Panel value=\"Third\">Content of the third tab</Tabs.Panel>\n    </Tabs.Container>\n\n    <Tabs.Container defaultValue=\"First\">\n      <Tabs.List justifyContent=\"flex-end\">\n        <Tabs.Item value=\"First\">First</Tabs.Item>\n        <Tabs.Item value=\"Second\">Second</Tabs.Item>\n        <Tabs.Item value=\"Third\">Third</Tabs.Item>\n      </Tabs.List>\n      <Tabs.Panel value=\"First\">Tabs are stacked to the right</Tabs.Panel>\n      <Tabs.Panel value=\"Second\">Content of the second tab</Tabs.Panel>\n      <Tabs.Panel value=\"Third\">Content of the third tab</Tabs.Panel>\n    </Tabs.Container>\n  </Flex>\n);\n\nIndicator Position\n\nYou can change the position of the tab border and current tab indicator with the indicatorPosition prop. The only values are top or bottom (default).\n\nTab 1\nTab 2\nCopy\nimport { Tabs } from '@aws-amplify/ui-react';\n\nexport const IndicatorPosition = () => (\n  <Tabs.Container>\n    <Tabs.List indicatorPosition=\"top\">\n      <Tabs.Item value=\"1\">Tab 1</Tabs.Item>\n      <Tabs.Item value=\"2\">Tab 2</Tabs.Item>\n    </Tabs.List>\n    <Tabs.Panel value=\"1\">Tab 1 content</Tabs.Panel>\n    <Tabs.Panel value=\"2\">Tab 2 content</Tabs.Panel>\n  </Tabs.Container>\n);\n\nDisabled Tabs\n\nIn the TabItem component, use the isDisabled prop to make a Tab not clickable and its content not visible to the user.\n\nTab 1\nTab 2\nTab 3\nTab 1 Content\nCopy\nimport { Tabs } from '@aws-amplify/ui-react';\n\nexport const DisabledTabs = () => (\n  <Tabs.Container defaultValue=\"1\">\n    <Tabs.List>\n      <Tabs.Item value=\"1\">Tab 1</Tabs.Item>\n      <Tabs.Item value=\"2\">Tab 2</Tabs.Item>\n      <Tabs.Item value=\"3\" isDisabled>\n        Tab 3\n      </Tabs.Item>\n    </Tabs.List>\n    <Tabs.Panel value=\"1\">Tab 1 Content</Tabs.Panel>\n    <Tabs.Panel value=\"2\">Tab 2 Content</Tabs.Panel>\n    <Tabs.Panel value=\"3\" isDisabled>\n      This Tab is not clickable and will not display its content to the user.\n    </Tabs.Panel>\n  </Tabs.Container>\n);\n\nComposable\n\nThe Tabs component is composable so you can rearrange parts of the tabs or access any props for each sub-component. Here are the composable parts of the Tabs component:\n\n<Tabs.Container>: outermost element to wrap all the pieces\n<Tabs.List>: the tab bar that contains the tabs\n<Tabs.Item>: each individual tab in the tab bar\n<Tabs.Panel>: the content for each tab\n\nThere should be a 1-to-1 relationship between <Tabs.Item>s and <Tabs.Panel>s. The corresponding item/panel should have the same value.\n\nAll of the visual props, indicatorPosition, spacing, justifyContent, should be placed on the <Tabs.List> element. The other props like defaultValue and isLazy should go on the <Tabs.Container> element.\n\nTab 1\nTab 2\nTab 3\nTab 1 content\nCopy\nimport { Tabs } from '@aws-amplify/ui-react';\n\nexport const ComposedTabsExample = () => {\n  return (\n    <Tabs.Container defaultValue=\"Tab 1\">\n      <Tabs.List>\n        <Tabs.Item value=\"Tab 1\">Tab 1</Tabs.Item>\n        <Tabs.Item value=\"Tab 2\">Tab 2</Tabs.Item>\n        <Tabs.Item value=\"Tab 3\" isDisabled>\n          Tab 3\n        </Tabs.Item>\n      </Tabs.List>\n      <Tabs.Panel value=\"Tab 1\">Tab 1 content</Tabs.Panel>\n      <Tabs.Panel value=\"Tab 2\">Tab 2 content</Tabs.Panel>\n      <Tabs.Panel value=\"Tab 3\" isDisabled>\n        Tab 3 content\n      </Tabs.Panel>\n    </Tabs.Container>\n  );\n};\n\n\nWith the composable interface you can add elements to the tabs like badges and icons\n\nEmail 21\n Email\nContent of the first tab\nCopy\nimport { Badge, Icon, Tabs } from '@aws-amplify/ui-react';\n\nconst IconEmail = () => {\n  return (\n    <Icon\n      pathData=\"M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6ZM20 6L12 11L4 6H20ZM20 18H4V8L12 13L20 8V18Z\"\n      ariaLabel=\"\"\n    />\n  );\n};\n\nexport const BadgeIcons = () => (\n  <Tabs.Container defaultValue=\"1\">\n    <Tabs.List>\n      <Tabs.Item value=\"1\">\n        Email{' '}\n        <Badge size=\"small\" variation=\"info\">\n          21\n        </Badge>\n      </Tabs.Item>\n      <Tabs.Item value=\"2\">\n        <IconEmail /> Email\n      </Tabs.Item>\n    </Tabs.List>\n    <Tabs.Panel value=\"1\">Content of the first tab</Tabs.Panel>\n    <Tabs.Panel value=\"2\">Content of the second tab</Tabs.Panel>\n  </Tabs.Container>\n);\n\nStyling\nTheme\n\nYou can customize the appearance of all Tabs components in your application with a Theme.\n\nTabs Theme Source\n\nTab 1\nTab 2\nTab 3\nTab 1 Content\nCopy\nimport { Tabs, ThemeProvider, createTheme } from '@aws-amplify/ui-react';\n\nconst theme = createTheme({\n  name: 'tabs-theme',\n  tokens: {\n    components: {\n      tabs: {\n        borderColor: { value: '{colors.neutral.20}' },\n        item: {\n          color: { value: '{colors.blue.80}' },\n          fontSize: { value: '{fontSizes.xl}' },\n          fontWeight: { value: '{fontWeights.normal}' },\n\n          _hover: {\n            color: { value: '{colors.blue.60}' },\n          },\n          _focus: {\n            color: { value: '{colors.blue.60}' },\n          },\n          _active: {\n            color: { value: '{colors.blue.80}' },\n            borderColor: { value: '{colors.blue.80}' },\n            backgroundColor: { value: '{colors.blue.10}' },\n          },\n          _disabled: {\n            color: { value: 'gray' },\n            backgroundColor: { value: 'transparent' },\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const TabsThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Tabs.Container defaultValue=\"1\">\n        <Tabs.List>\n          <Tabs.Item value=\"1\">Tab 1</Tabs.Item>\n          <Tabs.Item value=\"2\">Tab 2</Tabs.Item>\n          <Tabs.Item value=\"3\" isDisabled>\n            Tab 3\n          </Tabs.Item>\n        </Tabs.List>\n        <Tabs.Panel value=\"1\">Tab 1 Content</Tabs.Panel>\n        <Tabs.Panel value=\"2\">Tab 2 Content</Tabs.Panel>\n        <Tabs.Panel value=\"3\" isDisabled>\n          Tab 3 Content\n        </Tabs.Panel>\n      </Tabs.Container>\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-tabs\tTop level element that wraps the Tabs primitive\namplify-tabs__item\tTab element (button) in a TabPanel\namplify-tabs__list\tTop level element that wraps the TabItem primitive\namplify-tabs__panel\tTop level element that wraps the TabItem primitive\nGlobal styling\n\nTo override styling on all Tabs components, you can set Amplify CSS variables or use the target classes like .amplify-tabs class.\n\nTab 1\nTab 2\nTab 3\nTab content #1\nCopy\n/* styles.css */\n[data-amplify-theme] {\n  /* background for the whole tab bar */\n  --amplify-components-tabs-background-color: var(\n    --amplify-colors-background-secondary\n  );\n  /* background for each tab */\n  --amplify-components-tabs-item-background-color: var(\n    --amplify-colors-background-primary\n  );\n}\n/* OR */\n.amplify-tabs {\n  background-color: var(--amplify-colors-background-secondary);\n}\n\n.amplify-tabs__item {\n  background-color: var(--amplify-colors-background-primary);\n}\n\n\nTo replace the Tabs styling, unset it:\n\n.amplify-tabs {\n  all: unset;\n  /* Add your styling here*/\n}\n\n.amplify-tabs__item {\n  all: unset;\n  /* Add your styling here*/\n}\n\nLocal styling\n\nTo override styling on a specific Tabs component, you can use (in order of increasing specificity): a class selector or style props.\n\nUsing a class selector\nTab 1\nTab 2\nContent of Tab 1\nCopy\n/* styles.css */\n.custom-tabs {\n  background-color: var(--amplify-colors-primary-60);\n  justify-content: center;\n  border-color: transparent;\n}\n\n.custom-tab-item {\nbackground-color: var(--amplify-colors-primary-80);\ncolor: var(--amplify-colors-font-inverse);\nborder-color: transparent;\n}\n\n.custom-tab-item:hover {\ncolor: var(--amplify-colors-font-inverse);\nbackground-color: var(--amplify-colors-primary-90);\n}\n\n.custom-tab-item[aria-selected='true'] {\ncolor: var(--amplify-colors-font-inverse);\nborder-color: transparent;\nbackground-color: var(--amplify-colors-primary-100);\n}\n\n\nUsing style props\nTab 1\nTab 2\nContent of Tab 1\nCopy\nimport { Tabs } from '@aws-amplify/ui-react';\n\nexport const StyleProps = () => {\n  return (\n    <Tabs.Container defaultValue=\"1\">\n      <Tabs.List backgroundColor=\"background.secondary\">\n        <Tabs.Item value=\"1\" color=\"font.secondary\">\n          Tab 1\n        </Tabs.Item>\n        <Tabs.Item value=\"2\" color=\"secondary.60\">\n          Tab 2\n        </Tabs.Item>\n      </Tabs.List>\n      <Tabs.Panel value=\"1\">Content of Tab 1</Tabs.Panel>\n      <Tabs.Panel value=\"2\">Content of Tab 2</Tabs.Panel>\n    </Tabs.Container>\n  );\n};\n\n\nNote: there is currently no way to style different states like hover using only style props. However Amplify UI works well with CSS in JS frameworks for this usecase. Take a look at the alternative styling docs for information how to use CSS in JS with Amplify UI.\n\nAccessibility\n\nAdheres to the Tabs WAI-ARIA design pattern.\n\nWe recommend passing an ariaLabel prop to help enable assistive technology.\n\nApples\nBananas\nPlay with the Tab and Arrow keys to engage with this component.\nCopy\nimport { Tabs } from '@aws-amplify/ui-react';\n\nexport const AriaLabel = () => (\n  <Tabs.Container ariaLabel=\"fruits\" defaultValue=\"Apples\">\n    <Tabs.List>\n      <Tabs.Item value=\"Apples\">Apples</Tabs.Item>\n      <Tabs.Item value=\"Bananas\">Bananas</Tabs.Item>\n    </Tabs.List>\n    <Tabs.Panel value=\"Apples\">\n      Play with the Tab and Arrow keys to engage with this component.\n    </Tabs.Panel>\n    <Tabs.Panel value=\"Bananas\">\n      Notice how an outline is added when the :focus-visible pseudo-class is\n      applied.\n    </Tabs.Panel>\n  </Tabs.Container>\n);\n"
  },
  {
    "title": "Menu | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/menu",
    "html": "Menu\n\nMenu provides a way for users to navigate and select actions within an application.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nmenuAlign\nstart\ncenter\nend\nsize\ndefault\nsmall\nlarge\nCopy\n<Menu\n  menuAlign=\"start\"\n>\n  <MenuItem onClick={() => alert('Download')}>\n    Download\n  </MenuItem>\n  <MenuItem onClick={() => alert('Create a Copy')}>\n    Create a Copy\n  </MenuItem>\n  <MenuItem onClick={() => alert('Mark as Draft')}>\n    Mark as Draft\n  </MenuItem>\n  <Divider />\n  <MenuItem isDisabled onClick={() => alert('Delete')}>\n    Delete\n  </MenuItem>\n  <MenuItem onClick={() => alert('Attend a workshop')}>\n    Attend a workshop\n  </MenuItem>\n</Menu>\nUsage\n\nImport the Menu and MenuItem components. Note that the Menu component is rendered in a React Portal, so you can set the Menu button's width from its outer container.\n\nCopy\nimport { Menu, MenuItem, View } from '@aws-amplify/ui-react';\n\nexport const BasicExample = () => {\n  return (\n    <View width=\"4rem\">\n      <Menu>\n        <MenuItem>Option 1</MenuItem>\n        <MenuItem>Option 2</MenuItem>\n        <MenuItem>Option 3</MenuItem>\n      </Menu>\n    </View>\n  );\n};\n\nMenu items\n\nUse the MenuItem component to configure Menu options. The example below demonstrates how to add interactivity to the MenuItem's via the onClick handler, as well as how to use the Divider component and isDisabled prop.\n\nCopy\nimport { Menu, MenuItem, View, Divider } from '@aws-amplify/ui-react';\n\nexport const MenuItemsExample = () => {\n  return (\n    <View width=\"4rem\">\n      <Menu>\n        <MenuItem onClick={() => alert('Download')}>Download</MenuItem>\n        <MenuItem onClick={() => alert('Create a Copy')}>\n          Create a Copy\n        </MenuItem>\n        <Divider />\n        <MenuItem isDisabled onClick={() => alert('Delete')}>\n          Delete\n        </MenuItem>\n      </Menu>\n    </View>\n  );\n};\n\nCustomize Menu button\n\nThe default Menu button can be customized by importing the MenuButton component and passing it to the Menu's trigger prop. MenuButton can take all the same props as Button.\n\nCustom trigger button 🚀\nCopy\nimport { Menu, MenuItem, MenuButton } from '@aws-amplify/ui-react';\n\nexport const MenuExample = () => (\n  <Menu\n    trigger={\n      <MenuButton variation=\"primary\" size=\"large\" width=\"40%\">\n        Custom trigger button 🚀\n      </MenuButton>\n    }\n  >\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n  </Menu>\n);\n\nMenu alignment\n\nTo control the alignment of the Menu with the Menu button, use the menuAlign prop. Available options are start (default), center, and end.\n\nCopy\nimport { Flex, Menu, MenuItem } from '@aws-amplify/ui-react';\n\nexport const MenuAlignExample = () => {\n  return (\n    <Flex direction=\"column\" width=\"4rem\">\n      <Menu>\n        <MenuItem>Align start (default)</MenuItem>\n      </Menu>\n      <Menu menuAlign=\"center\">\n        <MenuItem>Align center</MenuItem>\n      </Menu>\n      <Menu menuAlign=\"end\">\n        <MenuItem>Align end</MenuItem>\n      </Menu>\n    </Flex>\n  );\n};\n\nSize\n\nControl the size of the Menu button and items using the size prop. Available options are small, none (default), and large.\n\nCopy\nimport { Menu, MenuItem, Flex } from '@aws-amplify/ui-react';\n\nexport const SizeExample = () => {\n  return (\n    <Flex direction=\"column\" width=\"4rem\">\n      <Menu size=\"small\">\n        <MenuItem>Download</MenuItem>\n        <MenuItem>Create a Copy</MenuItem>\n      </Menu>\n      <Menu>\n        <MenuItem>Download</MenuItem>\n        <MenuItem>Create a Copy</MenuItem>\n      </Menu>\n      <Menu size=\"large\">\n        <MenuItem>Download</MenuItem>\n        <MenuItem>Create a Copy</MenuItem>\n      </Menu>\n    </Flex>\n  );\n};\n\nControlled Menu\n\nCreate a controlled Menu using the isOpen and onOpenChange props.\n\nCopy\nimport * as React from 'react';\nimport { Menu, MenuItem, View } from '@aws-amplify/ui-react';\n\nexport const ControlledExample = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleOpenChange = (open) => {\n    setIsOpen(open);\n    // Do something else\n  };\n\n  const closeMenu = () => setIsOpen(false);\n\n  return (\n    <View width=\"4rem\">\n      <Menu\n        isOpen={isOpen}\n        onOpenChange={handleOpenChange}\n        width=\"3rem\"\n        maxWidth=\"4rem\"\n      >\n        <MenuItem\n          onClick={() => {\n            closeMenu();\n            alert('Download');\n          }}\n        >\n          Download\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            closeMenu();\n            alert('Create a Copy');\n          }}\n        >\n          Create a Copy\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            closeMenu();\n            alert('Mark as Draft');\n          }}\n        >\n          Mark as Draft\n        </MenuItem>\n      </Menu>\n    </View>\n  );\n};\n\nStyling\nTheme\n\nYou can customize the appearance of all Menu components in your application with a Theme.\n\nMenu Theme Source\n\nCopy\nimport { Menu, MenuItem, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'menu-theme',\n  tokens: {\n    components: {\n      menu: {\n        backgroundColor: { value: '{colors.blue.20}' },\n        borderRadius: { value: '0' },\n        item: {\n          minHeight: { value: '5rem' },\n        },\n      },\n    },\n  },\n};\n\nexport const MenuThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Menu>\n        <MenuItem>Download</MenuItem>\n        <MenuItem>Create a Copy</MenuItem>\n        <MenuItem>Mark as Draft</MenuItem>\n      </Menu>\n    </ThemeProvider>\n  );\n};\n\nIcons\nCopy\nimport { Menu, MenuItem, IconsProvider } from '@aws-amplify/ui-react';\nimport { FiMoreHorizontal } from 'react-icons/fi';\n\nexport const MenuIconExample = () => (\n  <IconsProvider\n    icons={{\n      menu: {\n        menu: <FiMoreHorizontal />,\n      },\n    }}\n  >\n    <Menu>\n      <MenuItem>Download</MenuItem>\n      <MenuItem>Create a Copy</MenuItem>\n      <MenuItem>Mark as Draft</MenuItem>\n    </Menu>\n  </IconsProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-menu__content\tMenu content container (Flex)\namplify-menu__wrapper\tMenu content wrapper\namplify-menu__content__item\tMenu item button (MenuButton, wrapped in amplify-menu-content class)\namplify-menu__trigger\tMenu trigger button (MenuButton, not wrapped in amplify-menu-content class)\nGlobal styling\n\nTo override styling on all Menus, you can set the Amplify CSS variables with the built-in classes.\n\n/* styles.css */\n.amplify-menu-content {\n  --amplify-components-button-color: var(--amplify-colors-secondary-90);\n}\n.amplify-menu-trigger {\n  --amplify-components-button-border-color: var(\n    --amplify-colors-secondary-90\n  );\n  --amplify-components-button-color: var(--amplify-colors-secondary-90);\n}\n\nimport { Menu, MenuItem } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nimport './styles.css';\n\nexport const GlobalStylingExample = () => (\n  <Menu>\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n  </Menu>\n);\n\nLocal styling\n\nTo override styling on a specific Menu, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nNote: The classname prop is applied to the Menu dropdown content. Use the triggerClassName prop to apply a class to the menu trigger button.\n\n/* styles.css */\n.my-menu-trigger.amplify-menu-trigger {\n  border-color: var(--amplify-colors-secondary-90);\n  color: var(--amplify-colors-secondary-90);\n}\n.my-menu-content .amplify-menu-content__item {\n  color: var(--amplify-colors-secondary-90);\n}\n.my-menu-content .amplify-menu-content__item:hover {\n  background-color: var(--amplify-colors-secondary-90);\n}\n\nimport { Menu, MenuItem } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nimport './styles.css';\n\nexport const ClassNameExample = () => (\n  <Menu className=\"my-menu-content\" triggerClassName=\"my-menu-trigger\">\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n  </Menu>\n);\n\n\nUsing data attributes:\n\n/* styles.css */\n.amplify-menu-content__item[data-size='large'] {\n  font-size: var(--amplify-font-sizes-xxxxl);\n}\n\nimport { Menu, MenuItem } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nimport './styles.css';\n\nexport const DataAttributesExample = () => (\n  <Menu size=\"large\">\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n  </Menu>\n);\n\n\nUsing style props:\n\nCopy\nimport { Menu, MenuItem, View, useTheme } from '@aws-amplify/ui-react';\n\nexport const StylePropsExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <View width=\"4rem\">\n      <Menu direction=\"row\">\n        <MenuItem>Download</MenuItem>\n        <MenuItem fontStyle=\"italic\">Create a Copy</MenuItem>\n        <MenuItem backgroundColor={tokens.colors.red[40]}>Delete</MenuItem>\n      </Menu>\n    </View>\n  );\n};\n"
  },
  {
    "title": "Link | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/link",
    "html": "Link\n\nLink renders an anchor element <a> by default and is primarily used for navigation.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nMy Demo Link\nchildren\ncolor\ntextDecoration\nnone\nunderline\nunderline overline #FF3028\nunderline dotted\nunderline dotted red\ngreen wavy underline\nisExternal\nCopy\n<Link\n href=\"https://ui.docs.amplify.aws/react/components/link\"\n color=\"#007EB9\"\n>\n My Demo Link\n</Link>\nUsage\n\nImport the Link component. Link renders an anchor element <a> by default, which accepts an href attribute that specifies the Link's destination.\n\nMy recursive link\nCopy\nimport { Link } from '@aws-amplify/ui-react';\n\nexport const DefaultLinkExample = () => {\n  return (\n    <Link href=\"https://ui.docs.amplify.aws/react/components/link\">\n      My recursive link\n    </Link>\n  );\n};\n\nExternal Links\n\nTo create a Link which opens in a new tab, use the isExternal prop. Under the hood, isExternal sets target=\"_blank\" and rel=\"noopener noreferrer\" on the <a> anchor element.\n\nThis Link will open in new tab\nCopy\nimport { Link } from '@aws-amplify/ui-react';\n\nexport const ExternalLinkExample = () => {\n  return (\n    <Link\n      href=\"https://ui.docs.amplify.aws/react/components/link\"\n      isExternal={true}\n    >\n      This Link will open in new tab\n    </Link>\n  );\n};\n\nRouting Libraries\n\nYou can use a Link with any React routing library that supports custom components. Below is an example using Link with React Router v5, in which the Link is passed to the component prop as a custom navigation component:\n\nCopy\nimport { Link, Flex, Heading } from '@aws-amplify/ui-react';\n\nimport {\n  BrowserRouter as Router,\n  Link as ReactRouterLink,\n  Routes,\n  Route,\n} from 'react-router-dom';\n\nfunction Home() {\n  return <Heading level={2}>Home</Heading>;\n}\n\nfunction About() {\n  return <Heading level={2}>About</Heading>;\n}\n\nfunction Users() {\n  return <Heading level={2}>Users</Heading>;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Flex>\n        <ReactRouterLink to=\"/\" component={Link}>Home</ReactRouterLink>\n        <ReactRouterLink to=\"/about\" component={Link}>About</ReactRouterLink>\n        <ReactRouterLink to=\"/users\" component={Link}>Users</ReactRouterLink>\n      </Flex>\n\n      <Routes>\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/users\" element={<Users />} />\n        <Route path=\"/\" element={<Home />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all Link components in your application with a Theme.\n\nLink Theme Source\n\nThemed Link\nCopy\nimport { Link, Theme, ThemeProvider } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'link-theme',\n  tokens: {\n    components: {\n      link: {\n        focus: {\n          color: { value: '{colors.blue.40}' },\n        },\n        hover: {\n          color: { value: '{colors.blue.60}' },\n        },\n        visited: {\n          color: { value: '{colors.blue.80}' },\n        },\n      },\n    },\n  },\n};\n\nexport const LinkThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Link href=\"https://ui.docs.amplify.aws/react/components/link\" isExternal>\n        Themed Link\n      </Link>\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-link\tTop level element that wraps the Link primitive\nGlobal Styling\n\nTo override styling on all Links, you can set the Amplify CSS variables or use the built in .amplify-link class.\n\nCSS Pseudo-classes\n\nTo style the Link component in different states, you can use any of these four CSS Pseudo-classes: :active, :focus, :hover and :visited.\n\nLink Global Styling\nCopy\n/* styles.css */\n[data-amplify-theme] {\n  --amplify-components-link-color: var(--amplify-colors-purple-80);\n  --amplify-components-link-hover-color: var(--amplify-colors-purple-60);\n}\n/* OR */\n.amplify-link {\n  color: var(--amplify-colors-purple-80);\n}\n.amplify-link:hover {\n  color: var(--amplify-colors-purple-60);\n}\n\nLocal Styling\n\nTo override styling on a specific Link, you can use (in order of increasing specificity): a class selector or style props.\n\nUsing a class selector:\n\nMy Custom Link\nCopy\n/* styles.css */\n.link-local-styles {\n  color: var(--amplify-colors-blue-80);\n  font-weight: var(--amplify-font-weights-bold);\n}\n\n.link-local-styles:hover {\n  color: var(--amplify-colors-blue-60);\n}\n\n.link-local-styles:active {\n  color: var(--amplify-colors-green-80);\n}\n\nCopy\nimport './styles.css';\n\n<Link className=\"link-local-styles\">My Custom Link</Link>;\n\n\nUsing style props:\n\nStyled Link\nCopy\nimport { Link } from '@aws-amplify/ui-react';\n\nexport const LinkStylePropsExample = () => {\n  return (\n    <Link fontSize=\"xl\" fontWeight=\"bold\" textDecoration=\"underline\">\n      Styled Link\n    </Link>\n  );\n};\n"
  },
  {
    "title": "Breadcrumbs | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/breadcrumbs",
    "html": "Breadcrumbs\n\nThe breadcrumbs component is a navigation list used to visualize the information architecture of a website and the users current place in the hierarchy.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nUsage\n\nImport the Breadcrumbs component and and render individual Breadcrumbs.Items with a Breadcrumbs.Link inside. The current breadcrumb should use the isCurrent prop which sets the appropriate aria attributes.\n\nHome\n/\nComponents\n/\nBreadcrumbs\nCopy\nimport { Breadcrumbs } from '@aws-amplify/ui-react';\n\nexport default function DefaultBreadcrumbsExample() {\n  return (\n    <Breadcrumbs\n      items={[\n        {\n          href: '/',\n          label: 'Home',\n        },\n        {\n          href: '/react/components',\n          label: 'Components',\n        },\n        {\n          label: 'Breadcrumbs',\n        },\n      ]}\n    />\n  );\n}\n\nCustom separator\n\nYou can customize the separator between breadcrumb links with the separator prop.\n\nHome\n|\nComponents\n|\nBreadcrumbs\nCopy\nimport { Breadcrumbs } from '@aws-amplify/ui-react';\n\nexport default function CustomSeparatorExample() {\n  return (\n    <Breadcrumbs\n      items={[\n        {\n          href: '/',\n          label: 'Home',\n        },\n        {\n          href: '/react/components',\n          label: 'Components',\n        },\n        {\n          label: 'Breadcrumbs',\n          isCurrent: true,\n        },\n      ]}\n      separator={<Breadcrumbs.Separator>|</Breadcrumbs.Separator>}\n    />\n  );\n}\n\nCustom separator with icon\nHome\nComponents\nBreadcrumbs\nCopy\nimport { Breadcrumbs } from '@aws-amplify/ui-react';\nimport { MdChevronRight } from 'react-icons/md';\n\nexport default function CustomSeparatorIconExample() {\n  return (\n    <Breadcrumbs\n      items={[\n        {\n          href: '/',\n          label: 'Home',\n        },\n        {\n          href: '/react/components',\n          label: 'Components',\n        },\n        {\n          label: 'Breadcrumbs',\n        },\n      ]}\n      separator={<MdChevronRight />}\n    />\n  );\n}\n\nNo separator\nHome\nComponents\nBreadcrumbs\nCopy\nimport { Breadcrumbs } from '@aws-amplify/ui-react';\n\nexport default function NoSeparatorExample() {\n  return (\n    <Breadcrumbs\n      items={[\n        {\n          href: '/',\n          label: 'Home',\n        },\n        {\n          href: '/react/components',\n          label: 'Components',\n        },\n        {\n          label: 'Breadcrumbs',\n        },\n      ]}\n      separator={null}\n    />\n  );\n}\n\nComposable\n\nThe sub-components of the Breadcrumbs component are exposed so you can compose the Breadcrumbs however you want. With the composable API you can full control over what is rendered and unlock more advanced use-cases.\n\n<Breadcrumbs.Container>\n<Breadcrumbs.Item>\n<Breadcrumbs.Link>\n<Breadcrumbs.Separator>\nBeginning and ending separator\n/\nHome\n/\nComponents\n/\nBreadcrumbs\n/\nCopy\nimport { Breadcrumbs } from '@aws-amplify/ui-react';\n\nexport default function ComposableBreadcrumbsExample() {\n  return (\n    <Breadcrumbs.Container>\n      <Breadcrumbs.Item>\n        <Breadcrumbs.Separator />\n        <Breadcrumbs.Link href=\"/\">Home</Breadcrumbs.Link>\n        <Breadcrumbs.Separator />\n      </Breadcrumbs.Item>\n      <Breadcrumbs.Item>\n        <Breadcrumbs.Link href=\"/react/components\">Components</Breadcrumbs.Link>\n        <Breadcrumbs.Separator />\n      </Breadcrumbs.Item>\n      <Breadcrumbs.Item>\n        <Breadcrumbs.Link href=\"/react/components/breadcrumbs\" isCurrent>\n          Breadcrumbs\n        </Breadcrumbs.Link>\n        <Breadcrumbs.Separator />\n      </Breadcrumbs.Item>\n    </Breadcrumbs.Container>\n  );\n}\n\nNextJS\n\nYou can use Breacrumbs with NextJS's Link component and useRouter to automatically generate the breadcrumbs based on the current path.\n\nHome\n/\nreact\n/\ncomponents\n/\nbreadcrumbs\nCopy\nimport NextLink from 'next/link';\nimport { Breadcrumbs } from '@aws-amplify/ui-react';\nimport { useRouter } from 'next/router';\n\nexport default function NextBreadcrumbsExample() {\n  const { asPath } = useRouter();\n\n  const nestedRoutes = asPath\n    .split('#')[0]\n    .split('?')[0]\n    .split('/')\n    .filter((subpath) => subpath.length > 0);\n\n  const breadcrumbs = [\n    { href: '/', text: 'Home' },\n    ...nestedRoutes.map((subpath, i) => {\n      const href = '/' + nestedRoutes.slice(0, i + 1).join('/');\n\n      const text = subpath;\n      return { href, text };\n    }),\n  ];\n\n  return (\n    <Breadcrumbs.Container>\n      {breadcrumbs.map(({ href, text }, i) => {\n        const isCurrent = i === breadcrumbs.length - 1;\n        return (\n          <Breadcrumbs.Item key={href}>\n            <NextLink href={href} passHref legacyBehavior>\n              <Breadcrumbs.Link isCurrent={isCurrent}>{text}</Breadcrumbs.Link>\n            </NextLink>\n            {isCurrent ? null : <Breadcrumbs.Separator />}\n          </Breadcrumbs.Item>\n        );\n      })}\n    </Breadcrumbs.Container>\n  );\n}\n\nWith dropdown\nHome\n/\nComponents\n/\nbranch\nBreadcrumbs\nBreadcrumbs.Item\nBreadcrumbs.Link\nCopy\nimport { Breadcrumbs, SelectField } from '@aws-amplify/ui-react';\n\nexport default function BreadcrumbsWithDropdownExample() {\n  return (\n    <Breadcrumbs.Container>\n      <Breadcrumbs.Item>\n        <Breadcrumbs.Link href=\"/\">Home</Breadcrumbs.Link>\n        <Breadcrumbs.Separator />\n      </Breadcrumbs.Item>\n      <Breadcrumbs.Item>\n        <Breadcrumbs.Link href=\"/react/components\">Components</Breadcrumbs.Link>\n        <Breadcrumbs.Separator />\n      </Breadcrumbs.Item>\n      <Breadcrumbs.Item>\n        <SelectField\n          label=\"branch\"\n          labelHidden\n          variation=\"quiet\"\n          size=\"small\"\n          options={['Breadcrumbs', 'Breadcrumbs.Item', 'Breadcrumbs.Link']}\n        />\n      </Breadcrumbs.Item>\n    </Breadcrumbs.Container>\n  );\n}\n\nStyling\nTheme\n\nYou can customize the appearance of all Breadcrumbs components in your application with a Theme.\n\nBreadcrumbs Theme Source\n\nHome\n/\nComponents\n/\nBreadcrumbs\nCopy\nimport { Breadcrumbs, ThemeProvider, createTheme } from '@aws-amplify/ui-react';\n\nconst theme = createTheme({\n  name: 'breadcrumbs-theme',\n  tokens: {\n    components: {\n      breadcrumbs: {\n        separator: {\n          color: '{colors.secondary.20}',\n          fontSize: '{fontSizes.xl}',\n          paddingInline: '{space.medium}',\n        },\n        link: {\n          current: {\n            color: '{colors.secondary.80}',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport default function BreadcrumbsThemeExample() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Breadcrumbs\n        items={[\n          {\n            href: '/',\n            label: 'Home',\n          },\n          {\n            href: '/react/components',\n            label: 'Components',\n          },\n          {\n            label: 'Breadcrumbs',\n          },\n        ]}\n      />\n    </ThemeProvider>\n  );\n}\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-breadcrumbs\tTop level element that wraps the Breadcrumbs component\namplify-breadcrumbs__item\tEach breadcrumb\namplify-breadcrumbs__link\tLinks used within breadcrumbs\namplify-breadcrumbs__list\tList element within nav\namplify-breadcrumbs__separator\tSeparator between each breadcrumb\nGlobal styling\n\nTo override styling on all Breadcrumbs components, you can set Amplify CSS variables or use the target classes like .amplify-breadcrumbs class.\n\nCopy\n/* styles.css */\n.amplify-breadcrumbs {\n  background-color: pink;\n}\n\nLocal styling\n\nTo override styling on a specific Breadcrumbs component or sub-component, you can use (in order of increasing specificity): a class selector and style props.\n\nUsing a class selector:\n\nCopy\n<Breadcrumbs className=\"my-breadcrumbs\">\n</Breadcrumbs>\n\n/* styles.css */\n.my-breadcrumbs {\n   background-color: pink;\n}\n\n\nUsing style props:\n\nHome\nComponents\nBreadcrumbs\nCopy\nimport { Breadcrumbs } from '@aws-amplify/ui-react';\n\nconst breadcrumbs = [\n  {\n    href: '/',\n    text: 'Home',\n  },\n  {\n    href: '/react/components',\n    text: 'Components',\n  },\n  {\n    text: 'Breadcrumbs',\n    isCurrent: true,\n  },\n];\n\nexport default function BreadcrumbsStyleExample() {\n  return (\n    <Breadcrumbs.Container\n      backgroundColor=\"background.tertiary\"\n      borderRadius=\"medium\"\n      padding=\"medium\"\n    >\n      {breadcrumbs.map(({ href, text, isCurrent }, idx) => (\n        <Breadcrumbs.Item key={`${href}${idx}`}>\n          <Breadcrumbs.Link\n            fontWeight=\"bold\"\n            textDecoration=\"underline\"\n            href={href}\n            isCurrent={isCurrent}\n          >\n            {text}\n          </Breadcrumbs.Link>\n        </Breadcrumbs.Item>\n      ))}\n    </Breadcrumbs.Container>\n  );\n}\n\nAccessibility\n\nhttps://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/\n\nThe Breadcrumbs component is a nav element to let browsers know it is for navigation, with aria-label=\"Breadcrumbs\" to identify it as breadcrumbs\nThe list of links is rendered in an ordered list, ol\nSeparators have aria-hidden=\"true\" so they are not announced by screen readers\nUse the isCurrent prop for the current element in the navigation which sets aria-current=\"page\" and aria-disabled=\"true\" on the link."
  },
  {
    "title": "Message | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/message",
    "html": "Message\n\nA Message can be used to display feedback to the user.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nA message heading\nBasic message content\nvariation\nfilled (default)\noutlined\nplain\ncolorTheme\nneutral (default)\nerror\nsuccess\nwarning\ninfo\nBody\nHeading\nisDismissible\nhasIcon\nCopy\n<Message\n  variation=\"filled\"\n  colorTheme=\"info\"\n  heading=\"A message heading\">\n  Basic message content\n</Message>\nUsage\nMessage heading\nThis is message content.\nCopy\nimport { Message } from '@aws-amplify/ui-react';\n\nexport const BasicUsage = () => {\n  return <Message heading=\"Message heading\">This is message content.</Message>;\n};\n\nColor themes\n\nMessage accepts the colorTheme prop which allows for different color variations. The available options are neutral (default), error, info, success, and warning. Messages that use a error, info, success, or warning colorTheme will show an icon by default.\n\nAn error message\nAn info message\nA success message\nA warning message\nA neutral message\nCopy\nimport { Message, Flex } from '@aws-amplify/ui-react';\n\nexport const MessageColorThemes = () => {\n  return (\n    <Flex direction=\"column\">\n      <Message colorTheme=\"error\">An error message</Message>\n      <Message colorTheme=\"info\">An info message</Message>\n      <Message colorTheme=\"success\">A success message</Message>\n      <Message colorTheme=\"warning\">A warning message</Message>\n      <Message colorTheme=\"neutral\">A neutral message</Message>\n    </Flex>\n  );\n};\n\nIcon\n\nThe Message icon can be hidden by using the prop hasIcon={false}. See this section on using IconProvider to configure your own icons for Message to use.\n\nA warning message with no icon.\nCopy\nimport { Message, Flex } from '@aws-amplify/ui-react';\n\nexport const HideIcon = () => {\n  return (\n    <Message hasIcon={false} colorTheme=\"warning\">\n      A warning message with no icon.\n    </Message>\n  );\n};\n\nVariations\n\nMessage accepts the variation prop which allows for different background and border options.\n\nFilled (default) message\nOutlined messsage\nPlain message\nCopy\nimport { Message, Flex } from '@aws-amplify/ui-react';\n\nexport const MessageVariations = () => {\n  return (\n    <Flex direction=\"column\">\n      <Message colorTheme=\"info\">Filled (default) message</Message>\n      <Message variation=\"outlined\" colorTheme=\"info\">\n        Outlined messsage\n      </Message>\n      <Message variation=\"plain\" colorTheme=\"info\">\n        Plain message\n      </Message>\n    </Flex>\n  );\n};\n\nDismissable\n\nMessages can be dismissed by setting isDismissible={true}. Additional dismiss behavior can be added by passing a function to the onDismiss prop. By default, we provide accessible button text that is hidden visually with VisuallyHidden; you can override this label by using the dismissLabel prop.\n\nFor more control over the appearance and functionality of the dismiss button, consider using Message as a composable component.\n\nA basic dismissible message\nDismiss this custom message\nCopy\nimport { Message } from '@aws-amplify/ui-react';\n\nexport const BasicWithDismiss = () => {\n  return (\n    <Message\n      isDismissible={true}\n      dismissLabel=\"Dismiss this custom message\"\n      onDismiss={() => {\n        alert('Dismissed message');\n      }}\n    >\n      A basic dismissible message\n    </Message>\n  );\n};\n\nStyling\nTheme\n\nYou can customize the appearance of all Message components in your application with a Theme.\n\nMessage Theme Source\n\nCustom info Message theme\nContent for custom info message.\nCustom error outlined Message theme\nContent for custom error outlined message.\nCopy\nimport {\n  Flex,\n  Message,\n  ThemeProvider,\n  createTheme,\n} from '@aws-amplify/ui-react';\n\nconst theme = createTheme({\n  name: 'message-theme',\n  tokens: {\n    components: {\n      message: {\n        borderRadius: '12px',\n        borderStyle: 'dotted',\n        borderWidth: '2px',\n        outlined: {\n          error: {\n            color: '{colors.pink.100}',\n            backgroundColor: '{colors.pink.10}',\n            borderColor: '{colors.pink.100}',\n          },\n        },\n        filled: {\n          info: {\n            backgroundColor: '{colors.teal.10}',\n            color: '{colors.teal.90}',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const MessageThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Flex direction=\"column\">\n        <Message colorTheme=\"info\" heading=\"Custom info Message theme\">\n          Content for custom info message.\n        </Message>\n        <Message\n          colorTheme=\"error\"\n          variation=\"outlined\"\n          heading=\"Custom error outlined Message theme\"\n        >\n          Content for custom error outlined message.\n        </Message>\n      </Flex>\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-message\tClass applied to the root element of the Message\namplify-message__icon\tClass applied to Icon component within the Message primitive\namplify-message__heading\tClass applied to the heading View\namplify-message__body\tClass applied to the body View\namplify-message__content\tClass applied to the wrappar around heading and children of the Message\namplify-message__dismiss\tClass applied to the close Button\nGlobal styling\n\nTo override styling on all Messages, you can override Amplify CSS variables or use the target classes for Message in your own stylesheet.\n\nMessage heading\nMessage with global styling\nCopy\n/* Override CSS variables */\n[data-amplify-theme] {\n  --amplify-components-message-filled-background-color: var(--amplify-colors-purple-10);\n  --amplify-components-message-heading-font-size: var(--amplify-font-sizes-xl);\n}\n/* Or target class names */\n.amplify-message {\n  background-color: var(--amplify-colors-purple-10);\n}\n.amplify-message__heading {\n  font-size: var(--amplify-font-sizes-xl);\n}\n\nLocal styling\n\nTo override styling on a specific Message or sub-component, you can use (in order of increasing specificity): a class selector and style props.\n\nCopy\n<Message className=\"my-message\"></Message>\n\n/* styles.css */\n.my-message {\n  background-color: #ebffff;\n}\n\nUsing style props\nMessage heading\nMessage styled via style props\nCopy\nimport { Message } from '@aws-amplify/ui-react';\n\nexport const MessageStyleProps = () => {\n  return (\n    <Message\n      alignItems=\"center\"\n      colorTheme=\"info\"\n      color=\"neutral.100\"\n      backgroundColor=\"teal.10\"\n      heading=\"Message heading\"\n    >\n      Message styled via style props\n    </Message>\n  );\n};\n\nIcons\n\nMessage icons can be customized using IconProvider.\n\nInfo message with custom icon\nDismiss message\nSuccess message with custom icon\nError message with custom icon\nWarning message with custom icon\nCopy\nimport { Message, Flex, IconsProvider } from '@aws-amplify/ui-react';\nimport {\n  FcMediumPriority,\n  FcHighPriority,\n  FcInfo,\n  FcOk,\n  FcMinus,\n} from 'react-icons/fc';\n\nexport const IconProviderExample = () => (\n  <IconsProvider\n    icons={{\n      message: {\n        info: <FcInfo />,\n        success: <FcOk />,\n        error: <FcHighPriority />,\n        warning: <FcMediumPriority />,\n        close: <FcMinus />,\n      },\n    }}\n  >\n    <Flex direction=\"column\">\n      <Message colorTheme=\"info\" isDismissible>\n        Info message with custom icon\n      </Message>\n      <Message colorTheme=\"success\">Success message with custom icon</Message>\n      <Message colorTheme=\"error\">Error message with custom icon</Message>\n      <Message colorTheme=\"warning\">Warning message with custom icon</Message>\n    </Flex>\n  </IconsProvider>\n);\n\nAccessibility\n\nMessage does not have an ARIA role configured by default. Depending on your own use case, you can pass a role attribute or add your own ARIA attributes where needed.\n\nAs an alert\n\nYou can pass a role, such as alert, to the wrapper element of Message.\n\nToggle Alert\nCopy\nimport { Flex, Button, Message } from '@aws-amplify/ui-react';\nimport { useState } from 'react';\n\nexport const MessageAsAlert = () => {\n  const [alertActive, setAlertActive] = useState(false);\n  return (\n    <Flex direction=\"column\">\n      <Button onClick={() => setAlertActive(!alertActive)}>Toggle Alert</Button>\n      {alertActive ? (\n        <Message role=\"alert\" heading=\"Alert\" colorTheme=\"error\">\n          This is the alert content.\n        </Message>\n      ) : null}\n    </Flex>\n  );\n};\n"
  },
  {
    "title": "Placeholder | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/placeholder",
    "html": "Placeholder\n\nPlaceholder can be used to fill out an interface while the content is loading.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nsize\ndefault\nsmall\nlarge\nisLoaded\nCopy\n<Placeholder />\nUsage\n\nImport the Placeholder component.\n\nCopy\nimport { Placeholder } from '@aws-amplify/ui-react';\n\nexport const DefaultPlaceholderExample = () => {\n  return <Placeholder />;\n};\n\nisLoaded\n\nUse isLoaded prop to indicate whether or not the content is loaded.\n\nCopy\nimport { Placeholder } from '@aws-amplify/ui-react';\n\nexport const PlaceholderIsLoadedExample = () => {\n  return <Placeholder isLoaded={true} />;\n};\n\nSizes\n\nUse the size prop to change the Placeholder size. Available options are small, large, and none (default).\n\nCopy\nimport { Flex, Placeholder } from '@aws-amplify/ui-react';\n\nexport const PlaceholderSizeExample = () => {\n  return (\n    <Flex direction=\"column\">\n      <Placeholder size=\"small\" />\n      <Placeholder />\n      <Placeholder size=\"large\" />\n    </Flex>\n  );\n};\n\nCustomization\nTheme\n\nYou can customize the appearance of all Placeholder components in your application with a Theme.\n\nPlaceholder Theme Source\n\nCopy\nimport { Placeholder, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'placeholder-theme',\n  tokens: {\n    components: {\n      placeholder: {\n        transitionDuration: { value: '1250ms' },\n        startColor: { value: '{colors.blue.40}' },\n        endColor: { value: '{colors.blue.80}' },\n        borderRadius: { value: '{radii.large}' },\n        large: {\n          height: { value: '{space.xxxl}' },\n        },\n      },\n    },\n  },\n};\n\nexport const PlaceholderThemeExample = () => {\n  return (\n    <ThemeProvider theme={theme} colorMode=\"light\">\n      <Placeholder size=\"large\" />\n    </ThemeProvider>\n  );\n};\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-placeholder\tTop level element that wraps the Placeholder primitive\nGlobal styling\n\nTo override styling on all Placeholder components, you can set the Amplify CSS variables or use the built-in .amplify-placeholder class.\n\nCopy\n/* styles.css */\n[data-amplify-theme] {\n  --amplify-components-placeholder-height: var(--amplify-space-xl);\n  --amplify-components-placeholder-border-radius: var(--amplify-space-medium);\n}\n/* OR */\n.amplify-placeholder {\n  height: var(--amplify-space-xl);\n  border-radius: var(--amplify-space-medium);\n}\n\nCopy\n<Placeholder />\n\nLocal styling\n\nTo override styling on a specific Placeholder, you can use a class selector or style props.\n\nUsing a class selector:\n\nSet the starting and ending colors for the Placeholder animation using a custom CSS class with the Amplify CSS variables:\n\nCopy\n/* styles.css */\n.placeholder-local-styles {\n  --amplify-components-placeholder-start-color: var(--amplify-colors-purple-80);\n  --amplify-components-placeholder-end-color: var(--amplify-colors-blue-80);\n}\n\nCopy\nimport './styles.css';\n\n<Placeholder className=\"placeholder-local-styles\" />\n\n\nUsing style props:\n\nCopy\nimport { Placeholder } from '@aws-amplify/ui-react';\n\nexport const PlaceholderStylePropsExample = () => {\n  return <Placeholder height=\"123px\" width=\"50%\" />;\n};\n"
  },
  {
    "title": "Loader | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/loader",
    "html": "Loader\n\nLoader provides a visual cue to the user that the system is processing, awaiting a result or working to fulfill a request.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nsize\ndefault\nsmall\nlarge\nvariation\ndefault\nlinear\nemptyColor\nfilledColor\nisDeterminate\nCopy\n<Loader \n/>\nUsage\n\nImport the Loader component and styles.\n\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\n\nexport const DefaultLoaderExample = () => {\n  return <Loader />;\n};\n\nSizes\n\nUse the size prop to change the Loader size. Available options are small, large, and none (default).\n\nCopy\nimport { Flex, Loader } from '@aws-amplify/ui-react';\n\nexport const LoaderSizesExample = () => {\n  return (\n    <Flex alignItems=\"center\">\n      <Loader size=\"small\" />\n      <Loader />\n      <Loader size=\"large\" />\n    </Flex>\n  );\n};\n\nVariation\n\nLoader comes in 2 variants, linear and none(default). Pass the variation prop and set it to either of these values.\n\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\n\nexport const LoaderVariationExample = () => {\n  return (\n    <>\n      <Loader />\n      <Loader variation=\"linear\" />\n    </>\n  );\n};\n\nColors\n\nPass filledColor and emptyColor props to color your own Loader.\n\nCopy\nimport { Loader, useTheme } from '@aws-amplify/ui-react';\n\nexport const LoaderColorExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <Loader\n        emptyColor={tokens.colors.black}\n        filledColor={tokens.colors.orange[40]}\n      />\n      <Loader\n        variation=\"linear\"\n        emptyColor={tokens.colors.black}\n        filledColor={tokens.colors.orange[40]}\n      />\n    </>\n  );\n};\n\nDeterminate\n\nMost often loaders are indeterminate (looped) but may be determinate (percentage-based) when the system can calculate the size of the request — for example, when downloading a large file. To use a determinate loader, set isDeterminate to true and pass percentage.\n\n0%\n0%\nCopy\nimport * as React from 'react';\nimport { Loader } from '@aws-amplify/ui-react';\n\nexport const DeterminateLoaderExample = () => {\n  const [percentage, setPercentage] = React.useState(0);\n  React.useEffect(() => {\n    const clearID = setInterval(() => {\n      setPercentage((percentage) => {\n        if (percentage < 100) {\n          return percentage + 1;\n        }\n        return 0;\n      });\n    }, 1000);\n    return () => clearInterval(clearID);\n  }, []);\n  return (\n    <>\n      <Loader percentage={percentage} isDeterminate />\n      <Loader variation=\"linear\" percentage={percentage} isDeterminate />\n    </>\n  );\n};\n\n\nTo hide the percentage text, set isPercentageTextHidden to true.\n\n60%\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\n\nexport const LoaderIsPercentageTextHiddenExample = () => {\n  return <Loader percentage={60} isDeterminate isPercentageTextHidden />;\n};\n\nAccessibility\n\nThe Loader is a SVG image with role set to img on the outer <svg> element. This will tell screen readers to just consider it as a single entity and describe it using the label, rather than trying to read out all the child nodes. You can give it a label by passing ariaLabel prop.\n\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\n\nexport const LoaderAccessibilityExample = () => {\n  return <Loader ariaLabel=\"Loading...\" />;\n};\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all Loader components in your application with a Theme.\n\nLoader Theme Source\n\nCopy\nimport { Loader, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'loader-theme',\n  tokens: {\n    components: {\n      loader: {\n        strokeEmpty: { value: '{colors.neutral.20}' },\n        strokeFilled: { value: '{colors.green.80}' },\n\n        // sizes\n        large: {\n          width: { value: '{fontSizes.xxxl}' },\n          height: { value: '{fontSizes.xxxl}' },\n        },\n\n        // linear loader\n        linear: {\n          width: { value: '50%' },\n          strokeWidth: { value: '{fontSizes.xxs}' },\n          strokeFilled: { value: '{colors.secondary.80}' },\n          strokeEmpty: { value: '{colors.neutral.20}' },\n          animationDuration: { value: '2s' },\n        },\n      },\n    },\n  },\n};\n\nexport const LoaderThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex direction=\"column\">\n      <Loader size=\"large\" />\n      <Loader variation=\"linear\" />\n    </Flex>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-loader\tTop level element that wraps the Loader primitive\namplify-loader__label\tClass applied to the track of loader\nGlobal styling\n\nTo override styling on all Loaders, you can set the Amplify CSS variables with the built-in .amplify-loader class.\n\nCopy\n/* styles.css */\n.amplify-loader {\n  --amplify-components-loader-stroke-filled-color: var(--amplify-colors-red-80);\n}\n\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\nimport './styles.css';\n\n<Loader />;\n\nLocal styling\n\nTo override styling on a specific Loader, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nCopy\n/* styles.css */\n.my-loader {\n  width: 5rem;\n  height: 5rem;\n}\n\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\nimport './styles.css';\n\n<Loader className=\"my-loader\" />;\n\n\nUsing data attributes:\n\nCopy\n/* styles.css */\n.amplify-loader[data-size='large'] {\n  width: 5rem;\n  height: 5rem;\n}\n\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\nimport './styles.css';\n\n<Loader variation=\"large\" />;\n\n\nUsing style props:\n\nCopy\nimport { Loader } from '@aws-amplify/ui-react';\n\n<Loader width=\"5rem\" height=\"5rem\" />\n"
  },
  {
    "title": "Alert | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/alert",
    "html": "Alert\n\nAlert displays a brief message in a way that attracts the user’s attention without interrupting their task.\n\nARIA pattern\nTheme source\nReact source\nFeedback\nDocumentation\nProps\n\nUsage note: The Alert component has an ARIA alert role by default which has some accessibility implications.\n\nDemo\nAlert heading\nThis is the alert message\nVariation\ndefault\ninfo\nerror\nwarning\nsuccess\nHeading\nBody\nisDismissable\nhasIcon\nCopy\n<Alert\n  isDismissible={false}\n  hasIcon={true}\n  heading=\"Alert heading\"\n  >\n  This is the alert message\n</Alert>\nUsage\n\nImport the Alert component and styles.\n\nDefault Alert\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const DefaultAlertExample = () => {\n  return <Alert>Default Alert</Alert>;\n};\n\nVariations\n\nUse the variation prop to change the Alert variation. Available options are info, error, warning, success, and none (default).\n\nInfo\nError\nWarning\nSuccess\nDefault\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const AlertVariationsExample = () => {\n  return (\n    <>\n      <Alert variation=\"info\">Info</Alert>\n      <Alert variation=\"error\">Error</Alert>\n      <Alert variation=\"warning\">Warning</Alert>\n      <Alert variation=\"success\">Success</Alert>\n      <Alert>Default</Alert>\n    </>\n  );\n};\n\nHeading\n\nUse the heading prop to pass a heading to the Alert.\n\nThis Alert does not have a heading\nThis is the heading\nCool heading!\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const AlertHeadingExample = () => {\n  return (\n    <>\n      <Alert variation=\"warning\">This Alert does not have a heading</Alert>\n      <Alert variation=\"success\" heading=\"This is the heading\">\n        Cool heading!\n      </Alert>\n    </>\n  );\n};\n\nIcon\n\nUse the hasIcon prop to change whether the Alert includes an icon. Defaults to true (includes icon).\n\nThis Alert shows an icon by default\nThis Alert does not have an icon\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const AlertIconExample = () => {\n  return (\n    <>\n      <Alert variation=\"info\">This Alert shows an icon by default</Alert>\n      <Alert variation=\"error\" hasIcon={false}>\n        This Alert does not have an icon\n      </Alert>\n    </>\n  );\n};\n\nDismissible\n\nUse the isDismissible prop to control whether the user can dismiss the Alert. Defaults to false (not dismissible).\n\nThis Alert is not dismissible by default\nClick the X to dismiss this Alert\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const DismissibleAlertExample = () => {\n  return (\n    <>\n      <Alert>This Alert is not dismissible by default</Alert>\n      <Alert isDismissible={true}>Click the X to dismiss this Alert</Alert>\n    </>\n  );\n};\n\nonDismiss\n\nUse the onDismiss prop to pass a function that will run when the Alert is dismissed. Note that isDismissible must be set to true.\n\nRun a function on dismiss (click the X)\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const OnDismissAlertExample = () => {\n  return (\n    <Alert\n      onDismiss={() => alert('Alert dismissed, user metric recorded')}\n      isDismissible={true}\n    >\n      Run a function on dismiss (click the X)\n    </Alert>\n  );\n};\n\nStyling\nTheme\n\nYou can customize the appearance of all Alert components in your application with a Theme.\n\nAlert Theme Source\n\nDefault alert title\nHello\nInfo\nHere is some info\nSuccess\nHooray!\nCopy\nimport { Alert, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'alert-theme',\n  tokens: {\n    components: {\n      alert: {\n        // Default styles\n        backgroundColor: { value: '{colors.teal.20}' },\n\n        icon: {\n          size: { value: '{fontSizes.xxxl}' },\n        },\n\n        heading: {\n          fontSize: { value: '{fontSizes.large}' },\n          fontWeight: { value: '{fontWeights.normal}' },\n        },\n\n        // Variations\n        info: {\n          color: { value: 'white' },\n          backgroundColor: { value: '{colors.blue.80}' },\n        },\n\n        success: {\n          color: { value: 'black' },\n          backgroundColor: { value: '{colors.yellow.40}' },\n        },\n      },\n    },\n  },\n};\n\nexport const AlertThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex direction=\"column\">\n      <Alert heading=\"Default alert title\">Hello</Alert>\n      <Alert variation=\"info\" heading=\"Info\">\n        Here is some info\n      </Alert>\n      <Alert variation=\"success\" heading=\"Success\">\n        Hooray!\n      </Alert>\n    </Flex>\n  </ThemeProvider>\n);\n\nIcons\nInfo\nHere is some info\nSuccess\nHooray!\nWarning\nError\nCopy\nimport { Alert, Flex, IconsProvider } from '@aws-amplify/ui-react';\nimport {\n  FcMediumPriority,\n  FcHighPriority,\n  FcInfo,\n  FcOk,\n  FcMinus,\n} from 'react-icons/fc';\n\nexport const AlertIconProviderExample = () => (\n  <IconsProvider\n    icons={{\n      alert: {\n        info: <FcInfo />,\n        success: <FcOk />,\n        error: <FcHighPriority />,\n        warning: <FcMediumPriority />,\n        close: <FcMinus />,\n      },\n    }}\n  >\n    <Flex direction=\"column\">\n      <Alert variation=\"info\" heading=\"Info\">\n        Here is some info\n      </Alert>\n      <Alert variation=\"success\" heading=\"Success\" isDismissible>\n        Hooray!\n      </Alert>\n      <Alert variation=\"warning\" heading=\"Warning\" />\n      <Alert variation=\"error\" heading=\"Error\" />\n    </Flex>\n  </IconsProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-alert\tTop level element that wraps the Alert primitive\namplify-alert__icon\tClass applied to Icon component within the Alert primitive\namplify-alert__heading\tClass applied to the heading View\namplify-alert__body\tClass applied to the body View\namplify-alert__dismiss\tClass applied to the close Button\nGlobal styling\n\nTo override styling on all Alerts, you can set the Amplify CSS variables or use the built-in .amplify-alert class.\n\nChange the default Alert to yellow\nCopy\n/* styles.css */\n:root {\n  --amplify-components-alert-background-color: yellow;\n}\n/* OR */\n.amplify-alert {\n  background-color: yellow;\n}\n\n\nTo replace the Alert styling, unset it:\n\nCopy\n.amplify-alert {\n  all: unset;\n  /* Add your styling here*/\n}\n\nLocal styling\n\nTo override styling on a specific Alert, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nAttention\n\nThis is a purple Alert\n\nCopy\n/* styles.css */\n.purple-alert {\n  color: white;\n  background-color: rebeccapurple;\n}\n\nCopy\nimport './styles.css';\n\n<Alert className=\"purple-alert\" heading=\"Attention\">\n  This is a purple Alert\n</Alert>;\n\n\nUsing data attributes:\n\nSystem Error\n\nRed Alert!\n\nDefault Alert styling unaffected\nCopy\n/* styles.css */\n/* Override only error variation styles */\n.amplify-alert[data-variation='error'] {\n  color: white;\n  background-color: crimson;\n}\n\nCopy\nimport './styles.css';\n\n<Alert variation=\"error\" heading=\"System Error\">Red Alert!</Alert>\n<Alert>Default Alert styling unaffected</Alert>\n\n\nUsing style props:\n\nPassing props directly\nCopy\nimport { Alert, useTheme } from '@aws-amplify/ui-react';\n\nexport const AlertStylePropsExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <Alert\n      backgroundColor={tokens.colors.primary[10]}\n      color={tokens.colors.font.primary}\n      fontWeight=\"bold\"\n      border={`${tokens.borderWidths.large} solid ${tokens.colors.primary[80]}`}\n      borderRadius=\"10px\"\n    >\n      Passing props directly\n    </Alert>\n  );\n};\n\nAccessibility\n\nThe Alert component in Amplify UI has the alert role by default. The alert role is an assertive live region which means any changes to the content of the Alert or adding the Alert dynamically to the DOM will cause the Alert to be announced by a screen reader. This can be disruptive to screen reader users, so it is best used sparingly and only when the Alert content requires the user's immediate attention.\n\nPlease see the ARIA Authoring Practices Guide for the alert role for more information and use cases.\n\nDynamic Alert\n\nThe following code shows an example of dynamically displaying an Alert. A screenreader will announce the content of the Alert when it is visible.\n\nToggle Alert\nCopy\nimport { Flex, Button, Alert } from '@aws-amplify/ui-react';\nimport { useState } from 'react';\n\nexport const AccessibleAlert = () => {\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\n\n  return (\n    <Flex direction=\"column\">\n      <Button onClick={() => setIsAlertVisible(!isAlertVisible)}>\n        Toggle Alert\n      </Button>\n      {isAlertVisible ? (\n        <Alert variation=\"error\">This is an example alert.</Alert>\n      ) : null}\n    </Flex>\n  );\n};\n\nRole override\n\nIf you're displaying information that isn't critical or time sensitive, and only want the visual style of the Alert component without the accessibility side effects, you can override the role attribute like in the following example:\n\nThis alert will not be announced to screen readers if dyamically added to the DOM.\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const RoleOverride = () => {\n  return (\n    <Alert role=\"none\" variation=\"info\">\n      This alert will not be announced to screen readers if dyamically added to\n      the DOM.\n    </Alert>\n  );\n};\n\nCustom aria label\n\nYou can configure a custom aria-label for the dismiss button using the dismissButtonLabel prop (defaults to 'Dismiss alert').\n\nConfigure a custom aria label for the dismiss button\nCopy\nimport { Alert } from '@aws-amplify/ui-react';\n\nexport const DismissButtonLabelExample = () => {\n  return (\n    <Alert dismissButtonLabel=\"Custom dismiss button label\" isDismissible>\n      Configure a custom aria label for the dismiss button\n    </Alert>\n  );\n};\n"
  },
  {
    "title": "View | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/view",
    "html": "View\n\nView is the foundational component for Amplify UI primitives. While View renders a <div> by default, it can render any HTML element and supports styling via props.\n\nReact source\nFeedback\nDocumentation\nProps\nDemo\nI'm a <div>! 🤩\nAs element type\ndiv\nbutton\np\nspan\nAria Label\nBackground Color\nBorder\nBorder Radius\nBox Shadow\nColor\nHeight\nMax Width\nPadding\nWidth\nCopy\n<View\n  as=\"div\"\n  ariaLabel=\"View example\"\n  backgroundColor=\"var(--amplify-colors-white)\"\n  borderRadius=\"6px\"\n  border=\"1px solid var(--amplify-colors-black)\"\n  boxShadow=\"3px 3px 5px 6px var(--amplify-colors-neutral-60)\"\n  color=\"var(--amplify-colors-blue-60)\"\n  height=\"4rem\"\n  maxWidth=\"100%\"\n  padding=\"1rem\"\n  width=\"20rem\"\n  onClick={() => alert('🏔 What a beautiful <View>! 🔭')}\n  >\n  {\"I'm a <div>! 🤩\"}\n</View>\nUsage\n\nImport the View component.\n\nNice view! 🏔\nCopy\nimport { View } from '@aws-amplify/ui-react';\n\nexport const DefaultViewExample = () => {\n  return <View>Nice view! 🏔</View>;\n};\n\nSet rendered HTML element\n\nTo change the HTML element rendered by the View, use the as prop. View renders a <div> by default.\n\nI am a section\nCopy\nimport { View } from '@aws-amplify/ui-react';\n\nexport const SetRenderedHTML = () => {\n  return <View as=\"section\">I am a section</View>;\n};\n\nDisabled state\n\nTo mark a View as disabled, pass the isDisabled prop.\n\nYou cannot click me!\nCopy\nimport { View } from '@aws-amplify/ui-react';\n\nexport const DisabledStateExample = () => {\n  return (\n    <View\n      as=\"button\"\n      isDisabled={true}\n      onClick={() => alert(\"This won't fire 🚫\")}\n    >\n      You cannot click me!\n    </View>\n  );\n};\n\nAccessibility\n\nThe example below demonstrates setting an aria-label attribute and role for an icon button.\n\nCopy\nimport { View } from '@aws-amplify/ui-react';\nimport { MdAccessibility } from 'react-icons/md';\n\nexport const AccessibilityExample = () => {\n  return (\n    <View\n      ariaLabel=\"So accessible!\"\n      role=\"button\"\n      onClick={() => alert('Hooray for accessbility!')}\n    >\n      <MdAccessibility />\n    </View>\n  );\n};\n\nStandard HTML attributes\n\nView will accept any of the standard HTML attributes that its underlying HTML element accepts.\n\nCopy\nimport { View } from '@aws-amplify/ui-react';\n\nexport const CustomAttributesExample = () => {\n  return <View as=\"progress\" data-progress-bar max=\"100\" value=\"75\" />;\n};\n\nCSS Styling\nLocal styling\n\nTo override styling on a specific View, you can use a class selector or style props.\n\nUsing a class selector:\n\n/* styles.css */\n.mountain-view {\n  background-color: #b7daf9;\n  display: block;\n  font-size: 5em;\n  text-align: center;\n}\n\nimport { View } from '@aws-amplify/ui-react';\nimport './styles.css';\n\nexport const ClassNameExample = () => {\n  return <View className=\"mountain-view\">🏔</View>;\n};\n\n🏔\n\nUsing style props:\n\n🌲🌲🌲 🏕 🌲🌲🌲\nCopy\nimport { View, useTheme } from '@aws-amplify/ui-react';\n\nexport const StylePropsExample = () => {\n  const { tokens } = useTheme();\n\n  return (\n    <View\n      backgroundColor={tokens.colors.green[20]}\n      borderRadius={tokens.radii.large}\n      fontSize={tokens.fontSizes.xxxxl}\n      textAlign=\"center\"\n    >\n      🌲🌲🌲 🏕 🌲🌲🌲\n    </View>\n  );\n};\n"
  },
  {
    "title": "Text | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/text",
    "html": "Text\n\nText is used to display text in an interface, and renders a <p> element by default.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\n\nHello World!\n\nDisplayed Text\nvariation\nprimary\nsecondary\ntertiary\nerror\nwarning\ninfo\nsuccess\nas\np\nspan\nstrong\nem\ncolor\nisTruncated\nlineHeight\nfontSize\nfontStyle\ntextDecoration\nfontWeight\n400\nCopy\n\n\n<Text\n    variation=\"primary\"\n    as=\"p\"\n    lineHeight=\"1.5em\"\n    fontWeight={400}\n    fontSize=\"1em\"\n    fontStyle=\"normal\"\n    textDecoration=\"none\"\n    width=\"30vw\"\n  >\n    Hello World!\n</Text>\nUsage\n\nImport the Text primitive.\n\nHello world\n\nCopy\nimport { Text } from '@aws-amplify/ui-react';\n\nexport const DefaultTextExample = () => <Text>Hello world</Text>;\n\nVariations\n\nUse the variation prop to change the Text variation. Available options are primary, secondary, tertiary, error, warning, info, and success.\n\nPrimary\n\nSecondary\n\nTertiary\n\nError\n\nWarning\n\nInfo\n\nSuccess\n\nDefault\n\nCopy\nimport { Text } from '@aws-amplify/ui-react';\n\nexport const TextVariationExample = () => (\n  <>\n    <Text variation=\"primary\">Primary</Text>\n    <Text variation=\"secondary\">Secondary</Text>\n    <Text variation=\"tertiary\">Tertiary</Text>\n    <Text variation=\"error\">Error</Text>\n    <Text variation=\"warning\">Warning</Text>\n    <Text variation=\"info\">Info</Text>\n    <Text variation=\"success\">Success</Text>\n    <Text>Default</Text>\n  </>\n);\n\nTruncate\n\nThe isTruncated prop will render an ellipsis when the text exceeds the defined width.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nCopy\nimport { Text } from '@aws-amplify/ui-react';\n\nexport const TextTruncatedExample = () => (\n  <Text isTruncated={true}>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </Text>\n);\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all Text components in your application with a Theme.\n\nText Theme Source\n\nDefault\n\nPrimary\n\nWarning\n\nCopy\nimport { Text, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'text-theme',\n  tokens: {\n    components: {\n      text: {\n        color: { value: '{colors.green.80}' },\n        primary: {\n          color: { value: '{colors.teal.80}' },\n        },\n        warning: {\n          color: { value: '{colors.pink.80}' },\n        },\n      },\n    },\n  },\n};\n\nexport const TextThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex>\n      <Text>Default</Text>\n      <Text variation=\"primary\">Primary</Text>\n      <Text variation=\"warning\">Warning</Text>\n    </Flex>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-text\tTop level element that wraps the Text primitive\nGlobal styling\n\nTo override styling on all Text, you can set the Amplify CSS variables or use the built-in .amplify-text class.\n\n(Revise this example)\n\nThis is my styled text\n\nCopy\n/* styles.css */\n.amplify-text {\n  --amplify-components-text-color-primary: var(--amplify-colors-red-80);\n}\n\nimport { Text } from '@aws-amplify/ui-react';\n\nexport const GlobalStylingExample = () => (\n  <Text className=\"primary-styled-variable-text\" variation=\"primary\">\n    This is my styled text\n  </Text>\n);\n\nLocal styling\n\nTo override styling on a specific Text, you can use a class selector or style props.\n\nUsing a class selector:\n\nThis is my styled text\n\nCopy\n/* styles.css */\n.styled-text {\nfont-weight: var(--amplify-font-weights-bold);\ncolor: var(--amplify-colors-red-80);\ntext-decoration: underline;\n}\n\nimport './styles.css';\n\n<Text className=\"styled-text\">This is my styled text</Text>;\n\n\nUsing style props:\n\nThis is my styled text\nCopy\nimport { Text, useTheme } from '@aws-amplify/ui-react';\n\nexport const LocalStylingExample = () => {\n  const theme = useTheme();\n  return (\n    <Text\n      fontWeight={theme.tokens.fontWeights.bold}\n      color={theme.tokens.colors.red[80]}\n      textDecoration=\"underline\"\n      as=\"span\"\n    >\n      This is my styled text\n    </Text>\n  );\n};\n"
  },
  {
    "title": "ScrollView | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/scrollview",
    "html": "ScrollView\n\nScrollView allows content to be scrollable.\n\nReact source\nFeedback\nDocumentation\nProps\nDemo\nCopy\n\n\n<ScrollView width=\"100%\" height=\"300px\" maxWidth=\"580px\">\n  <Image\n    width=\"800px\"\n    maxWidth=\"800px\"\n    src=\"/amplify-logo.svg\"\n    alt=\"Amplify-logo\"\n  />\n</ScrollView>\nUsage\n\nImport the ScrollView component.\n\nCopy\nimport { Image, ScrollView } from '@aws-amplify/ui-react';\n\nexport const DefaultScrollViewExample = () => {\n  return (\n    <ScrollView height=\"300px\" width=\"400px\" maxWidth=\"100%\">\n      <Image\n        width=\"800px\"\n        maxWidth=\"800px\"\n        src=\"/amplify-logo.svg\"\n        alt=\"Amplify-logo\"\n      />\n    </ScrollView>\n  );\n};\n\nHorizontal overflow\n\nFor horizontal scrollbars, set the width of the ScrollView smaller than the width of the content.\n\nThe value of Pi is 3.1415926535897932384626433832795029. The value of e is 2.7182818284590452353602874713526625.\nCopy\nimport { ScrollView } from '@aws-amplify/ui-react';\n\nexport const ScrollViewHorizontalExample = () => {\n  return (\n    <ScrollView width=\"200px\" className=\"horizontal-example\">\n      The value of Pi is 3.1415926535897932384626433832795029. The value of e is\n      2.7182818284590452353602874713526625.\n    </ScrollView>\n  );\n};\n\nVertical overflow\n\nFor vertical scrollbars, set the height of the ScrollView smaller than the height of the content.\n\nMichaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.\nCopy\nimport { ScrollView } from '@aws-amplify/ui-react';\n\nexport const ScrollViewVerticalExample = () => {\n  return (\n    <ScrollView height=\"100px\" width=\"200px\">\n      {`Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's\n      Inn Hall. Implacable November weather. As much mud in the streets as if\n      the waters had but newly retired from the face of the earth.`}\n    </ScrollView>\n  );\n};\n\nAccessibility\n\nIf your scrollable content does not have any focusable elements, there are additional HTML attributes you can add to your ScrollView to make it more friendly to keyboard users.\n\nTo create accessible, scrollable regions, you can add a tabIndex to the ScrollView to make it keyboard navigable. Additionally, you can add an accessible label to the ScrollView to give extra context about the scrollable content to screen reader users. In the following example, we've used an aria-label.\n\nRead more about keyboard friendly, scrollable regions from W3.org\n\nThis scrollview is keyboard focusable and has an accessible label.\nCopy\nimport { ScrollView, Card } from '@aws-amplify/ui-react';\n\nexport const AccessibleScrollViewExample = () => {\n  return (\n    <ScrollView\n      width=\"400px\"\n      maxWidth=\"100%\"\n      tabIndex={0}\n      aria-label=\"Accessible Scrollview\"\n    >\n      <Card width=\"600px\" backgroundColor=\"neutral.10\">\n        This scrollview is keyboard focusable and has an accessible label.\n      </Card>\n    </ScrollView>\n  );\n};\n\nCSS Styling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-scrollview\tTop level element that wraps the ScrollView primitive\nLocal styling\n\nTo override styling on a specific View, you can use a class selector or style props.\n\nUsing a class selector:\n\nMichaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.\nCopy\n/* styles.css */\n.my-scrollview {\n  height: 100px;\n  width: 200px;\n  padding: var(--amplify-space-medium);\n  background-color: var(--amplify-colors-blue-10);\n}\n\nCopy\nimport { ScrollView } from '@aws-amplify/ui-react';\n\nimport './styles.css';\n\n<ScrollView className=\"my-scrollview\">\n  {\n    \"Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.\"\n  }\n</ScrollView>\n\n\nUsing style props:\n\nMichaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.\nCopy\nimport { ScrollView } from '@aws-amplify/ui-react';\n\nexport const ScrollViewStylePropsExample = () => {\n  return (\n    <ScrollView\n      height=\"100px\"\n      width=\"200px\"\n      padding=\"medium\"\n      backgroundColor=\"blue.10\"\n    >\n      {\n        \"Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.\"\n      }\n    </ScrollView>\n  );\n};\n"
  },
  {
    "title": "Image | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/image",
    "html": "Image\n\nImage is used to display responsive images.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nalt\nsrc\nobjectFit\ninitial\ncover\nnone\nobjectPosition\nbackgroundColor\nheight\nwidth\nopacity\nCopy\n<Image\n  alt=\"Amplify logo\"\n  src=\"/amplify-logo.svg\"\n  objectFit=\"initial\"\n  objectPosition=\"50% 50%\"\n  backgroundColor=\"initial\"\n  height=\"75%\"\n  width=\"75%\"\n  opacity=\"100%\"\n  onClick={() => alert('📸 Say cheese!')}\n/>\nUsage\n\nImport the Image component. Images are responsive by default (if you're on desktop, try resizing your browser window).\n\nCopy\nimport { Image } from '@aws-amplify/ui-react';\n\nexport const DefaultImageExample = () => {\n  return (\n    <Image\n      src=\"/road-to-milford-new-zealand-800w.jpg\"\n      alt=\"View from road to Milford Sound, New Zealand.\n  Glittering stream with old log, snowy mountain peaks\n  tower over a green field.\"\n    />\n  );\n};\n\nResponsive Image optimization\n\nUse sizes and srcSet to dynamically load different Image sizes based on screen size/resolution. For more information, see MDN responsive images article.\n\nCopy\nimport { Image } from '@aws-amplify/ui-react';\n\nexport const ImageOptimizationExample = () => {\n  return (\n    <Image\n      src=\"/road-to-milford-new-zealand-800w.jpg\"\n      srcSet=\"/road-to-milford-new-zealand-800w.jpg 800w,\n          /road-to-milford-new-zealand-1200w.jpg 1200w,\n          /road-to-milford-new-zealand-1400w.jpg 1400w\"\n      alt=\"View from road to Milford Sound, New Zealand.\n      Glittering stream with old log, snowy mountain peaks\n      tower over a green field.\"\n    />\n  );\n};\n\nObject fit and object position\n\nTo control how an Image fits its container, use the objectFit and objectPosition properties.\n\nCopy\nimport { Image } from '@aws-amplify/ui-react';\n\nexport const ImageObjectFitAndPositionExample = () => {\n  return (\n    <Image\n      width=\"100%\"\n      height=\"100%\"\n      objectFit=\"cover\"\n      objectPosition=\"50% 50%\"\n      src=\"/road-to-milford-new-zealand-800w.jpg\"\n      alt=\"Glittering stream with old log, snowy mountain peaks\n    tower over a green field.\"\n    />\n  );\n};\n\nCSS Styling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-image\tTop level element that wraps the Image primitive"
  },
  {
    "title": "Icon | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/icon",
    "html": "Icon\n\nIcon is used to display Scalable Vector Graphics (SVG).\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\npathData\nwidth\nheight\ncolor\nariaLabel\nviewBox\nviewBox\nviewBox width\nviewBox height\nCopy\n<Icon\n  pathData=\"M142.938822,125.786164 L133.905089,125.786164 L130.703259,122.698685 C142.296993,109.25125 148.66898,92.0834126 148.656375,74.3281875 C148.656375,33.2778631 115.378512,0 74.3281875,0 C33.2778631,0 0,33.2778631 0,74.3281875 C0,115.378512 33.2778631,148.656375 74.3281875,148.656375 C92.7387078,148.656375 109.662664,141.909663 122.698685,130.703259 L125.786164,133.905089 L125.786164,142.938822 L182.961692,200 L200,182.961692 L142.938822,125.786164 Z M73.5042735,124.786325 C45.1282051,124.786325 22.2222222,101.880342 22.2222222,73.5042735 C22.2222222,45.1282051 45.1282051,22.2222222 73.5042735,22.2222222 C101.880342,22.2222222 124.786325,45.1282051 124.786325,73.5042735 C124.786325,101.880342 101.880342,124.786325 73.5042735,124.786325 Z\"\n  viewBox={{\n    width: 200,\n    height: 200,\n  }}\n  ariaLabel=\"Search\"\n/>\nNote\n\nIcons should be thought of as plain text; they inherit the size and color of their context or can be set directly. Icons themselves do not have any state or handlers, those should be at a higher level like a button. Amplify UI does not include any icons other than the ones Amplify UI components like Alert and Accordion use.\n\nUsage\n\nImport the Icon component and styles.\n\nCopy\nimport { Icon } from '@aws-amplify/ui-react';\n\n// This is a favorite icon\nexport const DefaultIconExample = () => (\n  <Icon\n    ariaLabel=\"Favorite\"\n    viewBox={{ width: 24, height: 24 }}\n    pathData=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0\n    3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n  />\n);\n\nBuilt-in iconset\nDeprecated\n\nThe built-in icons were removed in version 3.0. You can use the react-icons package or other React icon libraries in its place.\n\n// Removed\nimport {ICON_NAME} from '@aws-amplify/ui-react';\n\n// Suggested\nimport {ICON_NAME} from 'react-icons/md';`\n\n\nTo customize the default icons used in components like Alert and Rating, you can use the IconProvider.\n\nCustom icon\nUsing path data\n\nTo create a custom icon using a path data, provide the d attribute in svg to pathData prop.\n\nCopy\nimport { Icon } from '@aws-amplify/ui-react';\n\nexport const CustomIconExample = () => {\n  return (\n    // This is a thumbs up icon\n    <Icon\n      ariaLabel=\"Thumbs up\"\n      pathData=\"M9 21h9c.83 0 1.54-.5\n1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17\n1 7.58 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2zM9 9l4.34-4.34L12 10h9v2l-3 7H9V9zM1 9h4v12H1z\"\n    />\n  );\n};\n\n\nYou can use the viewBox prop to change the SVG viewBox. Both width and height default to 24.\n\nCopy\nimport { Icon } from '@aws-amplify/ui-react';\n\nexport const ViewboxExample = () => (\n  <Icon\n    ariaLabel=\"Camera\"\n    viewBox={{ width: 30, height: 30 }}\n    pathData=\"M10 8v8l5-4-5-4zm9-5H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z\"\n  />\n);\n\nUsing SVG\n\nYou can also pass SVG elements as children to the Icon component if you have more than 1 path or want to provide other SVG attributes like stroke\n\nCopy\nimport { Icon } from '@aws-amplify/ui-react';\n\nexport const CustomIconWithSvgExample = () => {\n  return (\n    // This is an align bottom icon\n    <Icon ariaLabel=\"Align bottom\">\n      <path d=\"M13 10H17V16H13V10Z\" fill=\"currentColor\" opacity=\"0.5\" />\n      <path d=\"M11 4H7V16H11V4Z\" fill=\"currentColor\" />\n      <path d=\"M18 18H6V20H18V18Z\" fill=\"currentColor\" />\n    </Icon>\n  );\n};\n\n\nYou can also optionally use a paths array of path-like objects that will be mapped to <path> elements.\n\nCopy\nimport { Icon } from '@aws-amplify/ui-react';\n\nexport const CustomIconWithPathsExample = () => {\n  return (\n    <Icon\n      ariaLabel=\"tag\"\n      viewBox={{ width: 23, height: 15 }}\n      paths={[\n        {\n          d: 'M1 0.5C0.723858 0.5 0.5 0.723858 0.5 1V14C0.5 14.2761 0.723858 14.5 1 14.5H14C14.1148 14.5 14.2262 14.4605 14.3153 14.3881L22.3153 7.88806C22.4322 7.79311 22.5 7.65056 22.5 7.5C22.5 7.34944 22.4322 7.20689 22.3153 7.11194L14.3153 0.611943C14.2262 0.539529 14.1148 0.5 14 0.5H1Z',\n          strokeLinejoin: 'bevel',\n          strokeLinecap: 'round',\n          strokeDasharray: '4 4',\n          fill: 'transparent',\n          stroke: 'currentColor',\n        },\n      ]}\n    />\n  );\n};\n\nUsing a library\n\nTo use an icon library like React Icons, import the desired icon and pass it to the as prop.\n\nCopy\nimport { Icon } from '@aws-amplify/ui-react';\nimport { DiJsBadge } from 'react-icons/di';\n\nexport const CustomIconWithLibExample = () => {\n  return <Icon ariaLabel=\"Javascript\" as={DiJsBadge} />;\n};\n\n\nHere are some good open source icon libraries:\n\nReact icons\nHero icons\nStyling\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-icon\tTop level element that wraps the Icon primitive\nSizes\n\nIcon size matches the font-size of the container. Adjust the font-size to set a specific height.\n\nInherited size from button sizes\n\nSave\nSave\nSave\nSave\nCopy\nimport { Button, Icon, Text } from '@aws-amplify/ui-react';\n\nconst SaveIcon = () => (\n  <Icon\n    ariaLabel=\"\"\n    pathData=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n  />\n);\n\nexport const IconSizesExample = () => {\n  return (\n    <>\n      {/* Inherited from button sizes */}\n      <Button gap=\"0.1rem\" size=\"small\">\n        <SaveIcon /> {'Save'}\n      </Button>\n      <Button gap=\"0.2rem\">\n        <SaveIcon /> {'Save'}\n      </Button>\n      <Button gap=\"0.2rem\" size=\"large\">\n        <SaveIcon /> {'Save'}\n      </Button>\n      <Text as=\"span\" fontSize=\"50px\">\n        <SaveIcon />\n        Save\n      </Text>\n    </>\n  );\n};\n\nColor\n\nUse the color prop to change the Icon color. The fill of the path inside the SVG is set to currentColor(inherits color from current font color).\n\nCopy\nimport { Icon, useTheme } from '@aws-amplify/ui-react';\n\nexport const IconColorExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <>\n      <Icon\n        ariaLabel=\"Flag\"\n        pathData=\"M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z\"\n        color={tokens.colors.pink[80]}\n      />\n      <Icon\n        ariaLabel=\"Flag\"\n        pathData=\"M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z\"\n        color=\"rebeccapurple\"\n      />\n    </>\n  );\n};\n\nAccessibility\n\nThe Icon component does not require a label by default because there are a number of ways to use an Icon in an accessible way:\n\nYou can set an aria-label attribute on the Icon\nYou can use a <title></title> element when passing SVG elements as the child of the Icon\nYou can use the Icon decoratively, when a label would be redundant.\n\nAnnouncement\n\nCopy\nimport { Icon, Flex, Text } from '@aws-amplify/ui-react';\nimport { MdAnnouncement } from 'react-icons/md';\n\nexport const AccessibilityIconExample = () => (\n  <Flex direction=\"column\" alignItems=\"flex-start\">\n    {/* Icon labeled via aria-label */}\n    <Icon\n      ariaLabel=\"Close\"\n      pathData=\"M6.2253 4.81108C5.83477 4.42056 5.20161 4.42056 4.81108 4.81108C4.42056 5.20161 4.42056 5.83477 4.81108 6.2253L10.5858 12L4.81114 17.7747C4.42062 18.1652 4.42062 18.7984 4.81114 19.1889C5.20167 19.5794 5.83483 19.5794 6.22535 19.1889L12 13.4142L17.7747 19.1889C18.1652 19.5794 18.7984 19.5794 19.1889 19.1889C19.5794 18.7984 19.5794 18.1652 19.1889 17.7747L13.4142 12L19.189 6.2253C19.5795 5.83477 19.5795 5.20161 19.189 4.81108C18.7985 4.42056 18.1653 4.42056 17.7748 4.81108L12 10.5858L6.2253 4.81108Z\"\n    />\n\n    {/* Icon labeled via SVG <title></title> element */}\n    <Icon>\n      <title>Document</title>\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z\"></path>\n    </Icon>\n\n    {/* \n      Decorative Icon, hidden from the accessibility tree \n      because it is accompanied by descriptive text. \n    */}\n    <Flex gap=\"xxxs\" alignItems=\"center\">\n      <Icon as={MdAnnouncement} aria-hidden=\"true\" /> <Text>Announcement</Text>\n    </Flex>\n  </Flex>\n);\n"
  },
  {
    "title": "Heading | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/heading",
    "html": "Heading\n\nHeading renders semantic section heading text representing six levels.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\nHeading text\nDisplayed Text\nlevel\n1\n2\n3\n4\n5\n6\nisTruncated\nCopy\n<Heading\n  width='30vw'\n  level={6} \n>\n   Heading text\n</Heading>\nUsage\n\nImport the Heading primitive.\n\nHello world\nCopy\nimport * as React from 'react';\nimport { Heading } from '@aws-amplify/ui-react';\n\nexport const DefaultHeadingExample = () => {\n  return <Heading>Hello world</Heading>;\n};\n\nHeading levels\n\nUse the level prop to change the heading level (e.g., h1 - h6). Default heading level is 6 and available options are 1, 2, 3, 4, 5 and 6.\n\nHeading 1\nHeading 2\nHeading 3\nHeading 4\nHeading 5\nHeading 6\nDefault (level 6)\nCopy\nimport * as React from 'react';\nimport { Heading } from '@aws-amplify/ui-react';\n\nexport const HeadingLevelExample = () => {\n  return (\n    <>\n      <Heading level={1}>Heading 1</Heading>\n      <Heading level={2}>Heading 2</Heading>\n      <Heading level={3}>Heading 3</Heading>\n      <Heading level={4}>Heading 4</Heading>\n      <Heading level={5}>Heading 5</Heading>\n      <Heading level={6}>Heading 6</Heading>\n      <Heading>Default (level 6)</Heading>\n    </>\n  );\n};\n\nTruncate\n\nThe isTruncated prop will render an ellipsis when the Heading text exceeds its allowed width.\n\nHello world Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nCopy\nimport { Heading } from '@aws-amplify/ui-react';\n\nexport const TruncatedHeading = () => {\n  return (\n    <Heading isTruncated={true} level={3}>\n      Hello world Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\n      do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n      ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate\n      velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n      cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n      est laborum.\n    </Heading>\n  );\n};\n\nCSS Styling\nTheme\n\nYou can customize the appearance of all Heading components in your application with a Theme.\n\nHeading Theme Source\n\nTitle\nDefault\nCopy\nimport { Heading, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'heading-theme',\n  tokens: {\n    components: {\n      heading: {\n        color: { value: '{colors.blue.80}' },\n\n        1: {\n          fontSize: { value: '{fontSizes.xxl}' },\n          fontWeight: { value: '{fontWeights.bold}' },\n        },\n        6: {\n          fontSize: { value: '{fontSizes.large}' },\n          fontWeight: { value: '{fontWeights.normal}' },\n        },\n      },\n    },\n  },\n};\n\nexport const HeadingThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex direction=\"column\">\n      <Heading level={1}>Title</Heading>\n      <Heading>Default</Heading>\n    </Flex>\n  </ThemeProvider>\n);\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-heading\tTop level element that wraps the Heading primitive\nGlobal styling\n\nTo override styling on all Headings, you can set the Amplify CSS variables or use the built-in .amplify-heading class.\n\nHello world\nCopy\n/* styles.css */\n:root {\n  --amplify-components-heading-color: gray;\n}\n/* OR */\n.amplify-heading {\n  color: gray;\n}\n\n\nOverride styles for any Heading component h1 - h6 using the .amplify-heading--[LEVEL] classes.\n\nSmall and italic\n\nBig and bold\n\nCopy\n/* styles.css */\n.amplify-heading--1 {\n  font-size: 1rem;\n  font-style: italic;\n}\n\n.amplify-heading--6 {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\nCopy\nimport './styles.css';\n\n<Heading level={1}>Small and italic</Heading>\n<Heading>Big and bold</Heading>\n\nLocal styling\n\nTo override styling on a specific Heading, you can use a class selector or style props.\n\nUsing a class selector:\n\nHello world\n\nCopy\n/* styles.css */\n.heading-blue {\n  color: var(--amplify-colors-blue-80);\n}\n\nCopy\nimport './styles.css';\n\n<Heading className=\"heading-blue\" level={3}>\n  Hello world\n</Heading>;\n\n\nUsing style props:\n\nHello world\nCopy\n<Heading level={3} color=\"green\" fontWeight=\"bold\">\n  Hello world\n</Heading>\n"
  },
  {
    "title": "Divider | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components/divider",
    "html": "Divider\n\nDivider helps organize content, separate sections and establish visual rhythm.\n\nTheme source\nReact source\nFeedback\nDocumentation\nProps\nDemo\n\nBefore\n\nAfter\n\nSize\ndefault\nsmall\nlarge\nOrientation\nhorizontal\nvertical\nlabel\nCopy\n<Flex direction=\"column\">\n  <Text>Before</Text>\n  <Divider\n    orientation=\"horizontal\" />\n  <Text>After</Text>\n</Flex>\nUsage\n\nImport the Divider component and place it between components you want separated. Most of the time you will want to use the divider in a <Flex> component.\n\nBefore\n\nAfter\n\nCopy\nimport { Flex, Text, Divider } from '@aws-amplify/ui-react';\n\nexport const DefaultDividerExample = () => (\n  <Flex direction=\"column\">\n    <Text>Before</Text>\n    <Divider />\n    <Text>After</Text>\n  </Flex>\n);\n\nOrientation\n\nHorizontal (default)\n\nBefore\n\nAfter\n\nCopy\nimport { Flex, Text, Divider } from '@aws-amplify/ui-react';\n\nexport const HorizontalDividerExample = () => (\n  <Flex direction=\"column\">\n    <Text>Before</Text>\n    <Divider orientation=\"horizontal\" />\n    <Text>After</Text>\n  </Flex>\n);\n\n\nVertical\n\nBefore\n\nAfter\n\nCopy\nimport { Flex, Text, Divider } from '@aws-amplify/ui-react';\n\nexport const VerticalDividerExample = () => (\n  <Flex direction=\"row\" justifyContent=\"space-around\">\n    <Text>Before</Text>\n    <Divider orientation=\"vertical\" />\n    <Text>After</Text>\n  </Flex>\n);\n\nSizes\n\nAvailable options are small, large, and none (default).\n\nCopy\nimport { Flex, Divider } from '@aws-amplify/ui-react';\n\nexport const DividerSizesExample = () => (\n  <Flex direction=\"column\">\n    <Divider size=\"small\" />\n    <Divider />\n    <Divider size=\"large\" />\n  </Flex>\n);\n\nLabel\n\nBefore\n\nAfter\n\nCopy\nimport { Flex, Text, Divider } from '@aws-amplify/ui-react';\n\nexport const LabelExample = () => (\n  <Flex direction=\"column\">\n    <Text>Before</Text>\n    <Divider label=\"OR\" />\n    <Text>After</Text>\n  </Flex>\n);\n\nCustomization\nTheme\n\nYou can customize the appearance of all Divider components in your application with a Theme.\n\nDivider Theme Source\n\nCopy\nimport { Divider, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';\n\nconst theme: Theme = {\n  name: 'divider-theme',\n  tokens: {\n    components: {\n      divider: {\n        borderStyle: { value: 'dotted' },\n        borderColor: { value: '{colors.blue.80}' },\n        borderWidth: { value: '{borderWidths.small}' },\n\n        label: {\n          color: { value: '{colors.white}' },\n          backgroundColor: { value: '{colors.blue.80}' },\n        },\n\n        large: {\n          borderWidth: { value: '{borderWidths.large}' },\n        },\n      },\n    },\n  },\n};\n\nexport const DividerThemeExample = () => (\n  <ThemeProvider theme={theme} colorMode=\"light\">\n    <Flex direction=\"column\" gap=\"3rem\">\n      <Divider label=\"Default\" />\n      <Divider size=\"large\" label=\"Large\" />\n    </Flex>\n  </ThemeProvider>\n);\n\nCSS\n\nYou can set the Amplify CSS variables or use the built-in .amplify-divider class to customize all Dividers in your application as well.\n\nCopy\n/* styles.css */\n[data-amplify-theme] {\n  --amplify-components-divider-border-style: dashed;\n}\n/* OR */\n.amplify-divider {\n  border-style: dashed;\n}\n\n\nTo replace all the Divider styling, unset it:\n\n.amplify-divider {\n  all: unset;\n  /* Add your styling here*/\n}\n\nTarget classes\nTarget Classes\nCSS Variables\nClass\tDescription\namplify-divider\tTop level element that wraps the Divider primitive\namplify-divider--label\tClass applied to the label of the Divider component\nLocal styling\n\nTo override styling on a specific Divider, you can use (in order of increasing specificity): a class selector, data attributes, or style props.\n\nUsing a class selector:\n\nCopy\nimport { Flex, Divider } from '@aws-amplify/ui-react';\n\nconst css = `.custom-divider {\n  border-style: dashed;\n}`;\n\nexport const DividerClassNameExample = () => (\n  <Flex direction=\"column\">\n    <style>{css}</style>\n    <Divider className=\"custom-divider\" />\n  </Flex>\n);\n\n\nUsing style props:\n\nCopy\nimport { Flex, Divider, useTheme } from '@aws-amplify/ui-react';\n\nexport const DividerStylePropsExample = () => {\n  const { tokens } = useTheme();\n  return (\n    <Flex direction=\"column\">\n      <Divider\n        border={`${tokens.borderWidths.large} solid ${tokens.colors.primary[80]}`}\n      />\n      <Divider border=\"5px solid pink\" borderRadius=\"10px\" />\n    </Flex>\n  );\n};\n\nDefault theme\nimport { DesignTokenProperties, OutputVariantKey } from '../types/designToken';\n\ntype DividerSizeTokens<Output> = DesignTokenProperties<'borderWidth', Output>;\n\nexport type DividerTokens<Output extends OutputVariantKey> =\n  DesignTokenProperties<\n    'borderStyle' | 'borderColor' | 'borderWidth' | 'opacity',\n    Output\n  > & {\n    label?: DesignTokenProperties<\n      'color' | 'paddingInline' | 'fontSize' | 'backgroundColor',\n      Output\n    >;\n    small?: DividerSizeTokens<Output>;\n    large?: DividerSizeTokens<Output>;\n  };\n\nexport const divider: Required<DividerTokens<'default'>> = {\n  borderStyle: { value: 'solid' },\n  borderColor: { value: '{colors.border.primary.value}' },\n  borderWidth: { value: '{borderWidths.medium.value}' },\n\n  label: {\n    color: { value: '{colors.font.tertiary.value}' },\n    paddingInline: { value: '{space.medium.value}' },\n    fontSize: { value: '{fontSizes.small.value}' },\n    backgroundColor: { value: '{colors.background.primary.value}' },\n  },\n\n  small: {\n    borderWidth: { value: '{borderWidths.small.value}' },\n  },\n\n  large: {\n    borderWidth: { value: '{borderWidths.large.value}' },\n  },\n\n  opacity: {\n    value: '{opacities.60.value}',\n  },\n};\n"
  },
  {
    "title": "Components | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/components",
    "html": "Components\nFeedback\nBase components\nDivider\nA Divider creates separations in content. Dividers can help organize content and establish visual rhythm.\nHeading\nThis is a separate primitive from Text for semantic purposes. The Heading primitive maps to an <h*> tag, and Text maps to a <p> tag.\nIcon\nThe icon component displays simple vector graphics for use in other components like Buttons.\nImage\nThe Image primitive can be used to display responsive images.\nScrollView\nScrollView is essentially a View that allows scrolling of its inner contents.\nText\nThe Text primitive is used to display simple strings of text in an interface.\nView\nView is the foundational component for Amplify UI primitives. While View renders a <div> by default, it can render any HTML element and supports styling via props.\nFeedback components\nAlert\nAn Alert displays a brief, important message in a way that attracts the user's attention without interrupting the user's task. Alerts are typically intended to be read out dynamically by a screen reader.\nLoader\nLoaders provide a visual cue that an action is either processing or awaiting a result. They are used to help the customer understand the system is working to fulfill a request.\nMessage\nA Message can be used to display feedback to the user.\nPlaceholder\nThe Placeholder component is used to fill out the interface while content is loaded asynchronously.\nNavigation components\nBreadcrumbs\nThe breadcrumbs component is a navigation list used to visualize the information architecture of a website and the user's current place in the hierarchy.\nLink\nLinks are customizable and themeable elements used for Navigation. By default Links render an anchor tag but can be configured to be used with routing libraries.\nMenu\nMenu provides an accessible, interactive menu for selecting actions within an application. Dropdown menu is collision-aware and will automatically change location based on available space.\nTabs\nTabs organize content into multiple sections and allow users to navigate between them.\nInput components\nAutocomplete\nAutocomplete is a SearchField enhanced by a list of suggested options.\nButton\nThe Button primitive is used to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation.\nCheckbox Field\nCheckboxField is used to mark an individual item as selected, or to select multiple items from a list of individual items.\nDropZone\nThe Dropzone component captures files from user with drag and drop\nFieldset\nFieldsets are used to group related form fields.\nInput\nInput primitive allows creating interactive form controls\nLabel\nLabel primitive enables captioning a user interface item\nPassword Field\nPasswordField allows users to input passwords, featuring full password manager support and an optional show/hide password button for user convenience - Amplify UI\nPhone Number Field\nThe PhoneNumberField form primitive allows users to input a phone number\nRadio Group Field\nA RadioGroupField allows users to select a single option from a list of mutually exclusive options.\nSearch Field\nSearchField accepts query text for search.\nSelect Field\nThe SelectField primitive allows you to create a drop-down list.\nSlider Field\nSliders allow users to quickly select a value within a range. They should be used when the upper and lower bounds to the range are invariable.\nStepper Field\nA StepperField is a number input with buttons to increase or decrease the value.\nSwitch Field\nThe SwitchField form primitive is a toggleable input type with a checked (on) and unchecked (off) state.\nText Field\nThe TextField form primitive allows users to input text content.\nTextArea Field\nThe TextAreaField form primitive can be used allow users to input multiline text content.\nToggle Button\nA toggle button represents an on/off state for some configuration, for example switching on/off bold text in a text editor.\nLayout components\nAccordion\nThe Accordion primitive enables users to expand or collapse a set of sections.\nCard\nThe Card component can be used to group related pieces of content.\nCollection\nA Collection wraps Flex and Grid components, and provides a way to display items in a collection from a data source.\nFlex\nA layout container using Flexbox.\nGrid\nA layout container using CSS Grid\nPagination\nPagination provides navigation to allow customers to move between large sets of content that are distributed across multiple pages.\nTable\nThe Table primitive provides users with a styled and customizable table element.\nData display components\nBadge\nA Badge is a small visual element to denote a status or message about an item. A small, color-coded visual element that contains letters or numbers, that you can use to label, categorize, or organize items.\nRating\nThe Rating component displays a read-only star rating of a product or service.\nUtility components\nHighlight Match\nHighlightMatch is used to highlight a substring of a text.\nVisually Hidden\nThe Visually Hidden component is used to visually hide content while leaving it available to screen readers."
  },
  {
    "title": "Troubleshooting | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/troubleshooting",
    "html": "Troubleshooting\n\nWorkarounds for common issues using Amplify UI.\n\nFeedback\nAstro\nUncaught ReferenceError: global is not defined\n\nNote: this issue was fixed in aws-amplify version 6\n\nWhen working with a Astro project you must make a few modifications. Please follow the steps below.\n\nTypeScript\nJavaScript\n\n1. Add the following script to the bottom of the index.astro file. This will only run on the client side and will polyfill Node globals.\n\n<script>\n  window.global = window;\n  window.process = {\n    env: { DEBUG: undefined },\n  } as unknown as NodeJS.Process;\n  var exports = {};\n</script>\n\n\n2. Update the astro.config.mjs to add a resolve object inside the defineConfig({}) as seen below.\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n      alias: [\n      {\n        find: './runtimeConfig',\n        replacement: './runtimeConfig.browser',\n      },\n    ]\n  }\n})\n\nCreate React App\nCRA 4: Uncaught ReferenceError: g is not defined\n\nWhen using Geo components and Create React App v4, users may experience the following error when rendering the <MapView> component in a production build:\n\nUncaught ReferenceError: g is not defined\n\n\nThe error is related to this maplibre-gl issue and surfaces due to the dropped support for Internet Explorer in maplibre-gl v2. To correct this error, you'll need to adjust your browser target for production to exclude Internet Explorer:\n\n1. In your package.json file of your Create React App, adjust the browserslist.production block from:\n\n\"browserslist\": {\n  \"production\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not op_mini all\"\n  ],\n  ...\n}\n\n\nto the following:\n\n\"browserslist\": {\n  \"production\": [\n    \"defaults\",\n    \"not ie 11\"\n  ],\n  ...\n}\n\n\n2. Rebuild your production application using npx run build.\n\n3. Run your production build using a tool like serve (serve -s build) and verify the <MapView> component renders without error.\n\nCRA 4: Can’t import the named export ‘Amplify’ from non EcmaScript module (only default export is available)\n\nCreate React App v4 is not officially supported by Amplify UI. When you use it, you may get the following error\n\n ./node_modules/@aws-amplify/ui-react/dist/esm/components/..\\/\\*.mjs\n\n Can’t import the named export ‘Amplify’ from non EcmaScript module (only default export is available)\n\n\nTo resolve the error, you may either (1) upgrade to Create React App version 5 (Migration Guide), or (2) override the webpack config using tools like React App Rewired, Craco to add the following rule:\n\n{\n  module: {\n    rules: [\n      {\n        test: /\\.mjs$/,\n        include: /node_modules/,\n        type: 'javascript/auto'\n      }\n    ]\n  }\n}\n\nJest\nwindow.URL.createObjectURL is not a function\n\nAs of v2.15.0 of @aws-amplify/ui-react which included the release of Geo components, users of the Jest testing framework may run into the following error when attempting to run tests:\n\nwindow.URL.createObjectURL is not a function\n\n\nPlease follow the steps below to resolve this issue.\n\n1. Navigate to or create a Jest setup file for your project.\n\n2. Add the following code to polyfill the unrecognized function in your Jest setup file:\n\nif (typeof window.URL.createObjectURL === 'undefined') {\n  window.URL.createObjectURL = jest.fn();\n}\n\n\nThis is a known problem when using the jsdom library (a dependency of Jest) with a package that uses an unrecognized function. See this issue.\n\nNext.js\nNext 13.4+: React Server Components\n\nNext.js 13.4+ introduces app directory with the usage of Server Components. To use Amplify UI componenents, you must use them inside the Client Component tree by placing \"use client\" at the boundary between your Client and Server component module graph. Please see the Next.js documentation on how you could achieve this.\n\nNext 13.4+: Module not found Errors\n\nWhen you use Amplify with Next.js App Router, you will see the follow errors from aws-crt and encoding in the server terminal:\n\n./node_modules/node-fetch/lib/index.js\nModule not found: Can't resolve 'encoding' in 'xxx'\n\n./node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js\nModule not found: Can't resolve 'aws-crt' in 'xxx'\n\n\nThese errors will not affect the use and functionality of the client, nor will errors appear in the browser console. This is a known transitive issue when using the AWS SDK. The issue is currently tracked here.\n\nWebpack\nWebpack 5+: Uncaught ReferenceError: process is not defined\n\nNote: this issue has been fixed in aws-amplify version 6. The polyfill is only required for projects that use aws-amplify version 5 (or earlier) with Webpack version 5 (or later).\n\nFollow the instructions below if you are using Webpack 5:\n\nAdd node-polyfill-webpack-plugin as dev dependency:\nnpm\nyarn\nnpm install node-polyfill-webpack-plugin -D\nCopy\nAdd the plugin to your webpack.config.js plugins list:_\n  plugins: [\n    new NodePolyfillPlugin(), // Polyfill Node.js globals (e.g. global, process, etc)\n  ],\n\nWebpack 4: Can’t import the named export ‘Amplify’ from non EcmaScript module (only default export is available)\n\nFollow here for solutions.\n\nVite\nUncaught ReferenceError: global is not defined\n\nNote: this issue was fixed in aws-amplify version 6\n\nWhen working with a Vite project you must make a few modifications. Please follow the steps below.\n\nTypeScript\nJavaScript\n\n1. Add the following script tag to the index.html file right before the </body> tag. This will only run on the client side and will polyfill Node globals.\n\n  <script>\n    window.global = window;\n    window.process = {\n      env: { DEBUG: undefined },\n    }\n    var exports = {};\n  </script>\n</body>\n\n\n2. Update the vite.config.ts (or vite.config.js) and add a resolve alias inside the defineConfig({}) as seen below.\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n      alias: [\n      {\n        find: './runtimeConfig',\n        replacement: './runtimeConfig.browser', // ensures browser compatible version of AWS JS SDK is used\n      },\n    ]\n  }\n})\n\n\n3. (Optional) If you run into TypeScript errors importing aws-exports.js, you may need to update the tsconfig.json file with the following config and add a type declaration file:\n\n  \"compilerOptions\": {\n    \"allowJs\": true,\n  }\n\n\naws-exports.d.ts file:\n\ndeclare const awsmobile: Record<string, any>\nexport default awsmobile;\n\n\nIf you are still having issues, please see comments on the following issue for additional Vite workarounds. Note that there is active ongoing work to make these modifications unnecessary."
  },
  {
    "title": "Migration | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/migration",
    "html": "Migration\nFeedback\n\nMigration guides for Liveness, In-App Messaging and Storage packages can be found towards the bottom of this page.\n\n@aws-amplify/ui-react\nMigrate from 5.x to 6.x\nInstallation\n\nInstall the 6.x version of both @aws-amplify/ui-react and aws-amplify.\n\nThe 6.x version of @aws-amplify/ui-react has a minimum dependency of 6.x on aws-amplify. aws-amplify@6 introduced breaking API changes.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react@6.x aws-amplify@6.x\nCopy\nUpdate and usage\n\n@aws-amplify/ui-react@6.x introduces the following breaking changes:\n\n1. Updates to the Authenticator\n\nThe initialState property now accepts forgotPassword in place of resetPassword:\n\n- <Authenticator initialState=\"resetPassword\" />\n+ <Authenticator initialState=\"forgotPassword\" />\n\n\nThe corresponding key of the components prop has been updated to reflect the change as well:\n\n- <Authenticator components={{ ResetPassword: MyResetPassword }} />\n+ <Authenticator components={{ ForgotPassword: MyForgotPassword }} />\n\n\nThe user object provided after an end user has been authenticated has been updated to reflect the AuthUser interface available from aws-amplify/auth:\n\n- interface AmplifyUser {\n-   challengeName?: ChallengeName;\n-   attributes?: CognitoAttributes;\n-   username: string;  \n- }\n+ interface AuthUser  {\n+   username: string;\n+   userId: string;\n+   signInDetails?: CognitoAuthSignInDetails;\n+ }\n\n\nAuthUser can be imported from aws-amplify/auth:\n\nimport { AuthUser } from 'aws-amplify/auth';\n\n\nUser attributes are now available by directly calling fetchUserAttribues:\n\nimport { fetchUserAttributes } from 'aws-amplify/auth';\n\nconst userAttributes = await fetchUserAttributes();\n\n\nThe function signatures of the services interface have been updated to align with the shape of the underlying aws-amplify/auth APIs used by the Authenticator and provide improved typescript support:\n\ninterface AuthenticatorProps {\n  services?: {\n-    getCurrentUser?: () => Promise<any>,\n+    getCurrentUser?: () => Promise<AuthUser>,\n\n-    handleSignIn?: ({ username, password, }: { username: string;password: string; }) => Promise<any>,\n+    handleSignIn?: (input: SignInInput) => Promise<SignInOutput>,\n\n-    handleSignUp?: (formData: any) => Promise<ISignUpResult>,\n+    handleSignUp?: (input: SignUpInput) => Promise<SignUpOutput>,\n\n-    handleConfirmSignIn?: ({ user, code, mfaType, }: { user: any; code: string; mfaType: ChallengeName; }) =>Promise<any>),\n+    handleConfirmSignIn?: (input: ConfirmSignInInput) => Promise<ConfirmSignInOutput>,\n\n-    handleConfirmSignUp?: ({ username, code, }: { username: string; code: string; }) => Promise<any>,\n+    handleConfirmSignUp?: (input: ConfirmSignUpInput) => Promise<ConfirmSignUpOutput>,\n\n-    handleForgotPasswordSubmit?: ({ username, code, password, }: { username: string; code: string; password:string; }) => Promise<string>),\n+    handleForgotPasswordSubmit?: (input: ConfirmResetPasswordInput) => Promise<void>,\n\n-    handleForgotPassword?: (formData: any) => Promise<any>,\n+    handleForgotPassword?: (input: ResetPasswordInput) => Promise<ResetPasswordOutput>,\n  }\n}\n\n\nThe input and return type interfaces are available as imports from aws-amplify/auth:\n\nimport { ConfirmSignInInput } from 'aws-amplify';\n\n2. Expander is now Accordion\n\nThe Expander component has been replaced by the Accordion component in Amplify UI v6. The Accordion is fully composable and uses HTML elements <summary> and <details>.\n\n<Expander type=\"single\">\n  <ExpanderItem title=\"Is it accessible?\" value=\"demo-item-1\">\n    Yes! It adheres to the WAI-ARIA design pattern.\n  </ExpanderItem>\n  <ExpanderItem title=\"Can I customize the styling?\" value=\"demo-item-2\">\n    Of course! See the section on CSS Styling below.\n  </ExpanderItem>\n  <ExpanderItem\n    title=\"Is it a great way to organize content?\"\n    value=\"demo-item-3\"\n  >\n    Most definitely!\n  </ExpanderItem>\n</Expander>\n\n// Becomes \n\n<Accordion\n  items={[\n    {\n      trigger: 'Is it accessible?',\n      value: 'accessible',\n      content: 'Yes! It uses HTML native elements: <details> and <summary>.'\n    },\n    {\n      trigger: 'Can I customize the styling?',\n      value: 'styling',\n      content: 'Of course! See the section on CSS Styling below.'\n    },\n    {\n      trigger: 'Is it a great way to organize content?',\n      value: 'content',\n      content: 'Most definitely!'\n    }\n  ]}\n/>\n\n\nThe Accordion is also fully composable now too:\n\n<Accordion.Container>\n  <Accordion.Item value=\"Accordion-item\">\n    <Accordion.Trigger>\n      What is an Accordion?\n      <Accordion.Icon />\n    </Accordion.Trigger>\n    <Accordion.Content>\n      An Accordion contains all the parts of a collapsible section.\n    </Accordion.Content>\n  </Accordion.Item>\n  <Accordion.Item value=\"unique-value\">\n    <Accordion.Trigger>\n      This is the item title\n      <Accordion.Icon />\n    </Accordion.Trigger>\n    <Accordion.Content>\n      The `children` of the Accordion are displayed here.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion.Container>\n\n\nBehavior\n\nHere are some differences in behavior between the Expander and Accordion components:\n\nThe Accordion allows only 1 item expanded by default, while the Expander allowed multiple items expanded by default. To allow multiple open with Accordion, you need to add the allowMultiple prop.\nThe Accordion cannot be fully collapsed by default, while the Expander could be collapsed. To make the Accordion always have 1 item open, use the preventCollapse prop.\n\nStyling\n\nThe class names have changed between Expander and Accordion. Here is a mapping:\n\namplify-expander -> amplify-accordion\namplify-expander__item -> amplify-accordion__item\namplify-expander__content -> amplify-accordion__content\namplify-expander__header -> amplify-accordion__trigger\namplify-expander__icon -> amplify-accordion__icon\n\nThe --amplify-components-accordion- CSS variables can also be used to style Accordion.\n\n3. Tabs refactor\n\nThe Tabs component is now fully composable and more light-weight after removing the Radix dependency.\n\n- import { Tabs, TabItem } from '@aws-amplify/ui-react'\n+ import { Tabs } from '@aws-amplify/ui-react'\n\n- <Tabs>\n-  <TabItem title=\"Tab 1\">\n-    Tab 1 Content\n-  </TabItem>\n\n+ <Tabs.Container defaultValue=\"Tab 1\">\n+  <Tabs.List>\n+    <Tabs.Item value=\"Tab 1\">Tab 1</Tabs.Item>\n+  </Tabs.List>\n+  <Tabs.Panel value=\"Tab 1\">\n+    Tab 1 Content\n+  </Tabs.Panel>\n\n\nYou can also use the Tabs in a uncomposed way too:\n\n  <Tabs\n    defaultValue={'Tab 1'}\n    items={[\n      { label: 'Tab 1', value: 'Tab 1', content: 'Tab content #1' },\n      { label: 'Tab 2', value: 'Tab 2', content: 'Tab content #2' },\n      { label: 'Tab 3', value: 'Tab 3', content: 'Tab content #3' },\n    ]}\n  />\n\n\nSome notable differences:\n\nInstead of providing a defaultIndex or currentIndex you provide a defaultValue or value. Each Tabs.Item and Tabs.Panel should have a value that matches with the corresponding element.\nonChange becomes onValueChange\nYou should supply a defaultValue or value or else there will be no default selected tab. Previously the Tabs component would default to the first tab.\n\nThere are also more design tokens and better CSS classes for easier customization.\n\n4. Removal of extraneous data attributes and updating classNames\n\n#4452\n\nIf you were using [data-] attributes in CSS to target styling components you will need to change these selectors to classes.\n\nClassName updates:\n\namplify-loader__percentage-text -> amplify-loader__label\namplify-menu-content-wrapper -> amplify-menu__wrapper\namplify-menu-trigger -> amplify-menu__trigger\namplify-menu-content -> amplify-menu__content\namplify-menu-content__item -> amplify-menu__content__item\namplify-pagination__item-button -> amplify-pagination__item\namplify-pagination__item-current -> amplify-pagination__item--current\namplify-pagination__item-ellipsis -> amplify-pagination__item--ellipsis\namplify-rating-icon-container -> amplify-rating__item\namplify-rating-icon -> amplify-rating__icon\namplify-rating-icon-filled -> amplify-rating__icon--filled\namplify-rating-icon-empty -> amplify-rating__icon--empty\namplify-select__icon-wrapper -> amplify-select__icon\n.amplify-switch-label -> .amplify-switch__label\n.amplify-switch-thumb -> .amplify-switch__thumb\n.amplify-switch-track -> .amplify-switch__track\n5. Moving brand.primary and brand.secondary up a level\n\nTo make it easier to access the primary and secondary colors in the Theme, we removed the brand namespace and moved primary and secondary up a level.\n\n- tokens.colors.brand.primary[10]\n+ tokens.colors.primary[10]\n\nconst theme = createTheme({\n  tokens: {\n    colors: {\n-       brand: {\n        primary: {\n          //... \n        }\n-       }\n    }\n  }\n})\n\n\nWe also added the ability to easily set the entire range of primary and secondary colors at the theme level\n\nconst theme = createTheme({\n  primaryColor: 'red',\n  secondaryColor: 'green'\n});\n\nMigrate from 4.x to 5.x\nInstallation\n\nInstall the 5.x version of the @aws-amplify/ui-react library.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react@5.x\nCopy\nUpdate and usage\n\n@aws-amplify/ui-react@5.x introduces the following breaking changes:\n\n1. @aws-amplify/ui-react@5.x drops Amplify Geo components. They are moved to a separate new package @aws-amplify/ui-react-geo.\n\nInstall the 1.x version of the @aws-amplify/ui-react-geo library and update your existing imports accordingly.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react-geo@1.x\nCopy\n\nStyles supporting Amplify Geo UI components are moved to @aws-amplify/ui-react-geo library and are not available through @aws-amplify/ui-react library anymore. When using components like MapView or LocationSearch from @aws-amplify/ui-react-geo library, import the styles from the same library as well.\n\nimport '@aws-amplify/ui-react-geo/styles.css';\n\n\nFor example, you can import the MapView component with related styles from @aws-amplify/ui-react-geo library.\n\nimport { Amplify } from 'aws-amplify';\nimport { MapView } from '@aws-amplify/ui-react-geo';\n\nimport '@aws-amplify/ui-react-geo/styles.css';\n\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nexport default function BasicMap() {\n  return <MapView />;\n}\n\n2. @aws-amplify/ui-react@5.x drops Amplify Notifications components. They are moved to a separate new package @aws-amplify/ui-react-notifications.\n\nInstall the 1.x version of the @aws-amplify/ui-react-notifications library and update your existing imports accordingly.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react-notifications@1.x\nCopy\n\nFor example, you can import the In-App messaging components like InAppMessageDisplay and InAppMessagingProvider from @aws-amplify/ui-react-notifications library.\n\nimport { Text } from '@aws-amplify/ui-react';\nimport {\n  InAppMessageDisplay\n  InAppMessagingProvider,\n} from '@aws-amplify/ui-react-notifications';\n\nimport '@aws-amplify/ui-react/styles.css';\n\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nconst App = () => {\n  useEffect(() => {\n    InAppMessaging.syncMessages();\n  }, []);\n\n  return (\n    <InAppMessagingProvider>\n      <InAppMessageDisplay />\n      <Text>In-App Messaging Example</Text>\n    </InAppMessagingProvider>\n  );\n};\n\n3. @aws-amplify/ui-react@5.x removes the to prop from the Link component.\n\nIf using a Link component with the to prop, remove to and instead extend from the underlying rendered third-party Link. For example, using React Router Link with the Amplify UI Link component:\n\nimport { Link } from '@aws-amplify/ui-react';\nimport { Link as ReactRouterLink } from 'react-router-dom';\n\n<Link as={ReactRouterLink} to=\"/\">Home</Link>\n\n4. @aws-amplify/ui-react@5.x updates component types to include the underlying rendered HTML element's attributes and strictly types the View component.\nMigrate from 3.x to 4.x\nInstallation\n\nInstall the 4.x version of the @aws-amplify/ui-react library and the 5.x version of the aws-amplify library.\n\nnpm\nyarn\nnpm install aws-amplify@5.x @aws-amplify/ui-react@4.x\nCopy\nUpdate and usage\n\n@aws-amplify/ui-react@4.x introduces the following breaking changes:\n\n1. @aws-amplify/ui-react@4.x removes isMultiline prop from TextField.\n\nReplace any TextField components using the isMultiline prop with the TextAreaField component.\n\n- <TextField\n-  isMultiline\n+ <TextAreaField\n\n2. @aws-amplify/ui-react@4.x moves text directionality support to ThemeProvider\nNote\n\nIf you are NOT using dir=\"rtl\" in your application, feel free to skip this item.\n\n@aws-amplify/ui-react has a dependency on Radix components for Menu, SliderField, Tabs, and Expander. There were a number of changes in the July 21, 2022 release of radix-ui/* packages, and the breaking change for @aws-amplify/ui-react was removal of support for the dir HTML attribute, and the addition of the DirectionProvider. In order to make the transition seamless for most of Amplify users, we've added the DirectionProvider with a default direction of ltr to the ThemeProvider.\n\nIf your application is using right to left directionality, the example below shows the needed change for apps using the native HTML dir=\"rtl\":\n\n- <View dir=\"rtl\">\n+ <ThemeProvider direction=\"rtl\">\n\n\nAlso see: Internationalization\n\n3. @aws-amplify/ui-react@4.x removes legacy component exports\n\nThe following deprecated components imported from @aws-amplify/ui-react/legacy are removed:\n\nAmplifyAuthenticator\nAmplifySignIn\nAmplifySignOut\nAmplifyChatbot\nAmplifyPhotoPicker\nAmplifyPicker\nAmplifyS3Album\nAmplifyS3Image\nAmplifyS3ImagePicker\nAmplifyS3Text\nAmplifyS3TextPicker\nwithAuthenticator\n\nDepending on the v1 version of this package and re-exporting these components caused issues. If you still want to use these legacy components you can depend on the v1 version of this package with an npm alias in your dependencies:\n\n\"@aws-amplify/ui-react-v1\": \"npm:@aws-amplify/ui-react@1.2.9\"\n\nDocumentation for legacy components\n\n4. @aws-amplify/ui-react@4.x adds inputStyles prop to Field primitives\n\nBefore 4.0, Field components like TextField would try to intelligently apply certain style props onto the wrapper element and some on the input element. We felt this was a little too opaque to users, but we still want to allow you to style the input element directly. @aws-amplify/ui-react@4.x adds an inputStyles prop to Field components so you can apply style props directly on the input (or textarea or select) as well as on the wrapper element.\n\nHopefully this change won't affect your code but will allow for more customization and control.\n\nNote\n\nThe TextAreaField component does apply 1 style prop directly on the textarea element: resize. We felt this one makes sense to apply direclty on the the textarea element and not the wrapper element.\n\n5. @aws-amplify/ui-react@4.x moves automatic signin on signup logic to aws-amplify.\n\nIf you are overriding Auth.signUp, update the override function call to include the autoSignIn option set to enabled. If this change is not made, users will not be automatically signed in on signup.\n\n async handleSignUp(formData) {\n  let { username, password, attributes } = formData;\n  // custom username\n  username = username.toLowerCase();\n  attributes.email = attributes.email.toLowerCase();\n  return Auth.signUp({\n    username,\n    password,\n    attributes,\n+   autoSignIn: {\n+     enabled: true\n+   }\n  });\n}\n\n\n6. @aws-amplify/ui-react@4.x removes legacy i18n translation keys removed\n\nWe replaced following legacy Authenticator texts:\n\nForgot your password?  with the trailing space is replaced by Forgot your password.\n\nIf you were using I18n to translate those keys, please update your translations accordingly to match the new strings.\n\nMigrate from 2.x to 3.x\nInstallation\n\nInstall the 3.x version of the @aws-amplify/ui-react library.\n\nnpm\nyarn\nnpm install aws-amplify @aws-amplify/ui-react@3.x\nCopy\nUpdate and usage\n\n@aws-amplify/ui-react@3.x introduces the following breaking changes:\n\n1. @aws-amplify/ui-react@3.x removes the built-in icons (Icon360, IconSave, etc).\n\nReplace any icon components in use the react-icons package or other React icon libraries in its place.\n\n- import { IconSave } from '@aws-amplify/ui-react';\n+ import { MdSave } from 'react-icons/md';\n\n\nNote: We did not remove the Icon component, which allows customers to easily add SVG icons using the pathData prop.\n\n2. @aws-amplify/ui-react@3.x removes ShareText.\n\nThis export has been removed and should no longer be used.\n\nMigrate from 1.x to 2.x\nInstallation\n\nInstall the 2.x version of the @aws-amplify/ui-react library.\n\nnpm\nyarn\nnpm install aws-amplify @aws-amplify/ui-react@2.x\nCopy\nUpdate and Usage\n\nUpdate the App.js with the new Authenticator and remove the old AmplifyAuthenticator as seen below:\n\nApp.js\n\n- import { AmplifyAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { Amplify } from 'aws-amplify';\n\n+ import { Authenticator } from '@aws-amplify/ui-react';\n+ import '@aws-amplify/ui-react/styles.css';\n\nimport awsExports from './aws-exports';\nAmplify.configure(awsExports);\n\n const App = () => (\n-  <AmplifyAuthenticator>\n-    <div>\n-      My App\n-      <AmplifySignOut />\n-    </div>\n-  </AmplifyAuthenticator>\n+  <Authenticator>\n+      {({ signOut, user }) => (\n+        <main>\n+          <h1>Hello {user.username}</h1>\n+          <button onClick={signOut}>Sign out</button>\n+        </main>\n+      )}\n+    </Authenticator>\n);\n\n\nAuthenticator breaking changes (1.x to 2.x)\n\nThe latest version of the Authenticator component has several differences from earlier versions. Here are a few of the major changes that you'll need to look out for.\n\nSlots\n\nAll the slot locations have changed with the latest version of the Authenticator. To get a sense of the changes please check out the Headers and Footers section.\n\nForm Fields\n\nThe latest version of the Authenticator has a different format for the formFields prop. It also no longer accepts inputProps nor hint. Instead, it's recommended that you use the Headers and Footers Slots or use the Sign Up Fields customization. For more information on form field customizations please see the Form Field Customization section.\n\nCSS Styling\n\nThe latest version of the Authenticator has a completely different set of CSS variables. Please look over the Amplify CSS Variables section for more information.\n\nonAuthUIStateChange\n\nPrevious versions of Authenticator exposed a onAuthUIStateChange handler to detect Auth state changes. For similar functionality see useAuthenticator.\n\n@aws-amplify/ui-react-liveness\nMigrate from 2.x to 3.x\nInstallation\n\nInstall the 3.x version of the @aws-amplify/ui-react-liveness library.\n\nnpm\nyarn\nnpm install aws-amplify@6.x @aws-amplify/ui-react-liveness@3.x\nCopy\nUpdate and Usage\n\nOptionally update your App with the new prop usage:\n\nApp.js\n\n const App = () => (\n  return (\n    <ThemeProvider>\n      {loading ? (\n        <Loader />\n      ) : (\n        <FaceLivenessDetector\n          sessionId={createLivenessApiData.sessionId}\n          region=\"us-east-1\"\n          onAnalysisComplete={handleAnalysisComplete}\n-         disableInstructionScreen={true}\n+         disableStartScreen={true}\n        />\n      )}\n    </ThemeProvider>\n  );\n);\n\n\nCDN CSP Policy\n\nThe 3.x version of the FaceLivenessDetector has been updated to use the latest version of TensorFlow and Blazeface, thus the default CDN paths have changed. If your application has an existing CSP policy, ensure your policy allows https://cdn.liveness.rekognition.amazonaws.com. If you are using a custom CDN make sure to update your CDN versions to match @tensorflow/tfjs-backend-wasm and @tensorflow-models/face-detection.Please look over the Liveness Config section for more information.\n\nMigrate from 1.x to 2.x\nInstallation\n\nInstall the 2.x version of the @aws-amplify/ui-react-liveness library.\n\nnpm\nyarn\nnpm install aws-amplify@5.x @aws-amplify/ui-react-liveness@2.x\nCopy\nUpdate and Usage\n\nOptionally update your App with the new prop usage:\n\nApp.js\n\n const App = () => (\n  return (\n    <ThemeProvider>\n      {loading ? (\n        <Loader />\n      ) : (\n        <FaceLivenessDetector\n          sessionId={createLivenessApiData.sessionId}\n          region=\"us-east-1\"\n          onAnalysisComplete={handleAnalysisComplete}\n-         onError={(error) => {\n-           console.error(error);\n-         }}\n+         onError={(livenessError) => {\n+           console.error({ state: livenessError.state, error: livenessError.error});\n+         }}\n        />\n      )}\n    </ThemeProvider>\n  );\n);\n\n\nCDN CSP Policy\n\nThe 2.x version of the FaceLivenessDetector has updated the default CDN for TensorFlow and Blazeface to a new URL. If your application has an existing CSP policy, update your policy to allow https://cdn.liveness.rekognition.amazonaws.com. Please look over the Liveness Config section for more information.\n\n@aws-amplify/ui-react-notifications\nInstallation\n\nInstall the 2.x version of @aws-amplify/ui-react-notifications and the 6.x version of aws-amplify.\n\nThe 2.x version of @aws-amplify/ui-react-notifications has a minimum dependency of 6.x on aws-amplify. aws-amplify@6 introduced breaking API changes.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react-notifications@2.x aws-amplify@6.x\nCopy\nUpdate and usage\n\n@aws-amplify/ui-react-notifications@2.x introduces the following breaking changes:\n\nMigrate from 1.x to 2.x\n\nStarting with aws-amplify@6, the Notifications category is no longer exported from the base aws-amplify package. If you are using in-app messaging you will need to change your imports accordingly and run initializeInAppMessaging before your application code:\n\n- import { Amplify, Notifications } from 'aws-amplify'\n+ import { Amplify } from 'aws-amplify';\n+ import { initializeInAppMessaging, syncMessages } from 'aws-amplify/in-app-messaging';\n- import exports from './aws-exports';\n+ import config from './amplifyconfiguration';\n\nAmplify.configure(config);\n\n- const { InAppMessaging } = Notifications;\n+ initializeInAppMessaging()\n\nconst MyApp = () => {\n  React.useEffect(() => {\n-    InAppMessaging.syncMessages()\n+    syncMessages();\n  }, [])\n\n  // ..\n}\n\n@aws-amplify/ui-react-storage\nMigrate from 2.x to 3.x\nInstallation\n\nInstall the 3.x version of @aws-amplify/ui-react-storage and the 6.x version of aws-amplify.\n\nThe 3.x version of @aws-amplify/ui-react-storage has a minimum dependency of 6.x on aws-amplify. aws-amplify@6 introduced breaking API changes.\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react-storage@3.x aws-amplify@6.x\nCopy\nUpdate and usage\n\n@aws-amplify/ui-react-storage@3.x introduces the following breaking changes:\n\n1. public accessLevel becomes 'guest' in Storage components\n\nStarting in v6 of the Amplify JS libraries, 'public' access level, meaning unauthentiated users can access it, became 'guest'. The accessLevel property on StorageManager and StorageImage components have been updated to reflect this change.\n\n2. Removal of FileUploader\n\nThe FileUploader component was the predecessor to the StorageManager component. In this major version we are removing the FileUploader component. Please use the StorageManager component which covers all of the use-cases of FileUploader and more."
  },
  {
    "title": "Internationalization (i18n) | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/internationalization",
    "html": "Internationalization (i18n)\n\nHow to build localized apps with Amplify UI.\n\nFeedback\nWhat's included?\n\nAmplify UI components follow Web Standards with all components with the aim of making internationalization straightforward. We use logical properties for margins, borders, and padding. An example would be our use of padding-inline-start and padding-inline-end CSS properties in the default theme which ensure paddings are flipped when the language direction is changed. In addition, Flex and Grid will both honor the language direction and flip the layout as well due to the underlying use of CSS Flexbox and Grid Layout APIs.\n\nChanging the language direction\n\nTo change the directionality of the text and layout in your application to right to left (RTL), add the direction prop with value rtl to your ThemeProvider:\n\nLeft to Right\n\nThis paragraph is in English, so it should go from left to right.\n\nRight to Left\n\nهذه الفقرة باللغة العربية ، لذا يجب الانتقال من اليمين إلى اليسار.\n\nCopy\nimport { Alert, Text, ThemeProvider } from '@aws-amplify/ui-react';\nimport { useState } from 'react';\n\nexport const ThemeProviderDirectionExample = () => {\n  return (\n    <>\n      <ThemeProvider>\n        <Alert\n          variation=\"info\"\n          isDismissible={false}\n          hasIcon={true}\n          heading=\"Left to Right\"\n        >\n          <Text>\n            This paragraph is in English, so it should go from left to right.\n          </Text>\n        </Alert>\n      </ThemeProvider>\n      <ThemeProvider direction=\"rtl\">\n        <Alert\n          variation=\"success\"\n          isDismissible={false}\n          hasIcon={true}\n          heading=\"Right to Left\"\n        >\n          <Text>\n            هذه الفقرة باللغة العربية ، لذا يجب الانتقال من اليمين إلى اليسار.\n          </Text>\n        </Alert>\n      </ThemeProvider>\n    </>\n  );\n};\n"
  },
  {
    "title": "Figma to code | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/figma",
    "html": "Figma\n\nAmplify Studio offers an integration with Figma, allowing you to generate clean React code by importing your Figma design file.\n\nFeedback\n\nAmplify Studio allows you to design components in Figma, visually bind those components to your data in Amplify Studio, and pull them into your application codebase. The Studio generated components are plain React components that compose the Amplify UI primitive components. Studio generated components can be easily extended or overridden so you never eject or throw them away.\n\nFigma file\n\nGet the Figma file\n\nThe Amplify UI Figma file for Amplify UI is not a typical design system Figma file. The main difference is it does not have all components Amplify UI offers and those components do not have all the variants you might expect to see (component states like hover for example). This is because this is not a normal Figma file. It is built to work with Amplify Studio's UI Builder functionality which lets you design components in Figma and generate usable and extensible React code you can use in your application.\n\nFigma plugin\n\nGet the Figma plugin\n\nThe Amplify UI theme editor plugin allows you to create and edit an Amplify UI theme and save it to your Figma file. This theme is synced with your Amplify application and you can pull it into your app along with the generated UI components.\n\nTo install the Amplify Theme Editor:\n\nGo to the Amplify Theme Editor Figma plugin page\nClick \"Install\" on the top-right corner\nGo to your Figma file\nRight-click an empty area of the canvas and select Plugins > Amplify Theme Editor or use the Figma quick actions menu by pressing command/control + / then typing \"AWS Amplify\"\nFigma to code\n\nLearn more about Amplify Studio's Figma to code capabilities\n\nData binding\n\nAmplify Studio offers visual data binding capabilities to bind UI components to data to build dynamic components. Use the UI component editor to map fields to static values, or map fields to your backend data model. All data bindings get automatically included in generated code.\n\nLearn more about data binding in Amplify Studio\n\nEvent handling\n\nAmplify Studio offers the ability to bind UI component events (onClick, onChange, and more) to actions to build interactive components. Use the UI component editor to map UI components' events to actions for navigation, data manipulation, authentication, and more. All data bindings get automatically included in generated code.\n\nLearn more about event handling in Amplify Studio\n\nWorking with collections\n\nCollections are any list of repeating items. You can visually create a collection from any individual component by selecting the Create collection button in the top right corner of the UI component editor. All collections are generated as code with real-time subscriptions automatically set up.\n\nLearn more about collections in Amplify Studio\n\nTheming\n\nLearn about theming Amplify UI in Figma\n\nResponsive Components\n\nYou can use Amplify Studio to dynamically toggle between different component variants based on your app's breakpoint. For example, you can have the navigation bar shrink to a smaller size as the window gets smaller.\n\nLearn about responsive components in Amplify Studio\n\nExtend via code\n\nWhen you run amplify pull, Amplify automatically generates JSX and TS versions of your Figma components. You cannot directly edit the code for these components as they will get overwritten on the next pull, but we have exposed mechanisms to extend the code.\n\nLearn about extending Amplify Studio components"
  },
  {
    "title": "Accessibility | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/accessibility",
    "html": "Accessibility\n\nAn introduction to building accessible apps with Amplify UI.\n\nFeedback\n\nAmplify UI components follow WCAG and WAI-ARIA best practices and guidelines for color contrast, keyboard navigation, accessible labels, and focus management. The intent of Amplify UI is to provide components that are flexible and can be composed into modern, accessible patterns with as few limitations as possible.\n\nReport an accessibility issue\n\nHave you found an accessibility bug or limitation? Open an issue so we can take a look!\n\nWhat's included?\n\nAmplify UI components have some accessibility needs baked in for ease of use. This includes auto-associating labels with form inputs, a default theme with accessible color contrast, and the flexibility to enhance components to create your own accessible patterns.\n\nAccessible form fields\nForm Labels\n\nAll of Amplify UI's form field components require passing a label to the input. If an ID is not supplied for the component, one is autogenerated for you so that the label can be programatically associated with the input.\n\nExample text field\nExample text field (with custom ID)\nCopy\nimport { Grid, TextField } from '@aws-amplify/ui-react';\n\nexport const LabelInputExample = () => (\n  <Grid\n    gap=\"var(--amplify-space-large)\"\n    templateColumns=\"repeat(auto-fill, minmax(280px, 1fr))\"\n  >\n    <TextField label=\"Example text field\" />\n    <TextField\n      label=\"Example text field (with custom ID)\"\n      id=\"custom-input-id\"\n    />\n  </Grid>\n);\n\n\nOne use case for passing your own custom id to the field is if you need to target it for testing.\n\nWeb standards\n\nAmplify UI also follows web standards as much as possible for our components, including relying on native web controls. For example, our CheckboxField is styled to match our default theme, but still uses an <input type=\"checkbox\" /> as the base component.\n\nExample checkbox\nCopy\nimport { CheckboxField } from '@aws-amplify/ui-react';\n\nexport const CheckboxExample = () => (\n  <CheckboxField label=\"Example checkbox\" name=\"example\" value=\"yes\" />\n);\n\nAccessible input labels\nLearn about making accessible labels for the TextField component\nStyling Checkbox inputs\nVarious ways to style the CheckboxField\nThemeable design tokens\n\nAmplify UI uses design tokens for the color palette, which makes modifying the theme to meet your own color contrast goals more manageable. Amplify UI also provides tokens for properties such as border width and font size if you need to make your own customizations for higher contrast requirements.\n\nThe example below shows how to use Theming to supply higher contrast text and border styles.\n\nExample Card\nCopy\nimport { ThemeProvider, Card } from '@aws-amplify/ui-react';\n\nexport const ThemeExample = () => {\n  const theme = {\n    name: 'high-contrast',\n    tokens: {\n      colors: {\n        font: {\n          primary: { value: '{colors.black}' },\n        },\n      },\n      components: {\n        card: {\n          outlined: {\n            borderWidth: { value: '{borderWidths.large}' },\n            borderColor: { value: '{colors.black}' },\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Card variation=\"outlined\">Example Card</Card>\n    </ThemeProvider>\n  );\n};\n\nTheming overview\nLearn how to make a custom theme\nEnhanceable primitives\n\nSince Amplify UI supports passing down HTML and ARIA attributes to primitive components, it's possible to create your own accessible patterns. The following example shows how to use a View component as an HTML nav element and how to add a unique name to the nav element using an aria-label attribute.\n\nExample nav element with aria label.\nCopy\nimport { View } from '@aws-amplify/ui-react';\n\nexport const NavRoleExample = () => (\n  <View as=\"nav\" aria-label=\"Component navigation\">\n    Example nav element with aria label.\n  </View>\n);\n\n\nThe next example shows how we can add an aria-live attribute to our Badge component to announce when the value is updated.\n\nAdd card to list.\n0 cards in list\nCopy\nimport { Flex, Button, Badge } from '@aws-amplify/ui-react';\nimport { useState } from 'react';\n\nexport const AriaLiveExample = () => {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <Flex>\n      <Button onClick={handleClick}>Add card to list.</Button>\n      <Badge aria-live=\"polite\" alignSelf=\"center\">\n        {`${count} cards in list`}\n      </Badge>\n    </Flex>\n  );\n};\n"
  },
  {
    "title": "Vite | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/usage/vite",
    "html": "Vite\n\nHow to get started using Amplify UI with Vite\n\nFeedback\nTutorial\n\nIn this brief tutorial, we're going to build a basic shopping cart component using Vite.js and Amplify UI. Then, we'll elaborate on our shopping card to play with the possibilities of using Amplify UI.\n\nSetup and Installation\n\nFirst, execute the command below in your terminal. When prompted for the name of your project, enter amplify-ui-demo. Also see Vite Guide.\n\nJavaScript\nTypeScript\nnpm 7+\nnpm create vite@latest amplify-ui-demo -- --template react && cd amplify-ui-demo\nCopy\n\nNext, install the Amplify UI React package:\n\nnpm install @aws-amplify/ui-react aws-amplify\nCopy\nBasic Demo\n\nOpen up the project in your IDE and delete the contents of the index.css file.\n\nNext, replace the contents of the App.jsx or App.tsx file with the code below:\n\nCopy\nimport { Button, Flex, Heading, Image, Text } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nfunction App() {\n  return (\n    <Flex\n      direction={{ base: 'column', large: 'row' }}\n      maxWidth=\"32rem\"\n      padding=\"1rem\"\n      width=\"100%\"\n    >\n      <Image\n        alt=\"Abstract art\"\n        height=\"21rem\"\n        objectFit=\"cover\"\n        src=\"https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987\"\n      />\n      <Flex justifyContent=\"space-between\" direction=\"column\">\n        <Heading level={3}>Abstract art</Heading>\n        <Text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat\n          sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in\n          voluptate velit esse.\n        </Text>\n        <Button\n          variation=\"primary\"\n          onClick={() => alert('Added item to cart!')}\n        >\n          Add to Cart\n        </Button>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default App;\n\nAbstract art\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in voluptate velit esse.\n\nAdd to Cart\n\nNow start the app by running npm run dev and you should see a basic shopping card component.\n\nAdvanced Demo\n\nIf you’d like to play around with a more comprehensive demo of the Amplify UI library, create a separate file under the pages folder named paintings.js, and copy/paste this code into it:\n\nCopy\nexport const PAINTINGS = [\n  {\n    title: 'Hallway',\n    artist: 'Efe Kurnaz',\n    src: 'https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.',\n    price: '$899.99',\n    avgRating: 4.8,\n    reviews: 445,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: true,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Fire and Ice',\n    artist: 'Pawel Czerwinski',\n    src: 'https://images.unsplash.com/photo-1604871000636-074fa5117945?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, ubique patrioque at qui, modo hinc ne duo, ad consul animal volumus est. Ea quo etiam deleniti, amet singulis in sed. Omnesque lobortis vis ex. Wisi latine splendide vis ei, libris commodo no has.',\n    price: '$699.99',\n    avgRating: 4.1,\n    reviews: 222,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: false,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Orange, pink, yellow',\n    artist: 'Kseniya Lapteva',\n    src: 'https://images.unsplash.com/photo-1629196914375-f7e48f477b6d?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1306',\n    description:\n      'Lorem ipsum dolor sit amet, cu porro vivendum ius. Ad mei sint homero, cum an soluta epicurei. At pri minimum corrumpit. Minim percipitur eu mei, erant habemus deserunt qui et.',\n    price: '$139.99',\n    avgRating: 3.5,\n    reviews: 142,\n    inStock: true,\n    readyForPickup: false,\n    bestSeller: false,\n    isNew: true,\n    limitedSupply: false,\n  },\n  {\n    title: 'Melted Purple',\n    artist: 'Maria Orlova',\n    src: 'https://images.unsplash.com/photo-1549490349-8643362247b5?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, facer nemore ei sea, mea facilis eloquentiam at. Et modus pertinax tincidunt est. Propriae argumentum necessitatibus eos ad.',\n    price: '$499.99',\n    avgRating: 4.5,\n    reviews: 301,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: true,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Experimental',\n    artist: 'Bruno Thethe',\n    src: 'https://images.unsplash.com/photo-1550275994-cdc89cd1948f?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, ea probo choro tollit pri, ad pro justo intellegam repudiandae, labores civibus eu quo. Cum latine instructior at, est no odio tibique epicuri.',\n    price: '$159.99',\n    avgRating: 3.1,\n    reviews: 56,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: false,\n    isNew: true,\n    limitedSupply: false,\n  },\n  {\n    title: 'Rainbow',\n    artist: 'Felix Spiske',\n    src: 'https://images.unsplash.com/photo-1543857778-c4a1a3e0b2eb?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1310',\n    description:\n      'Lorem ipsum dolor sit amet, sea tritani indoctum cu, facilis praesent at qui. Cu cetero veritus vel, et prima erant perfecto vix. Tollit delectus scaevola duo et, inermis sensibus voluptatum cu ius.',\n    price: '$799.99',\n    avgRating: 4.9,\n    reviews: 550,\n    inStock: true,\n    readyForPickup: false,\n    bestSeller: true,\n    isNew: false,\n    limitedSupply: true,\n  },\n  {\n    title: 'Fearless Hue',\n    artist: 'Radienta',\n    src: 'https://images.unsplash.com/photo-1579547621113-e4bb2a19bdd6?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=939',\n    description:\n      'Lorem ipsum dolor sit amet, te labore lucilius pro, te his consul singulis, cu vel unum impedit complectitur. In usu erat dicta doctus, purto aeterno vis te. Facete deterruisset nec id. At omittam antiopam pri.',\n    price: '$249.99',\n    avgRating: 3.3,\n    reviews: 294,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: false,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Liquid',\n    artist: 'Joel Filipe',\n    src: 'https://images.unsplash.com/photo-1485163819542-13adeb5e0068?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, cum cu meliore tacimates, vel no sale maiorum. His cu autem placerat. Homero urbanitas vituperata ad sit, ex mel convenire elaboraret.',\n    price: '$549.99',\n    avgRating: 4.5,\n    reviews: 440,\n    inStock: false,\n    readyForPickup: false,\n    bestSeller: false,\n    isNew: false,\n    limitedSupply: true,\n  },\n];\n\n\nThen, replace the contents of App.jsx or App.tsx with the code below, restart the app, and experience all the beautiful components in action!\n\nCopy\nimport * as React from 'react';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Collection,\n  Divider,\n  Flex,\n  Heading,\n  Image,\n  Rating,\n  SelectField,\n  StepperField,\n  SwitchField,\n  Text,\n  View,\n} from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\nimport { PAINTINGS } from './paintings';\n\nfunction App() {\n  const [currentPainting, setCurrentPainting] = React.useState(PAINTINGS[0]);\n  const [image, setImage] = React.useState(PAINTINGS[0].src);\n  const [frame, setFrame] = React.useState(true);\n  const [quantity, setQuantity] = React.useState(1);\n  const [size, setSize] = React.useState('');\n  const [error, setError] = React.useState(false);\n\n  const handleAddToCart = () => {\n    if (size === '') {\n      setError(true);\n      return;\n    }\n    alert(\n      `Added to cart!\\n${quantity} ${size} \"${currentPainting.title}\" by ${\n        currentPainting.artist\n      } with ${frame ? 'a' : 'no'} frame`\n    );\n  };\n\n  return (\n    <View width=\"100%\" maxWidth=\"50rem\" padding={{ base: 0, large: '2rem' }}>\n      <Card variation=\"outlined\">\n        <Flex\n          direction={{ base: 'column', large: 'row' }}\n          justifyContent=\"space-evenly\"\n        >\n          <Flex direction=\"column\" gap=\"5rem\" alignItems=\"center\">\n            <View width=\"15rem\" height=\"19rem\">\n              <Image\n                src={image}\n                alt={`${currentPainting.title} abstract painting`}\n                width=\"100%\"\n                height=\"21rem\"\n                border={frame ? '3px solid black' : ''}\n              />\n            </View>\n            <Collection\n              type=\"grid\"\n              items={PAINTINGS}\n              templateColumns=\"1fr 1fr 1fr 1fr\"\n              templateRows=\"1fr 1fr\"\n              width=\"14rem\"\n            >\n              {(item, index) => (\n                <Flex\n                  width=\"100%\"\n                  onMouseOver={() => setImage(item.src)}\n                  onMouseLeave={() => setImage(currentPainting.src)}\n                  key={index}\n                  justifyContent=\"center\"\n                >\n                  <Image\n                    src={item.src}\n                    alt={`${item.title} abstract painting`}\n                    width=\"2rem\"\n                    height=\"2.5rem\"\n                    onClick={() => setCurrentPainting(item)}\n                    borderRadius=\"5px\"\n                    padding=\"3px\"\n                    marginBottom=\"1rem\"\n                    style={{\n                      cursor: 'pointer',\n                      ...(currentPainting.src === item.src && {\n                        border: '1px solid #e77600',\n                        boxShadow: 'rgba(0, 0, 0, 0.35) 0px 3px 8px',\n                      }),\n                    }}\n                  />\n                </Flex>\n              )}\n            </Collection>\n          </Flex>\n          <Flex direction=\"column\" justifyContent=\"space-between\">\n            <Flex direction=\"column\" gap=\"0.7rem\">\n              <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Heading level={3}>{currentPainting.title}</Heading>\n                <Flex height=\"1.8rem\">\n                  {currentPainting.bestSeller ? (\n                    <Badge variation=\"success\">Bestseller</Badge>\n                  ) : null}\n                  {currentPainting.isNew ? (\n                    <Badge variation=\"info\">New</Badge>\n                  ) : null}\n                  {currentPainting.limitedSupply ? (\n                    <Badge variation=\"warning\">Limited supply</Badge>\n                  ) : null}\n                </Flex>\n              </Flex>\n              <Text fontWeight=\"bold\">{currentPainting.artist}</Text>\n              <Flex\n                direction={{ base: 'column', large: 'row' }}\n                alignItems=\"baseline\"\n              >\n                <Rating\n                  value={currentPainting.avgRating}\n                  fillColor=\"#f4a41d\"\n                ></Rating>\n                <Text fontSize=\"small\" fontWeight=\"lighter\">\n                  {currentPainting.reviews} reviews\n                </Text>\n              </Flex>\n              <Divider />\n              <Flex alignItems=\"baseline\">\n                <Text fontSize=\"medium\" fontWeight=\"bold\">\n                  Price:\n                </Text>\n                <Text fontSize=\"large\" color=\"#B12704\" fontWeight=\"bold\">\n                  {currentPainting.price}\n                </Text>\n              </Flex>\n              <Text fontSize=\"small\" paddingBottom=\"1rem\">\n                {currentPainting.description}\n              </Text>\n              {currentPainting.readyForPickup ? (\n                <Text>\n                  <Text variation=\"success\" as=\"span\">\n                    Ready within 2 hours\n                  </Text>{' '}\n                  for pickup inside the store\n                </Text>\n              ) : null}\n              <SwitchField\n                label={frame ? 'Frame' : 'No frame'}\n                labelPosition=\"end\"\n                isChecked={frame}\n                onChange={(e) => {\n                  setFrame(e.target.checked);\n                }}\n                isDisabled={!currentPainting.inStock}\n              />\n              <SelectField\n                label=\"Size\"\n                labelHidden\n                variation=\"quiet\"\n                placeholder=\"Select your size\"\n                value={size}\n                onChange={(e) => {\n                  e.target.value !== '' && setError(false);\n                  setSize(e.target.value);\n                }}\n                hasError={error}\n                errorMessage=\"Please select a size.\"\n                isDisabled={!currentPainting.inStock}\n              >\n                <option value=\"Small\" label='Small (12x16\")' />\n                <option value=\"Medium\" label='Medium (18x24\")' />\n                <option value=\"Large\" label='Large (24x36\")' />\n                <option value=\"X-Large\" label='X-Large (30x40\")' disabled />\n              </SelectField>\n              {!currentPainting.inStock ? (\n                <Alert variation=\"error\">Out of stock!</Alert>\n              ) : null}\n            </Flex>\n            <Flex\n              justifyContent=\"space-between\"\n              direction={{ base: 'column', large: 'row' }}\n            >\n              <Flex alignItems=\"center\" gap=\"5px\">\n                <Text>Qty:</Text>\n                <StepperField\n                  label=\"Quantity\"\n                  value={quantity}\n                  onStepChange={setQuantity}\n                  min={0}\n                  max={10}\n                  step={1}\n                  labelHidden\n                  width=\"10rem\"\n                  isDisabled={!currentPainting.inStock}\n                />\n              </Flex>\n              <Button\n                variation=\"primary\"\n                onClick={handleAddToCart}\n                disabled={!currentPainting.inStock || !quantity}\n              >\n                Add to Cart\n              </Button>\n            </Flex>\n          </Flex>\n        </Flex>\n      </Card>\n    </View>\n  );\n}\n\nexport default App;\n\nHallway\nBestseller\n\nEfe Kurnaz\n\n4.8 out of 5 rating\n\n445 reviews\n\nPrice:\n\n$899.99\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.\n\nReady within 2 hours for pickup inside the store\n\nFrame\nSize\nSelect your size\n\nQty:\n\nQuantity\nAdd to Cart"
  },
  {
    "title": "Next.js | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/usage/nextjs",
    "html": "Next.js\n\nHow to get started using Amplify UI with Next.js\n\nFeedback\nTutorial\n\nIn this brief tutorial, we're going to build a basic shopping card component using Next.js and Amplify UI. Then, we'll elaborate on our shopping card to play with the possibilities of using Amplify UI.\n\nApp Router\n\nNext.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with \"use client\". For more info, visit Next.js third party package documentation.\n\nIf you are using Next.js Pages Router, no changes are required to use Amplify UI components.\n\nSetup and Installation\n\nFirst, execute the command below in your terminal. When prompted for the name of your project, enter amplify-ui-demo.\n\nPages Router (Next.js 11.0+)\nApp Router (Next.js 13.4+)\nnpx create-next-app@latest amplify-ui-demo --no-app && cd amplify-ui-demo\nCopy\n\nThen, install the Amplify UI React package:\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react aws-amplify\nCopy\nBasic Demo\nPages Router (Next.js 11.0+)\nApp Router (Next.js 13.4+)\n\nOpen up the project in your IDE and replace the contents of the pages/index.js with the code below:\n\nCopy\nimport { Button, Flex, Heading, Image, Text } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nexport default function Home() {\n  return (\n    <Flex\n      direction={{ base: 'column', large: 'row' }}\n      maxWidth=\"32rem\"\n      padding=\"1rem\"\n      width=\"100%\"\n    >\n      <Image\n        alt=\"Abstract art\"\n        height=\"21rem\"\n        src=\"https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987\"\n        width=\"100%\"\n      />\n      <Flex justifyContent=\"space-between\" direction=\"column\">\n        <Heading level={3}>Abstract art</Heading>\n        <Text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat\n          sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in\n          voluptate velit esse.\n        </Text>\n        <Button\n          variation=\"primary\"\n          onClick={() => alert('Added item to cart!')}\n        >\n          Add to Cart\n        </Button>\n      </Flex>\n    </Flex>\n  );\n}\n\nAbstract art\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in voluptate velit esse.\n\nAdd to Cart\n\nWhen you start the app (npm run dev or yarn dev), you should see a basic shopping card component.\n\nAdvanced Demo\nPages Router (Next.js 11.0+)\nApp Router (Next.js 13.4+)\n\nIf you’d like to play around with a more comprehensive demo of the Amplify UI library, create a separate file under the pages folder named paintings.js, and copy/paste this code into it:\n\nCopy\nexport const PAINTINGS = [\n  {\n    title: 'Hallway',\n    artist: 'Efe Kurnaz',\n    src: 'https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.',\n    price: '$899.99',\n    avgRating: 4.8,\n    reviews: 445,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: true,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Fire and Ice',\n    artist: 'Pawel Czerwinski',\n    src: 'https://images.unsplash.com/photo-1604871000636-074fa5117945?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, ubique patrioque at qui, modo hinc ne duo, ad consul animal volumus est. Ea quo etiam deleniti, amet singulis in sed. Omnesque lobortis vis ex. Wisi latine splendide vis ei, libris commodo no has.',\n    price: '$699.99',\n    avgRating: 4.1,\n    reviews: 222,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: false,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Orange, pink, yellow',\n    artist: 'Kseniya Lapteva',\n    src: 'https://images.unsplash.com/photo-1629196914375-f7e48f477b6d?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1306',\n    description:\n      'Lorem ipsum dolor sit amet, cu porro vivendum ius. Ad mei sint homero, cum an soluta epicurei. At pri minimum corrumpit. Minim percipitur eu mei, erant habemus deserunt qui et.',\n    price: '$139.99',\n    avgRating: 3.5,\n    reviews: 142,\n    inStock: true,\n    readyForPickup: false,\n    bestSeller: false,\n    isNew: true,\n    limitedSupply: false,\n  },\n  {\n    title: 'Melted Purple',\n    artist: 'Maria Orlova',\n    src: 'https://images.unsplash.com/photo-1549490349-8643362247b5?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, facer nemore ei sea, mea facilis eloquentiam at. Et modus pertinax tincidunt est. Propriae argumentum necessitatibus eos ad.',\n    price: '$499.99',\n    avgRating: 4.5,\n    reviews: 301,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: true,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Experimental',\n    artist: 'Bruno Thethe',\n    src: 'https://images.unsplash.com/photo-1550275994-cdc89cd1948f?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, ea probo choro tollit pri, ad pro justo intellegam repudiandae, labores civibus eu quo. Cum latine instructior at, est no odio tibique epicuri.',\n    price: '$159.99',\n    avgRating: 3.1,\n    reviews: 56,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: false,\n    isNew: true,\n    limitedSupply: false,\n  },\n  {\n    title: 'Rainbow',\n    artist: 'Felix Spiske',\n    src: 'https://images.unsplash.com/photo-1543857778-c4a1a3e0b2eb?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1310',\n    description:\n      'Lorem ipsum dolor sit amet, sea tritani indoctum cu, facilis praesent at qui. Cu cetero veritus vel, et prima erant perfecto vix. Tollit delectus scaevola duo et, inermis sensibus voluptatum cu ius.',\n    price: '$799.99',\n    avgRating: 4.9,\n    reviews: 550,\n    inStock: true,\n    readyForPickup: false,\n    bestSeller: true,\n    isNew: false,\n    limitedSupply: true,\n  },\n  {\n    title: 'Fearless Hue',\n    artist: 'Radienta',\n    src: 'https://images.unsplash.com/photo-1579547621113-e4bb2a19bdd6?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=939',\n    description:\n      'Lorem ipsum dolor sit amet, te labore lucilius pro, te his consul singulis, cu vel unum impedit complectitur. In usu erat dicta doctus, purto aeterno vis te. Facete deterruisset nec id. At omittam antiopam pri.',\n    price: '$249.99',\n    avgRating: 3.3,\n    reviews: 294,\n    inStock: true,\n    readyForPickup: true,\n    bestSeller: false,\n    isNew: false,\n    limitedSupply: false,\n  },\n  {\n    title: 'Liquid',\n    artist: 'Joel Filipe',\n    src: 'https://images.unsplash.com/photo-1485163819542-13adeb5e0068?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',\n    description:\n      'Lorem ipsum dolor sit amet, cum cu meliore tacimates, vel no sale maiorum. His cu autem placerat. Homero urbanitas vituperata ad sit, ex mel convenire elaboraret.',\n    price: '$549.99',\n    avgRating: 4.5,\n    reviews: 440,\n    inStock: false,\n    readyForPickup: false,\n    bestSeller: false,\n    isNew: false,\n    limitedSupply: true,\n  },\n];\n\n\nThen, replace the contents of pages/index.js with the code below, restart the app, and experience all the beautiful components in action!\n\nCopy\nimport * as React from 'react';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Collection,\n  Divider,\n  Flex,\n  Heading,\n  Image,\n  Rating,\n  SelectField,\n  StepperField,\n  SwitchField,\n  Text,\n  View,\n} from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\nimport { PAINTINGS } from './paintings';\n\nexport default function Home() {\n  const [currentPainting, setCurrentPainting] = React.useState(PAINTINGS[0]);\n  const [image, setImage] = React.useState(PAINTINGS[0].src);\n  const [frame, setFrame] = React.useState(true);\n  const [quantity, setQuantity] = React.useState(1);\n  const [size, setSize] = React.useState('');\n  const [error, setError] = React.useState(false);\n\n  const handleAddToCart = () => {\n    if (size === '') {\n      setError(true);\n      return;\n    }\n    alert(\n      `Added to cart!\\n${quantity} ${size} \"${currentPainting.title}\" by ${\n        currentPainting.artist\n      } with ${frame ? 'a' : 'no'} frame`\n    );\n  };\n\n  return (\n    <View width=\"100%\" maxWidth=\"50rem\" padding={{ base: 0, large: '2rem' }}>\n      <Card variation=\"outlined\">\n        <Flex\n          direction={{ base: 'column', large: 'row' }}\n          justifyContent=\"space-evenly\"\n        >\n          <Flex direction=\"column\" gap=\"5rem\" alignItems=\"center\">\n            <View width=\"15rem\" height=\"19rem\">\n              <Image\n                src={image}\n                alt={`${currentPainting.title} abstract painting`}\n                width=\"100%\"\n                height=\"21rem\"\n                border={frame ? '3px solid black' : ''}\n              />\n            </View>\n            <Collection\n              type=\"grid\"\n              items={PAINTINGS}\n              templateColumns=\"1fr 1fr 1fr 1fr\"\n              templateRows=\"1fr 1fr\"\n              width=\"14rem\"\n            >\n              {(item, index) => (\n                <Flex\n                  width=\"100%\"\n                  onMouseOver={() => setImage(item.src)}\n                  onMouseLeave={() => setImage(currentPainting.src)}\n                  key={index}\n                  justifyContent=\"center\"\n                >\n                  <Image\n                    src={item.src}\n                    alt={`${item.title} abstract painting`}\n                    width=\"2rem\"\n                    height=\"2.5rem\"\n                    onClick={() => setCurrentPainting(item)}\n                    borderRadius=\"5px\"\n                    padding=\"3px\"\n                    marginBottom=\"1rem\"\n                    style={{\n                      cursor: 'pointer',\n                      ...(currentPainting.src === item.src && {\n                        border: '1px solid #e77600',\n                        boxShadow: 'rgba(0, 0, 0, 0.35) 0px 3px 8px',\n                      }),\n                    }}\n                  />\n                </Flex>\n              )}\n            </Collection>\n          </Flex>\n          <Flex direction=\"column\" justifyContent=\"space-between\">\n            <Flex direction=\"column\" gap=\"0.7rem\">\n              <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Heading level={3}>{currentPainting.title}</Heading>\n                <Flex height=\"1.8rem\">\n                  {currentPainting.bestSeller ? (\n                    <Badge variation=\"success\">Bestseller</Badge>\n                  ) : null}\n                  {currentPainting.isNew ? (\n                    <Badge variation=\"info\">New</Badge>\n                  ) : null}\n                  {currentPainting.limitedSupply ? (\n                    <Badge variation=\"warning\">Limited supply</Badge>\n                  ) : null}\n                </Flex>\n              </Flex>\n              <Text fontWeight=\"bold\">{currentPainting.artist}</Text>\n              <Flex\n                direction={{ base: 'column', large: 'row' }}\n                alignItems=\"baseline\"\n              >\n                <Rating\n                  value={currentPainting.avgRating}\n                  fillColor=\"#f4a41d\"\n                ></Rating>\n                <Text fontSize=\"small\" fontWeight=\"lighter\">\n                  {currentPainting.reviews} reviews\n                </Text>\n              </Flex>\n              <Divider />\n              <Flex alignItems=\"baseline\">\n                <Text fontSize=\"medium\" fontWeight=\"bold\">\n                  Price:\n                </Text>\n                <Text fontSize=\"large\" color=\"#B12704\" fontWeight=\"bold\">\n                  {currentPainting.price}\n                </Text>\n              </Flex>\n              <Text fontSize=\"small\" paddingBottom=\"1rem\">\n                {currentPainting.description}\n              </Text>\n              {currentPainting.readyForPickup ? (\n                <Text>\n                  <Text variation=\"success\" as=\"span\">\n                    Ready within 2 hours\n                  </Text>{' '}\n                  for pickup inside the store\n                </Text>\n              ) : null}\n              <SwitchField\n                label={frame ? 'Frame' : 'No frame'}\n                labelPosition=\"end\"\n                isChecked={frame}\n                onChange={(e) => {\n                  setFrame(e.target.checked);\n                }}\n                isDisabled={!currentPainting.inStock}\n              />\n              <SelectField\n                label=\"Size\"\n                labelHidden\n                variation=\"quiet\"\n                placeholder=\"Select your size\"\n                value={size}\n                onChange={(e) => {\n                  e.target.value !== '' && setError(false);\n                  setSize(e.target.value);\n                }}\n                hasError={error}\n                errorMessage=\"Please select a size.\"\n                isDisabled={!currentPainting.inStock}\n              >\n                <option value=\"Small\" label='Small (12x16\")' />\n                <option value=\"Medium\" label='Medium (18x24\")' />\n                <option value=\"Large\" label='Large (24x36\")' />\n                <option value=\"X-Large\" label='X-Large (30x40\")' disabled />\n              </SelectField>\n              {!currentPainting.inStock ? (\n                <Alert variation=\"error\">Out of stock!</Alert>\n              ) : null}\n            </Flex>\n            <Flex\n              justifyContent=\"space-between\"\n              direction={{ base: 'column', large: 'row' }}\n            >\n              <Flex alignItems=\"center\" gap=\"5px\">\n                <Text>Qty:</Text>\n                <StepperField\n                  label=\"Quantity\"\n                  value={quantity}\n                  onStepChange={setQuantity}\n                  min={0}\n                  max={10}\n                  step={1}\n                  labelHidden\n                  width=\"10rem\"\n                  isDisabled={!currentPainting.inStock}\n                />\n              </Flex>\n              <Button\n                variation=\"primary\"\n                onClick={handleAddToCart}\n                disabled={!currentPainting.inStock || !quantity}\n              >\n                Add to Cart\n              </Button>\n            </Flex>\n          </Flex>\n        </Flex>\n      </Card>\n    </View>\n  );\n}\n\nHallway\nBestseller\n\nEfe Kurnaz\n\n4.8 out of 5 rating\n\n445 reviews\n\nPrice:\n\n$899.99\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.\n\nReady within 2 hours for pickup inside the store\n\nFrame\nSize\nSelect your size\n\nQty:\n\nQuantity\nAdd to Cart"
  },
  {
    "title": "Usage | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/usage",
    "html": "Usage\nFeedback\nReact and Amplify UI\n\nAmplify UI is designed to integrate seamlessly with the React framework so you can get started in no time.\n\nInstallation\n\nIf you haven't already, install @aws-amplify/ui-react with npm or yarn:\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react aws-amplify\nCopy\nQuick start\n\nHere's all you need to get up and running:\n\nCopy\nimport * as React from 'react';\nimport { Button } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nfunction App() {\n  return <Button variation=\"primary\">Hello world</Button>;\n}\n\nexport default App;\n\n\nCopy/paste the code above into your React app, start the app, and look at that lovely Button!\n\nHello world\nComponents\n\nYou can use all of Amplify UI's primitive components (e.g., Button, Tabs, Flex) right out-of-the-box. These are the same components we use to build our connected components such as the Authenticator. Please refer to each component's documentation to see how they should be imported, configured and styled.\n\nAdd to Cart\nCopy\nimport * as React from 'react';\nimport { Button } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nfunction App() {\n  return (\n    <Button\n      ariaLabel=\"Add item to cart\"\n      backgroundColor=\"#ffd811\"\n      borderRadius=\"1rem\"\n      color=\"black\"\n      fontWeight=\"normal\"\n      onClick={() => alert('Added to cart! ✅')}\n      size=\"small\"\n      width=\"8rem\"\n    >\n      Add to Cart\n    </Button>\n  );\n}\n\nexport default App;\n\nTheming\n\nAmplify UI ships with a default theme that you can customize to match the look and feel of your project. Remember to load the default styling by importing our CSS at the entry-point to your application (e.g., src/App.js).\n\nimport '@aws-amplify/ui-react/styles.css';\n\n\nTo learn how to customize the appearance of all components in your application with a theme, see theming.\n\nCustom button\nCopy\nimport { Button, ThemeProvider } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css'; // default theme\n\nconst theme = {\n  name: 'custom-button-theme',\n  tokens: {\n    components: {\n      button: {\n        // this will affect the font weight of all Buttons\n        fontWeight: { value: '{fontWeights.black.value}' },\n        // this will only style Buttons which are the \"primary\" variation\n        primary: {\n          backgroundColor: { value: 'rebeccapurple' },\n          _hover: {\n            backgroundColor: { value: 'hotpink' },\n          },\n        },\n      },\n    },\n  },\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button variation=\"primary\">Custom button</Button>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"
  },
  {
    "title": "Installation | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/installation",
    "html": "Installation\nFeedback\nDependencies\nPackages\n\nInstall @aws-amplify/ui-react with npm or yarn:\n\nnpm\nyarn\nnpm install @aws-amplify/ui-react aws-amplify\nCopy\n\nAfter adding the aws-amplify and @aws-amplify/ui-react dependencies you are now ready to add any of our components to your application.\n\nStyles\n\nAmplify UI ships with a default theme that you can customize to match the look and feel of your project.\n\nJS\nCSS\n\nModern bundlers like Create React App & Next.js allow you to import .css from within your .js files. This may be src/index.js, src/App.js, pages/_app.js, or whatever your entry-point is.\n\nimport '@aws-amplify/ui-react/styles.css';\n\nCSS Layers\n\nCSS Layers are a new feature of the CSS spec that make it easy to override styles without needing to use a higher specificity. This means you don't have to worry about making sure your CSS selectors are specific enough to override the CSS selectors in Amplify UI's styles. Support for CSS Layers is pretty good, but we are introducing this as an opt-in feature. All CSS files have a regular CSS file version and a version with CSS Layers. To use CSS Layers with the example above, you would change the imports to this:\n\nCopy\nimport '@aws-amplify/ui-react/styles/reset.layer.css' // global CSS reset\nimport '@aws-amplify/ui-react/styles/base.layer.css' // base styling needed for Amplify UI\nimport '@aws-amplify/ui-react/styles/button.layer.css' // component specific styles\n\n\nYou can also use this for the main CSS export, '@aws-amplify/ui-react/styles.layer.css'.\n\nFonts\n\nBy default, Amplify UI does not bundle a font so that you can choose which font to use in your application and how you want to load the font. The default theme references the Inter font because it works well for UI design and is offered as a variable font. The easiest way to add the Inter font to your application is to use the Google Fonts CDN:\n\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  href=\"https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900&display=swap\"\n  rel=\"stylesheet\"\n/>\n\n\nor\n\n@import url('https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900&display=swap');\n\n\nYou can also install it as an NPM dependency:\n\nnpm\nyarn\nnpm install @fontsource/inter\nCopy\n\nThen import the variable font in your application:\n\nimport '@fontsource/inter/variable.css';\n\n\nCheck out Fontsource for more information and documentation on this library.\n\nIf you want to enable OpenType features like alternative styles, you can use the font directly from the creator's website: https://rsms.me/inter/\n\n@import url('https://rsms.me/inter/inter.css');\n\nhtml {\n  /* this enables some alternative styles and contextual characters to the font */\n  font-feature-settings: 'ss01', 'ss02', 'case', 'salt';\n}\n"
  },
  {
    "title": "Introduction | Amplify UI for React",
    "url": "https://ui.docs.amplify.aws/react/getting-started/introduction",
    "html": "Introduction\n\nWhat is Amplify UI?\n\nFeedback\n\nAmplify UI is an open-source UI library that brings the simplicity and extensibility of AWS Amplify to UI development. It consists of connected components that simplify complex workflows like authentication and dynamic data, primitive components that form the building blocks of a UI, and themes to make Amplify UI fit any brand. Extensibility and customization are at the forefront of Amplify UI allowing easy integration into any application regardless of the front-end tech stack.\n\nWe want to take care of the details, like accessibility and cloud connectivity, so developers can focus on their product.\n\nConnected components\n\nAmplify UI connected components abstract away complex front-end code like authentication and dynamic data to provide an intuitive API. Connected components are built on top of primitive components and Amplify Libraries.\n\nConnected components are completely customizable at every layer. Customize the look-and-feel with theming controls, override components and function calls, bring your own UI with a headless mode, or even go un-styled, giving you full control over state, layout, styling, and transitions.\n\nPrimitive components\n\nPrimitive components are React-only for now\n\nAmplify UI primitive components are in the middle of the spectrum between 'headless' UI frameworks like Radix and Headless UI, and 'batteries included' frameworks like MUI and Chakra. We want to provide a solid base that doesn't force a particular front-end architecture and every detail can be customized.\n\nAll the styling is handled by plain CSS and themeable with CSS variables. However we do provide some extra styling utilities in React-like responsive style props, ThemeProvider and useTheme hook, and useBreakpointValue for responsive values.\n\nAmplify UI primitive components adhere to WCAG (Web Content Accessibility Guidelines) and WAI-ARIA (Web Accessibility Initiative - Accessible Rich Internet Applications) specifications for accessibility including color contrast for low-vision users, and accessible labels, keyboard navigation, and focus state management for keyboard-only users.\n\nTenets\n\nMinimal footprint, maximum performance Good components are fast and use native styling systems when possible, adding less dependencies, smaller memory footprint, and minimizing side effects.\n\nEscape Hatches over ejections Users should be able to control any aspect of our components using their favorite tools without throwing everything away. We meet users where they are and play nicely with platforms and frameworks.\n\nAccessible by default Component implementations follows platform accessibility standards and best practices (e.g. WCAG 2.1AA for Web, Apple HIG for iOS).\n\nRespect the platform We want to share as much as possible between platforms (like themes and schemas), and respect each platform identity and rules when possible (e.g. following name conventions and idioms). For example, React components should feel like React components.\n\nCurrent status\n\nCurrently, the Authenticator is available for React, Angular, Vue, Flutter and Swift. The Android and React Native Authenticators are currently in developer preview. Primitive components are available for React, with Angular, Vue, and React Native coming soon.\n\nIf you are an Angular or Vue developer and want to get started, they share the same CSS as React so with the right class names (we use BEM syntax) you can at least get the styling and theming that React has!\n\nRoadmap\n\nUpcoming projects include:\n\nReact Native Authenticator\nImproved Storage components for React, Angular, and Vue\nPrimitives and theming for Angular and Vue\nData components and hooks for React\nMore primitives\n\nIf you would like to see something on our roadmap, let us know on Github."
  },
  {
    "title": "Amplify UI - Build UI fast with Amplify on React",
    "url": "https://ui.docs.amplify.aws/react",
    "html": "Themeable, accessible components\nReady to connect to the cloud\n\nAmplify UI is a collection of accessible, themeable, performant React (and more!) components that can connect directly to the cloud.\n\nCloud connected\nFocus on your UI and let us take care of the rest\nBuild visually\nCompose in your IDE—or visually with Amplify Studio\nStyling your way\nUse plain CSS, design tokens, or with your favorite CSS-in-JS library\nnpm i @aws-amplify/ui-react aws-amplify\nCopy\nGet started building\nOr try it out\nTake it for a test drive\n<Card variation=\"elevated\">\n  <Flex alignItems=\"flex-start\">\n    <Image src=\"/amplify-placeholder.svg\"\n      alt=\"Amplify\" width=\"8rem\"/>\n    <Flex direction=\"column\" gap=\"xs\">\n      <Flex>\n        <Badge variation=\"success\">New</Badge>\n      </Flex>\n      <Text fontSize=\"large\" fontWeight=\"semibold\">\n        Product title\n      </Text>\n      <Text color=\"font.tertiary\">\n        Product description\n      </Text>\n      <Text\n        fontSize=\"large\"\n        color=\"secondary\">\n        $199.99\n      </Text>\n      <Flex>\n        <StepperField\n          label=\"Quantity\"\n          min={0}\n          max={10}\n          step={1}\n          defaultValue={1}\n          labelHidden\n        />\n        <Button variation=\"primary\">Add to cart</Button>\n      </Flex>\n    </Flex>\n  </Flex>\n</Card>\nNew\n\nProduct title\n\nProduct description\n\n$199.99\n\nQuantity\nAdd to cart\nSpeed up development with over\n40 production-ready components\n\nAmplify UI components are built with plain React and CSS to provide a solid foundation for building UIs and design systems. These components are themeable, responsive, composable, and accessible. They play nicely with other UI components or styling frameworks.\n\nSwitch\n1\n…\n11\nPage:\n12\n13\n…\n99\nButton\nButton\nButton\nSports\nDonuts new\nSearch\nLanguage\nLanguage\nHTML\nCSS\njavascript\nSlider\n50\nSprinkles\nView all components\nAuthentication made easy\n\nAdd authentication to your app in under 10 lines of code using the Authenticator component. The Authenticator works seamlessly with the Amplify CLI to automatically work with your backend, no extra configuration needed! Customize every detail of the authentication flow with themes, overrides, or bring your own UI with a headless mode.\n\nhttps://localhost\nSign In\nCreate Account\nSign in\nUsername\nPassword\nPassword is hidden\nSign in\nForgot your password?\nindex.tsx\nimport { Amplify } from 'aws-amplify';\n\n\nimport { Authenticator } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\n\nimport awsExports from './aws-exports';\nAmplify.configure(awsExports);\n\n\nexport default function App() {\n  return (\n    <Authenticator>\n      {({ signOut, user }) => (\n        <main>\n          <h1>Hello {user.username}</h1>\n          <button onClick={signOut}>Sign out</button>\n        </main>\n      )}\n    </Authenticator>\n  );\n}\nGet started with the Authenticator\nTheming controls to match your brand\n\nCreate a unique look-and-feel for your application in minutes. Amplify UI uses design tokens and plain CSS so every detail can be customized. Dynamic theming for dark mode, responsive, and user preferences is easy with theme overrides.\n\nDefault\nTerminal\nSynthwave\nClassic\ntheme.ts\nimport { defaultDarkModeOverride } from '@aws-amplify/ui-react';\n\n\nconst theme = {\n  name: 'default-theme',\n  overrides: [defaultDarkModeOverride],\n};\nexport default theme;\n\n\nFlash sale!\nSm\nMd\nLg\nXL\n$29.99\n20% off\nAdd to cart\nSprinkles\nFrosting\nLanguage\nLanguage\nHTML\nCSS\nJavascript\nSlider\n50\nSearch\n\nAa\n\nAa\n\nAa\n\nAa\n\nAa\n\nAa\n\nswitch\nAmplify\nStudio new\nLearn more about theming\nBuild UI visually in Figma\n\nWith Amplify Studio you can design components in Figma, bind them to your data, and generate production-ready React code. Go from design to production-ready code in minutes and eliminate the design-development gap.\n\nProductCard\n\nAWS Amplify\n\n3.5 out of 5 rating\n\n$99\n\nAdd to cart\n\nProduct\n\nProduct.title\n\nProduct.rating\n\nProduct.price\n\n<ProductCard />\nLearn more about Figma integration\nBetter together with AWS Amplify\n\nBuild your application visually in Amplify Studio\n\nDeploy and manage your app backend with a GraphQL API, User login, File storage and more in minutes. Start small and build to the full scale of AWS! Build components visually in Figma, bind them to your data, and use them in your codebase.\nLearn more about Amplify Studio\n\nConnect your UI to your backend with Amplify libraries.\n\nAmplify Libraries offer an opinionated and declarative interfaces to connect to your backend. The libraries are pluggable and can be extended to use other providers.\nLearn more about Amplify Libraries\n\nDeploy your front-end in minutes with Amplify Hosting.\n\nFully managed web hosting with full-stack CI/CD. Amplify Hosting has support for common SPA and SSG frameworks like Next.js, Gatsby, and Eleventy.\nLearn more about Amplify Hosting\n\nAccessibility built-in\n\nAmplify UI components follow WCAG and WAI-ARIA best practices to ensure all users can use your application.\n\nColor contrast\n\nAll components have AA or higher contrast in both light and dark mode\n\nKeyboard navigation\n\nInteractive components support keyboard navigation users would expect\n\nFocus management\n\nFocusable components have proper focus states and interactivity\n\nAccessible labels\n\nForm fields and icons have accessible labels, plus there are utilities to help make sure your application is labelled.\n\nView our accessibility guidelines\nCompatible with your front-end\n\nEscape hatches\n\nConnected components like the Authenticator have headless, or UI-less, implementations that handle complex state management and leave the UI up to you.\n\nStyling optional\n\nDon‘t like our style? Throw it out and use your own! Amplify UI components use plain CSS so you have complete control over the styling.\n\nTypeScript & IntelliSense\n\nLet your IDE do the work for you and make UI development a breeze with strongly typed interfaces and inline documentation.\n\nLearn more about Amplify UI‘s design philosophy\nContribute on GitHub\nDiscuss on Discord\n\nAmplify open source software, documentation and community are supported by Amazon Web Services.\n\n© 2024 Amazon Web Services, Inc. and its affiliates. All rights reserved. View the site terms and privacy policy.\n\nFlutter and the related logo are trademarks of Google LLC. We are not endorsed by or affiliated with Google LLC."
  }
]