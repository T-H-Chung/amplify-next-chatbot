Title: CSS in JS | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/guides/css-in-js
HTML Content:
CSS in JS
Feedback

One of the goals of Amplify is to be a good citizen of the environment it exists in. As such Amplify works hard to not interfere with other tools that are being used.

There are many CSS In JS libraries out there that give a number of benefits. Amplify does not use a CSS In JS library to implement its theming system but operates well with the major CSS In JS libraries out there. Below are a few of the libraries with descriptions of how they work with Amplify's theming system.

If your CSS library depends on injecting style tags into the DOM, make sure they are being injected after Amplify UI's style tag. In other words, ensure the style tag for Amplify UI is listed above your custom styles in the <head> tag. If Amplify UI's styles are injected after custom styles, then your custom styles may be unset.

Styled Components
JSS
Emotion
Aphrodite

Styled Components allows you to create visual primitives with actual CSS code directly tied to components.

Usage
import * as React from 'react';
import styled from 'styled-components';
import { View } from '@aws-amplify/ui-react';

const StyledView = styled(View)`
  background-color: black;
  font-size: 32px;
`;

//use it like any other amplify-ui component
<StyledView color="red" className="my-styled-view">
  This is my Styled View
</StyledView>;

Interactions

There are various ways to customize an Amplify component and Styled Components will interact with these customizations in the following ways:

Amplify Styling Props

These are styling props that can be used directly on an Amplify component which will affect a single style property. Examples of styling props are color or fontWeight. These Amplify styling props will take precedence over Styled Component styling.

import * as React from 'react';
import styled from 'styled-components';
import { View } from '@aws-amplify/ui-react';

const StyledView = styled(View)`
  color: blue;
`;

<StyledView color="red">Using Styling props</StyledView>;


In the example above, the color of the view will be set to red because of the Amplify styling prop.

Amplify variation props

These props change the look and/or behavior of certain Amplify components. Examples include size and variation.

import * as React from 'react';
import styled from "styled-components";
import { Button } from '@aws-amplify/ui-react';

const StyledButton = styled(Button)`
  color: blue
`;

<StyledButton variation="primary">Primary Button</StyledButton>


In the example above, the color of the button will be set to blue. Although the primary variation has a color value of white the Styled Components color value of blue will take precedence over the amplify-ui variation styling.

Amplify Custom ClassNames

These are custom classnames added onto Amplify components and can be used with CSS styling rules to modify the look of an Amplify component.

import * as React from 'react';
import styled from 'styled-components';
import { View } from '@aws-amplify/ui-react';

const styledView = styled(View)`
  color: blue;
`;

<styledView className="my-styled-view">My Styled View</styledView>;

/* External Style Sheet */
.my-styled-view {
  color: red;
}


In the example above, the color of the view will be blue because the styled component will take precedence over the classname CSS.

CSS Root Variable Overrides

Amplify theming provides many CSS variables to customize the look and feel of the entire application. These CSS variables can be used with the :root CSS psuedo-class to override all instances of component styling.

import * as React from 'react';
import styled from 'styled-components';
import { Button } from '@aws-amplify/ui-react';

const StyledButton = styled(Button)`
  color: blue;
`;

<StyledButton>Button</StyledButton>;

/* External Style Sheet */
:root {
  --amplify-components-button-color: red;
}


In the example above, the button color will be set to blue because the Styled Component will take precedence over the Amplify CSS variable.

--------------------------------------------------------------------------------

Title: Overview | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/guides
HTML Content:
Overview
Feedback
Guides

Amplify guides are meant to give you a more in-depth understanding of how to use the Amplify UI components and theming to build out common functionality, end-to-end solutions, and frequently asked for workflows.

Overview

Guides are organized by topic, but some guides may overlap multiple topics (i.e. Authentication & Theming) to demonstrate how to integrate multiple services together.

Guides may combine the CLI and libraries together in a single tutorial. This is done to provide an end-to-end solution using both the service creation and configuration as well as connecting to and interacting with the service from a client-side application.

Contributing

If there is a guide or idea that you would like to see implemented that is not listed, open a GitHub Issue with the details of the use case and it will be reviewed by our team and considered.

If you have an idea for a guide that you'd like to write yourself, submit a pull request. However, make sure to submit an issue with the details of your idea before you submit your PR, so you can receive guidance and feedback.

--------------------------------------------------------------------------------

Title: Style Props | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/style-props
HTML Content:
Style Props
Feedback

These style props are available on Amplify UI primitive components and can be used to modify the corresponding styles. This allows users to quickly make style adjustments without having to go through CSS or add a theme object. Style props override any conflicting CSS style sheet or theme styling.

There are three ways of passing style props to a component:

Pass any valid CSS property directly (e.g., backgroundColor="red")
This is useful for rapid prototyping or styling a component which differs from the main theme
Use a design token from the Theme object by destructuring tokens from the useTheme hook (e.g., backgroundColor={tokens.colors.red[40]})
This method utilizes Amplify UI's theming capabilities, allowing for consistent design decisions as well as dynamic updates to the theme (e.g., light/dark mode).
Use the shorthand syntax to reference design tokens without using the useTheme hook (e.g., backgroundColor="red.40")
This is a convenient shorthand for method 2. However, not all design tokens have a shorthand mapping.
Background Styles
Background Styling Example
Copy
import { Card, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const BackgroundStylePropExample = () => {
  return (
    <Card backgroundColor="hsl(190, 95%, 30%)" color="#fff">
      Background Styling Example
    </Card>
  );
};

// use a design token from the theme object
export const BackgroundThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <Card
      backgroundColor={tokens.colors.primary[80]}
      color={tokens.colors.white}
    >
      Background Styling Example
    </Card>
  );
};

// use a design token name
export const BackgroundTokenNameExample = () => {
  return (
    <Card backgroundColor="primary.80" color="white">
      Background Styling Example
    </Card>
  );
};

Style Prop	CSS Property
backgroundColor	background-color
backgroundImage	background-image
Border Styles
Border Styling Example
Copy
import { Button, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const BorderStylePropExample = () => {
  return (
    <Button
      borderRadius="0.5rem"
      borderStyle="dashed"
      borderColor="hsl(190, 70%, 70%)"
      borderWidth="medium"
    >
      Border Styling Example
    </Button>
  );
};

// use a design token from the theme object
export const BorderThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <Button borderRadius={tokens.radii.medium}>Border Styling Example</Button>
  );
};

// use a design token name
export const BorderTokenNameExample = () => {
  return <Button borderRadius="medium">Border Styling Example</Button>;
};

Style Prop	CSS Property
border	border
borderStyle	border-style
borderRadius	border-radius
borderWidth	border-width
borderColor	border-color
Color Styles
Color Styling Example
Copy
import { Alert, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const ColorStylePropExample = () => {
  return (
    <Alert backgroundColor="#fff" color="hsl(190, 50%, 50%)">
      Color Styling Example
    </Alert>
  );
};

// use a design token from the theme object
export const ColorThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <Alert
      backgroundColor={tokens.colors.white}
      color={tokens.colors.primary[60]}
    >
      Color Styling Example
    </Alert>
  );
};

// use a design token name
export const ColorTokenNameExample = () => {
  return (
    <Alert backgroundColor="white" color="primary.60">
      Color Styling Example
    </Alert>
  );
};

Style Prop	CSS Property
color	color
opacity	opacity
Flex
Button 1
Button 2
Button 3
Copy
import { Button, Flex } from '@aws-amplify/ui-react';

// use any CSS value
export const FlexStylePropExample = () => {
  return (
    <Flex direction="column" wrap="wrap" alignItems="flex-start">
      <Button order="3">Button 1</Button>
      <Button order="1">Button 2</Button>
      <Button order="2">Button 3</Button>
    </Flex>
  );
};

Style Prop	CSS Property
direction	flex-direction
wrap	flex-wrap
flex	flex
order	order
grow	flex-grow
justifyContent	justify-content
alignContent	align-content
alignItems	align-items
alignSelf	align-self
shrink	flex-shrink
basis	flex-basis
Grid
A
B
C
D
Copy
import { Grid, Button } from '@aws-amplify/ui-react';

// use any CSS value
export const GridStylePropExample = () => {
  return (
    <Grid templateColumns="100px 100px 100px" gap="1rem">
      <Button column="1/3" row="1">
        A
      </Button>
      <Button column="3" row="1/3">
        B
      </Button>
      <Button column="1" row="2">
        C
      </Button>
      <Button column="2" row="2">
        D
      </Button>
    </Grid>
  );
};

Style Prop	CSS Property
autoColumns	grid-auto-columns
autoFlow	grid-auto-flow
autoRows	grid-auto-rows
templateAreas	grid-template-areas
templateColumns	grid-template-columns
templateRows	grid-template-rows
area	grid-area
column	grid-column
columnEnd	grid-column-end
columnSpan	grid-column
columnStart	grid-column-start
row	grid-row
rowEnd	grid-row-end
rowSpan	grid-row
rowStart	grid-row-start
gap	gap
columnGap	column-gap
rowGap	row-gap
Margin and Padding
Margin and Padding Styling Example
Copy
import { Button, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const MarginAndPaddingStylePropExample = () => {
  return (
    <Button padding="1rem" margin="1rem">
      Margin and Padding Styling Example
    </Button>
  );
};

// use a design token from the theme object
export const MarginAndPaddingThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <Button padding={tokens.space.large} margin={tokens.space.large}>
      Margin and Padding Styling Example
    </Button>
  );
};

// use a design token name
export const MarginAndPaddingTokenNameExample = () => {
  return (
    <Button padding="large" margin="large">
      Margin and Padding Styling Example
    </Button>
  );
};

Style Prop	CSS Property
margin	margin
marginBlock	margin-block
marginBlockEnd	margin-block-end
marginBlockStart	margin-block-start
marginBottom	margin-block-end
marginInline	margin-inline
marginInlineEnd	margin-inline-end
marginInlineStart	margin-inline-start
marginLeft	margin-inline-start
marginRight	margin-inline-end
marginTop	margin-block-start
padding	padding
paddingBlock	padding-block
paddingBlockEnd	padding-block-end
paddingBlockStart	padding-block-start
paddingBottom	padding-block-end
paddingInline	padding-inline
paddingInlineEnd	padding-inline-end
paddingInlineStart	padding-inline-start
paddingLeft	padding-inline-start
paddingRight	padding-inline-end
paddingTop	padding-block-start
Position Styles
Position Styling Example
Copy
import { Button, View, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const PositionStylePropExample = () => {
  return (
    <View
      position="relative"
      width="100%"
      height="4.5rem"
      border="1px solid hsl(210, 8%, 55%)"
    >
      <Button position="absolute" right="0.5rem" top="0.5rem">
        Position Styling Example
      </Button>
    </View>
  );
};

// use a design token from the theme object
export const PositionThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <View
      position="relative"
      width={tokens.space.relative.full}
      height={tokens.space.xxxl}
      border={`1px solid ${tokens.colors.border.primary}`}
    >
      <Button position="absolute" right={tokens.space.xs} top={tokens.space.xs}>
        Position Styling Example
      </Button>
    </View>
  );
};

// use a design token name
export const PositionTokenNameExample = () => {
  return (
    <View
      position="relative"
      width="relative.full"
      height="xxxl"
      border="1px solid hsl(210, 8%, 55%)"
    >
      <Button position="absolute" right="xs" top="xs">
        Position Styling Example
      </Button>
    </View>
  );
};

Style Prop	CSS Property
bottom	bottom
left	left
position	position
right	right
top	top
Size Styles
Copy
import { Card, View, Text, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const SizeStylePropExample = () => {
  return (
    <View
      backgroundColor="hsl(190, 50%, 50%)"
      width="4.5rem"
      height="4.5rem"
    ></View>
  );
};

// use a design token from the theme object
export const SizeThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <View
      backgroundColor={tokens.colors.primary[60]}
      width={tokens.space.xxxl}
      height={tokens.space.xxxl}
    ></View>
  );
};

// use a design token name
export const SizeTokenNameExample = () => {
  return <View backgroundColor="primary.60" width="xxxl" height="xxxl"></View>;
};

Style Prop	CSS Property
height	height
maxHeight	max-height
maxWidth	max-width
minHeight	min-height
minWidth	min-width
width	width
Shadow Styles
Shadow Styling Example
Copy
import { Button, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const ShadowStylePropExample = () => {
  return (
    <Button boxShadow="rgba(13, 26, 38, 0.25) 0px 4px 12px 0px">
      Shadow Styling Example
    </Button>
  );
};

// use a design token from the theme object
export const ShadowThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <Button boxShadow={`${tokens.shadows.large}`}>
      Shadow Styling Example
    </Button>
  );
};

// use a design token name
export const ShadowTokenNameExample = () => {
  return <Button boxShadow="large">Shadow Styling Example</Button>;
};

Style Prop	CSS Property
boxShadow	box-shadow
Typography Styles

Typography Styling Example

Copy
import { Text, useTheme } from '@aws-amplify/ui-react';

// use any CSS value
export const TypographyStylePropExample = () => {
  return (
    <Text fontSize="2rem" fontWeight="600" lineHeight="1.5">
      Typography Styling Example
    </Text>
  );
};

// use a design token from the theme object
export const TypographyThemeTokenExample = () => {
  const { tokens } = useTheme();
  return (
    <Text
      fontSize={tokens.fontSizes.xxl}
      fontWeight={tokens.fontWeights.semibold}
      lineHeight={tokens.lineHeights.medium}
    >
      Typography Styling Example
    </Text>
  );
};

// use a design token name
export const TypographyTokenNameExample = () => {
  return (
    <Text fontSize="xxl" fontWeight="semibold" lineHeight="medium">
      Typography Styling Example
    </Text>
  );
};

Style Prop	CSS Property
fontFamily	font-family
fontSize	font-size
fontStyle	font-style
fontWeight	font-weight
letterSpacing	letter-spacing
lineHeight	line-height
textAlign	text-align
textDecoration	text-decoration
textTransform	text-transform
whiteSpace	white-space
Other Styles

Below is a list of other style properties accepted by Amplify UI primitives.

Style Prop	CSS Property
aspectRatio	aspect-ratio
display	display
objectFit	object-fit
objectPosition	object-position
overflow	overflow
resize	resize
transform	transform
transformOrigin	transform-origin
Design Tokens

For a list of all available design tokens and their associated values please see colors, typography, and sizes

--------------------------------------------------------------------------------

Title: CSS Variables | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/css-variables
HTML Content:
CSS Variables
Feedback

These variables are used in Amplify UI. You can override these values to update the look and feel.

Amplify CSS Variable	Default Value
--amplify-border-widths-large	3px
--amplify-border-widths-medium	2px
--amplify-border-widths-small	1px
--amplify-colors-background-disabled	var(--amplify-colors-background-tertiary)
--amplify-colors-background-error	var(--amplify-colors-red-10)
--amplify-colors-background-info	var(--amplify-colors-blue-10)
--amplify-colors-background-primary	var(--amplify-colors-white)
--amplify-colors-background-quaternary	var(--amplify-colors-neutral-60)
--amplify-colors-background-secondary	var(--amplify-colors-neutral-10)
--amplify-colors-background-success	var(--amplify-colors-green-10)
--amplify-colors-background-tertiary	var(--amplify-colors-neutral-20)
--amplify-colors-background-warning	var(--amplify-colors-orange-10)
--amplify-colors-black	hsl(0, 0%, 0%)
--amplify-colors-blue-10	hsl(220, 95%, 95%)
--amplify-colors-blue-100	hsl(220, 100%, 15%)
--amplify-colors-blue-20	hsl(220, 85%, 85%)
--amplify-colors-blue-40	hsl(220, 70%, 70%)
--amplify-colors-blue-60	hsl(220, 50%, 50%)
--amplify-colors-blue-80	hsl(220, 95%, 30%)
--amplify-colors-blue-90	hsl(220, 100%, 20%)
--amplify-colors-border-disabled	var(--amplify-colors-border-tertiary)
--amplify-colors-border-error	var(--amplify-colors-red-80)
--amplify-colors-border-focus	var(--amplify-colors-primary-100)
--amplify-colors-border-info	var(--amplify-colors-blue-80)
--amplify-colors-border-pressed	var(--amplify-colors-primary-100)
--amplify-colors-border-primary	var(--amplify-colors-neutral-60)
--amplify-colors-border-secondary	var(--amplify-colors-neutral-40)
--amplify-colors-border-success	var(--amplify-colors-green-80)
--amplify-colors-border-tertiary	var(--amplify-colors-neutral-20)
--amplify-colors-border-warning	var(--amplify-colors-orange-80)
--amplify-colors-font-active	var(--amplify-colors-primary-100)
--amplify-colors-font-disabled	var(--amplify-colors-neutral-60)
--amplify-colors-font-error	var(--amplify-colors-red-90)
--amplify-colors-font-focus	var(--amplify-colors-primary-100)
--amplify-colors-font-hover	var(--amplify-colors-primary-90)
--amplify-colors-font-info	var(--amplify-colors-blue-90)
--amplify-colors-font-interactive	var(--amplify-colors-primary-80)
--amplify-colors-font-inverse	var(--amplify-colors-white)
--amplify-colors-font-primary	var(--amplify-colors-neutral-100)
--amplify-colors-font-secondary	var(--amplify-colors-neutral-90)
--amplify-colors-font-success	var(--amplify-colors-green-90)
--amplify-colors-font-tertiary	var(--amplify-colors-neutral-80)
--amplify-colors-font-warning	var(--amplify-colors-orange-90)
--amplify-colors-green-10	hsl(130, 60%, 95%)
--amplify-colors-green-100	hsl(130, 22%, 23%)
--amplify-colors-green-20	hsl(130, 60%, 90%)
--amplify-colors-green-40	hsl(130, 44%, 63%)
--amplify-colors-green-60	hsl(130, 43%, 46%)
--amplify-colors-green-80	hsl(130, 33%, 37%)
--amplify-colors-green-90	hsl(130, 27%, 29%)
--amplify-colors-neutral-10	hsl(210, 5%, 98%)
--amplify-colors-neutral-100	hsl(210, 50%, 10%)
--amplify-colors-neutral-20	hsl(210, 5%, 94%)
--amplify-colors-neutral-40	hsl(210, 5%, 87%)
--amplify-colors-neutral-60	hsl(210, 10%, 58%)
--amplify-colors-neutral-80	hsl(210, 10%, 40%)
--amplify-colors-neutral-90	hsl(210, 25%, 25%)
--amplify-colors-orange-10	hsl(30, 75%, 95%)
--amplify-colors-orange-100	hsl(30, 100%, 15%)
--amplify-colors-orange-20	hsl(30, 75%, 85%)
--amplify-colors-orange-40	hsl(30, 75%, 75%)
--amplify-colors-orange-60	hsl(30, 50%, 50%)
--amplify-colors-orange-80	hsl(30, 95%, 30%)
--amplify-colors-orange-90	hsl(30, 100%, 20%)
--amplify-colors-overlay-10	hsla(0, 0%, 0%, 0.1)
--amplify-colors-overlay-20	hsla(0, 0%, 0%, 0.2)
--amplify-colors-overlay-30	hsla(0, 0%, 0%, 0.3)
--amplify-colors-overlay-40	hsla(0, 0%, 0%, 0.4)
--amplify-colors-overlay-5	hsla(0, 0%, 0%, 0.05)
--amplify-colors-overlay-50	hsla(0, 0%, 0%, 0.5)
--amplify-colors-overlay-60	hsla(0, 0%, 0%, 0.6)
--amplify-colors-overlay-70	hsla(0, 0%, 0%, 0.7)
--amplify-colors-overlay-80	hsla(0, 0%, 0%, 0.8)
--amplify-colors-overlay-90	hsla(0, 0%, 0%, 0.9)
--amplify-colors-pink-10	hsl(340, 95%, 95%)
--amplify-colors-pink-100	hsl(340, 100%, 15%)
--amplify-colors-pink-20	hsl(340, 90%, 85%)
--amplify-colors-pink-40	hsl(340, 70%, 70%)
--amplify-colors-pink-60	hsl(340, 50%, 50%)
--amplify-colors-pink-80	hsl(340, 95%, 30%)
--amplify-colors-pink-90	hsl(340, 100%, 20%)
--amplify-colors-primary-10	var(--amplify-colors-teal-10)
--amplify-colors-primary-100	var(--amplify-colors-teal-100)
--amplify-colors-primary-20	var(--amplify-colors-teal-20)
--amplify-colors-primary-40	var(--amplify-colors-teal-40)
--amplify-colors-primary-60	var(--amplify-colors-teal-60)
--amplify-colors-primary-80	var(--amplify-colors-teal-80)
--amplify-colors-primary-90	var(--amplify-colors-teal-90)
--amplify-colors-purple-10	hsl(300, 95%, 95%)
--amplify-colors-purple-100	hsl(300, 100%, 15%)
--amplify-colors-purple-20	hsl(300, 85%, 85%)
--amplify-colors-purple-40	hsl(300, 70%, 70%)
--amplify-colors-purple-60	hsl(300, 50%, 50%)
--amplify-colors-purple-80	hsl(300, 95%, 30%)
--amplify-colors-purple-90	hsl(300, 100%, 20%)
--amplify-colors-red-10	hsl(0, 75%, 95%)
--amplify-colors-red-100	hsl(0, 100%, 15%)
--amplify-colors-red-20	hsl(0, 75%, 85%)
--amplify-colors-red-40	hsl(0, 75%, 75%)
--amplify-colors-red-60	hsl(0, 50%, 50%)
--amplify-colors-red-80	hsl(0, 95%, 30%)
--amplify-colors-red-90	hsl(0, 100%, 20%)
--amplify-colors-secondary-10	var(--amplify-colors-purple-10)
--amplify-colors-secondary-100	var(--amplify-colors-purple-100)
--amplify-colors-secondary-20	var(--amplify-colors-purple-20)
--amplify-colors-secondary-40	var(--amplify-colors-purple-40)
--amplify-colors-secondary-60	var(--amplify-colors-purple-60)
--amplify-colors-secondary-80	var(--amplify-colors-purple-80)
--amplify-colors-secondary-90	var(--amplify-colors-purple-90)
--amplify-colors-shadow-primary	hsla(210, 50%, 10%, 0.25)
--amplify-colors-shadow-secondary	hsla(210, 50%, 10%, 0.15)
--amplify-colors-shadow-tertiary	hsla(210, 50%, 10%, 0.05)
--amplify-colors-teal-10	hsl(190, 75%, 95%)
--amplify-colors-teal-100	hsl(190, 100%, 15%)
--amplify-colors-teal-20	hsl(190, 75%, 85%)
--amplify-colors-teal-40	hsl(190, 70%, 70%)
--amplify-colors-teal-60	hsl(190, 50%, 50%)
--amplify-colors-teal-80	hsl(190, 95%, 30%)
--amplify-colors-teal-90	hsl(190, 100%, 20%)
--amplify-colors-transparent	transparent
--amplify-colors-white	hsl(0, 0%, 100%)
--amplify-colors-yellow-10	hsl(60, 75%, 95%)
--amplify-colors-yellow-100	hsl(60, 100%, 15%)
--amplify-colors-yellow-20	hsl(60, 75%, 85%)
--amplify-colors-yellow-40	hsl(60, 75%, 75%)
--amplify-colors-yellow-60	hsl(60, 50%, 50%)
--amplify-colors-yellow-80	hsl(60, 95%, 30%)
--amplify-colors-yellow-90	hsl(60, 100%, 20%)
--amplify-components-accordion-background-color	var(--amplify-colors-background-primary)
--amplify-components-accordion-item-border-color	var(--amplify-colors-border-secondary)
--amplify-components-accordion-item-border-radius	var(--amplify-radii-small)
--amplify-components-accordion-item-border-style	solid
--amplify-components-accordion-item-border-width	var(--amplify-border-widths-small)
--amplify-components-accordion-item-content-color	inherit
--amplify-components-accordion-item-content-padding-block-end	var(--amplify-space-small)
--amplify-components-accordion-item-content-padding-block-start	var(--amplify-space-xxxs)
--amplify-components-accordion-item-content-padding-inline	var(--amplify-space-small)
--amplify-components-accordion-item-icon-color	var(--amplify-colors-font-tertiary)
--amplify-components-accordion-item-icon-transition-duration	var(--amplify-time-medium)
--amplify-components-accordion-item-icon-transition-timing-function	cubic-bezier(0.87, 0, 0.13, 1)
--amplify-components-accordion-item-trigger-align-items	center
--amplify-components-accordion-item-trigger-background-color	var(--amplify-colors-background-primary)
--amplify-components-accordion-item-trigger-color	inherit
--amplify-components-accordion-item-trigger-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-accordion-item-trigger-focus-box-shadow	0 0 0 2px var(--amplify-colors-border-focus)
--amplify-components-accordion-item-trigger-gap	var(--amplify-space-small)
--amplify-components-accordion-item-trigger-hover-background-color	var(--amplify-colors-overlay-5)
--amplify-components-accordion-item-trigger-hover-color	inherit
--amplify-components-accordion-item-trigger-justify-content	space-between
--amplify-components-accordion-item-trigger-padding-block	var(--amplify-space-xs)
--amplify-components-accordion-item-trigger-padding-inline	var(--amplify-space-small)
--amplify-components-alert-align-items	center
--amplify-components-alert-background-color	var(--amplify-colors-background-tertiary)
--amplify-components-alert-color	var(--amplify-colors-font-primary)
--amplify-components-alert-error-background-color	var(--amplify-colors-background-error)
--amplify-components-alert-error-color	var(--amplify-colors-font-error)
--amplify-components-alert-heading-font-size	var(--amplify-font-sizes-medium)
--amplify-components-alert-heading-font-weight	var(--amplify-font-weights-bold)
--amplify-components-alert-icon-size	var(--amplify-font-sizes-xl)
--amplify-components-alert-info-background-color	var(--amplify-colors-background-info)
--amplify-components-alert-info-color	var(--amplify-colors-font-info)
--amplify-components-alert-justify-content	space-between
--amplify-components-alert-padding-block	var(--amplify-space-small)
--amplify-components-alert-padding-inline	var(--amplify-space-medium)
--amplify-components-alert-success-background-color	var(--amplify-colors-background-success)
--amplify-components-alert-success-color	var(--amplify-colors-font-success)
--amplify-components-alert-warning-background-color	var(--amplify-colors-background-warning)
--amplify-components-alert-warning-color	var(--amplify-colors-font-warning)
--amplify-components-authenticator-container-width-max	30rem
--amplify-components-authenticator-footer-padding-bottom	var(--amplify-space-medium)
--amplify-components-authenticator-form-padding	var(--amplify-space-xl)
--amplify-components-authenticator-max-width	60rem
--amplify-components-authenticator-modal-background-color	var(--amplify-colors-overlay-50)
--amplify-components-authenticator-modal-height	var(--amplify-space-relative-full)
--amplify-components-authenticator-modal-left	var(--amplify-space-zero)
--amplify-components-authenticator-modal-top	var(--amplify-space-zero)
--amplify-components-authenticator-modal-width	var(--amplify-space-relative-full)
--amplify-components-authenticator-or-container-color	var(--amplify-colors-neutral-80)
--amplify-components-authenticator-or-container-or-line-background-color	var(--amplify-colors-background-primary)
--amplify-components-authenticator-router-background-color	var(--amplify-colors-background-primary)
--amplify-components-authenticator-router-border-color	var(--amplify-colors-border-primary)
--amplify-components-authenticator-router-border-style	solid
--amplify-components-authenticator-router-border-width	var(--amplify-border-widths-small)
--amplify-components-authenticator-router-box-shadow	var(--amplify-shadows-medium)
--amplify-components-authenticator-state-inactive-background-color	var(--amplify-colors-background-secondary)
--amplify-components-autocomplete-menu-background-color	var(--amplify-colors-background-primary)
--amplify-components-autocomplete-menu-border-color	var(--amplify-colors-border-primary)
--amplify-components-autocomplete-menu-border-radius	var(--amplify-radii-small)
--amplify-components-autocomplete-menu-border-style	solid
--amplify-components-autocomplete-menu-border-width	var(--amplify-border-widths-small)
--amplify-components-autocomplete-menu-empty-display	flex
--amplify-components-autocomplete-menu-loading-align-items	center
--amplify-components-autocomplete-menu-loading-display	flex
--amplify-components-autocomplete-menu-loading-gap	var(--amplify-space-xxxs)
--amplify-components-autocomplete-menu-margin-block-start	var(--amplify-space-xxxs)
--amplify-components-autocomplete-menu-option-active-background-color	var(--amplify-colors-primary-80)
--amplify-components-autocomplete-menu-option-active-color	var(--amplify-colors-white)
--amplify-components-autocomplete-menu-option-background-color	var(--amplify-colors-background-primary)
--amplify-components-autocomplete-menu-option-color	currentcolor
--amplify-components-autocomplete-menu-option-cursor	pointer
--amplify-components-autocomplete-menu-option-transition-duration	var(--amplify-time-short)
--amplify-components-autocomplete-menu-option-transition-property	background-color, color
--amplify-components-autocomplete-menu-option-transition-timing-function	ease
--amplify-components-autocomplete-menu-options-display	flex
--amplify-components-autocomplete-menu-options-flex-direction	column
--amplify-components-autocomplete-menu-options-max-height	300px
--amplify-components-autocomplete-menu-space-shared-padding-block	var(--amplify-space-xs)
--amplify-components-autocomplete-menu-space-shared-padding-inline	var(--amplify-space-small)
--amplify-components-autocomplete-menu-width	100%
--amplify-components-badge-background-color	var(--amplify-colors-background-tertiary)
--amplify-components-badge-border-radius	var(--amplify-radii-xl)
--amplify-components-badge-color	var(--amplify-colors-font-primary)
--amplify-components-badge-error-background-color	var(--amplify-colors-background-error)
--amplify-components-badge-error-color	var(--amplify-colors-font-error)
--amplify-components-badge-font-size	var(--amplify-font-sizes-small)
--amplify-components-badge-font-weight	var(--amplify-font-weights-semibold)
--amplify-components-badge-info-background-color	var(--amplify-colors-background-info)
--amplify-components-badge-info-color	var(--amplify-colors-font-info)
--amplify-components-badge-large-font-size	var(--amplify-font-sizes-medium)
--amplify-components-badge-large-padding-horizontal	var(--amplify-space-medium)
--amplify-components-badge-large-padding-vertical	var(--amplify-space-small)
--amplify-components-badge-line-height	1
--amplify-components-badge-padding-horizontal	var(--amplify-space-small)
--amplify-components-badge-padding-vertical	var(--amplify-space-xs)
--amplify-components-badge-small-font-size	var(--amplify-font-sizes-xs)
--amplify-components-badge-small-padding-horizontal	var(--amplify-space-xs)
--amplify-components-badge-small-padding-vertical	var(--amplify-space-xxs)
--amplify-components-badge-success-background-color	var(--amplify-colors-background-success)
--amplify-components-badge-success-color	var(--amplify-colors-font-success)
--amplify-components-badge-text-align	center
--amplify-components-badge-warning-background-color	var(--amplify-colors-background-warning)
--amplify-components-badge-warning-color	var(--amplify-colors-font-warning)
--amplify-components-breadcrumbs-color	var(--amplify-colors-font-tertiary)
--amplify-components-breadcrumbs-flex-direction	row
--amplify-components-breadcrumbs-flex-wrap	wrap
--amplify-components-breadcrumbs-gap	0
--amplify-components-breadcrumbs-item-align-items	center
--amplify-components-breadcrumbs-item-color	inherit
--amplify-components-breadcrumbs-item-flex-direction	row
--amplify-components-breadcrumbs-item-font-size	inherit
--amplify-components-breadcrumbs-item-line-height	1
--amplify-components-breadcrumbs-link-color	var(--amplify-components-link-color)
--amplify-components-breadcrumbs-link-current-color	inherit
--amplify-components-breadcrumbs-link-current-font-size	inherit
--amplify-components-breadcrumbs-link-current-font-weight	normal
--amplify-components-breadcrumbs-link-current-text-decoration	none
--amplify-components-breadcrumbs-link-font-size	inherit
--amplify-components-breadcrumbs-link-font-weight	normal
--amplify-components-breadcrumbs-link-padding-block	var(--amplify-space-xxs)
--amplify-components-breadcrumbs-link-padding-inline	var(--amplify-space-xs)
--amplify-components-breadcrumbs-link-text-decoration	none
--amplify-components-breadcrumbs-separator-color	inherit
--amplify-components-breadcrumbs-separator-font-size	inherit
--amplify-components-breadcrumbs-separator-padding-inline	var(--amplify-space-xxs)
--amplify-components-button-active-background-color	var(--amplify-colors-primary-20)
--amplify-components-button-active-border-color	var(--amplify-colors-primary-100)
--amplify-components-button-active-color	var(--amplify-colors-font-active)
--amplify-components-button-background-color	transparent
--amplify-components-button-border-color	var(--amplify-components-fieldcontrol-border-color)
--amplify-components-button-border-radius	var(--amplify-components-fieldcontrol-border-radius)
--amplify-components-button-border-style	var(--amplify-components-fieldcontrol-border-style)
--amplify-components-button-border-width	var(--amplify-components-fieldcontrol-border-width)
--amplify-components-button-color	var(--amplify-colors-font-primary)
--amplify-components-button-destructive-active-background-color	var(--amplify-colors-red-100)
--amplify-components-button-destructive-active-border-color	transparent
--amplify-components-button-destructive-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-destructive-background-color	var(--amplify-colors-red-60)
--amplify-components-button-destructive-border-color	transparent
--amplify-components-button-destructive-border-style	solid
--amplify-components-button-destructive-border-width	var(--amplify-border-widths-small)
--amplify-components-button-destructive-color	var(--amplify-colors-font-inverse)
--amplify-components-button-destructive-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-button-destructive-disabled-border-color	transparent
--amplify-components-button-destructive-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-button-destructive-focus-background-color	var(--amplify-colors-red-80)
--amplify-components-button-destructive-focus-border-color	transparent
--amplify-components-button-destructive-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-button-destructive-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-destructive-hover-background-color	var(--amplify-colors-red-80)
--amplify-components-button-destructive-hover-border-color	transparent
--amplify-components-button-destructive-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-destructive-loading-background-color	var(--amplify-colors-background-disabled)
--amplify-components-button-destructive-loading-border-color	transparent
--amplify-components-button-destructive-loading-color	var(--amplify-colors-font-disabled)
--amplify-components-button-disabled-background-color	transparent
--amplify-components-button-disabled-border-color	var(--amplify-colors-border-tertiary)
--amplify-components-button-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-button-focus-background-color	var(--amplify-colors-primary-10)
--amplify-components-button-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-button-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-button-focus-color	var(--amplify-colors-font-focus)
--amplify-components-button-font-size	var(--amplify-components-fieldcontrol-font-size)
--amplify-components-button-font-weight	var(--amplify-font-weights-bold)
--amplify-components-button-hover-background-color	var(--amplify-colors-primary-10)
--amplify-components-button-hover-border-color	var(--amplify-colors-primary-60)
--amplify-components-button-hover-color	var(--amplify-colors-font-focus)
--amplify-components-button-large-font-size	var(--amplify-components-fieldcontrol-large-font-size)
--amplify-components-button-large-padding-block-end	var(--amplify-components-fieldcontrol-large-padding-block-end)
--amplify-components-button-large-padding-block-start	var(--amplify-components-fieldcontrol-large-padding-block-start)
--amplify-components-button-large-padding-inline-end	var(--amplify-components-fieldcontrol-large-padding-inline-end)
--amplify-components-button-large-padding-inline-start	var(--amplify-components-fieldcontrol-large-padding-inline-start)
--amplify-components-button-line-height	var(--amplify-components-fieldcontrol-line-height)
--amplify-components-button-link-active-background-color	var(--amplify-colors-primary-20)
--amplify-components-button-link-active-border-color	transparent
--amplify-components-button-link-active-color	var(--amplify-colors-font-active)
--amplify-components-button-link-background-color	transparent
--amplify-components-button-link-border-color	transparent
--amplify-components-button-link-border-width	var(--amplify-border-widths-small)
--amplify-components-button-link-color	var(--amplify-colors-font-interactive)
--amplify-components-button-link-disabled-background-color	transparent
--amplify-components-button-link-disabled-border-color	transparent
--amplify-components-button-link-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-button-link-error-active-background-color	var(--amplify-colors-red-20)
--amplify-components-button-link-error-active-border-color	transparent
--amplify-components-button-link-error-active-color	var(--amplify-colors-red-100)
--amplify-components-button-link-error-background-color	transparent
--amplify-components-button-link-error-border-color	transparent
--amplify-components-button-link-error-color	var(--amplify-colors-red-100)
--amplify-components-button-link-error-focus-background-color	var(--amplify-colors-red-10)
--amplify-components-button-link-error-focus-border-color	transparent
--amplify-components-button-link-error-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-button-link-error-focus-color	var(--amplify-colors-red-100)
--amplify-components-button-link-error-hover-background-color	var(--amplify-colors-red-10)
--amplify-components-button-link-error-hover-border-color	transparent
--amplify-components-button-link-error-hover-color	var(--amplify-colors-red-90)
--amplify-components-button-link-focus-background-color	var(--amplify-colors-primary-10)
--amplify-components-button-link-focus-border-color	transparent
--amplify-components-button-link-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-button-link-focus-color	var(--amplify-colors-font-focus)
--amplify-components-button-link-hover-background-color	var(--amplify-colors-primary-10)
--amplify-components-button-link-hover-border-color	transparent
--amplify-components-button-link-hover-color	var(--amplify-colors-font-hover)
--amplify-components-button-link-info-active-background-color	var(--amplify-colors-blue-20)
--amplify-components-button-link-info-active-border-color	transparent
--amplify-components-button-link-info-active-color	var(--amplify-colors-blue-100)
--amplify-components-button-link-info-background-color	transparent
--amplify-components-button-link-info-border-color	transparent
--amplify-components-button-link-info-color	var(--amplify-colors-blue-100)
--amplify-components-button-link-info-focus-background-color	var(--amplify-colors-blue-10)
--amplify-components-button-link-info-focus-border-color	transparent
--amplify-components-button-link-info-focus-box-shadow	var(--amplify-components-fieldcontrol-info-focus-box-shadow)
--amplify-components-button-link-info-focus-color	var(--amplify-colors-blue-100)
--amplify-components-button-link-info-hover-background-color	var(--amplify-colors-blue-10)
--amplify-components-button-link-info-hover-border-color	transparent
--amplify-components-button-link-info-hover-color	var(--amplify-colors-blue-90)
--amplify-components-button-link-loading-background-color	transparent
--amplify-components-button-link-loading-border-color	transparent
--amplify-components-button-link-loading-color	var(--amplify-colors-font-disabled)
--amplify-components-button-link-overlay-active-background-color	var(--amplify-colors-overlay-10)
--amplify-components-button-link-overlay-active-border-color	transparent
--amplify-components-button-link-overlay-active-color	var(--amplify-colors-overlay-90)
--amplify-components-button-link-overlay-background-color	transparent
--amplify-components-button-link-overlay-border-color	transparent
--amplify-components-button-link-overlay-color	var(--amplify-colors-neutral-100)
--amplify-components-button-link-overlay-focus-background-color	var(--amplify-colors-overlay-5)
--amplify-components-button-link-overlay-focus-border-color	transparent
--amplify-components-button-link-overlay-focus-box-shadow	var(--amplify-components-fieldcontrol-overlay-focus-box-shadow)
--amplify-components-button-link-overlay-focus-color	var(--amplify-colors-overlay-90)
--amplify-components-button-link-overlay-hover-background-color	var(--amplify-colors-overlay-5)
--amplify-components-button-link-overlay-hover-border-color	transparent
--amplify-components-button-link-overlay-hover-color	var(--amplify-colors-overlay-80)
--amplify-components-button-link-success-active-background-color	var(--amplify-colors-green-20)
--amplify-components-button-link-success-active-border-color	transparent
--amplify-components-button-link-success-active-color	var(--amplify-colors-green-100)
--amplify-components-button-link-success-background-color	transparent
--amplify-components-button-link-success-border-color	transparent
--amplify-components-button-link-success-color	var(--amplify-colors-green-100)
--amplify-components-button-link-success-focus-background-color	var(--amplify-colors-green-10)
--amplify-components-button-link-success-focus-border-color	transparent
--amplify-components-button-link-success-focus-box-shadow	var(--amplify-components-fieldcontrol-success-focus-box-shadow)
--amplify-components-button-link-success-focus-color	var(--amplify-colors-green-100)
--amplify-components-button-link-success-hover-background-color	var(--amplify-colors-green-10)
--amplify-components-button-link-success-hover-border-color	transparent
--amplify-components-button-link-success-hover-color	var(--amplify-colors-green-90)
--amplify-components-button-link-warning-active-background-color	var(--amplify-colors-orange-20)
--amplify-components-button-link-warning-active-border-color	transparent
--amplify-components-button-link-warning-active-color	var(--amplify-colors-orange-100)
--amplify-components-button-link-warning-background-color	transparent
--amplify-components-button-link-warning-border-color	transparent
--amplify-components-button-link-warning-color	var(--amplify-colors-orange-100)
--amplify-components-button-link-warning-focus-background-color	var(--amplify-colors-orange-10)
--amplify-components-button-link-warning-focus-border-color	transparent
--amplify-components-button-link-warning-focus-box-shadow	var(--amplify-components-fieldcontrol-warning-focus-box-shadow)
--amplify-components-button-link-warning-focus-color	var(--amplify-colors-orange-100)
--amplify-components-button-link-warning-hover-background-color	var(--amplify-colors-orange-10)
--amplify-components-button-link-warning-hover-border-color	transparent
--amplify-components-button-link-warning-hover-color	var(--amplify-colors-orange-90)
--amplify-components-button-loader-wrapper-align-items	center
--amplify-components-button-loader-wrapper-gap	var(--amplify-space-xs)
--amplify-components-button-loading-background-color	transparent
--amplify-components-button-loading-border-color	var(--amplify-colors-border-tertiary)
--amplify-components-button-loading-color	var(--amplify-colors-font-disabled)
--amplify-components-button-menu-active-background-color	var(--amplify-colors-primary-90)
--amplify-components-button-menu-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-menu-background-color	transparent
--amplify-components-button-menu-border-width	var(--amplify-space-zero)
--amplify-components-button-menu-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-button-menu-focus-background-color	var(--amplify-colors-primary-80)
--amplify-components-button-menu-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-menu-hover-background-color	var(--amplify-colors-primary-80)
--amplify-components-button-menu-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-menu-justify-content	start
--amplify-components-button-outlined-error-active-background-color	var(--amplify-colors-red-20)
--amplify-components-button-outlined-error-active-border-color	var(--amplify-colors-red-100)
--amplify-components-button-outlined-error-active-color	var(--amplify-colors-red-100)
--amplify-components-button-outlined-error-background-color	transparent
--amplify-components-button-outlined-error-border-color	var(--amplify-colors-red-80)
--amplify-components-button-outlined-error-color	var(--amplify-colors-red-100)
--amplify-components-button-outlined-error-focus-background-color	var(--amplify-colors-red-10)
--amplify-components-button-outlined-error-focus-border-color	var(--amplify-colors-red-100)
--amplify-components-button-outlined-error-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-button-outlined-error-focus-color	var(--amplify-colors-red-100)
--amplify-components-button-outlined-error-hover-background-color	var(--amplify-colors-red-10)
--amplify-components-button-outlined-error-hover-border-color	var(--amplify-colors-red-80)
--amplify-components-button-outlined-error-hover-color	var(--amplify-colors-red-100)
--amplify-components-button-outlined-info-active-background-color	var(--amplify-colors-blue-20)
--amplify-components-button-outlined-info-active-border-color	var(--amplify-colors-blue-100)
--amplify-components-button-outlined-info-active-color	var(--amplify-colors-blue-100)
--amplify-components-button-outlined-info-background-color	transparent
--amplify-components-button-outlined-info-border-color	var(--amplify-colors-blue-60)
--amplify-components-button-outlined-info-color	var(--amplify-colors-blue-100)
--amplify-components-button-outlined-info-focus-background-color	var(--amplify-colors-blue-10)
--amplify-components-button-outlined-info-focus-border-color	var(--amplify-colors-blue-100)
--amplify-components-button-outlined-info-focus-box-shadow	var(--amplify-components-fieldcontrol-info-focus-box-shadow)
--amplify-components-button-outlined-info-focus-color	var(--amplify-colors-blue-100)
--amplify-components-button-outlined-info-hover-background-color	var(--amplify-colors-blue-10)
--amplify-components-button-outlined-info-hover-border-color	var(--amplify-colors-blue-60)
--amplify-components-button-outlined-info-hover-color	var(--amplify-colors-blue-100)
--amplify-components-button-outlined-overlay-active-background-color	var(--amplify-colors-overlay-10)
--amplify-components-button-outlined-overlay-active-border-color	var(--amplify-colors-overlay-90)
--amplify-components-button-outlined-overlay-active-color	var(--amplify-colors-neutral-100)
--amplify-components-button-outlined-overlay-background-color	transparent
--amplify-components-button-outlined-overlay-border-color	var(--amplify-colors-overlay-60)
--amplify-components-button-outlined-overlay-color	var(--amplify-colors-font-primary)
--amplify-components-button-outlined-overlay-focus-background-color	var(--amplify-colors-overlay-5)
--amplify-components-button-outlined-overlay-focus-border-color	var(--amplify-colors-overlay-90)
--amplify-components-button-outlined-overlay-focus-box-shadow	var(--amplify-components-fieldcontrol-overlay-focus-box-shadow)
--amplify-components-button-outlined-overlay-focus-color	var(--amplify-colors-neutral-90)
--amplify-components-button-outlined-overlay-hover-background-color	var(--amplify-colors-overlay-5)
--amplify-components-button-outlined-overlay-hover-border-color	var(--amplify-colors-overlay-60)
--amplify-components-button-outlined-overlay-hover-color	var(--amplify-colors-neutral-90)
--amplify-components-button-outlined-success-active-background-color	var(--amplify-colors-green-20)
--amplify-components-button-outlined-success-active-border-color	var(--amplify-colors-green-100)
--amplify-components-button-outlined-success-active-color	var(--amplify-colors-green-100)
--amplify-components-button-outlined-success-background-color	transparent
--amplify-components-button-outlined-success-border-color	var(--amplify-colors-green-60)
--amplify-components-button-outlined-success-color	var(--amplify-colors-green-100)
--amplify-components-button-outlined-success-focus-background-color	var(--amplify-colors-green-10)
--amplify-components-button-outlined-success-focus-border-color	var(--amplify-colors-green-100)
--amplify-components-button-outlined-success-focus-box-shadow	var(--amplify-components-fieldcontrol-success-focus-box-shadow)
--amplify-components-button-outlined-success-focus-color	var(--amplify-colors-green-100)
--amplify-components-button-outlined-success-hover-background-color	var(--amplify-colors-green-10)
--amplify-components-button-outlined-success-hover-border-color	var(--amplify-colors-green-60)
--amplify-components-button-outlined-success-hover-color	var(--amplify-colors-green-100)
--amplify-components-button-outlined-warning-active-background-color	var(--amplify-colors-orange-20)
--amplify-components-button-outlined-warning-active-border-color	var(--amplify-colors-orange-100)
--amplify-components-button-outlined-warning-active-color	var(--amplify-colors-orange-100)
--amplify-components-button-outlined-warning-background-color	transparent
--amplify-components-button-outlined-warning-border-color	var(--amplify-colors-orange-60)
--amplify-components-button-outlined-warning-color	var(--amplify-colors-orange-100)
--amplify-components-button-outlined-warning-focus-background-color	var(--amplify-colors-orange-10)
--amplify-components-button-outlined-warning-focus-border-color	var(--amplify-colors-orange-100)
--amplify-components-button-outlined-warning-focus-box-shadow	var(--amplify-components-fieldcontrol-warning-focus-box-shadow)
--amplify-components-button-outlined-warning-focus-color	var(--amplify-colors-orange-100)
--amplify-components-button-outlined-warning-hover-background-color	var(--amplify-colors-orange-10)
--amplify-components-button-outlined-warning-hover-border-color	var(--amplify-colors-orange-60)
--amplify-components-button-outlined-warning-hover-color	var(--amplify-colors-orange-100)
--amplify-components-button-padding-block-end	var(--amplify-components-fieldcontrol-padding-block-end)
--amplify-components-button-padding-block-start	var(--amplify-components-fieldcontrol-padding-block-start)
--amplify-components-button-padding-inline-end	var(--amplify-components-fieldcontrol-padding-inline-end)
--amplify-components-button-padding-inline-start	var(--amplify-components-fieldcontrol-padding-inline-start)
--amplify-components-button-primary-active-background-color	var(--amplify-colors-primary-100)
--amplify-components-button-primary-active-border-color	transparent
--amplify-components-button-primary-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-background-color	var(--amplify-colors-primary-80)
--amplify-components-button-primary-border-color	transparent
--amplify-components-button-primary-border-style	solid
--amplify-components-button-primary-border-width	var(--amplify-border-widths-small)
--amplify-components-button-primary-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-button-primary-disabled-border-color	transparent
--amplify-components-button-primary-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-button-primary-error-active-background-color	var(--amplify-colors-red-100)
--amplify-components-button-primary-error-active-border-color	transparent
--amplify-components-button-primary-error-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-error-background-color	var(--amplify-colors-red-80)
--amplify-components-button-primary-error-border-color	transparent
--amplify-components-button-primary-error-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-error-focus-background-color	var(--amplify-colors-red-90)
--amplify-components-button-primary-error-focus-border-color	transparent
--amplify-components-button-primary-error-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-button-primary-error-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-error-hover-background-color	var(--amplify-colors-red-90)
--amplify-components-button-primary-error-hover-border-color	transparent
--amplify-components-button-primary-error-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-focus-background-color	var(--amplify-colors-primary-90)
--amplify-components-button-primary-focus-border-color	transparent
--amplify-components-button-primary-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-button-primary-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-hover-background-color	var(--amplify-colors-primary-90)
--amplify-components-button-primary-hover-border-color	transparent
--amplify-components-button-primary-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-info-active-background-color	var(--amplify-colors-blue-100)
--amplify-components-button-primary-info-active-border-color	transparent
--amplify-components-button-primary-info-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-info-background-color	var(--amplify-colors-blue-80)
--amplify-components-button-primary-info-border-color	transparent
--amplify-components-button-primary-info-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-info-focus-background-color	var(--amplify-colors-blue-90)
--amplify-components-button-primary-info-focus-border-color	transparent
--amplify-components-button-primary-info-focus-box-shadow	var(--amplify-components-fieldcontrol-info-focus-box-shadow)
--amplify-components-button-primary-info-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-info-hover-background-color	var(--amplify-colors-blue-90)
--amplify-components-button-primary-info-hover-border-color	transparent
--amplify-components-button-primary-info-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-loading-background-color	var(--amplify-colors-background-disabled)
--amplify-components-button-primary-loading-border-color	transparent
--amplify-components-button-primary-loading-color	var(--amplify-colors-font-disabled)
--amplify-components-button-primary-overlay-active-background-color	var(--amplify-colors-overlay-90)
--amplify-components-button-primary-overlay-active-border-color	transparent
--amplify-components-button-primary-overlay-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-overlay-background-color	var(--amplify-colors-overlay-70)
--amplify-components-button-primary-overlay-border-color	transparent
--amplify-components-button-primary-overlay-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-overlay-focus-background-color	var(--amplify-colors-overlay-90)
--amplify-components-button-primary-overlay-focus-border-color	transparent
--amplify-components-button-primary-overlay-focus-box-shadow	var(--amplify-components-fieldcontrol-overlay-focus-box-shadow)
--amplify-components-button-primary-overlay-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-overlay-hover-background-color	var(--amplify-colors-overlay-90)
--amplify-components-button-primary-overlay-hover-border-color	transparent
--amplify-components-button-primary-overlay-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-success-active-background-color	var(--amplify-colors-green-100)
--amplify-components-button-primary-success-active-border-color	transparent
--amplify-components-button-primary-success-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-success-background-color	var(--amplify-colors-green-80)
--amplify-components-button-primary-success-border-color	transparent
--amplify-components-button-primary-success-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-success-focus-background-color	var(--amplify-colors-green-90)
--amplify-components-button-primary-success-focus-border-color	transparent
--amplify-components-button-primary-success-focus-box-shadow	var(--amplify-components-fieldcontrol-success-focus-box-shadow)
--amplify-components-button-primary-success-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-success-hover-background-color	var(--amplify-colors-green-90)
--amplify-components-button-primary-success-hover-border-color	transparent
--amplify-components-button-primary-success-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-warning-active-background-color	var(--amplify-colors-orange-100)
--amplify-components-button-primary-warning-active-border-color	transparent
--amplify-components-button-primary-warning-active-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-warning-background-color	var(--amplify-colors-orange-80)
--amplify-components-button-primary-warning-border-color	transparent
--amplify-components-button-primary-warning-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-warning-focus-background-color	var(--amplify-colors-orange-90)
--amplify-components-button-primary-warning-focus-border-color	transparent
--amplify-components-button-primary-warning-focus-box-shadow	var(--amplify-components-fieldcontrol-overlay-focus-box-shadow)
--amplify-components-button-primary-warning-focus-color	var(--amplify-colors-font-inverse)
--amplify-components-button-primary-warning-hover-background-color	var(--amplify-colors-orange-90)
--amplify-components-button-primary-warning-hover-border-color	transparent
--amplify-components-button-primary-warning-hover-color	var(--amplify-colors-font-inverse)
--amplify-components-button-small-font-size	var(--amplify-components-fieldcontrol-small-font-size)
--amplify-components-button-small-padding-block-end	var(--amplify-components-fieldcontrol-small-padding-block-end)
--amplify-components-button-small-padding-block-start	var(--amplify-components-fieldcontrol-small-padding-block-start)
--amplify-components-button-small-padding-inline-end	var(--amplify-components-fieldcontrol-small-padding-inline-end)
--amplify-components-button-small-padding-inline-start	var(--amplify-components-fieldcontrol-small-padding-inline-start)
--amplify-components-button-transition-duration	var(--amplify-components-fieldcontrol-transition-duration)
--amplify-components-button-warning-active-background-color	var(--amplify-colors-red-20)
--amplify-components-button-warning-active-border-color	var(--amplify-colors-red-100)
--amplify-components-button-warning-active-color	var(--amplify-colors-red-100)
--amplify-components-button-warning-background-color	transparent
--amplify-components-button-warning-border-color	var(--amplify-colors-red-60)
--amplify-components-button-warning-border-width	var(--amplify-border-widths-small)
--amplify-components-button-warning-color	var(--amplify-colors-red-60)
--amplify-components-button-warning-disabled-background-color	transparent
--amplify-components-button-warning-disabled-border-color	var(--amplify-colors-border-tertiary)
--amplify-components-button-warning-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-button-warning-focus-background-color	var(--amplify-colors-red-10)
--amplify-components-button-warning-focus-border-color	var(--amplify-colors-red-80)
--amplify-components-button-warning-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-button-warning-focus-color	var(--amplify-colors-red-80)
--amplify-components-button-warning-hover-background-color	var(--amplify-colors-red-10)
--amplify-components-button-warning-hover-border-color	var(--amplify-colors-red-80)
--amplify-components-button-warning-hover-color	var(--amplify-colors-font-error)
--amplify-components-button-warning-loading-background-color	transparent
--amplify-components-button-warning-loading-border-color	var(--amplify-colors-border-tertiary)
--amplify-components-button-warning-loading-color	var(--amplify-colors-font-disabled)
--amplify-components-card-background-color	var(--amplify-colors-background-primary)
--amplify-components-card-border-color	transparent
--amplify-components-card-border-radius	var(--amplify-radii-xs)
--amplify-components-card-border-style	solid
--amplify-components-card-border-width	0
--amplify-components-card-box-shadow	none
--amplify-components-card-elevated-background-color	var(--amplify-components-card-background-color)
--amplify-components-card-elevated-border-color	transparent
--amplify-components-card-elevated-border-radius	var(--amplify-radii-xs)
--amplify-components-card-elevated-border-style	solid
--amplify-components-card-elevated-border-width	0
--amplify-components-card-elevated-box-shadow	var(--amplify-shadows-medium)
--amplify-components-card-outlined-background-color	var(--amplify-components-card-background-color)
--amplify-components-card-outlined-border-color	var(--amplify-colors-border-primary)
--amplify-components-card-outlined-border-radius	var(--amplify-radii-xs)
--amplify-components-card-outlined-border-style	solid
--amplify-components-card-outlined-border-width	var(--amplify-border-widths-small)
--amplify-components-card-outlined-box-shadow	var(--amplify-components-card-box-shadow)
--amplify-components-card-padding	var(--amplify-space-medium)
--amplify-components-checkbox-align-items	center
--amplify-components-checkbox-button-align-items	center
--amplify-components-checkbox-button-before-border-color	var(--amplify-colors-border-primary)
--amplify-components-checkbox-button-before-border-radius	20%
--amplify-components-checkbox-button-before-border-style	solid
--amplify-components-checkbox-button-before-border-width	var(--amplify-border-widths-medium)
--amplify-components-checkbox-button-before-height	100%
--amplify-components-checkbox-button-before-width	100%
--amplify-components-checkbox-button-color	var(--amplify-colors-font-inverse)
--amplify-components-checkbox-button-disabled-border-color	var(--amplify-colors-border-disabled)
--amplify-components-checkbox-button-error-border-color	var(--amplify-colors-border-error)
--amplify-components-checkbox-button-error-focus-border-color	var(--amplify-colors-border-error)
--amplify-components-checkbox-button-error-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-checkbox-button-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-checkbox-button-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-checkbox-button-focus-outline-color	var(--amplify-colors-transparent)
--amplify-components-checkbox-button-focus-outline-offset	var(--amplify-outline-offsets-medium)
--amplify-components-checkbox-button-focus-outline-style	solid
--amplify-components-checkbox-button-focus-outline-width	var(--amplify-outline-widths-medium)
--amplify-components-checkbox-button-justify-content	center
--amplify-components-checkbox-button-position	relative
--amplify-components-checkbox-cursor	pointer
--amplify-components-checkbox-disabled-cursor	not-allowed
--amplify-components-checkbox-icon-background-color	var(--amplify-colors-primary-80)
--amplify-components-checkbox-icon-border-radius	20%
--amplify-components-checkbox-icon-checked-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-checkbox-icon-checked-opacity	var(--amplify-opacities-100)
--amplify-components-checkbox-icon-checked-transform	scale(1)
--amplify-components-checkbox-icon-indeterminate-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-checkbox-icon-indeterminate-opacity	var(--amplify-opacities-100)
--amplify-components-checkbox-icon-indeterminate-transform	scale(1)
--amplify-components-checkbox-icon-opacity	var(--amplify-opacities-0)
--amplify-components-checkbox-icon-transform	scale(0)
--amplify-components-checkbox-icon-transition-duration	var(--amplify-time-short)
--amplify-components-checkbox-icon-transition-property	all
--amplify-components-checkbox-icon-transition-timing-function	ease-in-out
--amplify-components-checkbox-label-color	var(--amplify-components-text-color)
--amplify-components-checkbox-label-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-checkboxfield-align-content	center
--amplify-components-checkboxfield-align-items	flex-start
--amplify-components-checkboxfield-flex-direction	column
--amplify-components-checkboxfield-justify-content	center
--amplify-components-collection-pagination-button-color	var(--amplify-components-pagination-button-color)
--amplify-components-collection-pagination-button-disabled-color	var(--amplify-components-pagination-button-disabled-color)
--amplify-components-collection-pagination-button-hover-background-color	var(--amplify-components-pagination-button-hover-background-color)
--amplify-components-collection-pagination-button-hover-color	var(--amplify-components-pagination-button-hover-color)
--amplify-components-collection-pagination-current-background-color	var(--amplify-components-pagination-current-background-color)
--amplify-components-collection-pagination-current-color	var(--amplify-components-pagination-current-color)
--amplify-components-collection-search-button-active-background-color	var(--amplify-components-searchfield-button-active-background-color)
--amplify-components-collection-search-button-active-border-color	var(--amplify-components-searchfield-button-active-border-color)
--amplify-components-collection-search-button-active-color	var(--amplify-components-searchfield-button-active-color)
--amplify-components-collection-search-button-color	var(--amplify-components-searchfield-button-color)
--amplify-components-collection-search-button-disabled-background-color	var(--amplify-components-searchfield-button-disabled-background-color)
--amplify-components-collection-search-button-disabled-border-color	var(--amplify-components-searchfield-button-disabled-border-color)
--amplify-components-collection-search-button-disabled-color	var(--amplify-components-searchfield-button-disabled-color)
--amplify-components-collection-search-button-focus-background-color	var(--amplify-components-searchfield-button-focus-background-color)
--amplify-components-collection-search-button-focus-border-color	var(--amplify-components-searchfield-button-focus-border-color)
--amplify-components-collection-search-button-focus-color	var(--amplify-components-searchfield-button-focus-color)
--amplify-components-collection-search-button-hover-background-color	var(--amplify-components-searchfield-button-hover-background-color)
--amplify-components-collection-search-button-hover-border-color	var(--amplify-components-searchfield-button-hover-border-color)
--amplify-components-collection-search-button-hover-color	var(--amplify-components-searchfield-button-hover-color)
--amplify-components-collection-search-input-color	var(--amplify-components-searchfield-color)
--amplify-components-copy-font-size	var(--amplify-font-sizes-xs)
--amplify-components-copy-gap	var(--amplify-space-relative-medium)
--amplify-components-copy-svg-path-fill	var(--amplify-colors-font-primary)
--amplify-components-copy-tool-tip-bottom	var(--amplify-space-large)
--amplify-components-copy-tool-tip-color	var(--amplify-colors-teal-100)
--amplify-components-copy-tool-tip-font-size	var(--amplify-font-sizes-xxs)
--amplify-components-countrycodeselect-height	var(--amplify-space-relative-full)
--amplify-components-divider-border-color	var(--amplify-colors-border-primary)
--amplify-components-divider-border-style	solid
--amplify-components-divider-border-width	var(--amplify-border-widths-medium)
--amplify-components-divider-label-background-color	var(--amplify-colors-background-primary)
--amplify-components-divider-label-color	var(--amplify-colors-font-tertiary)
--amplify-components-divider-label-font-size	var(--amplify-font-sizes-small)
--amplify-components-divider-label-padding-inline	var(--amplify-space-medium)
--amplify-components-divider-large-border-width	var(--amplify-border-widths-large)
--amplify-components-divider-opacity	var(--amplify-opacities-60)
--amplify-components-divider-small-border-width	var(--amplify-border-widths-small)
--amplify-components-dropzone-accepted-background-color	var(--amplify-colors-background-success)
--amplify-components-dropzone-accepted-border-color	var(--amplify-colors-border-success)
--amplify-components-dropzone-accepted-border-radius	var(--amplify-components-dropzone-border-radius)
--amplify-components-dropzone-accepted-border-style	var(--amplify-components-dropzone-border-style)
--amplify-components-dropzone-accepted-border-width	var(--amplify-components-dropzone-border-width)
--amplify-components-dropzone-accepted-color	var(--amplify-colors-font-success)
--amplify-components-dropzone-active-background-color	var(--amplify-colors-primary-10)
--amplify-components-dropzone-active-border-color	var(--amplify-colors-border-pressed)
--amplify-components-dropzone-active-border-radius	var(--amplify-components-dropzone-border-radius)
--amplify-components-dropzone-active-border-style	var(--amplify-components-dropzone-border-style)
--amplify-components-dropzone-active-border-width	var(--amplify-components-dropzone-border-width)
--amplify-components-dropzone-active-color	var(--amplify-colors-font-primary)
--amplify-components-dropzone-background-color	var(--amplify-colors-background-primary)
--amplify-components-dropzone-border-color	var(--amplify-colors-border-primary)
--amplify-components-dropzone-border-radius	var(--amplify-radii-small)
--amplify-components-dropzone-border-style	dashed
--amplify-components-dropzone-border-width	var(--amplify-border-widths-small)
--amplify-components-dropzone-color	var(--amplify-colors-font-primary)
--amplify-components-dropzone-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-dropzone-disabled-border-color	var(--amplify-colors-border-disabled)
--amplify-components-dropzone-disabled-border-radius	var(--amplify-components-dropzone-border-radius)
--amplify-components-dropzone-disabled-border-style	var(--amplify-components-dropzone-border-style)
--amplify-components-dropzone-disabled-border-width	var(--amplify-components-dropzone-border-width)
--amplify-components-dropzone-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-dropzone-gap	var(--amplify-space-small)
--amplify-components-dropzone-padding-block	var(--amplify-space-xl)
--amplify-components-dropzone-padding-inline	var(--amplify-space-large)
--amplify-components-dropzone-rejected-background-color	var(--amplify-colors-background-error)
--amplify-components-dropzone-rejected-border-color	var(--amplify-colors-border-pressed)
--amplify-components-dropzone-rejected-border-radius	var(--amplify-components-dropzone-border-radius)
--amplify-components-dropzone-rejected-border-style	var(--amplify-components-dropzone-border-style)
--amplify-components-dropzone-rejected-border-width	var(--amplify-components-dropzone-border-width)
--amplify-components-dropzone-rejected-color	var(--amplify-colors-font-error)
--amplify-components-dropzone-text-align	center
--amplify-components-field-flex-direction	column
--amplify-components-field-font-size	var(--amplify-font-sizes-medium)
--amplify-components-field-gap	var(--amplify-space-xs)
--amplify-components-field-label-color	var(--amplify-colors-font-secondary)
--amplify-components-field-large-font-size	var(--amplify-font-sizes-large)
--amplify-components-field-large-gap	var(--amplify-space-small)
--amplify-components-field-small-font-size	var(--amplify-font-sizes-small)
--amplify-components-field-small-gap	var(--amplify-space-xxxs)
--amplify-components-fieldcontrol-border-color	var(--amplify-colors-border-primary)
--amplify-components-fieldcontrol-border-radius	var(--amplify-radii-small)
--amplify-components-fieldcontrol-border-style	solid
--amplify-components-fieldcontrol-border-width	var(--amplify-border-widths-small)
--amplify-components-fieldcontrol-color	var(--amplify-colors-font-primary)
--amplify-components-fieldcontrol-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-fieldcontrol-disabled-border-color	var(--amplify-colors-transparent)
--amplify-components-fieldcontrol-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-fieldcontrol-disabled-cursor	not-allowed
--amplify-components-fieldcontrol-error-border-color	var(--amplify-colors-border-error)
--amplify-components-fieldcontrol-error-color	var(--amplify-colors-font-error)
--amplify-components-fieldcontrol-error-focus-box-shadow	0px 0px 0px 2px var(--amplify-colors-border-error)
--amplify-components-fieldcontrol-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-fieldcontrol-focus-box-shadow	0px 0px 0px 2px var(--amplify-colors-border-focus)
--amplify-components-fieldcontrol-font-size	var(--amplify-components-field-font-size)
--amplify-components-fieldcontrol-info-focus-box-shadow	0px 0px 0px 2px var(--amplify-colors-blue-100)
--amplify-components-fieldcontrol-large-font-size	var(--amplify-components-field-large-font-size)
--amplify-components-fieldcontrol-large-padding-block-end	var(--amplify-space-xs)
--amplify-components-fieldcontrol-large-padding-block-start	var(--amplify-space-xs)
--amplify-components-fieldcontrol-large-padding-inline-end	var(--amplify-space-medium)
--amplify-components-fieldcontrol-large-padding-inline-start	var(--amplify-space-medium)
--amplify-components-fieldcontrol-line-height	var(--amplify-line-heights-medium)
--amplify-components-fieldcontrol-outline-color	var(--amplify-colors-transparent)
--amplify-components-fieldcontrol-outline-offset	var(--amplify-outline-offsets-medium)
--amplify-components-fieldcontrol-outline-style	solid
--amplify-components-fieldcontrol-outline-width	var(--amplify-outline-widths-medium)
--amplify-components-fieldcontrol-overlay-focus-box-shadow	0px 0px 0px 2px var(--amplify-colors-overlay-90)
--amplify-components-fieldcontrol-padding-block-end	var(--amplify-space-xs)
--amplify-components-fieldcontrol-padding-block-start	var(--amplify-space-xs)
--amplify-components-fieldcontrol-padding-inline-end	var(--amplify-space-medium)
--amplify-components-fieldcontrol-padding-inline-start	var(--amplify-space-medium)
--amplify-components-fieldcontrol-quiet-border-block-start	none
--amplify-components-fieldcontrol-quiet-border-inline-end	none
--amplify-components-fieldcontrol-quiet-border-inline-start	none
--amplify-components-fieldcontrol-quiet-border-radius	0
--amplify-components-fieldcontrol-quiet-border-style	none
--amplify-components-fieldcontrol-quiet-error-border-block-end-color	var(--amplify-colors-border-error)
--amplify-components-fieldcontrol-quiet-error-focus-border-block-end-color	transparent
--amplify-components-fieldcontrol-quiet-error-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-fieldcontrol-quiet-focus-border-block-end-color	transparent
--amplify-components-fieldcontrol-quiet-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-fieldcontrol-small-font-size	var(--amplify-components-field-small-font-size)
--amplify-components-fieldcontrol-small-padding-block-end	var(--amplify-space-xxs)
--amplify-components-fieldcontrol-small-padding-block-start	var(--amplify-space-xxs)
--amplify-components-fieldcontrol-small-padding-inline-end	var(--amplify-space-small)
--amplify-components-fieldcontrol-small-padding-inline-start	var(--amplify-space-small)
--amplify-components-fieldcontrol-success-focus-box-shadow	0px 0px 0px 2px var(--amplify-colors-green-100)
--amplify-components-fieldcontrol-transition-duration	var(--amplify-time-medium)
--amplify-components-fieldcontrol-warning-focus-box-shadow	0px 0px 0px 2px var(--amplify-colors-orange-100)
--amplify-components-fieldgroup-gap	var(--amplify-space-zero)
--amplify-components-fieldgroup-outer-align-items	center
--amplify-components-fieldgroup-vertical-align-items	center
--amplify-components-fieldmessages-description-color	var(--amplify-colors-font-secondary)
--amplify-components-fieldmessages-description-font-size	var(--amplify-font-sizes-small)
--amplify-components-fieldmessages-description-font-style	italic
--amplify-components-fieldmessages-error-color	var(--amplify-colors-font-error)
--amplify-components-fieldmessages-error-font-size	var(--amplify-font-sizes-small)
--amplify-components-fieldset-background-color	transparent
--amplify-components-fieldset-border-radius	var(--amplify-radii-xs)
--amplify-components-fieldset-flex-direction	column
--amplify-components-fieldset-gap	var(--amplify-components-field-gap)
--amplify-components-fieldset-large-gap	var(--amplify-components-field-large-gap)
--amplify-components-fieldset-legend-color	var(--amplify-colors-font-primary)
--amplify-components-fieldset-legend-font-size	var(--amplify-components-field-font-size)
--amplify-components-fieldset-legend-font-weight	var(--amplify-font-weights-bold)
--amplify-components-fieldset-legend-large-font-size	var(--amplify-components-field-large-font-size)
--amplify-components-fieldset-legend-line-height	var(--amplify-line-heights-medium)
--amplify-components-fieldset-legend-small-font-size	var(--amplify-components-field-small-font-size)
--amplify-components-fieldset-outlined-border-color	var(--amplify-colors-neutral-40)
--amplify-components-fieldset-outlined-border-style	solid
--amplify-components-fieldset-outlined-border-width	var(--amplify-border-widths-small)
--amplify-components-fieldset-outlined-large-padding	var(--amplify-space-large)
--amplify-components-fieldset-outlined-padding	var(--amplify-space-medium)
--amplify-components-fieldset-outlined-small-padding	var(--amplify-space-small)
--amplify-components-fieldset-small-gap	var(--amplify-components-field-small-gap)
--amplify-components-flex-align-content	normal
--amplify-components-flex-align-items	stretch
--amplify-components-flex-flex-wrap	nowrap
--amplify-components-flex-gap	var(--amplify-space-medium)
--amplify-components-flex-justify-content	normal
--amplify-components-heading-1-font-size	var(--amplify-font-sizes-xxxxl)
--amplify-components-heading-1-font-weight	var(--amplify-font-weights-light)
--amplify-components-heading-2-font-size	var(--amplify-font-sizes-xxxl)
--amplify-components-heading-2-font-weight	var(--amplify-font-weights-normal)
--amplify-components-heading-3-font-size	var(--amplify-font-sizes-xxl)
--amplify-components-heading-3-font-weight	var(--amplify-font-weights-medium)
--amplify-components-heading-4-font-size	var(--amplify-font-sizes-xl)
--amplify-components-heading-4-font-weight	var(--amplify-font-weights-semibold)
--amplify-components-heading-5-font-size	var(--amplify-font-sizes-large)
--amplify-components-heading-5-font-weight	var(--amplify-font-weights-bold)
--amplify-components-heading-6-font-size	var(--amplify-font-sizes-medium)
--amplify-components-heading-6-font-weight	var(--amplify-font-weights-extrabold)
--amplify-components-heading-color	var(--amplify-colors-font-primary)
--amplify-components-heading-line-height	var(--amplify-line-heights-small)
--amplify-components-highlightmatch-highlighted-font-weight	var(--amplify-font-weights-bold)
--amplify-components-icon-height	1em
--amplify-components-icon-line-height	1
--amplify-components-image-height	auto
--amplify-components-image-max-width	100%
--amplify-components-image-object-fit	initial
--amplify-components-image-object-position	initial
--amplify-components-inappmessaging-banner-height	150px
--amplify-components-inappmessaging-banner-width	400px
--amplify-components-inappmessaging-button-background-color	#e8e8e8
--amplify-components-inappmessaging-button-border-radius	5px
--amplify-components-inappmessaging-button-color	black
--amplify-components-inappmessaging-dialog-height	50vh
--amplify-components-inappmessaging-dialog-min-height	400px
--amplify-components-inappmessaging-dialog-min-width	400px
--amplify-components-inappmessaging-dialog-width	30vw
--amplify-components-inappmessaging-header-font-size	var(--amplify-font-sizes-medium)
--amplify-components-inappmessaging-header-font-weight	var(--amplify-font-weights-extrabold)
--amplify-components-input-border-color	var(--amplify-components-fieldcontrol-border-color)
--amplify-components-input-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-input-focus-border-color	var(--amplify-components-fieldcontrol-focus-border-color)
--amplify-components-input-font-size	var(--amplify-components-fieldcontrol-font-size)
--amplify-components-link-active-color	var(--amplify-colors-font-active)
--amplify-components-link-color	var(--amplify-colors-font-interactive)
--amplify-components-link-focus-color	var(--amplify-colors-font-focus)
--amplify-components-link-hover-color	var(--amplify-colors-font-hover)
--amplify-components-link-visited-color	var(--amplify-colors-font-interactive)
--amplify-components-liveness-camera-module-background-color	var(--amplify-colors-background-primary)
--amplify-components-loader-animation-duration	1s
--amplify-components-loader-font-size	var(--amplify-font-sizes-xs)
--amplify-components-loader-height	var(--amplify-font-sizes-medium)
--amplify-components-loader-large-font-size	var(--amplify-font-sizes-small)
--amplify-components-loader-large-height	var(--amplify-font-sizes-large)
--amplify-components-loader-large-width	var(--amplify-font-sizes-large)
--amplify-components-loader-linear-animation-duration	1s
--amplify-components-loader-linear-font-size	var(--amplify-font-sizes-xxs)
--amplify-components-loader-linear-large-font-size	var(--amplify-font-sizes-xs)
--amplify-components-loader-linear-large-stroke-width	var(--amplify-font-sizes-xs)
--amplify-components-loader-linear-min-width	5rem
--amplify-components-loader-linear-small-font-size	var(--amplify-font-sizes-xxxs)
--amplify-components-loader-linear-small-stroke-width	var(--amplify-font-sizes-xxxs)
--amplify-components-loader-linear-stroke-empty	var(--amplify-colors-neutral-20)
--amplify-components-loader-linear-stroke-filled	var(--amplify-colors-primary-80)
--amplify-components-loader-linear-stroke-linecap	round
--amplify-components-loader-linear-stroke-width	var(--amplify-font-sizes-xxs)
--amplify-components-loader-linear-width	100%
--amplify-components-loader-small-font-size	var(--amplify-font-sizes-xxs)
--amplify-components-loader-small-height	var(--amplify-font-sizes-small)
--amplify-components-loader-small-width	var(--amplify-font-sizes-small)
--amplify-components-loader-stroke-empty	var(--amplify-colors-neutral-20)
--amplify-components-loader-stroke-filled	var(--amplify-colors-primary-80)
--amplify-components-loader-stroke-linecap	round
--amplify-components-loader-text-fill	var(--amplify-colors-font-primary)
--amplify-components-loader-width	var(--amplify-font-sizes-medium)
--amplify-components-menu-background-color	var(--amplify-colors-background-primary)
--amplify-components-menu-border-color	var(--amplify-colors-border-primary)
--amplify-components-menu-border-radius	var(--amplify-radii-medium)
--amplify-components-menu-border-style	solid
--amplify-components-menu-border-width	var(--amplify-border-widths-small)
--amplify-components-menu-box-shadow	var(--amplify-shadows-large)
--amplify-components-menu-flex-direction	column
--amplify-components-menu-gap	var(--amplify-space-zero)
--amplify-components-menu-item-min-height	2.5rem
--amplify-components-menu-item-padding-inline-end	var(--amplify-space-medium)
--amplify-components-menu-item-padding-inline-start	var(--amplify-space-medium)
--amplify-components-menu-large-height	var(--amplify-font-sizes-xxxl)
--amplify-components-menu-large-width	var(--amplify-font-sizes-xxxl)
--amplify-components-menu-max-width	30rem
--amplify-components-menu-min-width	14rem
--amplify-components-menu-small-height	var(--amplify-font-sizes-medium)
--amplify-components-menu-small-width	var(--amplify-font-sizes-medium)
--amplify-components-message-align-items	center
--amplify-components-message-background-color	var(--amplify-colors-background-tertiary)
--amplify-components-message-border-color	transparent
--amplify-components-message-border-radius	var(--amplify-radii-xs)
--amplify-components-message-border-style	solid
--amplify-components-message-border-width	var(--amplify-border-widths-small)
--amplify-components-message-color	var(--amplify-colors-font-primary)
--amplify-components-message-dismiss-gap	var(--amplify-space-xxs)
--amplify-components-message-filled-background-color	var(--amplify-colors-background-secondary)
--amplify-components-message-filled-border-color	transparent
--amplify-components-message-filled-color	var(--amplify-colors-font-primary)
--amplify-components-message-filled-error-background-color	var(--amplify-colors-background-error)
--amplify-components-message-filled-error-border-color	transparent
--amplify-components-message-filled-error-color	var(--amplify-colors-font-error)
--amplify-components-message-filled-info-background-color	var(--amplify-colors-background-info)
--amplify-components-message-filled-info-border-color	transparent
--amplify-components-message-filled-info-color	var(--amplify-colors-font-info)
--amplify-components-message-filled-success-background-color	var(--amplify-colors-background-success)
--amplify-components-message-filled-success-border-color	transparent
--amplify-components-message-filled-success-color	var(--amplify-colors-font-success)
--amplify-components-message-filled-warning-background-color	var(--amplify-colors-background-warning)
--amplify-components-message-filled-warning-border-color	transparent
--amplify-components-message-filled-warning-color	var(--amplify-colors-font-warning)
--amplify-components-message-heading-font-size	var(--amplify-font-sizes-medium)
--amplify-components-message-heading-font-weight	var(--amplify-font-weights-bold)
--amplify-components-message-icon-size	var(--amplify-font-sizes-xl)
--amplify-components-message-justify-content	flex-start
--amplify-components-message-line-height	var(--amplify-line-heights-small)
--amplify-components-message-outlined-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-outlined-border-color	var(--amplify-colors-border-primary)
--amplify-components-message-outlined-color	var(--amplify-colors-font-primary)
--amplify-components-message-outlined-error-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-outlined-error-border-color	var(--amplify-colors-border-error)
--amplify-components-message-outlined-error-color	var(--amplify-colors-font-error)
--amplify-components-message-outlined-info-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-outlined-info-border-color	var(--amplify-colors-border-info)
--amplify-components-message-outlined-info-color	var(--amplify-colors-font-info)
--amplify-components-message-outlined-success-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-outlined-success-border-color	var(--amplify-colors-border-success)
--amplify-components-message-outlined-success-color	var(--amplify-colors-font-success)
--amplify-components-message-outlined-warning-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-outlined-warning-border-color	var(--amplify-colors-border-warning)
--amplify-components-message-outlined-warning-color	var(--amplify-colors-font-warning)
--amplify-components-message-padding-block	var(--amplify-space-small)
--amplify-components-message-padding-inline	var(--amplify-space-medium)
--amplify-components-message-plain-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-plain-border-color	transparent
--amplify-components-message-plain-color	var(--amplify-colors-font-primary)
--amplify-components-message-plain-error-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-plain-error-border-color	transparent
--amplify-components-message-plain-error-color	var(--amplify-colors-font-error)
--amplify-components-message-plain-info-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-plain-info-border-color	transparent
--amplify-components-message-plain-info-color	var(--amplify-colors-font-info)
--amplify-components-message-plain-success-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-plain-success-border-color	transparent
--amplify-components-message-plain-success-color	var(--amplify-colors-font-success)
--amplify-components-message-plain-warning-background-color	var(--amplify-colors-background-primary)
--amplify-components-message-plain-warning-border-color	transparent
--amplify-components-message-plain-warning-color	var(--amplify-colors-font-warning)
--amplify-components-pagination-button-color	var(--amplify-colors-font-primary)
--amplify-components-pagination-button-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-pagination-button-hover-background-color	var(--amplify-colors-overlay-10)
--amplify-components-pagination-button-hover-color	var(--amplify-colors-font-primary)
--amplify-components-pagination-button-padding-inline-end	var(--amplify-space-xxs)
--amplify-components-pagination-button-padding-inline-start	var(--amplify-space-xxs)
--amplify-components-pagination-button-transition-duration	var(--amplify-time-medium)
--amplify-components-pagination-button-transition-property	background-color
--amplify-components-pagination-current-align-items	center
--amplify-components-pagination-current-background-color	var(--amplify-colors-overlay-40)
--amplify-components-pagination-current-color	var(--amplify-colors-font-inverse)
--amplify-components-pagination-current-font-size	var(--amplify-font-sizes-small)
--amplify-components-pagination-current-justify-content	center
--amplify-components-pagination-ellipsis-align-items	baseline
--amplify-components-pagination-ellipsis-justify-content	center
--amplify-components-pagination-ellipsis-padding-inline-end	var(--amplify-space-xs)
--amplify-components-pagination-ellipsis-padding-inline-start	var(--amplify-space-xs)
--amplify-components-pagination-item-container-margin-left	var(--amplify-space-xxxs)
--amplify-components-pagination-item-container-margin-right	var(--amplify-space-xxxs)
--amplify-components-pagination-item-shared-border-radius	var(--amplify-font-sizes-medium)
--amplify-components-pagination-item-shared-height	var(--amplify-font-sizes-xxl)
--amplify-components-pagination-item-shared-min-width	var(--amplify-font-sizes-xxl)
--amplify-components-passwordfield-button-active-background-color	var(--amplify-components-button-active-background-color)
--amplify-components-passwordfield-button-active-border-color	var(--amplify-components-button-active-border-color)
--amplify-components-passwordfield-button-active-color	var(--amplify-components-button-active-color)
--amplify-components-passwordfield-button-color	var(--amplify-components-button-color)
--amplify-components-passwordfield-button-disabled-background-color	var(--amplify-components-button-disabled-background-color)
--amplify-components-passwordfield-button-disabled-border-color	var(--amplify-components-button-disabled-border-color)
--amplify-components-passwordfield-button-disabled-color	var(--amplify-components-button-disabled-color)
--amplify-components-passwordfield-button-error-active-background-color	var(--amplify-components-button-outlined-error-active-background-color)
--amplify-components-passwordfield-button-error-active-border-color	var(--amplify-components-button-outlined-error-active-border-color)
--amplify-components-passwordfield-button-error-active-color	var(--amplify-components-button-outlined-error-active-color)
--amplify-components-passwordfield-button-error-background-color	var(--amplify-components-button-outlined-error-background-color)
--amplify-components-passwordfield-button-error-border-color	var(--amplify-components-button-outlined-error-border-color)
--amplify-components-passwordfield-button-error-color	var(--amplify-components-button-outlined-error-color)
--amplify-components-passwordfield-button-error-focus-background-color	var(--amplify-components-button-outlined-error-focus-background-color)
--amplify-components-passwordfield-button-error-focus-border-color	var(--amplify-components-button-outlined-error-focus-border-color)
--amplify-components-passwordfield-button-error-focus-box-shadow	var(--amplify-components-button-outlined-error-focus-box-shadow)
--amplify-components-passwordfield-button-error-focus-color	var(--amplify-components-button-outlined-error-focus-color)
--amplify-components-passwordfield-button-error-hover-background-color	var(--amplify-components-button-outlined-error-hover-background-color)
--amplify-components-passwordfield-button-error-hover-border-color	var(--amplify-components-button-outlined-error-hover-border-color)
--amplify-components-passwordfield-button-error-hover-color	var(--amplify-components-button-outlined-error-hover-color)
--amplify-components-passwordfield-button-focus-background-color	var(--amplify-components-button-focus-background-color)
--amplify-components-passwordfield-button-focus-border-color	var(--amplify-components-button-focus-border-color)
--amplify-components-passwordfield-button-focus-color	var(--amplify-components-button-focus-color)
--amplify-components-passwordfield-button-hover-background-color	var(--amplify-components-button-hover-background-color)
--amplify-components-passwordfield-button-hover-border-color	var(--amplify-components-button-hover-border-color)
--amplify-components-passwordfield-button-hover-color	var(--amplify-components-button-hover-color)
--amplify-components-passwordfield-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-phonenumberfield-border-color	var(--amplify-components-fieldcontrol-border-color)
--amplify-components-phonenumberfield-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-phonenumberfield-focus-border-color	var(--amplify-components-fieldcontrol-focus-border-color)
--amplify-components-phonenumberfield-font-size	var(--amplify-components-fieldcontrol-font-size)
--amplify-components-placeholder-border-radius	var(--amplify-radii-small)
--amplify-components-placeholder-default-height	var(--amplify-space-medium)
--amplify-components-placeholder-end-color	var(--amplify-colors-background-tertiary)
--amplify-components-placeholder-large-height	var(--amplify-space-large)
--amplify-components-placeholder-small-height	var(--amplify-space-small)
--amplify-components-placeholder-start-color	var(--amplify-colors-background-secondary)
--amplify-components-placeholder-transition-duration	var(--amplify-time-long)
--amplify-components-radio-align-items	center
--amplify-components-radio-button-align-items	center
--amplify-components-radio-button-background-color	var(--amplify-colors-background-primary)
--amplify-components-radio-button-border-color	var(--amplify-colors-border-primary)
--amplify-components-radio-button-border-radius	50%
--amplify-components-radio-button-border-style	solid
--amplify-components-radio-button-border-width	var(--amplify-border-widths-medium)
--amplify-components-radio-button-box-sizing	border-box
--amplify-components-radio-button-checked-color	var(--amplify-colors-primary-80)
--amplify-components-radio-button-checked-disabled-color	var(--amplify-colors-background-disabled)
--amplify-components-radio-button-color	var(--amplify-colors-background-primary)
--amplify-components-radio-button-disabled-background-color	var(--amplify-colors-background-primary)
--amplify-components-radio-button-disabled-border-color	var(--amplify-colors-border-disabled)
--amplify-components-radio-button-error-border-color	var(--amplify-colors-border-error)
--amplify-components-radio-button-error-focus-box-shadow	var(--amplify-components-fieldcontrol-error-focus-box-shadow)
--amplify-components-radio-button-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-radio-button-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-radio-button-height	var(--amplify-font-sizes-medium)
--amplify-components-radio-button-justify-content	center
--amplify-components-radio-button-large-height	var(--amplify-font-sizes-large)
--amplify-components-radio-button-large-width	var(--amplify-font-sizes-large)
--amplify-components-radio-button-outline-color	var(--amplify-colors-transparent)
--amplify-components-radio-button-outline-offset	var(--amplify-outline-offsets-medium)
--amplify-components-radio-button-outline-style	solid
--amplify-components-radio-button-outline-width	var(--amplify-outline-widths-medium)
--amplify-components-radio-button-padding	var(--amplify-border-widths-medium)
--amplify-components-radio-button-small-height	var(--amplify-font-sizes-small)
--amplify-components-radio-button-small-width	var(--amplify-font-sizes-small)
--amplify-components-radio-button-transition-duration	var(--amplify-time-medium)
--amplify-components-radio-button-transition-property	all
--amplify-components-radio-button-width	var(--amplify-font-sizes-medium)
--amplify-components-radio-disabled-cursor	not-allowed
--amplify-components-radio-gap	inherit
--amplify-components-radio-justify-content	flex-start
--amplify-components-radio-label-color	var(--amplify-components-text-color)
--amplify-components-radio-label-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-radiogroup-legend-color	var(--amplify-components-fieldset-legend-color)
--amplify-components-radiogroup-legend-font-weight	var(--amplify-font-weights-normal)
--amplify-components-radiogroup-radio-background-color	var(--amplify-components-radio-button-background-color)
--amplify-components-radiogroup-radio-border-color	var(--amplify-components-radio-button-border-color)
--amplify-components-radiogroup-radio-border-width	var(--amplify-components-radio-button-border-width)
--amplify-components-radiogroup-radio-checked-color	var(--amplify-components-radio-button-checked-color)
--amplify-components-radiogroup-radio-label-color	var(--amplify-components-radio-label-color)
--amplify-components-rating-default-size	var(--amplify-font-sizes-xl)
--amplify-components-rating-empty-color	var(--amplify-colors-background-tertiary)
--amplify-components-rating-filled-color	var(--amplify-colors-secondary-80)
--amplify-components-rating-large-size	var(--amplify-font-sizes-xxxl)
--amplify-components-rating-small-size	var(--amplify-font-sizes-small)
--amplify-components-searchfield-button-active-background-color	var(--amplify-components-button-active-background-color)
--amplify-components-searchfield-button-active-border-color	var(--amplify-components-button-active-border-color)
--amplify-components-searchfield-button-active-color	var(--amplify-components-button-active-color)
--amplify-components-searchfield-button-background-color	var(--amplify-colors-background-primary)
--amplify-components-searchfield-button-color	var(--amplify-components-button-color)
--amplify-components-searchfield-button-disabled-background-color	var(--amplify-components-button-disabled-background-color)
--amplify-components-searchfield-button-disabled-border-color	var(--amplify-components-button-disabled-border-color)
--amplify-components-searchfield-button-disabled-color	var(--amplify-components-button-disabled-color)
--amplify-components-searchfield-button-focus-background-color	var(--amplify-components-button-focus-background-color)
--amplify-components-searchfield-button-focus-border-color	var(--amplify-components-button-focus-border-color)
--amplify-components-searchfield-button-focus-color	var(--amplify-components-button-focus-color)
--amplify-components-searchfield-button-hover-background-color	var(--amplify-components-button-hover-background-color)
--amplify-components-searchfield-button-hover-border-color	var(--amplify-components-button-hover-border-color)
--amplify-components-searchfield-button-hover-color	var(--amplify-components-button-hover-color)
--amplify-components-searchfield-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-select-background-color	var(--amplify-colors-background-primary)
--amplify-components-select-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-select-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-select-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-select-expanded-option-padding-block	var(--amplify-space-xs)
--amplify-components-select-expanded-option-padding-inline	var(--amplify-space-small)
--amplify-components-select-expanded-padding-block	var(--amplify-space-xs)
--amplify-components-select-expanded-padding-inline	var(--amplify-space-small)
--amplify-components-select-icon-wrapper-align-items	center
--amplify-components-select-icon-wrapper-large-right	var(--amplify-space-medium)
--amplify-components-select-icon-wrapper-pointer-events	none
--amplify-components-select-icon-wrapper-position	absolute
--amplify-components-select-icon-wrapper-right	var(--amplify-space-medium)
--amplify-components-select-icon-wrapper-small-right	var(--amplify-space-xs)
--amplify-components-select-icon-wrapper-top	50%
--amplify-components-select-icon-wrapper-transform	translateY(-50%)
--amplify-components-select-large-min-width	7.5rem
--amplify-components-select-large-padding-inline-end	var(--amplify-space-xxl)
--amplify-components-select-min-width	6.5rem
--amplify-components-select-option-background-color	transparent
--amplify-components-select-option-color	var(--amplify-colors-font-primary)
--amplify-components-select-option-disabled-background-color	transparent
--amplify-components-select-option-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-select-padding-inline-end	var(--amplify-space-xxl)
--amplify-components-select-small-min-width	5.5rem
--amplify-components-select-small-padding-inline-end	var(--amplify-space-xl)
--amplify-components-select-white-space	nowrap
--amplify-components-select-wrapper-cursor	pointer
--amplify-components-select-wrapper-display	block
--amplify-components-select-wrapper-flex	1
--amplify-components-select-wrapper-position	relative
--amplify-components-selectfield-border-color	var(--amplify-components-fieldcontrol-border-color)
--amplify-components-selectfield-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-selectfield-flex-direction	column
--amplify-components-selectfield-focus-border-color	var(--amplify-components-fieldcontrol-focus-border-color)
--amplify-components-selectfield-font-size	var(--amplify-components-fieldcontrol-font-size)
--amplify-components-selectfield-label-color	var(--amplify-components-field-label-color)
--amplify-components-sliderfield-large-thumb-height	1.5rem
--amplify-components-sliderfield-large-thumb-width	1.5rem
--amplify-components-sliderfield-large-track-height	0.625rem
--amplify-components-sliderfield-padding-block	var(--amplify-space-xs)
--amplify-components-sliderfield-range-background-color	var(--amplify-colors-primary-80)
--amplify-components-sliderfield-range-border-radius	9999px
--amplify-components-sliderfield-range-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-sliderfield-small-thumb-height	1rem
--amplify-components-sliderfield-small-thumb-width	1rem
--amplify-components-sliderfield-small-track-height	0.25rem
--amplify-components-sliderfield-thumb-background-color	var(--amplify-colors-background-primary)
--amplify-components-sliderfield-thumb-border-color	var(--amplify-colors-border-primary)
--amplify-components-sliderfield-thumb-border-radius	50%
--amplify-components-sliderfield-thumb-border-style	solid
--amplify-components-sliderfield-thumb-border-width	var(--amplify-border-widths-medium)
--amplify-components-sliderfield-thumb-box-shadow	var(--amplify-shadows-small)
--amplify-components-sliderfield-thumb-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-sliderfield-thumb-disabled-border-color	transparent
--amplify-components-sliderfield-thumb-disabled-box-shadow	none
--amplify-components-sliderfield-thumb-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-sliderfield-thumb-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-sliderfield-thumb-height	1.25rem
--amplify-components-sliderfield-thumb-hover-background-color	var(--amplify-colors-background-primary)
--amplify-components-sliderfield-thumb-hover-border-color	var(--amplify-colors-border-focus)
--amplify-components-sliderfield-thumb-width	1.25rem
--amplify-components-sliderfield-track-background-color	var(--amplify-colors-background-quaternary)
--amplify-components-sliderfield-track-border-radius	9999px
--amplify-components-sliderfield-track-height	0.375rem
--amplify-components-sliderfield-track-min-width	10rem
--amplify-components-stepperfield-border-color	var(--amplify-components-fieldcontrol-border-color)
--amplify-components-stepperfield-button-active-background-color	var(--amplify-components-button-active-background-color)
--amplify-components-stepperfield-button-active-color	var(--amplify-components-button-active-color)
--amplify-components-stepperfield-button-background-color	var(--amplify-colors-transparent)
--amplify-components-stepperfield-button-color	var(--amplify-components-button-color)
--amplify-components-stepperfield-button-disabled-background-color	var(--amplify-components-fieldcontrol-disabled-background-color)
--amplify-components-stepperfield-button-disabled-color	var(--amplify-components-button-disabled-color)
--amplify-components-stepperfield-button-focus-background-color	var(--amplify-components-button-focus-background-color)
--amplify-components-stepperfield-button-focus-color	var(--amplify-components-button-focus-color)
--amplify-components-stepperfield-button-hover-background-color	var(--amplify-components-button-hover-background-color)
--amplify-components-stepperfield-button-hover-color	var(--amplify-components-button-hover-color)
--amplify-components-stepperfield-flex-direction	column
--amplify-components-stepperfield-input-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-stepperfield-input-font-size	var(--amplify-components-fieldcontrol-font-size)
--amplify-components-stepperfield-input-text-align	center
--amplify-components-storagemanager-dropzone-active-background-color	var(--amplify-colors-primary-10)
--amplify-components-storagemanager-dropzone-active-border-color	var(--amplify-colors-border-pressed)
--amplify-components-storagemanager-dropzone-active-border-radius	var(--amplify-components-storagemanager-dropzone-border-radius)
--amplify-components-storagemanager-dropzone-active-border-style	var(--amplify-components-storagemanager-dropzone-border-style)
--amplify-components-storagemanager-dropzone-active-border-width	var(--amplify-border-widths-medium)
--amplify-components-storagemanager-dropzone-background-color	var(--amplify-colors-background-primary)
--amplify-components-storagemanager-dropzone-border-color	var(--amplify-colors-border-primary)
--amplify-components-storagemanager-dropzone-border-radius	var(--amplify-radii-small)
--amplify-components-storagemanager-dropzone-border-style	dashed
--amplify-components-storagemanager-dropzone-border-width	var(--amplify-border-widths-small)
--amplify-components-storagemanager-dropzone-gap	var(--amplify-space-small)
--amplify-components-storagemanager-dropzone-icon-color	var(--amplify-colors-border-primary)
--amplify-components-storagemanager-dropzone-icon-font-size	var(--amplify-font-sizes-xxl)
--amplify-components-storagemanager-dropzone-padding-block	var(--amplify-space-xl)
--amplify-components-storagemanager-dropzone-padding-inline	var(--amplify-space-large)
--amplify-components-storagemanager-dropzone-text-align	center
--amplify-components-storagemanager-dropzone-text-color	var(--amplify-colors-font-tertiary)
--amplify-components-storagemanager-dropzone-text-font-size	var(--amplify-font-sizes-medium)
--amplify-components-storagemanager-dropzone-text-font-weight	var(--amplify-font-weights-bold)
--amplify-components-storagemanager-file-align-items	baseline
--amplify-components-storagemanager-file-background-color	var(--amplify-colors-background-primary)
--amplify-components-storagemanager-file-border-color	var(--amplify-colors-border-primary)
--amplify-components-storagemanager-file-border-radius	var(--amplify-radii-small)
--amplify-components-storagemanager-file-border-style	solid
--amplify-components-storagemanager-file-border-width	var(--amplify-border-widths-small)
--amplify-components-storagemanager-file-gap	var(--amplify-space-small)
--amplify-components-storagemanager-file-image-background-color	var(--amplify-colors-background-secondary)
--amplify-components-storagemanager-file-image-border-radius	var(--amplify-radii-small)
--amplify-components-storagemanager-file-image-color	var(--amplify-colors-font-tertiary)
--amplify-components-storagemanager-file-image-height	var(--amplify-space-xxl)
--amplify-components-storagemanager-file-image-width	var(--amplify-space-xxl)
--amplify-components-storagemanager-file-name-color	var(--amplify-colors-font-primary)
--amplify-components-storagemanager-file-name-font-size	var(--amplify-font-sizes-medium)
--amplify-components-storagemanager-file-name-font-weight	var(--amplify-font-weights-bold)
--amplify-components-storagemanager-file-padding-block	var(--amplify-space-xs)
--amplify-components-storagemanager-file-padding-inline	var(--amplify-space-small)
--amplify-components-storagemanager-file-size-color	var(--amplify-colors-font-tertiary)
--amplify-components-storagemanager-file-size-font-size	var(--amplify-font-sizes-small)
--amplify-components-storagemanager-file-size-font-weight	var(--amplify-font-weights-normal)
--amplify-components-storagemanager-filelist-flex-direction	column
--amplify-components-storagemanager-filelist-gap	var(--amplify-space-small)
--amplify-components-storagemanager-loader-stroke-empty	var(--amplify-colors-border-secondary)
--amplify-components-storagemanager-loader-stroke-filled	var(--amplify-components-loader-stroke-filled)
--amplify-components-storagemanager-loader-stroke-linecap	round
--amplify-components-storagemanager-loader-stroke-width	var(--amplify-border-widths-large)
--amplify-components-storagemanager-previewer-background-color	var(--amplify-colors-background-primary)
--amplify-components-storagemanager-previewer-body-gap	var(--amplify-space-small)
--amplify-components-storagemanager-previewer-body-padding-block	var(--amplify-space-medium)
--amplify-components-storagemanager-previewer-body-padding-inline	var(--amplify-space-medium)
--amplify-components-storagemanager-previewer-border-color	var(--amplify-colors-border-primary)
--amplify-components-storagemanager-previewer-border-radius	var(--amplify-radii-small)
--amplify-components-storagemanager-previewer-border-style	solid
--amplify-components-storagemanager-previewer-border-width	var(--amplify-border-widths-small)
--amplify-components-storagemanager-previewer-footer-justify-content	flex-end
--amplify-components-storagemanager-previewer-max-height	40rem
--amplify-components-storagemanager-previewer-max-width	auto
--amplify-components-storagemanager-previewer-padding-block	var(--amplify-space-zero)
--amplify-components-storagemanager-previewer-padding-inline	var(--amplify-space-zero)
--amplify-components-storagemanager-previewer-text-color	var(--amplify-colors-font-primary)
--amplify-components-storagemanager-previewer-text-font-size	var(--amplify-font-sizes-medium)
--amplify-components-storagemanager-previewer-text-font-weight	var(--amplify-font-weights-bold)
--amplify-components-switchfield-disabled-opacity	var(--amplify-opacities-60)
--amplify-components-switchfield-focused-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-switchfield-font-size	var(--amplify-font-sizes-medium)
--amplify-components-switchfield-label-padding	var(--amplify-space-xs)
--amplify-components-switchfield-large-font-size	var(--amplify-font-sizes-large)
--amplify-components-switchfield-small-font-size	var(--amplify-font-sizes-small)
--amplify-components-switchfield-thumb-background-color	var(--amplify-colors-background-primary)
--amplify-components-switchfield-thumb-border-color	transparent
--amplify-components-switchfield-thumb-border-radius	var(--amplify-radii-xxxl)
--amplify-components-switchfield-thumb-border-style	solid
--amplify-components-switchfield-thumb-border-width	var(--amplify-border-widths-small)
--amplify-components-switchfield-thumb-checked-transform	var(--amplify-transforms-slide-x-medium)
--amplify-components-switchfield-thumb-transition-duration	var(--amplify-time-medium)
--amplify-components-switchfield-thumb-width	var(--amplify-space-relative-medium)
--amplify-components-switchfield-track-background-color	var(--amplify-colors-background-quaternary)
--amplify-components-switchfield-track-border-radius	var(--amplify-radii-xxxl)
--amplify-components-switchfield-track-checked-background-color	var(--amplify-colors-primary-80)
--amplify-components-switchfield-track-error-background-color	var(--amplify-colors-background-error)
--amplify-components-switchfield-track-height	var(--amplify-space-relative-medium)
--amplify-components-switchfield-track-padding	var(--amplify-outline-widths-medium)
--amplify-components-switchfield-track-transition-duration	var(--amplify-time-short)
--amplify-components-switchfield-track-width	var(--amplify-space-relative-xl)
--amplify-components-table-body-display	table-row-group
--amplify-components-table-body-vertical-align	middle
--amplify-components-table-border-collapse	collapse
--amplify-components-table-caption-caption-side	bottom
--amplify-components-table-caption-color	var(--amplify-colors-font-primary)
--amplify-components-table-caption-display	table-caption
--amplify-components-table-caption-font-size	var(--amplify-font-sizes-medium)
--amplify-components-table-caption-large-font-size	var(--amplify-font-sizes-large)
--amplify-components-table-caption-small-font-size	var(--amplify-font-sizes-small)
--amplify-components-table-caption-text-align	center
--amplify-components-table-caption-word-break	break-all
--amplify-components-table-data-border-color	var(--amplify-colors-border-tertiary)
--amplify-components-table-data-border-style	solid
--amplify-components-table-data-border-width	var(--amplify-border-widths-small)
--amplify-components-table-data-color	var(--amplify-colors-font-primary)
--amplify-components-table-data-display	table-cell
--amplify-components-table-data-font-size	var(--amplify-font-sizes-medium)
--amplify-components-table-data-font-weight	var(--amplify-font-weights-normal)
--amplify-components-table-data-large-font-size	var(--amplify-font-sizes-large)
--amplify-components-table-data-large-padding	var(--amplify-space-large)
--amplify-components-table-data-padding	var(--amplify-space-medium)
--amplify-components-table-data-small-font-size	var(--amplify-font-sizes-small)
--amplify-components-table-data-small-padding	var(--amplify-space-xs)
--amplify-components-table-data-vertical-align	middle
--amplify-components-table-display	table
--amplify-components-table-foot-display	table-footer-group
--amplify-components-table-foot-vertical-align	middle
--amplify-components-table-head-display	table-header-group
--amplify-components-table-head-vertical-align	middle
--amplify-components-table-header-border-color	var(--amplify-colors-border-tertiary)
--amplify-components-table-header-border-style	solid
--amplify-components-table-header-border-width	var(--amplify-border-widths-small)
--amplify-components-table-header-color	var(--amplify-colors-font-primary)
--amplify-components-table-header-display	table-cell
--amplify-components-table-header-font-size	var(--amplify-font-sizes-medium)
--amplify-components-table-header-font-weight	var(--amplify-font-weights-bold)
--amplify-components-table-header-large-font-size	var(--amplify-font-sizes-large)
--amplify-components-table-header-large-padding	var(--amplify-space-large)
--amplify-components-table-header-padding	var(--amplify-space-medium)
--amplify-components-table-header-small-font-size	var(--amplify-font-sizes-small)
--amplify-components-table-header-small-padding	var(--amplify-space-xs)
--amplify-components-table-header-vertical-align	middle
--amplify-components-table-row-display	table-row
--amplify-components-table-row-hover-background-color	var(--amplify-colors-background-tertiary)
--amplify-components-table-row-striped-background-color	var(--amplify-colors-background-secondary)
--amplify-components-table-row-vertical-align	middle
--amplify-components-table-width	100%
--amplify-components-tabs-background-color	transparent
--amplify-components-tabs-border-color	var(--amplify-colors-border-secondary)
--amplify-components-tabs-border-style	solid
--amplify-components-tabs-border-width	var(--amplify-border-widths-medium)
--amplify-components-tabs-gap	0
--amplify-components-tabs-item-active-background-color	transparent
--amplify-components-tabs-item-active-border-color	var(--amplify-colors-font-interactive)
--amplify-components-tabs-item-active-box-shadow	none
--amplify-components-tabs-item-active-color	var(--amplify-colors-font-interactive)
--amplify-components-tabs-item-background-color	transparent
--amplify-components-tabs-item-border-color	var(--amplify-colors-border-secondary)
--amplify-components-tabs-item-border-style	solid
--amplify-components-tabs-item-border-width	var(--amplify-border-widths-medium)
--amplify-components-tabs-item-color	var(--amplify-colors-font-secondary)
--amplify-components-tabs-item-disabled-background-color	transparent
--amplify-components-tabs-item-disabled-border-color	var(--amplify-colors-border-tertiary)
--amplify-components-tabs-item-disabled-box-shadow	none
--amplify-components-tabs-item-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-tabs-item-focus-background-color	transparent
--amplify-components-tabs-item-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-tabs-item-focus-box-shadow	0px 0px 0px var(--amplify-border-widths-medium) var(--amplify-colors-border-focus)
--amplify-components-tabs-item-focus-color	var(--amplify-colors-font-focus)
--amplify-components-tabs-item-font-size	var(--amplify-font-sizes-medium)
--amplify-components-tabs-item-font-weight	var(--amplify-font-weights-bold)
--amplify-components-tabs-item-hover-background-color	transparent
--amplify-components-tabs-item-hover-border-color	var(--amplify-colors-border-focus)
--amplify-components-tabs-item-hover-box-shadow	none
--amplify-components-tabs-item-hover-color	var(--amplify-colors-font-hover)
--amplify-components-tabs-item-padding-horizontal	var(--amplify-space-medium)
--amplify-components-tabs-item-padding-vertical	var(--amplify-space-small)
--amplify-components-tabs-item-text-align	center
--amplify-components-tabs-item-transition-duration	var(--amplify-time-medium)
--amplify-components-tabs-panel-background-color	transparent
--amplify-components-tabs-panel-padding-block	var(--amplify-space-small)
--amplify-components-tabs-panel-padding-inline	0
--amplify-components-text-color	var(--amplify-colors-font-primary)
--amplify-components-text-error-color	var(--amplify-colors-font-error)
--amplify-components-text-info-color	var(--amplify-colors-font-info)
--amplify-components-text-primary-color	var(--amplify-colors-font-primary)
--amplify-components-text-secondary-color	var(--amplify-colors-font-secondary)
--amplify-components-text-success-color	var(--amplify-colors-font-success)
--amplify-components-text-tertiary-color	var(--amplify-colors-font-tertiary)
--amplify-components-text-warning-color	var(--amplify-colors-font-warning)
--amplify-components-textareafield-border-color	var(--amplify-components-fieldcontrol-border-color)
--amplify-components-textareafield-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-textareafield-focus-border-color	var(--amplify-components-fieldcontrol-focus-border-color)
--amplify-components-textfield-border-color	var(--amplify-components-fieldcontrol-border-color)
--amplify-components-textfield-color	var(--amplify-components-fieldcontrol-color)
--amplify-components-textfield-focus-border-color	var(--amplify-components-fieldcontrol-focus-border-color)
--amplify-components-textfield-font-size	var(--amplify-components-fieldcontrol-font-size)
--amplify-components-togglebutton-active-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-border-color	var(--amplify-colors-border-primary)
--amplify-components-togglebutton-color	var(--amplify-colors-font-primary)
--amplify-components-togglebutton-disabled-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-disabled-border-color	var(--amplify-colors-border-disabled)
--amplify-components-togglebutton-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-togglebutton-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-togglebutton-focus-color	var(--amplify-colors-font-primary)
--amplify-components-togglebutton-hover-background-color	var(--amplify-colors-overlay-10)
--amplify-components-togglebutton-link-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-link-color	var(--amplify-colors-overlay-50)
--amplify-components-togglebutton-link-disabled-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-link-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-togglebutton-link-focus-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-link-focus-color	var(--amplify-colors-overlay-50)
--amplify-components-togglebutton-link-hover-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-link-hover-color	var(--amplify-colors-overlay-50)
--amplify-components-togglebutton-link-pressed-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-link-pressed-color	var(--amplify-colors-overlay-90)
--amplify-components-togglebutton-link-pressed-focus-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-link-pressed-focus-color	var(--amplify-colors-overlay-90)
--amplify-components-togglebutton-link-pressed-hover-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-link-pressed-hover-color	var(--amplify-colors-overlay-90)
--amplify-components-togglebutton-pressed-background-color	var(--amplify-colors-overlay-20)
--amplify-components-togglebutton-pressed-border-color	var(--amplify-colors-border-pressed)
--amplify-components-togglebutton-pressed-color	var(--amplify-colors-font-primary)
--amplify-components-togglebutton-pressed-hover-background-color	var(--amplify-colors-overlay-30)
--amplify-components-togglebutton-primary-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-primary-border-width	var(--amplify-border-widths-small)
--amplify-components-togglebutton-primary-disabled-background-color	var(--amplify-colors-background-disabled)
--amplify-components-togglebutton-primary-disabled-border-color	var(--amplify-colors-border-disabled)
--amplify-components-togglebutton-primary-disabled-color	var(--amplify-colors-font-disabled)
--amplify-components-togglebutton-primary-focus-background-color	var(--amplify-colors-transparent)
--amplify-components-togglebutton-primary-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-togglebutton-primary-focus-box-shadow	var(--amplify-components-fieldcontrol-focus-box-shadow)
--amplify-components-togglebutton-primary-focus-color	var(--amplify-colors-font-primary)
--amplify-components-togglebutton-primary-hover-background-color	var(--amplify-colors-overlay-10)
--amplify-components-togglebutton-primary-hover-color	var(--amplify-colors-font-primary)
--amplify-components-togglebutton-primary-pressed-background-color	var(--amplify-colors-primary-80)
--amplify-components-togglebutton-primary-pressed-border-color	var(--amplify-colors-primary-80)
--amplify-components-togglebutton-primary-pressed-color	var(--amplify-colors-background-primary)
--amplify-components-togglebutton-primary-pressed-focus-background-color	var(--amplify-colors-border-focus)
--amplify-components-togglebutton-primary-pressed-focus-border-color	var(--amplify-colors-border-focus)
--amplify-components-togglebutton-primary-pressed-focus-color	var(--amplify-colors-background-primary)
--amplify-components-togglebutton-primary-pressed-hover-background-color	var(--amplify-colors-primary-60)
--amplify-components-togglebutton-primary-pressed-hover-border-color	var(--amplify-colors-primary-60)
--amplify-components-togglebutton-primary-pressed-hover-box-shadow	var(--amplify-colors-primary-60)
--amplify-components-togglebutton-primary-pressed-hover-color	var(--amplify-colors-background-primary)
--amplify-components-togglebuttongroup-align-content	center
--amplify-components-togglebuttongroup-align-items	center
--amplify-components-togglebuttongroup-justify-content	flex-start
--amplify-font-sizes-large	1.25rem
--amplify-font-sizes-medium	1rem
--amplify-font-sizes-small	0.875rem
--amplify-font-sizes-xl	1.5rem
--amplify-font-sizes-xs	0.75rem
--amplify-font-sizes-xxl	2rem
--amplify-font-sizes-xxs	0.5rem
--amplify-font-sizes-xxxl	2.5rem
--amplify-font-sizes-xxxs	0.375rem
--amplify-font-sizes-xxxxl	3rem
--amplify-font-weights-black	900
--amplify-font-weights-bold	700
--amplify-font-weights-extrabold	800
--amplify-font-weights-hairline	100
--amplify-font-weights-light	300
--amplify-font-weights-medium	500
--amplify-font-weights-normal	400
--amplify-font-weights-semibold	600
--amplify-font-weights-thin	200
--amplify-fonts-default-static	'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif
--amplify-fonts-default-variable	'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif
--amplify-line-heights-large	2
--amplify-line-heights-medium	1.5
--amplify-line-heights-small	1.25
--amplify-opacities-0	0
--amplify-opacities-10	0.1
--amplify-opacities-100	1
--amplify-opacities-20	0.2
--amplify-opacities-30	0.3
--amplify-opacities-40	0.4
--amplify-opacities-50	0.5
--amplify-opacities-60	0.6
--amplify-opacities-70	0.7
--amplify-opacities-80	0.8
--amplify-opacities-90	0.9
--amplify-outline-offsets-large	3px
--amplify-outline-offsets-medium	2px
--amplify-outline-offsets-small	1px
--amplify-outline-widths-large	3px
--amplify-outline-widths-medium	2px
--amplify-outline-widths-small	1px
--amplify-radii-large	1rem
--amplify-radii-medium	0.5rem
--amplify-radii-small	0.25rem
--amplify-radii-xl	2rem
--amplify-radii-xs	0.125rem
--amplify-radii-xxl	4rem
--amplify-radii-xxxl	8rem
--amplify-shadows-large	0px 4px 12px var(--amplify-colors-shadow-primary)
--amplify-shadows-medium	0px 2px 6px var(--amplify-colors-shadow-secondary)
--amplify-shadows-small	0px 2px 4px var(--amplify-colors-shadow-tertiary)
--amplify-space-large	1.5rem
--amplify-space-medium	1rem
--amplify-space-relative-full	100%
--amplify-space-relative-large	1.5em
--amplify-space-relative-medium	1em
--amplify-space-relative-small	0.75em
--amplify-space-relative-xl	2.0em
--amplify-space-relative-xs	0.5em
--amplify-space-relative-xxl	3.0em
--amplify-space-relative-xxs	0.375em
--amplify-space-relative-xxxl	4.5em
--amplify-space-relative-xxxs	0.25em
--amplify-space-small	0.75rem
--amplify-space-xl	2.0rem
--amplify-space-xs	0.5rem
--amplify-space-xxl	3.0rem
--amplify-space-xxs	0.375rem
--amplify-space-xxxl	4.5rem
--amplify-space-xxxs	0.25rem
--amplify-space-zero	0
--amplify-time-long	500ms
--amplify-time-medium	250ms
--amplify-time-short	100ms
--amplify-transforms-slide-x-large	translateX(2em)
--amplify-transforms-slide-x-medium	translateX(1em)
--amplify-transforms-slide-x-small	translateX(0.5em)

--------------------------------------------------------------------------------

Title: Icons | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/icons
HTML Content:
Icons

Customize the icons used in components across your application.

Feedback
Demo
default
heroicons
feather icons
flat color icons
Success
Warning
Error
Info
SelectField
Option 1
Option 2
Option 3
PasswordField
Password is hidden
SearchField
StepperField
3.5 out of 5 rating

Drop files here or

Browse files
Usage

To customize the icons used in the Amplify UI components, wrap your application with the IconProvider component and pass in the icons you want to change. The icons prop should be an object mapping icon names to React components. For example:

3.5 out of 5 rating
Copy
import { IconsProvider, Rating } from '@aws-amplify/ui-react';
import { FiStar } from 'react-icons/fi';

export default function IconProviderExample() {
  return (
    <IconsProvider
      icons={{
        rating: {
          filled: <FiStar />,
          empty: <FiStar />,
        },
      }}
    >
      <Rating value={3.5} />
    </IconsProvider>
  );
}


The icons passed to the IconsProvider are ReactNodes that get rendered directly.

The IconProvider component uses React context to make the custom icon set available to child components. Any component inside the IconProvider will have access to the custom icons via an internal hook. You can nest IconProviders in different parts of your application, just like you would with other React contexts if you wanted to change icons in a certain part of your application.

Components with icons

The components and their icons that can be overridden are:

Accordion
Alert
Checkbox
Menu
Pagination
PasswordField
Rating
SearchField
SelectField
StepperField
StorageManager

Here is the full list of icons you can customize with the IconProvider

Copy
const icons = {
  alert: {
    close: () => </>,
    info: () => </>,
    error: () => </>,
    warning: () => </>,
    success: () => </>,
  },
  checkbox: {
    indeterminate: () => </>,
    checked: () => </>,
  },
  accordion: {
    more: () => </>,
  },
  field: {
    clear: () => </>,
  },
  menu: {
    menu: () => </>,
  },
  pagination: {
    previous: () => </>,
    next: () => </>,
  },
  passwordField: {
    visibility: () => </>,
    visibilityOff: () => </>,
  },
  rating: {
    filled: () => </>,
    empty: () => </>,
  },
  searchField: {
    search: () => </>,
  },
  select: {
    expand: () => </>,
  },
  stepperField: {
    add: () => </>,
    remove: () => </>,
  },
  storageManager: {
    upload: () => </>,
    remove: () => </>,
    error: () => </>,
    success: () => </>,
    file: () => </>,
  }
}


--------------------------------------------------------------------------------

Title: Dark Mode | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/dark-mode
HTML Content:
Dark Mode
Feedback
Overview

Amplify UI supports color modes/schemes, like Dark Mode, through theme overrides. Amplify UI Theme Overrides let you define different theme styles in different contexts, such as color mode. You can also use plain CSS.

There are 2 ways to support light/dark mode in your application:

Rely on the user's OS preference (System Preferences > General > Appearance in Mac)
Place a control like a toggle button in your application that allows the user to switch color modes. With this option you could default to the OS preference or show 3 options: light, dark, system, like this site does.

Either of these approaches work with Amplify UI whether you are using the Theme Overrides or writing plain CSS.

ThemeProvider
colorMode

The ThemeProvider accepts a colorMode prop which can be light, dark, or system.

If you have multiple ThemeProviders in your application, make sure to store colorMode in the application's state or context and pass it to each ThemeProvider or else some parts of your app won't have the right color mode applied. Also, because the theme uses CSS variables which are inherited, your application can have some weird behavior with nested themes and color modes.

Multiple ThemeProviders should be avoided if possible because it is more efficient to use a selector override instead. This site uses nested ThemeProviders for demos.

Default Dark Mode

Amplify UI comes with a default dark mode that you can use.

Note: the Amplify UI theme and any overrides like dark mode are scoped to the ThemeProvider. Changing the color mode in the example will only affect the example code.

JavaScript
TypeScript
Light
Dark
System

Current color mode: system

Copy
import * as React from 'react';
import {
  defaultDarkModeOverride,
  ThemeProvider,
  Card,
  Text,
  ToggleButton,
  ToggleButtonGroup,
} from '@aws-amplify/ui-react';

export const DefaultDarkMode = () => {
  const [colorMode, setColorMode] = React.useState('system');
  const theme = {
    name: 'my-theme',
    overrides: [defaultDarkModeOverride],
  };

  return (
    <ThemeProvider theme={theme} colorMode={colorMode}>
      <Card>
        <ToggleButtonGroup
          value={colorMode}
          isExclusive
          onChange={(value) => setColorMode(value)}
        >
          <ToggleButton value="light">Light</ToggleButton>
          <ToggleButton value="dark">Dark</ToggleButton>
          <ToggleButton value="system">System</ToggleButton>
        </ToggleButtonGroup>
        <Text>Current color mode: {colorMode}</Text>
      </Card>
    </ThemeProvider>
  );
};

System Dark Mode

If you don't want to provide a color mode control on your application, but still want to honor the user's operating system preference for color mode, you can set the colorMode on the ThemeProvider to system. Then use either the default dark mode override styling or provide your own.

Note: to see dark mode applied, change your OS preferences

Hello

Primary text

Secondary text

Tertiary text

Copy
import * as React from 'react';
import {
  defaultDarkModeOverride,
  ThemeProvider,
  Card,
  Text,
  Button,
} from '@aws-amplify/ui-react';

export const SystemDarkModeExample = () => {
  const theme = {
    name: 'my-theme',
    overrides: [defaultDarkModeOverride],
  };

  return (
    // Note: color mode overrides are scoped to the ThemeProvider
    // if you use multiple providers
    <ThemeProvider theme={theme} colorMode="system">
      <Card>
        <Button>Hello</Button>
        <Text variation="primary">Primary text</Text>
        <Text variation="secondary">Secondary text</Text>
        <Text variation="tertiary">Tertiary text</Text>
      </Card>
    </ThemeProvider>
  );
};

Custom dark mode
JavaScript
TypeScript
Light
Dark
System

Current color mode: system

Copy
import * as React from 'react';
import {
  ThemeProvider,
  Card,
  Text,
  ToggleButton,
  ToggleButtonGroup,
} from '@aws-amplify/ui-react';

export const CustomDarkModeExample = () => {
  const [colorMode, setColorMode] = React.useState('system');
  const theme = {
    name: 'my-theme',
    overrides: [
      {
        colorMode: 'dark',
        tokens: {
          colors: {
            font: {
              primary: { value: '{colors.pink.100}' },
              secondary: { value: '{colors.pink.90}' },
              tertiary: { value: '{colors.pink.80}' },
            },
            background: {
              primary: { value: '{colors.purple.10}' },
              secondary: { value: '{colors.purple.20}' },
              tertiary: { value: '{colors.purple.40}' },
            },
            border: {
              primary: { value: '{colors.pink.60}' },
              secondary: { value: '{colors.pink.40}' },
              tertiary: { value: '{colors.pink.20}' },
            },
          },
        },
      },
    ],
  };

  return (
    // Note: color mode overrides are scoped to the ThemeProvider
    // if you use multiple providers
    <ThemeProvider theme={theme} colorMode={colorMode}>
      <Card>
        <ToggleButtonGroup
          value={colorMode}
          isExclusive
          onChange={(value) => setColorMode(value)}
        >
          <ToggleButton value="light">Light</ToggleButton>
          <ToggleButton value="dark">Dark</ToggleButton>
          <ToggleButton value="system">System</ToggleButton>
        </ToggleButtonGroup>
        <Text>Current color mode: {colorMode}</Text>
      </Card>
    </ThemeProvider>
  );
};

CSS

You can also write CSS variables directly to support color modes. If you are using the colorMode prop in the ThemeProvider, you can write CSS like this to support dark mode:

/* The prefers-color-scheme media query detects the system setting */
@media (prefers-color-scheme: dark) {
  [data-amplify-color-mode='system'] {
    --amplify-colors-background-primary: black;
  }
}

[data-amplify-color-mode='dark'] {
  --amplify-colors-background-primary: black;
}


--------------------------------------------------------------------------------

Title: ThemeProvider | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/theme-provider
HTML Content:
ThemeProvider

The ThemeProvider allows you to apply a Theme to your application.

Feedback
AmplifyProvider has been renamed to ThemeProvider. The ThemeProvider export is available since version 2.18.3, previous versions must still use AmplifyProvider.
Usage

Import the ThemeProvider and wrap your application with it:

import { ThemeProvider } from '@aws-amplify/ui-react';

export const App = () => (
  <ThemeProvider>
    <YourApplication />
  </ThemeProvider>
);


After wrapping your application in the ThemeProvider, you have access to all theme values in your components. To style the components in your app, you can either:

Get the theme tokens through the useTheme hook (e.g., tokens.colors.blue[80])
Reference the theme tokens directly in style props (e.g., "purple.80")
Themed Button
Copy
import { Button, useTheme } from '@aws-amplify/ui-react';

export const BasicExample = () => {
  const { tokens } = useTheme();

  return (
    <Button border={`2px solid ${tokens.colors.blue[80]}`} color="purple.80">
      Themed Button
    </Button>
  );
};

theme

To create and use your own custom theme, you may pass a theme object to the theme prop on the ThemeProvider.

Theming overview
Heading text

Some sample text for this card.

Copy
import { Card, Heading, Text, ThemeProvider } from '@aws-amplify/ui-react';

const theme = {
  name: 'custom-theme',
  tokens: {
    components: {
      card: {
        backgroundColor: { value: '{colors.background.secondary}' },
        outlined: {
          borderColor: { value: '{colors.black}' },
        },
      },
      heading: {
        color: { value: '{colors.secondary[80]}' },
      },
      text: {
        color: { value: '{colors.primary[80]}' },
      },
    },
  },
};

export const CustomThemeExample = () => {
  return (
    <ThemeProvider theme={theme}>
      <Card variation="outlined">
        <Heading level={6}>Heading text</Heading>
        <Text>Some sample text for this card.</Text>
      </Card>
    </ThemeProvider>
  );
};

colorMode

The ThemeProvider accepts a colorMode prop which can be light, dark, or system.

See the Dark mode documentation for a detailed explanation of how to use the colorMode prop.

nonce

When you have a Content-Security-Policy (CSP) header defined, the browser will automatically block inline styles.

To safely allow inline styles when using strict CSP rules, you may pass a nonce to the nonce prop on the ThemeProvider. This will add a nonce to the <style> tag rendered by the ThemeProvider. For example:

CSP rules

style-src css-cdn.example.com 'nonce-rAnd0m';


ThemeProvider

<ThemeProvider nonce="rAnd0m">
  {/* your app */}
</ThemeProvider>


HTML output

<style nonce="rAnd0m">
  :root, [data-amplify-theme] {
    --amplify-colors-white: hsl(0, 0%, 100%);
    /* etc */
  }
  /* 
   * Any of your custom theme styles
   */
</style>


For more information, see the following documention on allowing inline styles using a nonce.

--------------------------------------------------------------------------------

Title: Sizes | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/default-theme/sizes
HTML Content:
Sizes

Amplify UI uses design tokens for consistent spacing, border radius, widths, etc.

Feedback
Space
Example usage
CSS
Copy
import { Grid, View, useTheme } from '@aws-amplify/ui-react';

export const SpaceExample = () => {
  const { tokens } = useTheme();
  return (
    <Grid gap={tokens.space.xxl} templateColumns="1fr 1fr">
      <View
        padding={tokens.space.medium}
        backgroundColor={tokens.colors.neutral[20]}
      ></View>
      <View
        padding={tokens.space.medium}
        backgroundColor={tokens.colors.neutral[20]}
      ></View>
    </Grid>
  );
};

zero
--amplify-space-zero
0
xxxs
--amplify-space-xxxs
0.25rem
xxs
--amplify-space-xxs
0.375rem
xs
--amplify-space-xs
0.5rem
small
--amplify-space-small
0.75rem
medium
--amplify-space-medium
1rem
large
--amplify-space-large
1.5rem
xl
--amplify-space-xl
2.0rem
xxl
--amplify-space-xxl
3.0rem
xxxl
--amplify-space-xxxl
4.5rem
relative.xxxs
--amplify-space-relative-xxxs
0.25em
relative.xxs
--amplify-space-relative-xxs
0.375em
relative.xs
--amplify-space-relative-xs
0.5em
relative.small
--amplify-space-relative-small
0.75em
relative.medium
--amplify-space-relative-medium
1em
relative.large
--amplify-space-relative-large
1.5em
relative.xl
--amplify-space-relative-xl
2.0em
relative.xxl
--amplify-space-relative-xxl
3.0em
relative.xxxl
--amplify-space-relative-xxxl
4.5em
relative.full
--amplify-space-relative-full
100%
Border Widths
Example usage
CSS
Custom border button
Copy
import { Button, useTheme, ThemeProvider } from '@aws-amplify/ui-react';

export const BorderWidthExample = () => {
  const { tokens } = useTheme();

  const theme = {
    name: 'custom-theme',
    tokens: {
      components: {
        button: {
          borderWidth: tokens.borderWidths.large,
        },
      },
    },
  };

  return (
    <ThemeProvider theme={theme}>
      <Button color={tokens.colors.secondary[60]}>Custom border button</Button>
    </ThemeProvider>
  );
};

small
--amplify-border-widths-small
1px
medium
--amplify-border-widths-medium
2px
large
--amplify-border-widths-large
3px
Radii
Example usage
CSS
Text
Copy
import { Card, useTheme } from '@aws-amplify/ui-react';

export const RadiiExample = () => {
  const { tokens } = useTheme();
  return (
    <Card
      borderRadius={tokens.radii.xxxl}
      backgroundColor={tokens.colors.green[10]}
    >
      Text
    </Card>
  );
};

xs
--amplify-radii-xs
0.125rem
small
--amplify-radii-small
0.25rem
medium
--amplify-radii-medium
0.5rem
large
--amplify-radii-large
1rem
xl
--amplify-radii-xl
2rem
xxl
--amplify-radii-xxl
4rem
xxxl
--amplify-radii-xxxl
8rem

--------------------------------------------------------------------------------

Title: Colors | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/default-theme/colors
HTML Content:
Colors

The Amplify UI color palette uses hsl() notation, which defines a color by its hue, saturation and lightness.

Feedback
Semantic
Example usage
CSS
Heading text

Some sample text for this card.

Copy
import { Card, Heading, Text, ThemeProvider } from '@aws-amplify/ui-react';

const theme = {
  name: 'custom-theme',
  tokens: {
    components: {
      card: {
        backgroundColor: { value: '{colors.background.secondary}' },
        outlined: {
          borderColor: { value: '{colors.black}' },
        },
      },
      heading: {
        color: { value: '{colors.secondary[80]}' },
      },
      text: {
        color: { value: '{colors.primary[80]}' },
      },
    },
  },
};

export const ColorsExample = () => {
  return (
    <ThemeProvider theme={theme}>
      <Card variation="outlined">
        <Heading level={6}>Heading text</Heading>
        <Text>Some sample text for this card.</Text>
      </Card>
    </ThemeProvider>
  );
};

Font
font.primary
--amplify-colors-font-primary
var(--amplify-colors-neutral-100)
font.secondary
--amplify-colors-font-secondary
var(--amplify-colors-neutral-90)
font.tertiary
--amplify-colors-font-tertiary
var(--amplify-colors-neutral-80)
font.disabled
--amplify-colors-font-disabled
var(--amplify-colors-neutral-60)
font.inverse
--amplify-colors-font-inverse
var(--amplify-colors-white)
font.interactive
--amplify-colors-font-interactive
var(--amplify-colors-primary-80)
font.hover
--amplify-colors-font-hover
var(--amplify-colors-primary-90)
font.focus
--amplify-colors-font-focus
var(--amplify-colors-primary-100)
font.active
--amplify-colors-font-active
var(--amplify-colors-primary-100)
font.info
--amplify-colors-font-info
var(--amplify-colors-blue-90)
font.warning
--amplify-colors-font-warning
var(--amplify-colors-orange-90)
font.error
--amplify-colors-font-error
var(--amplify-colors-red-90)
font.success
--amplify-colors-font-success
var(--amplify-colors-green-90)
Background
background.primary
--amplify-colors-background-primary
var(--amplify-colors-white)
background.secondary
--amplify-colors-background-secondary
var(--amplify-colors-neutral-10)
background.tertiary
--amplify-colors-background-tertiary
var(--amplify-colors-neutral-20)
background.quaternary
--amplify-colors-background-quaternary
var(--amplify-colors-neutral-60)
background.disabled
--amplify-colors-background-disabled
var(--amplify-colors-background-tertiary)
background.info
--amplify-colors-background-info
var(--amplify-colors-blue-10)
background.warning
--amplify-colors-background-warning
var(--amplify-colors-orange-10)
background.error
--amplify-colors-background-error
var(--amplify-colors-red-10)
background.success
--amplify-colors-background-success
var(--amplify-colors-green-10)
Border
border.primary
--amplify-colors-border-primary
var(--amplify-colors-neutral-60)
border.secondary
--amplify-colors-border-secondary
var(--amplify-colors-neutral-40)
border.tertiary
--amplify-colors-border-tertiary
var(--amplify-colors-neutral-20)
border.disabled
--amplify-colors-border-disabled
var(--amplify-colors-border-tertiary)
border.pressed
--amplify-colors-border-pressed
var(--amplify-colors-primary-100)
border.focus
--amplify-colors-border-focus
var(--amplify-colors-primary-100)
border.error
--amplify-colors-border-error
var(--amplify-colors-red-80)
border.info
--amplify-colors-border-info
var(--amplify-colors-blue-80)
border.success
--amplify-colors-border-success
var(--amplify-colors-green-80)
border.warning
--amplify-colors-border-warning
var(--amplify-colors-orange-80)
Shadow
shadow.primary
--amplify-colors-shadow-primary
hsla(210, 50%, 10%, 0.25)
shadow.secondary
--amplify-colors-shadow-secondary
hsla(210, 50%, 10%, 0.15)
shadow.tertiary
--amplify-colors-shadow-tertiary
hsla(210, 50%, 10%, 0.05)
Overlay
overlay[5]
--amplify-colors-overlay-5
hsla(0, 0%, 0%, 0.05)
overlay[10]
--amplify-colors-overlay-10
hsla(0, 0%, 0%, 0.1)
overlay[20]
--amplify-colors-overlay-20
hsla(0, 0%, 0%, 0.2)
overlay[30]
--amplify-colors-overlay-30
hsla(0, 0%, 0%, 0.3)
overlay[40]
--amplify-colors-overlay-40
hsla(0, 0%, 0%, 0.4)
overlay[50]
--amplify-colors-overlay-50
hsla(0, 0%, 0%, 0.5)
overlay[60]
--amplify-colors-overlay-60
hsla(0, 0%, 0%, 0.6)
overlay[70]
--amplify-colors-overlay-70
hsla(0, 0%, 0%, 0.7)
overlay[80]
--amplify-colors-overlay-80
hsla(0, 0%, 0%, 0.8)
overlay[90]
--amplify-colors-overlay-90
hsla(0, 0%, 0%, 0.9)
Brand
Primary
primary[10]
--amplify-colors-primary-10
var(--amplify-colors-teal-10)
primary[20]
--amplify-colors-primary-20
var(--amplify-colors-teal-20)
primary[40]
--amplify-colors-primary-40
var(--amplify-colors-teal-40)
primary[60]
--amplify-colors-primary-60
var(--amplify-colors-teal-60)
primary[80]
--amplify-colors-primary-80
var(--amplify-colors-teal-80)
primary[90]
--amplify-colors-primary-90
var(--amplify-colors-teal-90)
primary[100]
--amplify-colors-primary-100
var(--amplify-colors-teal-100)
Secondary
secondary[10]
--amplify-colors-secondary-10
var(--amplify-colors-purple-10)
secondary[20]
--amplify-colors-secondary-20
var(--amplify-colors-purple-20)
secondary[40]
--amplify-colors-secondary-40
var(--amplify-colors-purple-40)
secondary[60]
--amplify-colors-secondary-60
var(--amplify-colors-purple-60)
secondary[80]
--amplify-colors-secondary-80
var(--amplify-colors-purple-80)
secondary[90]
--amplify-colors-secondary-90
var(--amplify-colors-purple-90)
secondary[100]
--amplify-colors-secondary-100
var(--amplify-colors-purple-100)
Palette
Neutral
neutral[10]
--amplify-colors-neutral-10
hsl(210, 5%, 98%)
neutral[20]
--amplify-colors-neutral-20
hsl(210, 5%, 94%)
neutral[40]
--amplify-colors-neutral-40
hsl(210, 5%, 87%)
neutral[60]
--amplify-colors-neutral-60
hsl(210, 10%, 58%)
neutral[80]
--amplify-colors-neutral-80
hsl(210, 10%, 40%)
neutral[90]
--amplify-colors-neutral-90
hsl(210, 25%, 25%)
neutral[100]
--amplify-colors-neutral-100
hsl(210, 50%, 10%)
Red
red[10]
--amplify-colors-red-10
hsl(0, 75%, 95%)
red[20]
--amplify-colors-red-20
hsl(0, 75%, 85%)
red[40]
--amplify-colors-red-40
hsl(0, 75%, 75%)
red[60]
--amplify-colors-red-60
hsl(0, 50%, 50%)
red[80]
--amplify-colors-red-80
hsl(0, 95%, 30%)
red[90]
--amplify-colors-red-90
hsl(0, 100%, 20%)
red[100]
--amplify-colors-red-100
hsl(0, 100%, 15%)
Orange
orange[10]
--amplify-colors-orange-10
hsl(30, 75%, 95%)
orange[20]
--amplify-colors-orange-20
hsl(30, 75%, 85%)
orange[40]
--amplify-colors-orange-40
hsl(30, 75%, 75%)
orange[60]
--amplify-colors-orange-60
hsl(30, 50%, 50%)
orange[80]
--amplify-colors-orange-80
hsl(30, 95%, 30%)
orange[90]
--amplify-colors-orange-90
hsl(30, 100%, 20%)
orange[100]
--amplify-colors-orange-100
hsl(30, 100%, 15%)
Yellow
yellow[10]
--amplify-colors-yellow-10
hsl(60, 75%, 95%)
yellow[20]
--amplify-colors-yellow-20
hsl(60, 75%, 85%)
yellow[40]
--amplify-colors-yellow-40
hsl(60, 75%, 75%)
yellow[60]
--amplify-colors-yellow-60
hsl(60, 50%, 50%)
yellow[80]
--amplify-colors-yellow-80
hsl(60, 95%, 30%)
yellow[90]
--amplify-colors-yellow-90
hsl(60, 100%, 20%)
yellow[100]
--amplify-colors-yellow-100
hsl(60, 100%, 15%)
Green
green[10]
--amplify-colors-green-10
hsl(130, 60%, 95%)
green[20]
--amplify-colors-green-20
hsl(130, 60%, 90%)
green[40]
--amplify-colors-green-40
hsl(130, 44%, 63%)
green[60]
--amplify-colors-green-60
hsl(130, 43%, 46%)
green[80]
--amplify-colors-green-80
hsl(130, 33%, 37%)
green[90]
--amplify-colors-green-90
hsl(130, 27%, 29%)
green[100]
--amplify-colors-green-100
hsl(130, 22%, 23%)
Teal
teal[10]
--amplify-colors-teal-10
hsl(190, 75%, 95%)
teal[20]
--amplify-colors-teal-20
hsl(190, 75%, 85%)
teal[40]
--amplify-colors-teal-40
hsl(190, 70%, 70%)
teal[60]
--amplify-colors-teal-60
hsl(190, 50%, 50%)
teal[80]
--amplify-colors-teal-80
hsl(190, 95%, 30%)
teal[90]
--amplify-colors-teal-90
hsl(190, 100%, 20%)
teal[100]
--amplify-colors-teal-100
hsl(190, 100%, 15%)
Blue
blue[10]
--amplify-colors-blue-10
hsl(220, 95%, 95%)
blue[20]
--amplify-colors-blue-20
hsl(220, 85%, 85%)
blue[40]
--amplify-colors-blue-40
hsl(220, 70%, 70%)
blue[60]
--amplify-colors-blue-60
hsl(220, 50%, 50%)
blue[80]
--amplify-colors-blue-80
hsl(220, 95%, 30%)
blue[90]
--amplify-colors-blue-90
hsl(220, 100%, 20%)
blue[100]
--amplify-colors-blue-100
hsl(220, 100%, 15%)
Purple
purple[10]
--amplify-colors-purple-10
hsl(300, 95%, 95%)
purple[20]
--amplify-colors-purple-20
hsl(300, 85%, 85%)
purple[40]
--amplify-colors-purple-40
hsl(300, 70%, 70%)
purple[60]
--amplify-colors-purple-60
hsl(300, 50%, 50%)
purple[80]
--amplify-colors-purple-80
hsl(300, 95%, 30%)
purple[90]
--amplify-colors-purple-90
hsl(300, 100%, 20%)
purple[100]
--amplify-colors-purple-100
hsl(300, 100%, 15%)
Pink
pink[10]
--amplify-colors-pink-10
hsl(340, 95%, 95%)
pink[20]
--amplify-colors-pink-20
hsl(340, 90%, 85%)
pink[40]
--amplify-colors-pink-40
hsl(340, 70%, 70%)
pink[60]
--amplify-colors-pink-60
hsl(340, 50%, 50%)
pink[80]
--amplify-colors-pink-80
hsl(340, 95%, 30%)
pink[90]
--amplify-colors-pink-90
hsl(340, 100%, 20%)
pink[100]
--amplify-colors-pink-100
hsl(340, 100%, 15%)
Black
black
--amplify-colors-black
hsl(0, 0%, 0%)
White
white
--amplify-colors-white
hsl(0, 0%, 100%)
Transparent
transparent
--amplify-colors-transparent
transparent

--------------------------------------------------------------------------------

Title: Typography | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/default-theme/typography
HTML Content:
Typography

Amplify UI provides tokens for font weight, font size and line height, as well as variable and static font families.

Feedback
Font weights
Example usage
CSS
Heading Text

Some text example with a different font weight.

Copy
import { Heading, Text, useTheme } from '@aws-amplify/ui-react';

export const FontWeightExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <Heading level={2} fontWeight={tokens.fontWeights.thin}>
        Heading Text
      </Heading>
      <Text fontWeight={tokens.fontWeights.bold}>
        Some text example with a different font weight.
      </Text>
    </>
  );
};


Aa

hairline
--amplify-font-weights-hairline
100

Aa

thin
--amplify-font-weights-thin
200

Aa

light
--amplify-font-weights-light
300

Aa

normal
--amplify-font-weights-normal
400

Aa

medium
--amplify-font-weights-medium
500

Aa

semibold
--amplify-font-weights-semibold
600

Aa

bold
--amplify-font-weights-bold
700

Aa

extrabold
--amplify-font-weights-extrabold
800

Aa

black
--amplify-font-weights-black
900
Font sizes
Example usage
CSS
This is an H2 with a smaller than usual font size.*

*Note: Some smaller text.

Copy
import { Heading, Text, useTheme } from '@aws-amplify/ui-react';

export const FontSizesExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <Heading level={2} fontSize={tokens.fontSizes.medium}>
        This is an H2 with a smaller than usual font size.<sup>*</sup>
      </Heading>
      <Text fontSize={tokens.fontSizes.small}>
        <sup>*</sup>Note: Some smaller text.
      </Text>
    </>
  );
};

Aa
xxxs
--amplify-font-sizes-xxxs
0.375rem
Aa
xxs
--amplify-font-sizes-xxs
0.5rem
Aa
xs
--amplify-font-sizes-xs
0.75rem
Aa
small
--amplify-font-sizes-small
0.875rem
Aa
medium
--amplify-font-sizes-medium
1rem
Aa
large
--amplify-font-sizes-large
1.25rem
Aa
xl
--amplify-font-sizes-xl
1.5rem
Aa
xxl
--amplify-font-sizes-xxl
2rem
Aa
xxxl
--amplify-font-sizes-xxxl
2.5rem
Aa
xxxxl
--amplify-font-sizes-xxxxl
3rem
Line heights
Example usage
CSS

This is some example paragraph text with a small line height.

This is some example paragraph text with a medium line height.

This is some example paragraph text with a large line height.

Copy
import { Grid, Text, useTheme } from '@aws-amplify/ui-react';

export const LineHeightsExample = () => {
  const { tokens } = useTheme();
  return (
    <Grid
      gap={tokens.space.medium}
      templateColumns="repeat(auto-fill, minmax(200px, 1fr))"
    >
      <Text lineHeight={tokens.lineHeights.small}>
        This is some example paragraph text with a small line height.
      </Text>
      <Text lineHeight={tokens.lineHeights.medium}>
        This is some example paragraph text with a medium line height.
      </Text>
      <Text lineHeight={tokens.lineHeights.large}>
        This is some example paragraph text with a large line height.
      </Text>
    </Grid>
  );
};

Aa
small
--amplify-line-heights-small
1.25
Aa
medium
--amplify-line-heights-medium
1.5
Aa
large
--amplify-line-heights-large
2
Font families

Amplify UI ships with tokens for both static and variable fonts. The benefit of a variable font is you can include many variations of the font (for weight and axes) in a single file. Learn more about variable weight fonts in this guide from MDN

The quick brown fox jumps over the lazy dog.

default.variable
--amplify-fonts-default-variable
'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif

The quick brown fox jumps over the lazy dog.

default.static
--amplify-fonts-default-static
'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif

--------------------------------------------------------------------------------

Title: Default Theme | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/default-theme
HTML Content:
Default Theme

The default theme tokens in Amplify UI define our base palette, typography, and sizing used throughout the design system.

Feedback

Amplify UI follows a consistent pattern when defining our default tokens for properties such as color, font size, border radius, and more. In addition to the reference here, you can browse our default tokens and their corresponding types on GitHub.

Explore theme tokens
Colors
Tokens that define our default color palette
Typography
Font families, font sizes, line heights and more
Sizes
Tokens for spacing, border widths and radii
Referencing default theme tokens

The overall structure of the default theme object gives us a clue as to how to reference each token. If we look at the top level of the object, we can see how the tokens are separated by properties:

*/
interface BaseTokens<Output extends OutputVariantKey = unknown> {
  borderWidths?: BorderWidths<Output>;
  colors?: Colors<Output>;
  fonts?: Fonts<Output>;
  fontSizes?: FontSizes<Output>;
  fontWeights?: FontWeights<Output>;
  lineHeights?: LineHeights<Output>;
  opacities?: Opacities<Output>;
  outlineOffsets?: OutlineOffsets<Output>;
  outlineWidths?: OutlineWidths<Output>;
  radii?: Radii<Output>;
  shadows?: Shadows<Output>;
  space?: Space<Output>;
  time?: Time<Output>;
  transforms?: Transforms<Output>;
}


If we use space as an example, we'd discover its token definition looks similar to the following (shortened for example):

  space: {
    xxs: {},
    xs: {},
    small: {
      value: "0.75rem"
    }
    medium: {},
    large: {},
  }


All of our tokens follow this pattern: a top level namespace that is further defined by a scale, each which has their own unique value. In the case of our space design tokens, that scale is based on a size: small, medium, large, etc. Our color tokens, on the other hand, are further defined by hue (red, blue, yellow, etc), and then by a numerical scale based on lightness (10-100).

This structure allows us to reference the small space value as space.small using Style Props like in the following example.

import { View } from '@aws-amplify/ui-react';

const MyComponent = () => {
  return <View marginBottom="space.small">{children}</View>;
};


Or we can use the design token to create a custom theme.

const theme {
  name: 'custom-theme',
  tokens: {
    components: {
      card: {
        padding: { value: '{space.small}' },
      },
    },
  },
};


The space token definition also gives us an idea of how the CSS custom properties associated with each token are named. Amplify UI uses StyleDictionary to generate the associated CSS custom properties for each token. For the small space token, this would be --amplify-space-small and you can use it in your stylesheet as:

.my-component {
  margin-bottom: var(--amplify-space-small);
}


--------------------------------------------------------------------------------

Title: Responsive Design | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming/responsive
HTML Content:
Responsive Design
Feedback

Responsive styling is supported out of the box using our default breakpoints. Our responsive support uses a mobile first approach, so @media(min-width) rules are used for all breakpoints.

Breakpoints
{
  base: '0',
  small: '480px',
  medium: '768px',
  large: '992px',
  xl: '1280px',
  xxl: '1536px',
}


Code

Example

Import any of our primitives and use either the object or array syntax to changes styles responsively. Resize your browser window window to see the styles change.

import { Flex, View } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

<Flex direction={{ base: 'column', large: 'row' }}>
  <View width="100%" backgroundColor={{ base: 'orange', large: 'yellow' }}>
    Hello
  </View>
  <View width="100%" backgroundColor={['orange', 'orange', 'orange', 'yellow']}>
    there!
  </View>
</Flex>;


Hello

there!

Object Syntax

When using the object syntax, you can specify a style for multiple viewpoint ranges. The example below shows setting a style of orange from base (0em) through small, and yellow from medium (48em) upwards.

// View will be orange from 0 to 47em, then change to yellow from 48em upwards.
<View backgroundColor={{ base: 'orange', medium: 'yellow' }} />


Or you can use the object syntax to specify styling for each breakpoint individually

// View background color and text color will change at each breakpoint
<View
  color={{
    base: 'black',
    small: 'black',
    medium: 'black',
    large: 'white',
    xl: 'white',
    xxl: 'white',
  }}
  backgroundColor={{
    base: 'red',
    small: 'orange',
    medium: 'yellow',
    large: 'green',
    xl: 'blue',
    xxl: 'purple',
  }}
>
  Hello
</View>


Hello

Array syntax

When using the array syntax, specify each breakpoint styling in order from base up to xxl. If only a few styles are specified, all the breakpoints above will have the same style.

  <Text
    as="span"
    fontSize={['1rem', '2rem', '3rem', '4rem', '5rem', '6rem']}
    lineHeight="normal"
  >
    {' 🐈 '}
  </Text>
  <Text as="span" fontSize={['1rem', '2rem', '3rem']} lineHeight="normal">
    {' 🐕 '}
  </Text>

🐈
🐕
useBreakpointValue

A responsive design can be achieved for all properties using the useBreakpointValue hook. The hook will accept the object or array syntax and return the value of the current breakpoint.

Responsive Alert
Copy
import {
  Alert,
  AlertVariations,
  useBreakpointValue,
} from '@aws-amplify/ui-react';

export const UseBreakpointValueObjectExample = () => {
  const variation = useBreakpointValue({
    base: 'info',
    small: 'warning',
    medium: 'error',
    large: 'success',
  }) as AlertVariations;

  return <Alert variation={variation}>Responsive Alert</Alert>;
};

Responsive Alert
Copy
import {
  Alert,
  AlertVariations,
  useBreakpointValue,
} from '@aws-amplify/ui-react';

export const UseBreakpointValueArrayExample = () => {
  const variation = useBreakpointValue([
    'info',
    'warning',
    'error',
    'success',
  ]) as AlertVariations;

  return <Alert variation={variation}>Responsive Alert</Alert>;
};


--------------------------------------------------------------------------------

Title: Storage Manager | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/storage/storagemanager
HTML Content:
Storage Manager

The Storage Manager lets your users upload and manage files to the cloud.

Theme source
React source
Feedback

Drop files here or

Browse files
Basic Usage
Wait!

Did you follow the quick start instructions to set up the storage and auth services?

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

To use the StorageManager component import it into your React application with the included styles.

npm
yarn
npm install @aws-amplify/ui-react-storage aws-amplify
Copy
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';
import '@aws-amplify/ui-react/styles.css';


At a minimum you must include the path and maxFileCount props. path refers to the S3 image path that will be prefixed to each file key. It is either a string or a callback function that accepts the current user's Cognito identityId and returns a string. See upload files

Version 3.0.18

Using @aws-amplify/ui-react-storage version 3.0.18 or below and looking for the accessLevel prop? See Deprecated Props

Drop files here or

Browse files
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  return (
    <StorageManager
      acceptedFileTypes={['image/*']}
      path="public/"
      maxFileCount={1}
      isResumable
    />
  );
};

Private or Protected Buckets

When uploading to private or protected S3 buckets, you'll need to wrap your app in the Authenticator, allowing the StorageManager component to infer the Cognito identityId of the currently signed-in user. This can be done directly with the Authenticator component or with withAuthenticator, as shown in Add the Authenticator.

The example below shows configuring the StorageManager to upload to the protected folder under the users' identity id.

Copy
<StorageManager
  acceptedFileTypes={['image/*']}
  path={({ identityId }) => `protected/${identityId}/`}
  maxFileCount={1}
  isResumable
/>

Deprecated props

Using @aws-amplify/ui-react-storage version 3.0.18 or below?

The uploading capabilities in these examples are stubbed out so they don't actually upload files anywhere!

Props
Name	Description	Type
path	S3 bucket key prefixed to each upload target file `key`, allows either a `string` or a callback provided the value of the current user's `identityId`.	
string | (input: { identityId: string | undefined }) => string

path?	Optional when `accessLevel` is provided. S3 bucket key prefixed to each upload target file `key`	
string

accessLevel	Deprecated in favor of `path`. S3 access level of upload target files. See https://docs.amplify.aws/gen1/react/build-a-backend/storage/configure-access/	
'guest' | 'protected' | 'private'

acceptedFileTypes?	List of accepted file types, values of `['*']` or undefined allow any files	
string[]

autoUpload?	Determines if the upload will automatically start after a file is selected. The default value is `true`	
boolean

maxFileCount		
integer

maxFileSize?		
integer

onUploadStart?	Called when a file starts uploading	
(file: {key: string}) => void;

onUploadSuccess?	Called when a file successfully uploads	
(file: {key: string}) => void;

onUploadError?	Called when a error happens uploading a file	
(error: string, file: {key: string}) => void;

onFileRemove?	Called when a file is removed	
(file: {key: string}) => void;

processFile?	Called immediately before uploading a file to allow you to edit the key or the file itself. The function can return synchronously or return a promise.	
(params: {key: string, file: Blob}) => Promise<{key: string, file: Blob} & Record<string, any>> | {key: string, file: Blob} & Record<string, string>;

defaultFiles?	An array of files that already exist in the cloud.	
Array<{s3key: string}>

displayText?	Text to override in the component.	
StorageManagerDisplayText

useAccelerateEndpoint?	Use the accelerated S3 endpoint to upload files.	
boolean

components?.Container?	The container the StorageManager is wrapped in.	
React.ComponentType<ContainerProps>

components?.DropZone?	The dropzone element which contains the FilePicker	
React.ComponentType<DropZoneProps>

components?.FilePicker?	The button that opens the file picker menu.	
React.ComponentType<FilePickerProps>

components?.FileList?	The list of files that is being uploaded.	
React.ComponentType<FileListProps>

components?.FileListHeader?	The heading above the list of files	
React.ComponentType<FileListHeaderProps>

components?.FileListFooter?	The footer below the list of files	
React.ComponentType<FileListFooterProps>

ref?	Forward ref prop exposing StorageManager imperative methods.	
React.ForwardedRef<StorageManagerHandle>
Manually Upload

The default behavior of the Storage Manager component is to automatically start the upload after a file is selected. If you wish to change that, set the value of the autoUpload prop to false.

Drop files here or

Browse files
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  return (
    <StorageManager
      acceptedFileTypes={['image/*']}
      path="public/"
      autoUpload={false}
      maxFileCount={1}
      isResumable
    />
  );
};

Setting Limits

You can limit what users upload with these 3 props:

maxFileSize: sets a maximum file size the uploader will accept in bytes. The default is unlimited.
maxFileCount: accepts how many files at one time you can select to upload.
acceptedFileTypes: an array of file type strings that follow the HTML accept attribute.

Drop files here or

Browse files
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  return (
    <StorageManager
      acceptedFileTypes={[
        // you can list file extensions:
        '.gif',
        '.bmp',
        '.doc',
        '.jpeg',
        '.jpg',
        // or MIME types:
        'image/png',
        'video/*',
      ]}
      path="public/"
      maxFileCount={5}
      // Size is in bytes
      maxFileSize={10000}
    />
  );
};

Pausable / Resumable Uploads

A resumable upload will upload the file in chunks. This allows users to pause an upload and resume it at a later time. You will typically want to do this only when the expected files are larger than the chunk size, which is 5MB.

Drop files here or

Browse files
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  return (
    <StorageManager
      acceptedFileTypes={['image/*', '.zip', '.mp4']}
      path="public/"
      maxFileCount={10}
      isResumable
    />
  );
};

Pre-upload Processing

You might want to process or modify the file(s) and/or file name(s) before they are uploaded. One common situation is you may want to ensure files uploaded are at unique keys by hashing the file contents and using that as the key rather than the filename.

You can pass a processFile function to the StorageManager which accepts an object with file: File, and key: string, and should return an object with file, key, and any other Storage configurations. The processFile can either return synchronously or return a Promise. This example uses a Promise to read the contents of the file and create a hash for the key.

Drop files here or

Browse files
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

const processFile = async ({ file }) => {
  const fileExtension = file.name.split('.').pop();

  return file
    .arrayBuffer()
    .then((filebuffer) => window.crypto.subtle.digest('SHA-1', filebuffer))
    .then((hashBuffer) => {
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashHex = hashArray
        .map((a) => a.toString(16).padStart(2, '0'))
        .join('');
      return { file, key: `${hashHex}.${fileExtension}` };
    });
};

export const App = () => {
  return (
    <StorageManager
      acceptedFileTypes={['image/*']}
      path="public/"
      maxFileCount={1}
      processFile={processFile}
    />
  );
};


Other uses-cases for processing the file before upload:

Performing file optimizations like removing unnecessary metadata.
Performing custom file validations like reading the contents of a file to ensure it is in the proper structure.

You can also add any other Amplify Storage options by adding them to the return object of processFile

Event Handling

The StorageManager component has several event handlers: onUploadStart, onUploadSuccess, onUploadError, and onFileRemove

Drop files here or

Browse files
Copy
import * as React from 'react';
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  const [files, setFiles] = React.useState({});

  return (
    <>
      <StorageManager
        acceptedFileTypes={['image/*']}
        path={({ identityId }) => `private/${identityId}/`}
        maxFileCount={3}
        onFileRemove={({ key }) => {
          setFiles((prevFiles) => {
            return {
              ...prevFiles,
              [key]: undefined,
            };
          });
        }}
        onUploadError={(error, { key }) => {
          setFiles((prevFiles) => {
            return {
              ...prevFiles,
              [key]: {
                status: 'error',
              },
            };
          });
        }}
        onUploadSuccess={({ key }) => {
          setFiles((prevFiles) => {
            return {
              ...prevFiles,
              [key]: {
                status: 'success',
              },
            };
          });
        }}
        onUploadStart={({ key }) => {
          setFiles((prevFiles) => {
            return {
              ...prevFiles,
              [key]: {
                status: 'uploading',
              },
            };
          });
        }}
      />
      {Object.keys(files).map((key) => {
        return files[key] ? (
          <div>
            {key}: {files[key].status}
          </div>
        ) : null;
      })}
    </>
  );
};

Use a previousState

Be careful setting state in the onUploadSuccess because that function is bound when the upload starts. Make sure to use the previous state argument rather than the current state in the component.

path Usage

The path prop of the StorageManager is prepended to the key value (resolved from either the file itself or the returned key of processFile) submitted to S3. Using a '/' as the last character of path allows uploading to a specific folder inside the provided accessLevel folder.

Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  return (
    <StorageManager
      path="public/images/"
      acceptedFileTypes={['image/*']}
      maxFileCount={1}
    />
  );
};

Adding metadata

Metadata is added as an object with string key-value pairs. It is sent as custom HTTP headers with the name x-amz-meta-[key]. For example, if your metadata for a file was {mode: 'night'}, it would set the x-amz-meta-mode HTTP header to night.

You can add metadata by adding a metadata object in the return object of processFile.

Drop files here or

Browse files
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

const processFile = ({ file, key }) => {
  return {
    file,
    key,
    metadata: {
      id: key,
    },
  };
};

export function App() {
  return (
    <StorageManager
      acceptedFileTypes={['image/*']}
      path="public/"
      maxFileCount={3}
      showThumbnails={true}
      processFile={processFile}
    />
  );
}

Accelerate Endpoint

Amazon S3 transfer acceleration optimizes transfer speeds from around the world into S3 buckets. When you use Transfer Acceleration, additional data transfer charges might apply. For more information about pricing, see Amazon S3 pricing.

To use transfer acceleration you first need to enable it on your S3 bucket. Then add useAccelerateEndpoint on the <StorageManager /> component. By default transfer acceleration is off.

Copy
<StorageManager
  acceptedFileTypes={['image/*']}
  maxFileCount={10}
  useAccelerateEndpoint
/>


You can also choose whether or not to use transfer acceleration at the file level by returning useAccelerateEndpoint from the processFile function.

Copy
<StorageManager
  acceptedFileTypes={['image/*']}
  maxFileCount={10}
  processFile={({ file, key }) => {
    return {
      file,
      key,
      useAccelerateEndpoint: file.size > 10000 ? true : false,
    };
  }}
/>

Customization
Text and labels

All text in the StorageManager component is customizable with the displayText prop.

drag-and-drop here

Open file picker
Copy
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  return (
    <StorageManager
      acceptedFileTypes={['image/*']}
      path="public/"
      maxFileCount={1}
      displayText={{
        // some text are plain strings
        dropFilesText: 'drag-and-drop here',
        browseFilesText: 'Open file picker',
        // others are functions that take an argument
        getFilesUploadedText(count) {
          return `${count} images uploaded`;
        },
      }}
    />
  );
};


Display text props

Internationalization

You can use the displayText prop to also support different languages. Use an open source library like i18next, react-intl, or make your own:

En
Es

Drop files here or

Browse files
Copy
import * as React from 'react';
import { ToggleButtonGroup, ToggleButton } from '@aws-amplify/ui-react';
import { StorageManager } from '@aws-amplify/ui-react-storage';

const dictionary = {
  // use default strings for english
  en: null,
  es: {
    getFilesUploadedText(count) {
      return `${count} ${
        count === 1 ? 'archivo cargado' : 'archivos cargados'
      }`;
    },
    getFileSizeErrorText(sizeText) {
      return `El tamaño del archivo debe ser menor a ${sizeText}`;
    },
    getRemainingFilesText(count) {
      return `${count} ${count === 1 ? 'archivo' : 'archivos'} subiendo`;
    },
    getUploadingText(percentage) {
      return `Subiendo${percentage > 0 ? `: ${percentage}%` : ''}`;
    },
    getUploadButtonText(count) {
      return `Cargar ${count} ${count === 1 ? 'archivo' : 'archivos'}`;
    },
    getMaxFilesErrorText(count) {
      return `No se pueden seleccionar más de ${count} ${
        count === 1 ? 'archivo' : 'archivos'
      }. Elimine archivos antes de actualizar.`;
    },
    getErrorText(message) {
      return message;
    },
    doneButtonText: 'Listo',
    clearAllButtonText: 'Limpiar todo',
    extensionNotAllowedText: 'Extensión no permitida',
    browseFilesText: 'Buscar archivos',
    dropFilesText: 'Arrastre los archivos aquí o',
    pauseButtonText: 'Pausa',
    resumeButtonText: 'Reanudar',
    uploadSuccessfulText: 'Carga exitosa',
    getPausedText(percentage) {
      return `Pausado: ${percentage}%`;
    },
  },
};

export const App = () => {
  const [language, setLanguage] = React.useState('en');
  return (
    <>
      <ToggleButtonGroup
        value={language}
        isExclusive
        onChange={(value) => setLanguage(value)}
      >
        <ToggleButton value="en">En</ToggleButton>
        <ToggleButton value="es">Es</ToggleButton>
      </ToggleButtonGroup>
      <StorageManager
        acceptedFileTypes={['image/*']}
        path="public/"
        maxFileCount={1}
        displayText={dictionary[language]}
      />
    </>
  );
};

Component overrides

Don't like how things look? Use your own components inside the StorageManager! You can pass your own components with the components prop. The available components to override are: Container, FileList, FileListHeader, FileListFooter, DropZone, and FilePicker.

You can even use a completely different UI kit like MUI, Chakra, or your own design system!

Drop files here

Browse Files
Copy
import * as React from 'react';
import {
  Card,
  Button,
  Flex,
  Text,
  Divider,
  Image,
  Loader,
  Icon,
} from '@aws-amplify/ui-react';
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  return (
    <StorageManager
      acceptedFileTypes={['image/*']}
      path="public/"
      maxFileCount={100}
      components={{
        Container({ children }) {
          return <Card variation="elevated">{children}</Card>;
        },
        DropZone({ children, displayText, inDropZone, ...rest }) {
          return (
            <Flex
              alignItems="center"
              direction="column"
              padding="medium"
              backgroundColor={inDropZone ? 'primary.10' : ''}
              {...rest}
            >
              <Text>Drop files here</Text>
              <Divider size="small" label="or" maxWidth="10rem" />
              {children}
            </Flex>
          );
        },
        FilePicker({ onClick }) {
          return (
            <Button variation="primary" onClick={onClick}>
              Browse Files
            </Button>
          );
        },
        FileList({ files, onCancelUpload, onDeleteUpload }) {
          return (
            <Flex direction="row">
              {files.map(({ file, key, progress, id, status, uploadTask }) => (
                <Flex
                  key={key}
                  justifyContent="center"
                  alignItems="center"
                  width="5rem"
                  height="5rem"
                  position="relative"
                >
                  <Image
                    borderRadius="small"
                    height="100%"
                    objectFit="cover"
                    src={URL.createObjectURL(file)}
                    alt={key}
                  />
                  {progress < 100 ? (
                    <Loader
                      position="absolute"
                      size="large"
                      percentage={progress}
                      isDeterminate
                      isPercentageTextHidden
                    />
                  ) : null}

                  <Button
                    opacity="50"
                    borderRadius="xxl"
                    backgroundColor="background.primary"
                    position="absolute"
                    variation="link"
                    size="small"
                    onClick={() => {
                      if (status === 'uploading') {
                        onCancelUpload({ id, uploadTask });
                      } else {
                        onDeleteUpload({ id });
                      }
                    }}
                  >
                    <Icon
                      fontSize="large"
                      color="font.error"
                      viewBox={{ width: 512, height: 512 }}
                      paths={[
                        {
                          d: 'M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z',
                          strokeWidth: '32',
                          fill: 'none',
                          strokeMiterlimit: '10',
                          stroke: 'currentColor',
                        },
                        {
                          d: 'M320 320L192 192m0 128l128-128',
                          strokeWidth: '32',
                          fill: 'none',
                          strokeLinecap: 'round',
                          stroke: 'currentColor',
                        },
                      ]}
                    />
                  </Button>
                </Flex>
              ))}
            </Flex>
          );
        },
      }}
    />
  );
};


FilePicker props

DropZone props

Imperative handles

The files state is managed within the StorageManager component itself. To allow for clearing the internal files state, StorageManager exposes a custom ref handle to the parent component with a clearFiles method.

Drop files here or

Browse files
Clear Files
Copy
import * as React from 'react';
import { Button } from '@aws-amplify/ui-react';
import { StorageManager } from '@aws-amplify/ui-react-storage';

export const App = () => {
  const ref = React.useRef(null);

  return (
    <>
      <StorageManager
        acceptedFileTypes={['image/*']}
        path="public/"
        maxFileCount={3}
        ref={ref}
      />
      <Button onClick={() => ref.current.clearFiles()}>Clear Files</Button>
    </>
  );
};

Theming

Drop files here or

Browse files
Copy
import { ThemeProvider } from '@aws-amplify/ui-react';
import { StorageManager } from '@aws-amplify/ui-react-storage';

const theme = {
  name: 'my-theme',
  tokens: {
    borderWidths: {
      small: '2px',
    },
    components: {
      storagemanager: {
        dropzone: {
          borderColor: '{colors.primary.60}',
        },
      },
    },
  },
};

export const App = () => {
  return (
    <ThemeProvider theme={theme}>
      <StorageManager
        acceptedFileTypes={['image/*']}
        path="public/"
        maxFileCount={5}
      />
    </ThemeProvider>
  );
};

Target Classes

If you like, you can target classes directly or use CSS variables to make changes to the look and feel of the Storage Manager.

Target Classes
CSS Variables
Class	Description
amplify-storagemanager	
amplify-storagemanager__dropzone	
amplify-storagemanager__dropzone__icon	
amplify-storagemanager__dropzone__text	
amplify-storagemanager__file__picker	
amplify-storagemanager__file	
amplify-storagemanager__file__wrapper	
amplify-storagemanager__file__list	
amplify-storagemanager__file__name	
amplify-storagemanager__loader	
amplify-storagemanager__file__size	
amplify-storagemanager__file__info	
amplify-storagemanager__file__image	
amplify-storagemanager__file__main	
amplify-storagemanager__file__status	
amplify-storagemanager__previewer	
amplify-storagemanager__previewer__text	
amplify-storagemanager__previewer__actions	
amplify-storagemanager__previewer__footer	

--------------------------------------------------------------------------------

Title: Theming | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/theming
HTML Content:
Overview
Feedback

A Theme is a structured collection of design decisions that change the appearance of a UI library. An Amplify UI theme is a structured object of design tokens, breakpoints, and overrides. The goals of the Amplify UI theme are:

Leverage platform technologies as much as possible for performance and broad support. This means plain CSS and CSS variables. You can always fall back to writing CSS (or a pre-processer to CSS like Sass).
Use framework-specific patterns to provide an easier developer experience. This means providing an extendable theme which generates CSS and CSS variables for your application.
Getting started

Step 1: Wrap your App with ThemeProvider

import { ThemeProvider } from '@aws-amplify/ui-react';
const App = (
  <ThemeProvider>
    <MyApp>/* AmplifyUI */</MyApp>
  </ThemeProvider>
);


Step 2: Use the theme to style components

// Option 1: Use the theme through component variations
import { Text } from '@aws-amplify/ui-react';
const MyComponent = ({ children }) => {
  return <Text variation="primary">{children}</Text>;
};

// Option 2: Get the theme object through the useTheme hook and style components with it
import { Text, useTheme } from '@aws-amplify/ui-react';
const MyComponent = ({ children }) => {
  const { tokens } = useTheme();
  return <Text color={tokens.colors.font.tertiary}>{children}</Text>;
};


Optional: To extend or override a token in the default theme, create a custom theme:

Javascript
TypeScript
import { ThemeProvider, Theme } from '@aws-amplify/ui-react';

// Step 1: Create a new Theme with your custom values
const theme = {
  name: 'my-theme',
  tokens: {
    colors: {
      font: {
        primary: { value: '#008080' },
        // ...
      },
    },
  },
};

// Step 2: Pass the new theme to `ThemeProvider`
// this will apply the theme to all Amplify UI components
const App = (
  <ThemeProvider theme={theme}>
    <MyApp>/* AmplifyUI */</MyApp>
  </ThemeProvider>
);

Theme object

The theme object is where you define tokens for color palette, font stacks, spacing, and more. By default it will extend from the defaultTheme Amplify UI provides.

export const myTheme = {
  name: 'my-theme',
  tokens: {
    colors: {
      font: {
        primary: { value: 'red' },
      },
    },
  },
};

CSS

You can theme Amplify UI using CSS and CSS variables if you do not want to use the theme object structure. Amplify UI components use plain CSS so styling components can be done with CSS (or a pre-processor like Sass). All of the design tokens defined in the Amplify theme are CSS variables which can be overridden:

:root, [data-amplify-theme] {
  --amplify-colors-font-primary: #333;
  /* you can also use references: */
  --amplify-colors-font-secondary: var(--amplify-colors-neutral-60);
}


If you want more customization than the design tokens provide, you can also override the CSS for components:

/* All components have a class name starting with `amplify` */
.amplify-button {
  font-size: 2rem;
  padding: 1rem 2rem;
  background: none;
  border: 2px solid black;
}

.amplify-button:hover {
  background: gray;
}


Or if you prefer you can use alternative styling with a styling libraries

Unstyled

Amplify UI components can be use unstyled if you want full control over the look-and-feel. To use the components unstyled, import them as you normally would and do not import the CSS.

import { Button, Card } from '@aws-amplify/ui-react';

// don't import the CSS:
// import '@aws-amplify/ui-react/styles.css';

export const App = () => {
  // ...
};

Theme Structure
Design Tokens

Amplify UI uses Design Tokens for storing design decisions and is the primary way to theme the components. Design tokens are categorized by type under namespaces; for example, colors go under the colors namespace. Stitches, Chakra-UI, and Evergreen use a similar convention for organizing their design tokens.

*/
interface BaseTokens<Output extends OutputVariantKey = unknown> {
  borderWidths?: BorderWidths<Output>;
  colors?: Colors<Output>;
  fonts?: Fonts<Output>;
  fontSizes?: FontSizes<Output>;
  fontWeights?: FontWeights<Output>;
  lineHeights?: LineHeights<Output>;
  opacities?: Opacities<Output>;
  outlineOffsets?: OutlineOffsets<Output>;
  outlineWidths?: OutlineWidths<Output>;
  radii?: Radii<Output>;
  shadows?: Shadows<Output>;
  space?: Space<Output>;
  time?: Time<Output>;
  transforms?: Transforms<Output>;
}

References

One import thing about design tokens is they can reference other design tokens. The default theme tokens use references a lot to make a robust system where you can modify a few tokens to have a large effect. The syntax for design token references follows the draft W3C Design Tokens Community Group specification

const myTheme = {
  name: 'my-theme',
  tokens: {
    colors: {
      font: {
        // references colors.neutral.100
        // because the default theme defines that color already
        // we don't need to re-define it here
        primary: { value: '{colors.neutral.100.value}' },
      },
    },
  },
};

Component token definitions

Amplify UI follows a consistent pattern when defining tokens for a component's states and variations. This is helpful for discovering what tokens are available for theming different aspects of a component. Amplify UI uses the following pattern:

component[modifier][_state][child];


A modifier could be a distinct style variation, like the primary or link variant for the Button component. A modifier could also be a variation based on size, such as small, medium, or large.

State typically refers to a change in the component due to an interaction from the user or application itself, such as hover, focus, loading or disabled. Note: Amplify UI prefixes states with an underscore, _, to help distinguish state names from modifier names.

The Button component is a good example of a token definition that includes multiple states and modifiers and follows this pattern:

export const button = {
  //  ... default tokens

  // states
  _hover: {},
  _focus: {},
  _loading: {},
  _disabled: {},

  // variations with states
  primary: {
    _hover: {},
    _focus: {},
    _loading: {},
    _disabled: {},
  },

  // size modifiers
  small: {},
  large: {},
};


Compiled, this would create the following CSS custom properties:

--amplify-component-button-hover-token: value,
--amplify-component-button-focus-token: value,
--amplify-component-button-hover-loading: value,
--amplify-component-button-focus-disabled: value,
--amplify-component-button-primary-hover-token: value,
--amplify-component-button-primary-focus-token: value,
--amplify-component-button-primary-hover-loading: value,
--amplify-component-button-primary-focus-disabled: value,
--amplify-component-button-small-token: value,
--amplify-component-button-large-token: value,

Fonts

Amplify UI allows custom fonts to be used in the theme. The font tokens are defined in the fonts namespace. You can define your primary font stack and fallback font stack values the same way you would do in a CSS font-family rule.

const myTheme = {
  name: 'my-theme',
  tokens: {
    fonts: {
      default: {
        variable: { value: 'Raleway, sans-serif' },
        static: { value: 'Raleway, sans-serif' },
      },
    },
  },
};

Breakpoints

Breakpoints allow you to set media query breakpoints for responsive design. You can then define breakpoint-specific token overrides or use the breakpoints for different layouts in Javascript.

type BreakpointKey = 'base' | 'small' | 'medium' | 'large' | 'xl' | 'xxl';

export interface Breakpoints {
  values: Record<BreakpointKey, number>;
  defaultBreakpoint: BreakpointKey;
}

// Breakpoint unit is in pixels
export const breakpoints: Breakpoints = {
  values: {
    base: 0,
    small: 480, // breakpoint unit is px
    medium: 768,
    large: 992,
    xl: 1280,
    xxl: 1536,
  },
  defaultBreakpoint: 'base',
};


You can modify default breakpoints in your theme's breakpoints definition:

const myTheme = {
  name: 'my-theme',
  breakpoints: {
    // Will be deep merged with the default theme
    // so you don't have to override all the breakpoint values
    values: {
      // default unit is 'em'
      medium: 50,
    },
  },
  //...
};


Note: Unfortunately right now CSS media queries do not support CSS variables so there is no way to customize the breakpoints using only CSS.

Overrides

An override is a collection of design tokens that should take precedence in certain situations, like dark mode. Overrides are built into the theme configuration, but kept separate, so that Amplify UI can use CSS for overriding parts of the theme.

import { defaultTheme } from '@aws-amplify/ui-react';

export const theme = {
  name: 'my-theme',
  overrides: [
    {
      colorMode: 'dark',
      tokens: {
        colors: {
          neutral: {
            10: { value: defaultTheme.tokens.colors.neutral[100].value },
            20: { value: defaultTheme.tokens.colors.neutral[90].value },
            40: { value: defaultTheme.tokens.colors.neutral[80].value },
            80: { value: defaultTheme.tokens.colors.neutral[40].value },
            90: { value: defaultTheme.tokens.colors.neutral[20].value },
            100: { value: defaultTheme.tokens.colors.neutral[10].value },
          },
          black: { value: '#fff' },
          white: { value: '#000' },
        },
      },
    },
    {
      breakpoint: 'large',
      tokens: {
        space: {
          small: { value: '1rem' },
          medium: { value: '2rem' },
          large: { value: '3rem' },
        },
      },
    },
  ],
};


You can override design tokens in CSS by using a media query or adding extra selectors to [data-amplify-theme="{theme.name}"].

@media (prefers-color-scheme: dark) {
  [data-amplify-theme='my-theme'] {
    --amplify-colors-black: #fff;
    --amplify-colors-white: #fff;
  }
}

[data-amplify-theme='my-theme'].disco {
  --amplify-colors-font-primary: pink;
}

Merging multiple themes

If you have multiple themes, you can extend your base theme using the createTheme function.

import { createTheme, defaultTheme } from '@aws-amplify/ui';

// by default, createTheme extends the defaultTheme.
export const baseBrandTheme = createTheme({
  name: 'base-brand-theme',
  tokens: {
    colors: {
      font: {
        primary: { value: 'red' },
      },
    },
  },
});

export const otherBrandTheme = createTheme(
  {
    name: 'other-brand-theme',
    tokens: {
      colors: {
        font: {
          primary: { value: 'blue' },
        },
      },
    },
  },
  baseBrandTheme
);
// The 2nd argument is the base theme to be extended
// if it is omitted, it will use the defaultTheme


--------------------------------------------------------------------------------

Title: In-App Messaging | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/in-app-messaging
HTML Content:
In-App Messaging

Amplify UI In-App Messaging provides UI components for displaying in-app messages.

Feedback
Overview

In-App Messaging allows you to better engage users with contextually appropriate messages rendered on events triggered by their activity while using your application. Create messages that look native to your application and deliver them to your users all without additional code changes.

@aws-amplify/ui-react v5
The @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.

Amplify UI In-App Messaging uses the Amplify In-App Messaging API and Amazon Pinpoint.

Prerequisites
Create an In-App Messaging campaign
Install the required dependencies
Getting Started

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

Integration with your application can be done with the InAppMessagingProvider and InAppMessageDisplay components directly, or wrap your app in withInAppMessaging (a React Higher-Order Component):

InAppMessagingProvider
withInAppMessaging
Copy
import React, { useEffect } from 'react';
import { Amplify } from 'aws-amplify';
import {
  initializeInAppMessaging,
  syncMessages,
} from 'aws-amplify/in-app-messaging';
import { Text } from '@aws-amplify/ui-react';
import {
  InAppMessagingProvider,
  InAppMessageDisplay,
} from '@aws-amplify/ui-react-notifications';

import '@aws-amplify/ui-react/styles.css';

import config from './aws-exports';

Amplify.configure(config);
initializeInAppMessaging();

function App() {
  useEffect(() => {
    // sync remote in-app messages
    syncMessages();
  }, []);

  return (
    <InAppMessagingProvider>
      <InAppMessageDisplay />
      <Text>In-App Messaging Example</Text>
    </InAppMessagingProvider>
  );
}

export default App;


InAppMessaging.syncMessages is an asynchronous function that handles syncing remote in-app messages with the end user application.

InAppMessagingProvider and useInAppMessaging

InAppMessagingProvider exposes the value of the InAppMessagingContext (a React context) to its children. useInAppMessaging can be used to directly interact with InAppMessagingContext from within InAppMessagingProvider.

useInAppMessaging exposes the following functions and values of the InAppMessagingContext:

Name	Description	Type
clearMessage	Removes the current in-app message (if any) from context state	
() => void

displayMessage	Render a local in-app message	
(message: Message) => void

message	current in-app message (if any) loaded in context state	
Message | null

In some use cases, you may want to forgo the usage of the default UI handling altogether while still leveraging the Amplify provided In-App Messaging React context and provider for in-app message context state. This can be achieved by wrapping your application in an InAppMessagingProvider and utilizing the useInAppMessaging hook to expose the values of the InAppMessagingContext.

Copy
import {
  InAppMessagingProvider,
  useInAppMessaging
} from '@aws-amplify/ui-react-notifications';
import '@aws-amplify/ui-react/styles.css';

import { Home } from './src/Home';

const MyInAppMessageDisplay = () => {
  const { inAppMessage } = useInAppMessaging();

  // ...do something with inAppMessage
};

const App = () => {
  return (
    <InAppMessagingProvider>
      <MyInAppMessageDisplay />
      <Home />
    </InAppMessagingProvider>
  );
};

InAppMessageDisplay

InAppMessageDisplay handles the display and lifecycle of an in-app message.

Name	Description	Type
components?	Message override UI components	
MessageComponents
The MessageComponents prop

Functional UI components that render in-app message content

Name	Description	Type
BannerMessage?	Banner UI component (top, middle, and bottom layouts)	
BannerMessageProps

CarouselMessage?	Carousel UI component (default provided for React Native only)	
CarouselMessageProps

FullScreenMessage?	FullScreen UI component	
FullScreenMessageProps

ModalMessage?	Modal UI component	
ModalMessageProps
Integrate Custom Components

You may provide your own In-App Messaging UI components to override the default Amplify provided UI components by utilizing the components prop of InAppMessagingProvider.

Copy
import React, { useCallback, useEffect } from 'react';
import { Amplify } from 'aws-amplify';
import {
  initializeInAppMessaging,
  syncMessages,
} from 'aws-amplify/in-app-messaging';
import { Button, Flex, Text } from '@aws-amplify/ui-react';
import {
  useInAppMessaging,
  withInAppMessaging,
} from '@aws-amplify/ui-react-notifications';

import '@aws-amplify/ui-react/styles.css';

import config from './aws-exports';

Amplify.configure(config);
initializeInAppMessaging();

const CustomBannerMessage = (props) => {
  return (
    <Flex
      alignItems="center"
      borderRadius="xs"
      position="absolute"
      padding="xl"
      backgroundColor="teal.20"
      right="xl"
      testId="custom-banner"
    >
      <Text fontWeight="bold">{props.header.content}</Text>
      <Button onClick={props.onClose}>Close!</Button>
    </Flex>
  );
};

function App() {
  const { displayMessage } = useInAppMessaging();

  useEffect(() => {
    // sync remote in-app messages
    syncMessages();
  }, []);

  const displayCustomBannerMessage = useCallback(
    () =>
      displayMessage({
        content: [{ header: { content: 'Hello World!' } }],
        id: 'Custom message',
        layout: 'TOP_BANNER',
      }),
    [displayMessage]
  );

  // display custom message component on initial render
  useEffect(displayCustomBannerMessage, [displayCustomBannerMessage]);

  return (
    <Button margin="medium" onClick={displayCustomBannerMessage}>
      Display Custom Banner Message
    </Button>
  );
}

export default withInAppMessaging(App, {
  components: { BannerMessage: CustomBannerMessage },
});

Style Override

The default Amplify UI components handle custom style using the styles prop:

Copy
import React, { useCallback, useEffect } from 'react';
import { Amplify } from 'aws-amplify';
import {
  initializeInAppMessaging,
  syncMessages,
} from 'aws-amplify/in-app-messaging';
import { Button } from '@aws-amplify/ui-react';
import {
  InAppMessageDisplay,
  useInAppMessaging,
  withInAppMessaging,
} from '@aws-amplify/ui-react-notifications';
import '@aws-amplify/ui-react/styles.css';

import config from './aws-exports';

Amplify.configure(config);
initializeInAppMessaging();

const StyledModalMessage = (props) => (
  <InAppMessageDisplay.ModalMessage
    {...props}
    style={{ container: { backgroundColor: 'antiquewhite' } }}
  />
);

function App() {
  const { displayMessage } = useInAppMessaging();

  useEffect(() => {
    // sync remote in-app messages
    syncMessages();
  }, []);

  const displayStyledModalMessage = useCallback(
    () =>
      displayMessage({
        content: [{ header: { content: 'Hello World!' } }],
        id: 'styled message',
        layout: 'MODAL',
      }),
    [displayMessage]
  );

  // display message component on initial render
  useEffect(displayStyledModalMessage, [displayStyledModalMessage]);

  return (
    <Button margin="medium" onClick={displayStyledModalMessage}>
      Display Custom Modal Message
    </Button>
  );
}

export default withInAppMessaging(App, {
  components: { ModalMessage: StyledModalMessage },
});


Available style props:

The default In-App Messaging components do not handle dark mode using the ThemeProvider at this time

Name	Description	Type
body?	style applied to the message body	
React.CSSProperties

closeIconButton?	style applied to the close button	
React.CSSProperties

container?	style applied to the primary container of the message component	
React.CSSProperties

header?	style applied to the message header	
React.CSSProperties

image?	style applied to the message image	
React.CSSProperties

primaryButton?	style applied to the message primary button	
React.CSSProperties

secondaryButton?	style applied to the message secondary button	
React.CSSProperties

--------------------------------------------------------------------------------

Title: Storage Image | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/storage/storageimage
HTML Content:
Storage Image

The Storage Image lets you load images from Amplify Storage.

React source
Feedback
Basic Usage
Wait!

Did you follow the quick start instructions to set up the storage and auth services?

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

To use the StorageImage component, import it into your React application with the included styles.

npm
yarn
npm install @aws-amplify/ui-react-storage aws-amplify
Copy
Copy
import { StorageImage } from '@aws-amplify/ui-react-storage';
import '@aws-amplify/ui-react/styles.css';


At a minimum you must include the alt and path props. path is a full S3 object key and refers to the Amplify Storage path (See Download Files). It is either a string or a callback function that accepts the current user's Cognito identityId and returns a string.

Public Image
Copy
import { StorageImage } from '@aws-amplify/ui-react-storage';

export function App() {
  return <StorageImage alt="sleepy-cat" path="public/cat.jpg" />;
}

Private or Protected Image

When using private or protected images, you'll need to wrap your app in the Authenticator, allowing the StorageImage component to infer the Cognito identityId of the currently signed-in user. This can be done directly with the Authenticator component or with withAuthenticator, as shown in Add the Authenticator.

Copy
import { StorageImage } from '@aws-amplify/ui-react-storage';

export function App() {
  return (
    <StorageImage
      alt="protected cat"
      path={({ identityId }) => `protected/${identityId}/cat.jpg`}
    />
  );
}

Deprecated props

Using @aws-amplify/ui-react-storage version 3.0.18 or below?

Props
Name	Description	Type
alt	Alternative text description of the image	
string

path	The path to the image in Storage, representing a full S3 object key. See https://docs.amplify.aws/react/build-a-backend/storage/download-files/	
string | ((input: { identityId?: string }) => string);

imgKey	Deprecated, use path instead. The key of an image. See https://docs.amplify.aws/gen1/react/build-a-backend/storage/download/	
string

accessLevel	Deprecated, use path instead. Access level for files in Storage. See https://docs.amplify.aws/gen1/react/build-a-backend/storage/configure-access/	
'guest' | 'protected' | 'private'

identityId?	Deprecated, use path instead. The unique Amazon Cognito Identity ID of the image owner.	
string

fallbackSrc?	A fallback image source to be loaded when the component fails to load the image from Storage	
string

onGetUrlError?	Triggered when an error happens calling Storage.get	
(error: Error) => void;

onStorageGetError?	Deprecated, use onGetUrlError instead. Triggered when an error happens calling Storage.get	
(error: Error) => void;

validateObjectExistence?	Whether to check for the existence of a file. Defaults to true. See https://docs.amplify.aws/react/build-a-backend/storage/download-files/#more-geturl-options	
boolean
Error Handling

To handle the error caused by Storage.get, you can pass a onGetUrlError handler and optionally provide a fallbackSrc for the component to load a fallback image.

Copy
import { StorageImage } from '@aws-amplify/ui-react-storage';

export function App() {
  return (
    <StorageImage
      alt="fallback cat"
      path="guest/cat-in-basket.jpg"
      fallbackSrc="/fallback_cat.jpg"
      onGetUrlError={(error) => console.error(error)}
    />
  );
}

Deprecated props

Using @aws-amplify/ui-react-storage version 3.0.18 or below?

Customization
Target Classes
Target Classes
CSS Variables
Class	Description
amplify-storageimage	Class applied to the img tag

--------------------------------------------------------------------------------

Title: Storage | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/storage
HTML Content:
Storage

Cloud-connected UI components for managing user content in your app, with built-in support for Amazon S3.

Feedback

Amplify UI Storage components use Amplify Storage to allow your users to upload and interact with files stored in Amazon S3 with minimal boilerplate.

Quick start
Setup with Amplify Gen 2 Backend

Follow the steps in this guide to set up your Amplify Storage backend.

Setup with Amplify Gen 1 Backend

To set up Amplify using the Gen 1 CLI, follow the steps below:

First, update @aws-amplify/cli with npm or yarn if you're using a version before 6.4.0:

npm
yarn
npm install -g @aws-amplify/cli@latest


Now that you have the Amplify CLI installed, you can set up your Amplify project by running amplify init in your project's root directory.

Then run amplify add storage and follow the prompts to add storage to your backend configuration.

Auth

The Amplify Storage category requires you have auth set up. When you run amplify add storage it will prompt you to add auth as well.

If you have an existing backend, run amplify pull to sync your aws-exports.js with your cloud backend.

You should now have an aws-exports.js file in your src/ directory with your latest backend configuration.

After setting up Amplify make sure to install the Amplify libraries.

npm
yarn
npm install @aws-amplify/ui-react-storage aws-amplify
Copy
Configuring Amplify for Storage UI Components

To use Storage UI components with Amplify, you'll need to call Amplify.configure() as shown below.

Copy
import { Amplify } from 'aws-amplify';
import { StorageImage, StorageManager } from '@aws-amplify/ui-react-storage';
import awsExports from './aws-exports';

Amplify.configure(awsExports);

export const App = () => {
  return (
    <>
      <StorageImage alt="sleepy-cat" path="public/cat.jpeg" />
      <StorageManager path="my_prefix/public" maxFileCount={3} />
    </>
  );
};

Next steps
Storage Manager component
Let your users upload files to the cloud

--------------------------------------------------------------------------------

Title: Geo | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/geo
HTML Content:
Geo

Amplify UI Geo provides UI components for maps and location search for popular front-end frameworks.

Feedback
@aws-amplify/ui-react v5
The @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.

Amplify UI Geo is powered by Geo APIs and Amazon Location Service.

Quick Start

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

Create React App setup

There's a known issue for users of Create React App v4 where the default prod browserslist configuration causes build errors when building for production. See the Create React App Troubleshooting Guide to configure Create React App for use with the MapView UI component.

Prerequisites:

Install @aws-amplify/ui-react-geo and @aws-amplify/geo with npm or yarn. ( e.g. npm install @aws-amplify/ui-react-geo @aws-amplify/geo)
Create map resources by following the Amplify Geo documentation.
MapView

The MapView component adds an interactive map to your application.

MapView is fully integrated with the open source library react-map-gl v7 while using maplibre-gl-js as the map tile source. Please note that react-map-gl is a direct dependency that you should NOT install separately. MapView is used as a replacement to react-map-gl's default map and supports the same functionality.

You can import the MapView component with related styles and use it in your Amplify application without any additional configuration.

import { Amplify } from 'aws-amplify';

import { MapView } from '@aws-amplify/ui-react-geo';



import '@aws-amplify/ui-react-geo/styles.css';


import awsExports from './aws-exports';

Amplify.configure(awsExports);

export default function BasicMap() {

  return <MapView />;

}


If the map isn't taking up the entire screen, try resetting your browser's default CSS body margins:

body {
  margin: 0;
}

Setting Initial Viewport

The map's initial viewport can be set with the initialViewState property:

import { Amplify } from 'aws-amplify';
import { MapView } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react-geo/styles.css';

// import config from './aws-exports'; // Amplify Gen 1 config
import config from './amplify_outputs.json'

Amplify.configure(config);

export default function InitialViewport() {

  return (

    <MapView
      initialViewState={{
        latitude: 37.8,
        longitude: -122.4,
        zoom: 14,
      }}
    />
  );
}

Usage with react-map-gl
Moving Marker

The Marker component from the react-map-gl library can have dynamic latitude and longitude properties to create a moving marker. The marker's position will reflect changes in latitude and longitude.

import { useState } from 'react';

import { Marker } from 'react-map-gl'; // Note: this dependency should NOT be installed separately

import { Amplify } from 'aws-amplify';
import { Button } from '@aws-amplify/ui-react';
import { MapView } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react/styles.css';
import '@aws-amplify/ui-react-geo/styles.css';

import awsExports from './aws-exports';

Amplify.configure(awsExports);

export default function MapWithMovingMarker() {
  const [{ latitude, longitude }, setMarkerLocation] = useState({
    latitude: 40,
    longitude: -100,
  });

  const updateMarker = () =>
    setMarkerLocation({ latitude: latitude + 5, longitude: longitude + 5 });

  return (
    <>
      <Button onClick={updateMarker}>Move Marker</Button>
      <MapView>

        <Marker latitude={latitude} longitude={longitude} />

      </MapView>
    </>
  );
}

Marker with Popup

The Popup component from the react-map-gl library can be used with a Marker to communicate information to a user when the marker is clicked. The offset property can be used to prevent the popup from overlapping the marker.

import { useState } from 'react';

import { Marker, Popup } from 'react-map-gl'; // Note: this dependency should NOT be installed separately

import { Amplify } from 'aws-amplify';
import { Heading, Text } from '@aws-amplify/ui-react';
import { MapView } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react/styles.css';
import '@aws-amplify/ui-react-geo/styles.css';

import awsExports from './aws-exports';

Amplify.configure(awsExports);

function MarkerWithPopup({ latitude, longitude }) {
  const [showPopup, setShowPopup] = useState(false);

  const handleMarkerClick = ({ originalEvent }) => {

    originalEvent.stopPropagation();

    setShowPopup(true);
  };

  return (
    <>
      <Marker
        latitude={latitude}
        longitude={longitude}
        onClick={handleMarkerClick}
      />
      {showPopup && (

        <Popup
          latitude={latitude}
          longitude={longitude}
          offset={{ bottom: [0, -40] }}
          onClose={() => setShowPopup(false)}
        >

          <Heading level={2}>Marker Information</Heading>
          <Text>Some information about a location.</Text>
        </Popup>
      )}
    </>
  );
}

export default function MapWithMarkerPopup() {
  return (
    <MapView initialViewState={{ latitude: 40, longitude: -100, zoom: 3.5 }}>
      <MarkerWithPopup latitude={40} longitude={-100} />
    </MapView>
  );
}


Note: Ensure originalEvent.stopPropagation() is called in the marker click handler. This allows the showPopup state to be handled by the component.

Animation and Native Map Methods

You may want to access the native maplibre-gl map object from within the component that renders <MapView> (to animate a viewport transition with flyTo, for example). To accomplish this, you can pass your own ref to <MapView> using React's useRef hook which will contain the map object:

import { useCallback, useRef } from 'react';
import type { MapRef } from 'react-map-gl'; // Note: this dependency should NOT be installed separately
import { Amplify } from 'aws-amplify';
import { Button } from '@aws-amplify/ui-react';
import { MapView } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react/styles.css';
import '@aws-amplify/ui-react-geo/styles.css';

import awsExports from './aws-exports';

Amplify.configure(awsExports);

export default function MapWithRef() {

  const mapRef = useRef<MapRef>();


  const flyToMordor = useCallback(() => {

    mapRef.current.flyTo({ center: [172.78, -42.28], zoom: 5 });

  }, []);

  return (
    <>

      <Button onClick={flyToMordor}>Fly, you fools!</Button>

      <MapView ref={mapRef} />
    </>
  );
}


If you want access to the map object in a child component of <MapView>, you can use the useMap hook from react-map-gl instead:

import { useMap } from 'react-map-gl'; // Note: this dependency should NOT be installed separately

import { Amplify } from 'aws-amplify';
import { Button } from '@aws-amplify/ui-react';
import { MapView } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react/styles.css';
import '@aws-amplify/ui-react-geo/styles.css';

import awsExports from './aws-exports';
import './styles.css';

Amplify.configure(awsExports);


function FlyToButton() {

  const { current: map } = useMap();


  const flyToMordor = () => {

    map.flyTo({ center: [172.78, -42.28], zoom: 5 });
  };

  return <Button onClick={flyToMordor}>Fly, you fools!</Button>;
}

export default function MapWithButton() {
  return (

    <MapView>

      <FlyToButton />
    </MapView>
  );
}

Location Search

LocationSearch provides location search powered by Amazon Location Service for the MapView component, using the viewport as the proximity for generating results. LocationSearch is used as a child component of MapView for which it renders visual markers and information based on its location search results.

You can import the LocationSearch component with related styles and use it as a child of MapView without any additional configuration.

import { useMap } from 'react-map-gl'; // Note: this dependency should NOT be installed separately

import { Amplify } from 'aws-amplify';
import { Button } from '@aws-amplify/ui-react';
import { MapView } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react/styles.css';
import '@aws-amplify/ui-react-geo/styles.css';

import awsExports from './aws-exports';
import './styles.css';

Amplify.configure(awsExports);


function FlyToButton() {

  const { current: map } = useMap();


  const flyToMordor = () => {

    map.flyTo({ center: [172.78, -42.28], zoom: 5 });
  };

  return <Button onClick={flyToMordor}>Fly, you fools!</Button>;
}

export default function MapWithButton() {
  return (

    <MapView>

      <FlyToButton />
    </MapView>
  );
}

LocationSearch Position

LocationSearch can be provided a position property when used with MapView. The property is not reactive, meaning the position is fixed after the component mounts. Valid values are 'top-right', 'top-left', 'bottom-right', and 'bottom-left'. Default value is 'top-right'.

import { Amplify } from 'aws-amplify';
import { MapView, LocationSearch } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react-geo/styles.css';

// import config from './aws-exports'; // Amplify Gen 1 config
import config from './amplify_outputs.json'
Amplify.configure(config);

export default function LocationSearchPosition() {
  return (

    <MapView>

      <LocationSearch position="top-left" />
    </MapView>
  );
}


Standalone LocationSearch

LocationSearch can also be used as a standalone component without MapView. As a standalone component, LocationSearch provides search results based on an initial proximity. When used as a standlone component, the proximity property with provided latitude and longitude properties is required.

import { Amplify } from 'aws-amplify';

import { LocationSearch } from '@aws-amplify/ui-react-geo';



import '@aws-amplify/ui-react-geo/styles.css';


import awsExports from './aws-exports';

Amplify.configure(awsExports);

const SAN_FRANCISCO = {
  latitude: 37.774,
  longitude: -122.431,
};

export default function StandaloneLocationSearch() {

  return <LocationSearch proximity={SAN_FRANCISCO} />;

}


--------------------------------------------------------------------------------

Title: Face Liveness Troubleshooting | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/liveness/troubleshooting
HTML Content:
Face Liveness Troubleshooting

Troubleshoot your issues with the Amplify UI FaceLivenessDetector component.

Feedback

The following issues are presented with corresponding troubleshooting steps. Please check them out in case you run into issues like these -- if the remedies don't work, please file an issue in our GitHub repositories.

Error: Cognito user pool does not allow access to unauthenticated identities

First, make sure you have followed the prerequisites for setting up Amplify resources. Second, you can also go into the Cognito identity pool configured in your Amplify app, edit it and select the checkbox labeled "Enable access to unauthenticated identities" -- then save the changes. Finally, ensure that the configuration file -- aws-exports.js on web or amplifyconfiguration.json on mobile -- contains the name of the correct identity pool.

Error: Server error - Session not found
Ensure that the AWS region you are using to create the liveness session in your backend is the same as the one used within your app.
Ensure that the session ID returned from the backend when creating the session is the same as the one created on initialization of the Liveness UI. Note: session IDs can only be used once. You must create a new session to allow users to retry the Liveness check.
Error: AccessDeniedError when calling Rekognition APIs (CreateFaceLivenessSession, etc.)

Full error: An error occurred (AccessDeniedException) when calling the CreateFaceLivenessSession.

Make sure you are using a supported AWS region. Please refer to Liveness supported regions documentation.

Error: Connection time out

The websocket connection to the Rekognition streaming service will time out after 5 seconds if a connection is not made. This often happens due to a slow network connection. If your users encounter this issue, prompt them to try again at a different time or using a different network connection.

No result when GetFaceLivenessSessionResults is called

Ensure that the session ID returned from the backend when creating the session is the same as the one created on initialization of the Liveness UI. Note: session IDs can only be used once. You must create a new session to allow users to retry the Liveness check.

I am unable to use the Amplify CLI and/or CloudFormation. Can I still use the FaceLivenessDetector?

Yes, this use case is supported. Please select "Self Managed Cognito Resource" in Step 1 of the setup.

InvalidSignatureException: Signature not yet current

The signature verification on the Rekognition streaming websocket connection was rejected due to a clock skew greater than or equal to 5 minutes. Clock skew represents the difference between a user's device time and AWS server time, and any clock skew of 5 minutes or larger will be rejected by default. Below are some common reasons for encountering this error along with suggestions for resolving them.

The time on the user's device is inaccurate. Ensure that the date and time on the user's device are accurate and match their time zone.
User is in a new time zone that is not reflected on their device, or living between and frequently switching time zones. If users cannot adjust their device time, you can pass systemClockOffset to the FaceLivenessDetectorCore config, which will be applied as an offset in milliseconds to the AWS server time. See an example here.

--------------------------------------------------------------------------------

Title: Face Liveness | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/liveness
HTML Content:
Face Liveness

Amplify UI FaceLivenessDetector provides a UI component for Amazon Rekognition Face Liveness that helps developers verify that only real users, not bad actors using spoofs, can access your services.

Feedback

Amplify UI FaceLivenessDetector is powered by Amazon Rekognition Face Liveness. The following screenshots shows an example of FaceLivenessDetector in action.

To learn more about spoof attempts deterred by Face Liveness, please see this demonstration video on YouTube.

Quick start

Prerequisites:

Install and configure the Amplify CLI by following this guide.
A backend that is setup following the Amazon Rekognition Face Liveness developer guide.
Step 1. Configure Auth

There are multiple methods to setup the Amazon Cognito resources needed for Amplify Auth. The recommended option is using Amplify Gen 2 to generate an Auth backend.

Note: Using Cognito does not mean that you have to migrate your users. By default, FaceLivenessDetector uses a Cognito Identity Pool, for the sole purpose of signing requests to Rekognition.

Amplify Gen 2
Amplify Gen 1
Amplify Gen 1 Import
Custom Credentials Provider

Use Amplify Gen 2 to setup and manage your Cognito Identity and User Pool in code

FaceLivenessDetector uses Amplify Auth by default to authorize users to perform the Face Liveness check. If you are using Amplify for the first time, follow the instructions for installing Amplify Gen 2.

npm
yarn
npm add --save-dev @aws-amplify/backend@latest @aws-amplify/backend-cli@latest
Copy

Then follow the instructions for setting up a default Amplify Auth resource.

Now that you have Amplify Auth setup, add the following code to your backend.ts file to create an inline policy to enable authenticated app users to access Rekognition.

const livenessStack = backend.createStack("liveness-stack");

const livenessPolicy = new Policy(livenessStack, "LivenessPolicy", {
  statements: [
    new PolicyStatement({
      actions: ["rekognition:StartFaceLivenessSession"],
      resources: ["*"],
    }),
  ],
});
backend.auth.resources.unauthenticatedUserIamRole.attachInlinePolicy(livenessPolicy); // allows guest user access
backend.auth.resources.authenticatedUserIamRole.attachInlinePolicy(livenessPolicy); // allows logged in user access

Step 2. Install dependencies
npm
yarn
npm install @aws-amplify/ui-react-liveness aws-amplify
Copy
Step 3. Initialize Amplify

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

import React from 'react';
import { ThemeProvider } from '@aws-amplify/ui-react';
import { Amplify } from 'aws-amplify';
import '@aws-amplify/ui-react/styles.css';
import awsexports from './aws-exports';

Amplify.configure(awsexports);

export default function App() {
  return (
    <ThemeProvider>
    </ThemeProvider>
  );
}

Step 4. Add FaceLivenessDetector

To get started you will need to make a request to your backend to receive a sessionId and pass that to the FaceLivenessDetector component.

Once a valid sessionId, region, and callback has been passed, FaceLivenessDetector will take care of streaming video and presenting Face Liveness challenges.

Javascript
TypeScript
import React from 'react';
import { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';
import { Loader, ThemeProvider } from '@aws-amplify/ui-react';

export function LivenessQuickStartReact() {
  const [loading, setLoading] = React.useState(true);
  const [createLivenessApiData, setCreateLivenessApiData] =
    React.useState(null);

  React.useEffect(() => {
    const fetchCreateLiveness = async () => {
      /*
       * This should be replaced with a real call to your own backend API
       */
      await new Promise((r) => setTimeout(r, 2000));
      const mockResponse = { sessionId: 'mockSessionId' };
      const data = mockResponse;

      setCreateLivenessApiData(data);
      setLoading(false);
    };

    fetchCreateLiveness();
  }, []);

  const handleAnalysisComplete = async () => {
    /*
     * This should be replaced with a real call to your own backend API
     */
    const response = await fetch(
      `/api/get?sessionId=${createLivenessApiData.sessionId}`
    );
    const data = await response.json();

    /*
     * Note: The isLive flag is not returned from the GetFaceLivenessSession API
     * This should be returned from your backend based on the score that you
     * get in response. Based on the return value of your API you can determine what to render next.
     * Any next steps from an authorization perspective should happen in your backend and you should not rely
     * on this value for any auth related decisions.
     */
    if (data.isLive) {
      console.log('User is live');
    } else {
      console.log('User is not live');
    }
  };

  return (
    <ThemeProvider>
      {loading ? (
        <Loader />
      ) : (
        <FaceLivenessDetector
          sessionId={createLivenessApiData.sessionId}
          region="us-east-1"
          onAnalysisComplete={handleAnalysisComplete}
          onError={(error) => {
            console.error(error);
          }}
        />
      )}
    </ThemeProvider>
  );
}


See Rekognition documentation for best practices when using FaceLivenessDetector.

Full API Reference
FaceLivenessDetectorProps

Below is the full list of props that can be used with the FaceLivenessDetector component.

Name	Description	Type
sessionId	The sessionId as returned by CreateFaceLivenessSession API.	
string

onAnalysisComplete	Callback that signals when the liveness session has completed analysis. At this point a request can be made to GetFaceLivenessSessionResults.	
() => Promise<void>

region	The AWS region to stream the video to, this should match the region you called the CreateFaceLivenessSession API in.	
string

onUserCancel?	Callback called when the user cancels the flow. This callback is also called when users click the "Try Again" button in the default error modal.	
() => void

onError?	Callback called when there is error occured on any step.	
(error: LivenessError) => void

disableStartScreen?	Optional parameter for the disabling the start screen, default: false.	
boolean

components?	Optional object for overriding some UI components.	
FaceLivenessDetectorComponents

displayText?	Optional object for internationalizing strings.	
LivenessDisplayText

config?	Optional parameter for advanced options for the component.	
FaceLivenessDetectorConfig
FaceLivenessDetectorComponents

Below is the full list of props that can be used with the FaceLivenessDetectorComponents. You can also reference the example here.

Name	Description	Type
PhotosensitiveWarning?	Overrides the rendered component for the photosensitivity warning.	
React.ComponentType

ErrorView?	Overrides the rendered component for error view.	
React.ComponentType
FaceLivenessDetectorConfig

Below is the full list of props that can be used with the FaceLivenessDetectorConfig. For instructions on using your own CDN check here.

Name	Description	Type
binaryPath?	Overrides the WASM binary path, the default is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow/tfjs-backend-wasm/3.11.0/. When overriding this path ensure that the wasm version matches the version of @tensorflow/tfjs-backend-wasm installed by npm.	
string

faceModelUrl?	Overrides the Blazeface model and weights bin CDN URL. Default value is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow-models/blazeface/0.0.7/model/model.json	
string
FaceLivenessDetectorCoreConfig

Below is the full list of props that can be used with the FaceLivenessDetectorCoreConfig. This config can only be used with the <FaceLivenessDetectoreCore /> component.

Name	Description	Type
binaryPath?	Overrides the WASM binary path, the default is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow/tfjs-backend-wasm/4.11.0/. When overriding this path ensure that the wasm version matches the version of @tensorflow/tfjs-backend-wasm installed by npm.	
string

faceModelUrl?	Overrides the Blazeface model and weights bin CDN URL. Default value is https://cdn.liveness.rekognition.amazonaws.com/face-detection/tensorflow-models/blazeface/1.0.2/model/model.json	
string

credentialProvider?	An optional callback that provides AWS Credentials.	
AwsCredentialProvider

systemClockOffset?	An optional parameter for overriding the systemClockOffset for the rekognition streaming client. Represents the difference between system clock and AWS server clock in milliseconds. See https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-middleware-signing/Interface/AwsAuthInputConfig/	
number
LivenessError

Below is the LivenessError type used in the onError function that should give you more granularity into the types of errors happening in the component.

Name	Description	Type
state	The LivenessErrorState value which indicates the general error type as seen from the component.	
LivenessErrorState

error	The error object containing the more specific error name and stack trace.	
Error
LivenessErrorState

Below is the full list of error states that can be returned from the onError prop.

Name	Description	Type
RUNTIME_ERROR	Indicates an error that occurs in the component runtime.	
Error

SERVER_ERROR	Indicates an error occurred from the Rekognition streaming API or in the onAnalysisComplete callback.	
Error

CONNECTION_TIMEOUT	Indicates a timeout occurred during the initial websocket connection.	
Error

TIMEOUT	Indicates a timeout occurred when user attempted a liveness check.	
Error

FACE_DISTANCE_ERROR	Indicates that the user moved their face too close to the camera before the check started.	
Error

CAMERA_ACCESS_ERROR	Indicates that an error occurred when attempting to access the user's camera, this could be because they did not allow camera permissions in the browser.	
Error

CAMERA_FRAMERATE_ERROR	Indicates that the provided camera does not meet the minimum framerate requirements for a liveness check.	
Error

FRESHNESS_TIMEOUT	Indicates that the component timed out when attempting to determine freshness of the video via colors flashing on the screen.	
Error

MOBILE_LANDSCAPE_ERROR	Indicates that the user attempted to switch to using landscape mode which is not supported.	
Error
LivenessDisplayText

The text in FaceLivenessDetector is defined as string resources in the component's displayText.ts file.

--------------------------------------------------------------------------------

Title: DeleteUser | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/account-settings/delete-user
HTML Content:
DeleteUser

DeleteUser component allows end users to delete their account permanently from their app.

Feedback
Props
Name	Description	Type
onSuccess?	Callback function triggered once user account is successfully deleted	
() => void

onError?	Callback function triggered when account deletion fails	
(error: Error) => void

handleDelete?	Custom delete user handler	
(user: AuthUser) => Promise<void> | void

components?	Custom components override	
DeleteUserComponents

displayText?	Text to override in the component	
DeleteUserDisplayText
Basic Usage

DeleteUser has onSuccess handler that will be called after successful user account deletion. You may use this callback to run any custom handling, such as navigating route or rendering confirmation messages.

Copy
import React from 'react';
import { AccountSettings } from '@aws-amplify/ui-react';

function App() {
  const handleSuccess = () => {
    alert('user has been successfully deleted')
  }
  
  return (
    <AccountSettings.DeleteUser onSuccess={handleSuccess} />
  );
}

Override default delete handler

You can override the default deleteUser handler with handleDelete prop to add any custom cleanup handlers before or after account deletion.

Copy
import React from 'react';

import { Auth } from 'aws-amplify';
import { DeleteUser } from '@aws-amplify/ui-react';

function App() {
  const handleSuccess = () => {
    alert('password is successfully changed!')
  }

  const handleDelete = async () => {
    console.log("Doing some clean up...");
    console.log("Done!");
    await Auth.deleteUser();
  };  
      
  return (
    <AccountSettings.DeleteUser onSuccess={handleSuccess} handleDelete={handleDelete} />
  );
}

Component Overrides

You can override parts of the DeleteUser component by passing in a components prop. It supports the following slots:

Name	Description	Type
DeleteButton?	Delete button	
DeleteButtonProps

ErrorMessage?	Error alert that displays on delete user errors	
ErrorMessageComponentProps

WarningView?	Warning view that asks end user to confirm account deletion	
PasswordFieldProps
Reusing default components

Default components are accessible through AccountSettings.DeleteUser.COMPONENT_NAME (e.g. AccountSettings.DeleteUser.DeleteButton) for your convenience. This is useful if you're interested in modifying just a small part of UI instead of overriding the whole component.

Copy
function App() {
  const components = {
    DeleteButton: (props) => (
      <AccountSettings.DeleteUser.DeleteButton {...props}>Custom Submit Button</AccountSettings.DeleteUser.DeleteButton>
    ),
  }

  return (
    <AccountSettings.DeleteUser components={components} />
  );
}


Note that spreading props is necessary so that event listeners like onClick or html attributes like type are passed correctly. If you're providing your own custom components, make sure required props are passed onto your elements.

Props and Examples

Here are the required props and examples for overriding each slot.

DeleteButton

ErrorMessage

WarningView

Text and labels

All text in the DeleteUser component is customizable with the displayText prop.

Copy
import { AccountSettings } from '@aws-amplify/ui-react';

function App() {
  return (
    <AccountSettings.DeleteUser 
      displayText={{
        deleteAccountText: 'Delete the account',
        cancelButtonText: 'Cancel',
        confirmDeleteButtonText: 'Delete account',
        warningText: 'Are you sure you want to delete your account? You will lose access and all data.'
      }}  
    />
  );
}

Theming

DeleteUser component is built upon our robust Amplify UI theming system. To get started, add a theme object and set the appropriate design tokens. You can then pass that theme to the ThemeProvider so the changes can take affect.

Copy
import { AccountSettings, Card, ThemeProvider } from '@aws-amplify/ui-react';

const theme = {
  name: 'custom-theme',
  tokens: {
    colors: {
      border: {
        primary: { value: '{colors.neutral.40}' },
        secondary: { value: '{colors.neutral.20}' },
        tertiary: { value: '{colors.neutral.10}' },
      },
    },
    radii: {
      small: { value: '2px' },
      medium: { value: '3px' },
      large: { value: '4px' },
      xl: { value: '6px' },
    },
  },
};

function App() {
  return (
    <ThemeProvider theme={theme}>
      <Card width="800px">
        <AccountSettings.DeleteUser />
      </Card>
    </ThemeProvider>
  );
}


--------------------------------------------------------------------------------

Title: Customization | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/liveness/customization
HTML Content:
Customization

Customize your FaceLivenessDetector

Feedback
Start View

FaceLivenessDetector contains an initial (start) view with instructions and information about the Face Liveness check for the end user. By default, the start view is shown before the Face Liveness check. The start view can be disabled, allowing you to provide your own start view before FaceLivenessDetector is displayed in the app:

<FaceLivenessDetector
    sessionId={createLivenessApiData.sessionId}
    region='us-east-1'
    onAnalysisCompleteDetection={onAnalysisCompleteDetection}
    disableInstructionScreen={true}
/>

Internationalization (I18n)

The text in FaceLivenessDetector is defined as string resources in the component's displayText.ts file. These values can be translated/overwritten by following the example below:

import React from 'react';
import { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';
import { ToggleButtonGroup, ToggleButton } from '@aws-amplify/ui-react';

const dictionary = {
  // use default strings for english
  en: null,
  es: {
    photosensitivyWarningHeadingText: 'Advertencia de fotosensibilidad',
    photosensitivyWarningBodyText:
      'Esta verificación muestra luces de colores. Tenga cuidado si es fotosensible.',
    goodFitCaptionText: 'Buen ajuste',
    tooFarCaptionText: 'Demasiado lejos',
    hintCenterFaceText: 'Centra tu cara',
    startScreenBeginCheckText: 'Comenzar a verificar',
  },
};

export function Customizationi18n() {
  const [language, setLanguage] = React.useState<string>('en');
  const [showLiveness, setShowLiveness] = React.useState(false);
  React.useEffect(() => {
    setShowLiveness(true);
  }, []);
  return (
    <>
      <ToggleButtonGroup
        value={language}
        isExclusive
        onChange={(value) => setLanguage(value)}
      >
        <ToggleButton value="en">En</ToggleButton>
        <ToggleButton value="es">Es</ToggleButton>
      </ToggleButtonGroup>
      {showLiveness && (
        <FaceLivenessDetector
          sessionId={'sessionId'}
          region="us-east-1"
          onAnalysisComplete={async () => {}}
          displayText={dictionary[language]}
        />
      )}
    </>
  );
}

Theming
CSS styles

You can customize FaceLivenessDetector's default style by using CSS variables.

The example below uses a <style> tag to change the default colors to a dark theme:

[data-amplify-theme] {
  --amplify-colors-background-primary: var(--amplify-colors-neutral-90);
  --amplify-colors-background-secondary: var(--amplify-colors-neutral-100);
  --amplify-colors-primary-10: var(--amplify-colors-teal-100);
  --amplify-colors-primary-80: var(--amplify-colors-teal-40);
  --amplify-colors-primary-90: var(--amplify-colors-teal-20);
  --amplify-colors-primary-100: var(--amplify-colors-teal-10);
}

Theme Provider Theme

You can update the style of FaceLivenessDetector by using the ThemeProvider theme object. To do this, you must surround FaceLivenessDetector in the ThemeProvider.

Then create a theme object, with all your font and color updates. Feel free to use design tokens, as a way of designing your theme further.

Below is an example of changing the default colors to a dark theme. You can also access the default dark mode override for the Amplify Theme Provider here.

import React from 'react';
import { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';
import { Theme, ThemeProvider, useTheme } from '@aws-amplify/ui-react';

export function CustomizationTheme() {
  const [showLiveness, setShowLiveness] = React.useState(false);
  React.useEffect(() => {
    setShowLiveness(true);
  }, []);
  const { tokens } = useTheme();
  const theme: Theme = {
    name: 'Face Liveness Example Theme',
    tokens: {
      colors: {
        background: {
          primary: {
            value: tokens.colors.neutral['90'].value,
          },
          secondary: {
            value: tokens.colors.neutral['100'].value,
          },
        },
        font: {
          primary: {
            value: tokens.colors.white.value,
          },
        },
        brand: {
          primary: {
            '10': tokens.colors.teal['100'],
            '80': tokens.colors.teal['40'],
            '90': tokens.colors.teal['20'],
            '100': tokens.colors.teal['10'],
          },
        },
      },
    },
  };

  return (
    <ThemeProvider theme={theme}>
      {showLiveness && (
        <FaceLivenessDetector
          sessionId={'sessionId'}
          region={'us-east-1'}
          onAnalysisComplete={async () => {}}
        />
      )}
    </ThemeProvider>
  );
}

Components

FaceLivenessDetector allows overriding some UI components using the components prop.

The following code snippet demonstrates how to pass in custom HTML rendering functions:

Custom Photo Sensitivity Warning
Custom Error View
The children prop in ErrorView contains a default error component based on the LivenessError, you can use our default rendered components or render your own error message
import React from 'react';
import { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';
import { View, Heading, Alert } from '@aws-amplify/ui-react';

export function CustomizationComponents() {
  const [showLiveness, setShowLiveness] = React.useState(false);
  React.useEffect(() => {
    setShowLiveness(true);
  }, []);
  return showLiveness ? (
    <FaceLivenessDetector
      sessionId={'sessionId'}
      region={'us-east-1'}
      onAnalysisComplete={async () => {}}
      components={{
        PhotosensitiveWarning: (): JSX.Element => {
          return (
            <Alert
              variation="warning"
              isDismissible={false}
              hasIcon={true}
              heading="Caution"
            >
              This check displays colored lights. Use caution if you are
              photosensitive.
            </Alert>
          );
        },
        ErrorView: ({ children }) => {
          return (
            <View flex="1" backgroundColor="white">
              <Heading color="black">My Custom Error View</Heading>
              {children}
            </View>
          );
        },
      }}
    />
  ) : null;
}

Error View Example

The following code snippet demonstrates using a more customized error view which does not utilize the children component and instead renders your own full modal.

import React, { useCallback, useState } from 'react';
import { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';
import { Button, Flex, Heading, Text } from '@aws-amplify/ui-react';

export function CustomizationComponentsErrorView() {
  const [error, setError] = useState(undefined);
  const [showLiveness, setShowLiveness] = React.useState(false);
  React.useEffect(() => {
    setShowLiveness(true);
  }, []);

  const CustomError = useCallback(() => {
    return (
      <Flex
        justifyContent="center"
        alignItems="center"
        width="100%"
        height="100%"
      >
        <Flex
          backgroundColor="white"
          direction="column"
          justifyContent="center"
          padding="32px"
        >
          <Heading color="black">{error?.state}</Heading>
          <Text>{error?.error.message}</Text>
          <Button>Try again?</Button>
        </Flex>
      </Flex>
    );
  }, [error]);

  return showLiveness ? (
    <FaceLivenessDetector
      sessionId="sessionId"
      region="us-east-1"
      onAnalysisComplete={async () => {}}
      onError={setError}
      components={{
        ErrorView: CustomError,
      }}
    />
  ) : null;
}

System Clock Offset

The systemClockOffset can optionally be passed to the FaceLivenessDetectorCore config, where it will be added as an offset in milliseconds to the AWS server time. This can be useful when the user's device time is inaccurate or when the user is frequently switching time zones. An example of calculating the offset and passing it to the FaceLivenessDetectorCore is shown below:

The following example requires that headers with the Date are available in the response. The solution will need to be modified based on the call to your backend API.
import React from 'react';
import { FaceLivenessDetectorCore } from '@aws-amplify/ui-react-liveness';

function MyComponent() {
  const [createLivenessApiData, setCreateLivenessApiData] = React.useState(null);
  
  /* 
   * 1. Check whether the difference between server time and device time is
   *  greater than or equal to 5 minutes, and if so, return the offset in milliseconds.
   *  This logic should be adjusted based on the server response and use case
  */ 
  const getSystemClockOffset = (serverTime: number) => {
    const maxSupportedClockSkew = 5 * 60 * 1000; // 5 minutes
    const deviceTime = Date.now();
    const delta = serverTime ? serverTime - deviceTime : 0;
    return Math.abs(delta) >= maxSupportedClockSkew ? delta : undefined;
  }
  
  React.useEffect(() => {
    /*
    * Replace with your own API call to create a session
    */
    const response = await fetch(`/api/createSession`);
    const body = await response.json(); // { sessionId: 'mockSessionId' } 
    /*
    * Replace serverTime with the actual server date,
    * which can be retrieved from the response headers or your custom backend.
    */
    const serverTime = response.headers['date']
    const systemClockOffset = getSystemClockOffset(serverTime)
    setCreateLivenessApiData({body, systemClockOffset});
  }, []);
    
  return (
    <div>
      <FaceLivenessDetectorCore
        sessionId={createLivenessApiData.sessionId}
        region={'us-east-1'}
        /* 
         * 2. Pass systemClockOffset to the config 
        */
        config={{
          systemClockOffset={createLivenessApiData.systemClockOffset}
        }}
      />
    </div>
  );
}



Custom CDN

FaceLivenessDetector allows overriding the default hosted CDN and providing your own. The CDN files are used by the TensorFlow library to load in files at runtime. You can host your own CDN by following the instructions below.

Learn more about the differences between the three different .wasm files in this TensorFlow blog post.

Download the TFJS wasm and blazeface files for the corresponding version of @aws-amplify/ui-react-liveness.
Download wasm files for tfjs here:
<= v2.x
https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@3.11.0/dist/tfjs-backend-wasm.wasm
https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@3.11.0/dist/tfjs-backend-wasm-simd.wasm
https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@3.11.0/dist/tfjs-backend-wasm-threaded-simd.wasm
v3.x
https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@4.11.0/dist/tfjs-backend-wasm.wasm
https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@4.11.0/dist/tfjs-backend-wasm-simd.wasm
https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@4.11.0/dist/tfjs-backend-wasm-threaded-simd.wasm
Download and unzip the tar file. It should contain a model.json file and a group1-shard1of1.bin file.
<= v2.x - https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1
v3.x - https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1
Host all files alongside your JS files on your own server
Update FaceLivenessDetector code:
import React from 'react';
import { FaceLivenessDetector } from '@aws-amplify/ui-react-liveness';

export function CustomizationCdn() {
  const [showLiveness, setShowLiveness] = React.useState(false);
  React.useEffect(() => {
    setShowLiveness(true);
  }, []);
  return showLiveness ? (
    <FaceLivenessDetector
      sessionId={'sessionId'}
      region="us-east-1"
      onAnalysisComplete={async () => {}}
      config={{
        binaryPath: 'http://example.com/path/to/your/wasm/files/',
        faceModelUrl:
          'http://example.com/path/to/your/blazeface/file/model.json',
      }}
    />
  ) : null;
}


binaryPath must be a path to a folder with .wasm files. faceModelUrl must point to the model.json file and will also expect the group1-shard1of1.bin file to be colocated in the same path.

Best Practices
The get ready screen has been optimized for increasing the end user's success rate and we strongly discourage making any changes to that screen.
We do not recommend modifying the countdown time, face fit timeout, and oval size, as they affect the security and accuracy of the Face Liveness check.

--------------------------------------------------------------------------------

Title: ChangePassword | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/account-settings/change-password
HTML Content:
ChangePassword

ChangePassword component enables end users to change their password.

Feedback
Props
Name	Description	Type
onSuccess?	Callback function triggered when password is successfully updated	
() => void

onError?	Callback function triggered when change password fails	
(error: Error) => void

validators?	Custom password validations	
ValidatorOptions[]

components?	Submit button	
ChangePasswordComponents

displayText?	Text to override in the component	
ChangePasswordDisplayText
Basic Usage

ChangePassword has onSuccess handler that will be called after successful password change. You may use this callback to run any custom handling, such as navigating route or rendering confirmation messages.

Copy
import React from 'react';
import { AccountSettings } from '@aws-amplify/ui-react';

function App() {
  const handleSuccess = () => {
    alert('password is successfully changed!')
  }
  
  return (
    <AccountSettings.ChangePassword onSuccess={handleSuccess}/>
  );
}

Custom Validation

You can override the default password validator with your own custom validator. To do so, you can use the validators prop, which takes an array of ValidatorOptions:

Copy
interface ValidatorOptions {
  validationMode: 'onBlur' | 'onChange' | 'onTouched';
  validator: (value: string) => boolean;
  message: string;
}

onBlur validates password on every blur event
onChange validates password on every change event
onTouched validates password on first blur, and on every change event after the first blur.

For example, following is a minLength validator that validates on every change:

Copy
const minLength = {
  validationMode: 'onChange',
  validator: (password) => password.length >= 4,
  message: 'Password must have length 4 or greater',
};


You can pass multiple validators to ChangePassword to override the default validator:

Copy
import React from 'react';
import { AccountSettings } from '@aws-amplify/ui-react';

function App() {
  const minLength = {
    validationMode: 'onChange',
    validator: (password) => password.length >= 4,
    message: 'Password must have length 4 or greater',
  };

  const maxLength = {
    validationMode: 'onChange',
    validator: (password) => password.length <= 12,
    message: 'Password must have length 12 or less',
  };
  
  const handleSuccess = () => {
    alert('password is successfully changed!')
  }
  
  return (
    <AccountSettings.ChangePassword 
      onSuccess={handleSuccess} 
      validators={[minLength, maxLength]}
    />
  );
}

Component Overrides

You can provide your own UI components to override parts of ChangePassword. It supports the following slots:

Name	Description	Type
CurrentPasswordField?	Password field for current password	
PasswordFieldProps

NewPasswordField?	Password field for new password	
PasswordFieldProps

ConfirmPasswordField?	Password field for confirm password	
PasswordFieldProps

ErrorMessage?	Error alert that displays on change password errors	
ErrorMessageComponentProps

SubmitButton?	Submit button	
SubmitButtonProps
Reusing default components

Default components are accessible through AccountSettings.ChangePassword.COMPONENT_NAME (e.g. AccountSettings.ChangePassword.NewPasswordField) for your convenience. This is useful if you're interested in modifying just a small part of UI instead of overriding the whole component.

Copy
function App() {
  const components = {
    NewPasswordField: (props) => (
      <AccountSettings.ChangePassword.NewPasswordField
        {...props} 
        label="Custom New Password Label" 
      />
    ),
  }

  return (
    <AccountSettings.ChangePassword components={components} />
  );
}


Note that spreading props is necessary so that event listeners like onChange or html attributes like name are passed correctly. If you're providing your own custom components, make sure required props are passed onto your elements.

Props and Examples

Here are the required props and examples for overriding each slot.

PasswordFields

ErrorMessage

SubmitButton

Text and labels

All text in the ChangePassword component is customizable with the displayText prop.

Copy
import { AccountSettings } from '@aws-amplify/ui-react';

function App() {
  return (
    <AccountSettings.ChangePassword 
      displayText={{
        currentPasswordLabel: 'Enter current password',
        newPasswordLabel: 'Enter new password',
        confirmPasswordLabel: 'Confirm your password',
        updatePasswordText: 'Update your password',
      }}  
    />
  );
}

Theming

ChangePassword component is built upon our robust Amplify UI theming system. To get started, add a theme object and set the appropriate design tokens. You can then pass that theme to the ThemeProvider so the changes can take affect.

Copy
import { AccountSettings, Card, ThemeProvider } from '@aws-amplify/ui-react';

const theme = {
  name: 'custom-theme',
  tokens: {
    colors: {
      border: {
        primary: { value: '{colors.neutral.40}' },
        secondary: { value: '{colors.neutral.20}' },
        tertiary: { value: '{colors.neutral.10}' },
      },
    },
    radii: {
      small: { value: '2px' },
      medium: { value: '3px' },
      large: { value: '4px' },
      xl: { value: '6px' },
    },
  },
};

function App() {
  return (
    <ThemeProvider theme={theme}>
      <Card width="800px">
        <AccountSettings.ChangePassword />
      </Card>
    </ThemeProvider>
  );
}


--------------------------------------------------------------------------------

Title: Account Settings | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/account-settings
HTML Content:
Account Settings

Amplify UI provides account settings components to manage account settings.

Feedback
@aws-amplify/ui-react v5
The @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.

Account Settings components are a set of standalone components that add user management flows to your application with minimal boilerplate.

Account Settings components require end user to be authenticated. You can use the Authenticator component to add authentication UI to your application.

Quick Start

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

Step 1. Configure Backend

Account settings components work seamlessly with the Amplify CLI to automatically work with your backend.

First, update @aws-amplify/cli with npm or yarn if you're using a version before 6.4.0:

npm
yarn
npm install -g @aws-amplify/cli@latest

Step 2. Install Dependencies
npm
yarn
npm install @aws-amplify/ui-react aws-amplify
Copy
Step 3. Add Account Settings Components

Get started by using AccountSettings with either the ChangePassword or DeleteUser components.

--------------------------------------------------------------------------------

Title: Advanced Usage | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/authenticator/advanced
HTML Content:
Advanced Usage

Access Authenticator UI component state outside of the UI component

Feedback

You must render the Authenticator UI component before using the useAuthenticator hook. This hook was designed to retrieve Authenticator UI specific state such as route and user and should not be used without the UI component.



useAuthenticator Hook

@aws-amplify/ui-react ships with useAuthenticator React hook that can be used to access, modify, and update Authenticator's auth state. To use them, you must render the Authenticator and wrap your application with <Authenticator.Provider>:

import { Authenticator } from '@aws-amplify/ui-react';

export default () => (
  <Authenticator.Provider>
    <App />
  </Authenticator.Provider>
);


Then, you can use useAuthenticator on your App:

import { useAuthenticator } from '@aws-amplify/ui-react';

const App = () => {
  const { user, signOut } = useAuthenticator((context) => [context.user]);
  // ...
};

Authenticator Provider

In advanced use cases where usage of the useAuthenticator hook outside the scope of the Authenticator is needed, wrap your application inside an Authenticator.Provider. The Authenticator.Provider guarantees that the useAuthenticator hook is available throughout your application.

Create React App
Next.js
import { Authenticator, View } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css'; // default theme

export default function App() {
  return (
    <Authenticator.Provider>
      <View>Your app here</View>
    </Authenticator.Provider>
  );
};

Prevent Re-renders

Using useAuthenticator hook at your App level is risky, because it'll trigger a re-render down its tree whenever any of its context changes value.

To prevent undesired re-renders, you can pass a function to useAuthenticator that takes in Authenticator context and returns an array of desired context values. The hook will only trigger re-render if any of the array values change.

For example, you can ensure useAuthenticator to only reevaluate when its user context changes:

import { useAuthenticator } from '@aws-amplify/ui-react';

// hook below is only reevaluated when `user` changes
const { user, signOut } = useAuthenticator((context) => [context.user]);

Access Auth State

You can use useAuthenticator hook to access route string that represents the current authState. They can be one of:

idle
setup
signIn
signUp
confirmSignIn
confirmSignUp
setupTotp
forceNewPassword
forgotPassword
confirmResetPassword
verifyUser
confirmVerifyUser
signOut
authenticated
import { useAuthenticator } from '@aws-amplify/ui-react';


const App = () => {

  const { route } = useAuthenticator(context => [context.route]);



  // Use the value of route to decide which page to render

  return route === 'authenticated' ? <Home /> : <Authenticator />;

};

Authentication Check

If you just need to check if you're authenticated or not, you can use the more straightforward useAuthenticator hook to access the authStatus string. The authStatus string can represent the following states:

configuring
authenticated
unauthenticated

The configuring state only occurs when the Authenticator is first loading.

import { useAuthenticator } from '@aws-amplify/ui-react';


const App = () => {

  const { authStatus } = useAuthenticator(context => [context.authStatus]);



  // Use the value of authStatus to decide which page to render

 return (

    <>
      {authStatus === 'configuring' && 'Loading...'}
      {authStatus !== 'authenticated' ? <Authenticator /> : <Home />}
    </>
  );
};

Access Authenticated User

You can use useAuthenticator hook to access current signed in user. If no user is authenticated, it'll return undefined.

import { useAuthenticator } from '@aws-amplify/ui-react';


const Home = () => {

  const { user, signOut } = useAuthenticator((context) => [context.user]);


  return (
    <>

      <h2>Welcome, {user.username}!</h2>

      <button onClick={signOut}>Sign Out</button>

    </>
  );
};

Trigger Transitions

You can use useAuthenticator hook to access functions that lets you trigger transitions to the authenticator. Please see Full API to see all supported transition functions. Any invalid transitions (e.g. signUp directly to authenticated) will be ignored.

import { useAuthenticator } from '@aws-amplify/ui-react';


const Home = () => {

  const { user, signOut } = useAuthenticator((context) => [context.user]);



  return <button onClick={signOut}>Welcome, {user.username}!</button>;

};

Example

Here's an example that uses the toForgotPassword trigger transition, to create a custom button. Note that example uses the Footer "slot" override.

import '@aws-amplify/ui-react/styles.css';
import {
  Authenticator,
  View,
  Button,
  useAuthenticator,
} from '@aws-amplify/ui-react';

export default function App() {
  const components = {
    SignIn: {
      Footer() {
        const { toForgotPassword } = useAuthenticator();

        return (

          <View textAlign="center">
            <Button fontWeight="normal" onClick={toForgotPassword} size="small">
              Forgot Password???

            </Button>

          </View>
        );
      },
    },
  };

  return (
    <Authenticator components={components}>
      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}


Full API

Below is the full list of context that useAuthenticator hook returns.

Access Contexts
Trigger Transition

These are readonly contexts that represent the current auth state. Any unapplicable context will be undefined.

Name	Description	Type
user	Current signed in user	AuthUser
route	Name of the auth flow user is in	string
error	Any error returned from service API call	string
validationErrors	Any form validation errors found. Maps each error message to respective input name.	Record<string, string>
hasValidationErrors	Whether there are any form validation errors	boolean
isPending	Whether service API call is in progress	boolean
codeDeliveryDetail	Provides detail on where confirm sign up code is sent to.	CodeDeliveryDetail

--------------------------------------------------------------------------------

Title: Customization | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/authenticator/customization
HTML Content:
Customization

Override and customize your Authenticator.

Feedback
Headers & Footers

The Authenticator has several "slots" that you can customize to add messaging & functionality to meet your app's needs.

The following example customizes these slots with:

Custom header above the Authenticator with the Amplify logo
Custom footer below the Authenticator with © All Rights Reserved
Custom Sign In header with Sign in to your account
Custom Sign In footer with a Reset Password link
Custom Sign Up header with Create a new account
Custom Sign Up footer with a Back to Sign In link
Custom Confirm Sign Up header with an Enter Information header
Custom Confirm Sign Up footer with a Footer Information message
const components = {

  Header() {

    const { tokens } = useTheme();

    return (
      <View textAlign="center" padding={tokens.space.large}>
        <Image
          alt="Amplify logo"
          src="https://docs.amplify.aws/assets/logo-dark.svg"
        />
      </View>
    );
  },


  Footer() {

    const { tokens } = useTheme();

    return (
      <View textAlign="center" padding={tokens.space.large}>
        <Text color={tokens.colors.neutral[80]}>
          &copy; All Rights Reserved
        </Text>
      </View>
    );
  },


  SignIn: {

    Header() {

      const { tokens } = useTheme();

      return (
        <Heading
          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}
          level={3}
        >
          Sign in to your account
        </Heading>
      );
    },

    Footer() {

      const { toForgotPassword } = useAuthenticator();

      return (
        <View textAlign="center">
          <Button
            fontWeight="normal"
            onClick={toForgotPassword}
            size="small"
            variation="link"
          >
            Reset Password
          </Button>
        </View>
      );
    },
  },


  SignUp: {

    Header() {

      const { tokens } = useTheme();

      return (
        <Heading
          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}
          level={3}
        >
          Create a new account
        </Heading>
      );
    },

    Footer() {

      const { toSignIn } = useAuthenticator();

      return (
        <View textAlign="center">
          <Button
            fontWeight="normal"
            onClick={toSignIn}
            size="small"
            variation="link"
          >
            Back to Sign In
          </Button>
        </View>
      );
    },
  },

  ConfirmSignUp: {

    Header() {

      const { tokens } = useTheme();
      return (
        <Heading
          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}
          level={3}
        >
          Enter Information:
        </Heading>
      );
    },

    Footer() {

      return <Text>Footer Information</Text>;
    },
  },
  SetupTotp: {
    Header() {
      const { tokens } = useTheme();
      return (

        <Heading
          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}
          level={3}
        >

          Enter Information:
        </Heading>
      );
    },
    Footer() {
      return <Text>Footer Information</Text>;
    },
  },
  ConfirmSignIn: {
    Header() {
      const { tokens } = useTheme();
      return (
        <Heading
          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}
          level={3}
        >
          Enter Information:
        </Heading>
      );
    },
    Footer() {
      return <Text>Footer Information</Text>;
    },
  },
  ForgotPassword: {
    Header() {
      const { tokens } = useTheme();
      return (
        <Heading
          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}
          level={3}
        >
          Enter Information:
        </Heading>
      );
    },
    Footer() {
      return <Text>Footer Information</Text>;
    },
  },
  ConfirmResetPassword: {
    Header() {
      const { tokens } = useTheme();
      return (
        <Heading
          padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`}
          level={3}
        >
          Enter Information:
        </Heading>
      );
    },
    Footer() {
      return <Text>Footer Information</Text>;
    },
  },
};

const formFields = {
  signIn: {
    username: {
      placeholder: 'Enter your email',
    },
  },
  signUp: {
    password: {
      label: 'Password:',
      placeholder: 'Enter your Password:',
      isRequired: false,
      order: 2,
    },
    confirm_password: {
      label: 'Confirm Password:',
      order: 1,
    },
  },
  forceNewPassword: {
    password: {
      placeholder: 'Enter your Password:',
    },
  },
  forgotPassword: {
    username: {
      placeholder: 'Enter your email:',
    },
  },
  confirmResetPassword: {
    confirmation_code: {
      placeholder: 'Enter your Confirmation Code:',
      label: 'New Label',
      isRequired: false,
    },
    confirm_password: {
      placeholder: 'Enter your Password Please:',
    },
  },
  setupTotp: {
    QR: {
      totpIssuer: 'test issuer',
      totpUsername: 'amplify_qr_test_user',
    },
    confirmation_code: {
      label: 'New Label',
      placeholder: 'Enter your Confirmation Code:',
      isRequired: false,
    },
  },
  confirmSignIn: {
    confirmation_code: {
      label: 'New Label',
      placeholder: 'Enter your Confirmation Code:',
      isRequired: false,
    },
  },
};

export default function App() {
  return (
    <Authenticator formFields={formFields} components={components}>
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}

Login
Register
Sign in to your account
Sign In with Amazon
Sign In with Apple
Sign In with Facebook
Sign In with Google
Log in
Enter your username
Enter your password
Password is hidden
Log in
Reset Password

© All Rights Reserved

Override Function Calls

You can override the call to signUp, signIn, confirmSignIn, confirmSignUp, forgotPassword and forgotPasswordSubmit functions. To override a call you must create a new services object with an async handle* function that returns an aws-amplify Auth promise.

@aws-amplify/ui-react v5

Use resetPassword in place of forgotPassword in versions 5 and earlier of @aws-amplify/ui-react.

The service object must then be passed into the authenticator component as a services prop. For example, let's imagine you'd like to lowercase the username and the email attributes during signUp. This would be overriden like so:

@aws-amplify/ui-react v6 (latest)
@aws-amplify/ui-react v5 and below

In @aws-amplify/ui-react version 6, Auth function calls are imported directly as shown below.

import { Authenticator } from '@aws-amplify/ui-react';

import { signUp, SignUpInput } from 'aws-amplify/auth';


export default function App() {
  const services = {
    async handleSignUp(input: SignUpInput) {
      // custom username and email
      const { username, password, options } = input;
      const customUsername = username.toLowerCase();
      const customEmail = options?.userAttributes?.email.toLowerCase();
      return signUp({
        username: customUsername,
        password,
        options: {

          ...input.options,

          userAttributes: {
            ...input.options?.userAttributes,
            email: customEmail,
          },
        },
      });
    },
  };
  return (
    <Authenticator services={services} initialState="signUp">
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}


Each handle* function accepts as input the expected input of its corresponding Auth function, allowing you to override the Auth function call from within the handle* function. Here is a table of each override function name, and the values passed as input.

@aws-amplify/ui-react v6 (latest)
@aws-amplify/ui-react v5
Auth Function Call	Override Name	input Properties
signUp	handleSignUp	{username, password}
signIn	handleSignIn	{username, password}
confirmSignIn	handleConfirmSignIn	{challengeResponse}
confirmSignUp	handleConfirmSignUp	{username, confirmationCode}
resetPassword	handleForgotPassword	{username}
confirmResetPassword	handleForgotPasswordSubmit	{username, newPassword, confirmationCode}
Internationalization (I18n)

The Authenticator ships with translations for:

en – English (default)
zh – Chinese
nl – Dutch
fr – French
de – German
he – Hebrew
id – Indonesian
it – Italian
ja – Japanese
ko – Korean
nb - Norwegian
pl – Polish
pt – Portuguese
ru – Russian
es – Spanish
sv – Swedish
tr – Turkish
ua – Ukrainian

These translations can be customized using the Amplify JS' I18n module:

Note: The import path for i18n changed from aws-amplify to aws-amplify/utils in aws-amplify@6

import { I18n } from 'aws-amplify/utils';
import { translations } from '@aws-amplify/ui-react';
I18n.putVocabularies(translations);
I18n.setLanguage('fr');

I18n.putVocabularies({
  fr: {
    'Sign In': 'Se connecter',
    'Sign Up': "S'inscrire",
  },
  es: {
    'Sign In': 'Registrarse',
    'Sign Up': 'Regístrate',
  },
});


The list of available keys are available here.

Confirm Sign Up Page Translations

The confirm sign up page has a few specialized strings that can be translated. These include:

`Your code is on the way. To log in, enter the code we emailed to`

`Your code is on the way. To log in, enter the code we texted to`

`Your code is on the way. To log in, enter the code we sent you. It may take a minute to arrive.`

`It may take a minute to arrive.`

Translations Needed 📖

If you see any missing translations or would like to contribute a new language, we greatly appreciate contributions to translations we have here.

Labels & Text

Using the same techniques as Internationalization (I18n), you can customize the labels and text of the components:

Default Values

Compare the default labels here to those in the customized screens below.

Because I18n manages global translations, customizing these will affect all translations of these strings (including those on this page!).

Login
Register
Log in
Enter your username
Enter your password
Password is hidden
Log in
Reset Password

Sign In

Sign Up

Forgot Password

Setup TOTP

Sign Up Fields

The following example customizes the Sign Up screen by:

Re-using the default Sign Up form fields
Appending a custom "Terms and Conditions" checkbox with a validateCustomSignUp service

Note: In the example code below, preferred_username is not set as an attribute because it has already been defined through Zero Configuration. You may also notice that the acknowledgement field is not being sent. This occurs since acknowledgement is not a known attribute to Cognito. To assign it as a custom attribute instead, the name field must have the custom: prefix.

export default function App() {
  return (
    <Authenticator
      // Default to Sign Up screen
      initialState="signUp"
      // Customize `Authenticator.SignUp.FormFields`

      components={{

        SignUp: {

          FormFields() {

            const { validationErrors } = useAuthenticator();

            return (
              <>
                {/* Re-use default `Authenticator.SignUp.FormFields` */}
                <Authenticator.SignUp.FormFields />

                {/* Append & require Terms and Conditions field to sign up  */}
                <CheckboxField
                  errorMessage={validationErrors.acknowledgement as string}
                  hasError={!!validationErrors.acknowledgement}
                  name="acknowledgement"
                  value="yes"
                  label="I agree with the Terms and Conditions"
                />
              </>
            );
          },
        },
      }}

      services={{

        async validateCustomSignUp(formData) {
          if (!formData.acknowledgement) {
            return {
              acknowledgement: 'You must agree to the Terms and Conditions',
            };
          }
        },
      }}
    >
      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}

Login
Register
Enter your email
Enter your password
Password is hidden
Confirm your password
Password is hidden
Preferred Username
I agree with the Terms and Conditions

You must agree to the Terms and Conditions

Register

If you'd like to add an attribute please first consider using the Sign Up Attributes prop. In some instances you may want to add an app-specific attribute. In those cases you can add a new form element to the Sign Up form fields. Be aware the HTML name attribute on the new form field must match the name of the Cognito attribute. If the cognito attribute is a custom attribute it must have the custom: prefix in the HTML attribute name.

Copy
  const formFields = {
    signUp: {
      email: {
        order:1
      },
      password: {
        order: 2
      },
      confirm_password: {
        order: 3
      },
      'custom:your_custom_attribute': {
        order: 4
      }
    },
  }

Force New Password Fields

The following example customizes the Force New Password screen by:

Re-using the default Force New Password form fields
Appending a custom "Zone Info" text field
<Authenticator
      initialState="signUp"
      components={{
        ForceNewPassword: {
          FormFields() {
            return (

              <>

                <Authenticator.ForceNewPassword.FormFields />

                <TextField
                  label="Zone Info"
                  id="12233"
                  placeholder="Zone Info"
                  name="zoneinfo"
                  type="text"
                ></TextField>

              </>
            );
          },
        },
      }}
    >
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}

Sign Up Field Order

The authenticator allows a custom order of sign up fields on the Sign Up page.

Order is determined by a formFields prop that is passed into the Authenticator component. This prop will have the signUp key with a list of all the input fields. Each input field will have an order key that specifies which order it will be displayed on the page.

In the example below the order will be set as email, family_name, birthdate, preferred_username, password and finally confirm_password.

Note: Fields that do not have a order key will be displayed at the bottom of the Sign Up page. The order key can also be combined with other form field updates. In addition, typically attributes added to the sign up page have already been inferred through Zero Configuration. However, you can explicitly set the sign up attributes prop to add these to the sign up page if needed.


const formFields = {

   signUp: {

     email: {

       order:1

     },

     family_name: {

       order: 2

     },

     preferred_username: {
       order: 4
     },
     birthdate: {
       order: 3
     },
     password: {
       order: 5
     },
     confirm_password: {
       order: 6
     }
   },
  }


// Adding the signUpAttributes prop is typically not needed since attributes are inferred via Zero Configuration.
// For the sake of this example they have been explicitly added so you can copy and paste this into your own application and see it work. 
const signUpAttributes={['birthdate', 'family_name', 'preferred_username']}

export default function App() {
  return (
    <Authenticator formFields={formFields} signUpAttributes={signUpAttributes}>
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}

Login
Register
Enter your email
Family Name
Birthdate
Preferred Username
Enter your password
Password is hidden
Confirm your password
Password is hidden
Register
Form Field Customization

The Authenticator allows for customization of multiple aspects of the form fields. The sections below will describe several use cases, on how to modify these fields.

Overall, the following attributes are allowed to be modified on any input as described in the labels and placeholder section:

placeholder label

Additionally, you'll be able to show or hide the label of each form field by using labelHidden and set a field to required or not required with isRequired.

For customers wishing to change a phone number field, a new dialCode and dialCodeList key are now available as described in the dialCode and dialCodeList.

For a full list of component names and field names can be found in the input form table.

Updating labels, placeholders, required fields and showing labels

You can customize any label, placeholder, set a field as required or not required, and hide or show labels by configuring the formFields props, and passing it into the Authenticator component. To use this feature create a formFields prop and include the component name as a key. Inside that object you can list all the inputs you'd like to change by their name. Inputs can have additional client side validation by following HTML form validation standards.

Note: Specifying formFields for a given field will overwrite any default attributes. To include defaults, you must re-specify them as shown below.

The following example customizes the Sign In page by:

Updating the placeholder with placeholder.
Setting required to true with isRequired. username is required by default, but as mentioned above, default attributes will be overwritten and must be re-declared when using formFields.
Updating the label text with label.
Show the label using labelHidden set to false.

Note: On the sign in page the input name is always username, regardless of the login mechanism type.


const formFields = {

  signIn: {

    username: {

      placeholder: 'Enter Your Email Here',

      isRequired: true,

      label: 'Email:'

    },

  },

}


export default function App() {
  return (
    <Authenticator formFields={formFields}>
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}

Login
Register
Log in
Email:
Enter your password
Password is hidden
Log in
Reset Password
Default international dial code

Default Dial code customization is available via the dialCode form field key.

The following example will set the default dial code to +227 on the Sign Up and Sign In page.


const formFields = {

  signIn: {

    username: {

      dialCode: '+227'

    },

  },

  signUp: {

    phone_number: {

      dialCode: '+227'

    },
  },
}

export default function App() {
  return (
    <Authenticator formFields={formFields}>
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}

Login
Register
Log in
Enter your phone number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Enter your password
Password is hidden
Log in
Reset Password
Change dial code list

If needed, you can update the list of dial codes shown to the user by assigning an array of dial codes to the dialCodeList.

In this example, only four dial codes are show in the drop down list for the sign in and sign up pages.

Note: Make sure to add the plus sign to each dial code in the dialCodeList.


const formFields = {

  signIn: {

    username: {

      dialCodeList: ['+1', '+123', '+227', '+229']

    },

  },

  signUp: {

    phone_number: {

      dialCodeList: ['+1', '+123', '+227', '+229']

    },
  },
}

export default function App() {
  return (
    <Authenticator formFields={formFields}>
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}

Login
Register
Log in
Enter your phone number
Country code
+1
+123
+227
+229
Enter your password
Password is hidden
Log in
Reset Password
Input Form Field Names Table

Here are the various components and input names that are available for customization.

Component Name	Form Field Names
signIn	username password
signUp	email phone_number username password confirm_password preferred_username birthdate family_name middle_name given_name name nickname profile website
confirmSignUp	confirmation_code
forgotPassword	username
confirmResetPassword	confirmation_code password confirm_password
forceNewPassword	password confirm_password
setupTotp	confirmation_code
confirmSignIn	confirmation_code
confirmVerifyUser	confirmation_code

Note: Custom sign up attributes not listed in this table are customizable. Use the form field name as the key.

Update Setup TOTP QR Issuer and Username

When setting up TOTP you can customize the issuer and username that will be shown in TOTP applications. This can be done by adding the formFields prop to the Authenticator component with a setupTotp key. The setupTotp should have a QR key with a totpIssuer and or totpUsername as seen in the example below.

Note: Unless changed, the default issuer is AWSCognito and username will be the current user.username for the user signing up.


const formFields = {

  setupTotp: {

        QR: {

          totpIssuer: 'test issuer',

          totpUsername: 'amplify_qr_test_user',

        },

      },

  }


export default function App() {
  return (
    <Authenticator formFields={formFields}>
      {({ signOut }) => <button onClick={signOut}>Sign out</button>}
    </Authenticator>
  );
}

Styling

You can customize the Authenticator's default style by using CSS variables.

CSS style

The example below uses a <style> tag to change the appearance of some of the components used for the Authenticator:


[data-amplify-authenticator] {
  --amplify-components-authenticator-router-box-shadow: 0 0 16px var(--amplify-colors-overlay-10);
  --amplify-components-authenticator-router-border-width: 0;
  --amplify-components-authenticator-form-padding: var(--amplify-space-medium) var(--amplify-space-xl) var(--amplify-space-xl);
  --amplify-components-button-primary-background-color: var(--amplify-colors-neutral-100);
  --amplify-components-fieldcontrol-focus-box-shadow: 0 0 0 2px var(--amplify-colors-purple-60);
  --amplify-components-tabs-item-active-border-color: var(--amplify-colors-neutral-100);
  --amplify-components-tabs-item-color: var(--amplify-colors-neutral-80);
  --amplify-components-tabs-item-active-color: var(--amplify-colors-purple-100);
  --amplify-components-button-link-color: var(--amplify-colors-purple-80);
}


Login
Register
Log in
Enter your username
Enter your password
Password is hidden
Log in
Reset Password
Theme Provider Theme

Below is an example of updating the style of the Authenticator by using the ThemeProvider theme object. To do this, you must surround the Authenticator in the ThemeProvider.

Then create a theme object, with all your font and color updates. Feel free to use design tokens, as a way of designing your theme further.

import {
  Authenticator,
  ThemeProvider,
  Theme,
  useTheme,
  View,
} from '@aws-amplify/ui-react';
export function AuthStyle() {
  const { tokens } = useTheme();
  const theme: Theme = {
    name: 'Auth Example Theme',
    tokens: {
      components: {
        authenticator: {
          router: {
            boxShadow: `0 0 16px ${tokens.colors.overlay['10']}`,
            borderWidth: '0',
          },
          form: {
            padding: `${tokens.space.medium} ${tokens.space.xl} ${tokens.space.medium}`,
          },
        },
        button: {
          primary: {
            backgroundColor: tokens.colors.neutral['100'],
          },
          link: {
            color: tokens.colors.purple['80'],
          },
        },
        fieldcontrol: {
          _focus: {
            boxShadow: `0 0 0 2px ${tokens.colors.purple['60']}`,
          },
        },
        tabs: {
          item: {
            color: tokens.colors.neutral['80'],
            _active: {
              borderColor: tokens.colors.neutral['100'],
              color: tokens.colors.purple['100'],
            },
          },
        },
      },
    },
  };

  return (
    <ThemeProvider theme={theme}>
      <View padding="xxl">
        <Authenticator />
      </View>
    </ThemeProvider>
  );
}

Login
Register
Log in
Enter your username
Enter your password
Password is hidden
Log in
Reset Password

If you have TypeScript enabled, all the object keys will be present when creating the theme object. This will help speed up your development time while creating themes.

Additional CSS Styling

You can also override the authenticator's amplify-* classes. For example, if you'd like to update the primary color of your submit button you can override the amplify-button class.

.amplify-button--primary {
  background: linear-gradient(
    to right,
    var(--amplify-colors-green-80),
    var(--amplify-colors-orange-40)
  );
}

Login
Register
Log in
Enter your username
Enter your password
Password is hidden
Log in
Reset Password

--------------------------------------------------------------------------------

Title: Configuration | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/authenticator/configuration
HTML Content:
Configuration

How to setup and configure your Authenticator component.

Feedback
Wait!

Did you follow the quick start instructions to set up the Authenticator first?

Initial State

By default, unauthenticated users are redirected to the Sign In flow. You can explicitly redirect to Sign Up or Forgot Password:

Sign In
Sign Up
Forgot Password
export default function App() {
  return (

    <Authenticator>

      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}

Sign In
Create Account
Sign in
Username
Password
Password is hidden
Sign in
Forgot your password?
Login Mechanisms
Zero Configuration

The Authenticator automatically infers loginMechanisms from the current Amplify configuration, but can be explicitly defined as seen below.

Without the zero configuration, the Authenticator by default creates new users in the Amazon Cognito UserPool based on a unique username.

You can provide an alternative to username such as email or phone_number.

Note: A username, email, or phone_number value is required for Cognito User Pools. The username field will only work with Gen 1 Auth. For more information about using username see the docs.

Email
Phone Number
Username
<Authenticator loginMechanisms={['email']}>
  {({ signOut, user }) => (

    <main>

      <h1>Hello {user.username}</h1>
      <button onClick={signOut}>Sign out</button>
    </main>
  )}
</Authenticator>

Sign In
Create Account
Sign in
Email
Password
Password is hidden
Sign in
Forgot your password?
Sign Up Attributes
Zero Configuration

The Authenticator automatically infers signUpAttributes from amplify pull, but can be explicitly defined as seen below.

The Authenticator automatically renders most Cognito User Pools attributes, with the exception of address, gender, locale, picture, updated_at, and zoneinfo. Because these are often app-specific, they can be customized via Sign Up fields.

Verification Attributes
All Attributes

By default, the Authenticator will still require any attributes required for verification, such as email, even if signUpAttributes is empty:

export default function App() {
  return (

    <Authenticator signUpAttributes={[]}>

      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}

Sign In
Create Account
Username
Password
Password is hidden
Confirm Password
Password is hidden
Email
Create Account
Social Providers
Zero Configuration

The Authenticator automatically infers socialProviders from amplify pull, but can be explicitly defined as seen below.

For your configured social providers, you can also provide amazon, facebook, or google:

export default function App() {
  return (

    <Authenticator socialProviders={['amazon', 'apple', 'facebook', 'google']}>

      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}

Sign In
Create Account
Sign In with Amazon
Sign In with Apple
Sign In with Facebook
Sign In with Google
Sign in
Username
Password
Password is hidden
Sign in
Forgot your password?

Step by step video on setting up social providers.

Variation

The Authenticator has multiple variations to meet the needs of your application.

default
modal

By default, the Authenticator will render as a centered card within the container:

export default function App() {
  return (

    <Authenticator>

      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}

Sign In
Create Account
Sign in
Username
Password
Password is hidden
Sign in
Forgot your password?
Hide Sign Up

The Authenticator has an option to hide the sign up page including the Create Account tab.

<Authenticator hideSignUp />

Sign in
Username
Password
Password is hidden
Sign in
Forgot your password?

--------------------------------------------------------------------------------

Title: Authenticator | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/connected-components/authenticator
HTML Content:
Authenticator

Authenticator component adds complete authentication flows to your application with minimal boilerplate.

Feedback
@aws-amplify/ui-react v5
The @aws-amplify/ui-react package is currently on version 6. Working with@aws-amplify/ui-react version 5 or earlier? See our migration guide.

The Authenticator component adds complete authentication flows to your application with minimal boilerplate.

Sign In
Create Account
Sign in
Username
Password
Password is hidden
Sign in
Forgot your password?
Quick start

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

Setup with Amplify Gen 2 backend

To get up and running with the Authenticator, follow the Amplify Gen2 quickstart guide.

Setup with Amplify Gen 1 backend

To setup Amplify using the Gen1 CLI, follow the steps below:

Step 1. Configure backend

The Authenticator works seamlessly with the Amplify CLI to automatically work with your backend.

First, update @aws-amplify/cli with npm or yarn if you're using a version before 6.4.0:

npm
yarn
npm install -g @aws-amplify/cli@latest
Copy

Now that you have the Amplify CLI installed, you can set up your Amplify project by running amplify init in your project's root directory. Then run amplify add auth and follow the prompts to add authentication to your backend configuration.

If you have an existing backend, run amplify pull to sync your aws-exports.js with your cloud backend.

You should now have an aws-exports.js file in your src/ directory with your latest backend configuration.

Step 2. Install dependencies
npm
yarn
npm install @aws-amplify/ui-react aws-amplify
Copy
Step 3. Add the Authenticator

The quickest way to get started is by wrapping your application with the Authenticator component. Once an end-user has created an account & signed in, the underlying component is rendered with access to the user.

You can use the Authenticator component directly, or wrap your app in withAuthenticator Higher-Order Component:

Authenticator
withAuthenticator
import React from 'react';
import { Amplify } from 'aws-amplify';



import { Authenticator } from '@aws-amplify/ui-react';

import '@aws-amplify/ui-react/styles.css';

import awsExports from './aws-exports';
Amplify.configure(awsExports);

export default function App() {

  return (

    <Authenticator>

      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}

React Authenticator v1

Looking for a previous version of Authenticator? Checkout the Authenticator v1 documentation.

Please see troubleshooting if you have trouble building or running your application with Authenticator.

Next steps
Configuration
How to setup and configure your Authenticator component
Customization
Override and customize your Authenticator
Advanced Usage
Access Authenticator UI component state outside of the UI component

--------------------------------------------------------------------------------

Title: VisuallyHidden | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/visuallyhidden
HTML Content:
VisuallyHidden

VisuallyHidden is used to visually hide content while leaving it available for screen readers.

React source
Feedback
Documentation
Props

There are some common scenarios where you might need the VisuallyHidden primitive:

To provide an accessible alternative to icon only buttons
To provide additional context for screen reader users regarding interface interactions.
Combined with ARIA attributes such as aria-live, to announce context when a change in the interface occurs.

Since the VisuallyHidden element is hidden using the CSS clip property, and not display: none, the element is still available to assistive technologies.

Note

It's a good practice to consider if your VisuallyHidden content would be better served as visible for all; that way everyone benefits from the additional context.

Usage

Import the VisuallyHidden primitive.

Mark as complete
Copy
import { Button, VisuallyHidden, Icon } from '@aws-amplify/ui-react';

const IconDone = () => {
  return (
    <Icon
      pathData="M9 16.2001L4.8 12.0001L3.4 13.4001L9 19.0001L21 7.0001L19.6 5.6001L9 16.2001Z"
      ariaLabel=""
    />
  );
};

export const DefaultVisuallyHiddenExample = () => {
  return (
    <Button variation="primary">
      <VisuallyHidden>Mark as complete</VisuallyHidden>
      <IconDone />
    </Button>
  );
};

CSS Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-visually-hidden	Top level element that wraps the VisuallyHidden primitive

--------------------------------------------------------------------------------

Title: Rating | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/rating
HTML Content:
Rating

Rating displays a read-only star rating of a product or service.

Theme source
React source
Feedback
Documentation
Props
Demo
2 out of 5 rating
value
maxValue
size
small
medium
large
fillColor
emptyColor
Copy
<Rating
  value={2}
  maxValue={5}
  fillColor="hsl(300, 95%, 30%)"
  emptyColor="hsl(210, 5%, 94%)"
  />
Usage

Import Rating component

0 out of 5 rating
Copy
import { Rating } from '@aws-amplify/ui-react';

export const DefaultRatingExample = () => {
  return <Rating />;
};

Value

Pass in a value prop to set the Rating value.

3.7 out of 5 rating
Copy
import { Rating } from '@aws-amplify/ui-react';

export const RatingValueExample = () => {
  return <Rating value={3.7} />;
};

Max Value

Pass in an optional maxValue prop to set the maximum value of the Rating component (default maxValue is 5).

6.3 out of 10 rating
Copy
import { Rating } from '@aws-amplify/ui-react';

export const RatingMaxExample = () => {
  return <Rating value={6.3} maxValue={10} />;
};

Size

Use the size prop to adjust the size of the Rating component. Options include small, large, and none (default).

2.5 out of 5 rating
2.5 out of 5 rating
2.5 out of 5 rating
Copy
import { Rating } from '@aws-amplify/ui-react';

export const RatingSizeExample = () => {
  return (
    <>
      <Rating value={2.5} size="small" />
      <Rating value={2.5} />
      <Rating value={2.5} size="large" />
    </>
  );
};

Colors

The fill color and empty color can be set using the fillColor and emptyColor props.

2.5 out of 5 rating
Copy
import { Rating, useTheme } from '@aws-amplify/ui-react';

export const RatingColorExample = () => {
  const { tokens } = useTheme();
  return (
    <Rating
      value={2.5}
      fillColor={tokens.colors.red[60]}
      emptyColor={tokens.colors.green[60]}
    />
  );
};

Custom Icon

A custom icon can be used in the Rating component using the icon prop. The Rating component works well with all major icon sets and these icons can be substituted in using this icon prop. The icon prop will override both the filled and empty icons unless a specific empty icon is also passed in.

2.5 out of 5 rating
Copy
import { Rating, Icon } from '@aws-amplify/ui-react';

const IconAdd = () => {
  return <Icon pathData="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z" />;
};

export const RatingIconExample = () => {
  return <Rating value={2.5} icon={<IconAdd />} />;
};

Custom SVG Icon

A custom SVG may be used with the Rating component. The color props on the Rating component rely on the svg icon being used inheriting the color property and setting the svg fill to currentColor.

2.5 out of 5 rating
Copy
/* styles.css */
.my-cool-svg {
  fill: currentColor;
}

Copy
import { Rating } from '@aws-amplify/ui-react';

const MyCoolSvg = () => {
  return (
    <svg className="my-cool-svg">
      <g>
        <g>
          <path d="M14.5,17c0,1.65-1.35,3-3,3s-3-1.35-3-3h2c0,0.55,0.45,1,1,1s1-0.45,1-1s-0.45-1-1-1H2v-2h9.5 C13.15,14,14.5,15.35,14.5,17z M19,6.5C19,4.57,17.43,3,15.5,3S12,4.57,12,6.5h2C14,5.67,14.67,5,15.5,5S17,5.67,17,6.5 S16.33,8,15.5,8H2v2h13.5C17.43,10,19,8.43,19,6.5z M18.5,11H2v2h16.5c0.83,0,1.5,0.67,1.5,1.5S19.33,16,18.5,16v2 c1.93,0,3.5-1.57,3.5-3.5S20.43,11,18.5,11z" />
        </g>
      </g>
    </svg>
  );
};

export const RatingSVGExample = () => {
  return <Rating value={2.5} icon={<MyCoolSvg />} />;
};

Custom Empty Icon

A custom empty icon can be used in the Rating component using the emptyIcon prop. The emptyIcon prop will only affect the empty icon being rendered and by passing in an empty icon there will be different icons being rendered for the empty icons and filled icons. This is in contrast to the icon prop which will override both the empty and filled icons being used.

2.5 out of 5 rating
Copy
import { Rating, Icon } from '@aws-amplify/ui-react';

const IconStarBorder = () => {
  return (
    <Icon pathData="M22 9.24L14.81 8.62L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27L18.18 21L16.55 13.97L22 9.24ZM12 15.4L8.24 17.67L9.24 13.39L5.92 10.51L10.3 10.13L12 6.1L13.71 10.14L18.09 10.52L14.77 13.4L15.77 17.68L12 15.4Z" />
  );
};

export const RatingEmptyExample = () => {
  return <Rating value={2.5} emptyIcon={<IconStarBorder />} />;
};

CSS Styling
Theme

You can customize the appearance of all Rating components in your application with a Theme.

Rating Theme Source

3 out of 5 rating
3.5 out of 5 rating
5 out of 5 rating
Copy
import { Rating, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'rating-theme',
  tokens: {
    components: {
      rating: {
        filled: { color: { value: '{colors.yellow.60}' } },
        empty: { color: { value: '{colors.neutral.40}' } },
        small: { size: { value: '{fontSizes.xxs}' } },
        default: { size: { value: '{fontSizes.large}' } },
        large: { size: { value: '{fontSizes.xxxl}' } },
      },
    },
  },
};

export const RatingThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex direction="column">
      <Rating value={3} size="small" />
      <Rating value={3.5} />
      <Rating value={5} size="large" />
    </Flex>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-rating	Top level element that wraps the Rating primitive
amplify-rating__item	Each element in the Rating primitive
amplify-rating__icon	The icons in the Rating primitive
amplify-rating__label	Top level element that wraps the Rating primitive
Global styling

To override styling on all Rating components, you can set the Amplify CSS variables or use the built-in .amplify-rating classes.

Filled and empty icon colors

The empty and filled icon colors can be overridden using css variables or the .amplify-rating-icon-filled and .amplify-rating-icon-empty classes.

2.5 out of 5 rating
Copy
/* styles.css */
:root {
  --amplify-components-rating-filled-color: var(--amplify-colors-purple-60);
  --amplify-components-rating-empty-color: var(--amplify-colors-blue-60);
}
/* OR */
.amplify-rating-icon-filled {
  color: var(--amplify-colors-purple-60);
}

.amplify-rating-icon-empty {
  color: var(--amplify-colors-blue-60);
}

Sizes

The size variations on the Rating component can be overridden at the application level using CSS variables

2.5 out of 5 rating
Copy
  /* styles.css */
  :root {
    --amplify-components-rating-small-size: var(--amplify-font-sizes-xxxl);
  }
  /* OR */
  .amplify-rating[data-size=small] {
    font-size: var(--amplify-font-sizes-xxxl);
    line-height: var(--amplify-font-sizes-xxxl);
  }

Local styling

The Rating component styling props can be overridden using a custom class name and the built-in CSS classes.

Filled and empty icon colors

The empty and filled icon colors can be overridden using a custom CSS class on your Rating component and with the .amplify-rating-icon-filled and .amplify-rating-icon-empty classes

2.5 out of 5 rating
Copy
.my-rating-component .amplify-rating-icon-filled {
  color: var(--amplify-colors-purple-60);
}

.my-rating-component .amplify-rating-icon-empty {
  color: var(--amplify-colors-blue-60);
}

Copy
import { Rating } from '@aws-amplify/ui-react';

export const RatingStyleColorExample = () => {
  return <Rating value={2.5} className="my-rating-component" />;
};

Sizes

The size variations on the Rating component can be overridden at the individual component level. Here we override the small size to display xxxl stars.

2.5 out of 5 rating
Copy
/* styles.css */
.large-rating[data-size='small'] {
  font-size: var(--amplify-font-sizes-xxxl);
  line-height: var(--amplify-font-sizes-xxxl);
}

Copy
import { Rating } from '@aws-amplify/ui-react';

export const RatingStyleSizeExample = () => {
  return <Rating value={2.5} className="large-rating" size="small" />;
};


--------------------------------------------------------------------------------

Title: HighlightMatch | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/highlightmatch
HTML Content:
HighlightMatch

HighlightMatch is used to highlight a substring of a text.

React source
Feedback
Documentation
Props
Demo
This is a highlighted string.
Query
Main text
Copy
<HighlightMatch query="highlighted string">
  This is a highlighted string.
</HighlightMatch>
Usage

Import the HighlightMatch primitive. Render the text as children of the HighlightMatch, then pass the word you want to highlight to the query prop.

This is the highlighted part.
Copy
import { HighlightMatch } from '@aws-amplify/ui-react';

export const HighlightMatchDefaultExample = () => {
  return (
    <HighlightMatch query="highlighted part">
      This is the highlighted part.
    </HighlightMatch>
  );
};


Note: The query for the text is case insensitive.

Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-highlightmatch	Top level element that wraps the HighlightMatch primitive
amplify-highlightmatch__highlighted	Class applied to the highlighted text of the HighlightMatch primitive

--------------------------------------------------------------------------------

Title: Table | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/table
HTML Content:
Table

Table displays tabular data using the HTML <table> element and related elements.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Citrus	Stone Fruit	Berry
Orange	Nectarine	Raspberry
Grapefruit	Apricot	Blueberry
Lime	Peach	Strawberry
caption
highlightOnHover
size
(default)
small
large
variation
(default)
bordered
striped
Copy


<Table
  caption=""
  highlightOnHover={false}>
  <TableHead>
    <TableRow>
      <TableCell as="th">Citrus</TableCell>
      <TableCell as="th">Stone Fruit</TableCell>
      <TableCell as="th">Berry</TableCell>
    </TableRow>
  </TableHead>
  <TableBody>
    <TableRow>
      <TableCell>Orange</TableCell>
      <TableCell>Nectarine</TableCell>
      <TableCell>Raspberry</TableCell>
    </TableRow>
    <TableRow>
      <TableCell>Grapefruit</TableCell>
      <TableCell>Apricot</TableCell>
      <TableCell>Blueberry</TableCell>
    </TableRow>
    <TableRow>
      <TableCell>Lime</TableCell>
      <TableCell>Peach</TableCell>
      <TableCell>Strawberry</TableCell>
    </TableRow>
  </TableBody>
</Table>
  
Usage

The Table primitive and its various components can be used similiarly to how the HTML table, tbody, td, tfoot, th, thead, and tr elements are used.

Copy
import {
  Table,
  TableCell,
  TableBody,
  TableHead,
  TableRow,
} from '@aws-amplify/ui-react';

export const BasicExample = ({
  caption,
  highlightOnHover,
  size,
  variation,
}) => (
  <Table
    caption={caption}
    highlightOnHover={highlightOnHover}
    size={size}
    variation={variation}
  >
    <TableHead>
      <TableRow>
        <TableCell as="th">Citrus</TableCell>
        <TableCell as="th">Stone Fruit</TableCell>
        <TableCell as="th">Berry</TableCell>
      </TableRow>
    </TableHead>
    <TableBody>
      <TableRow>
        <TableCell>Orange</TableCell>
        <TableCell>Nectarine</TableCell>
        <TableCell>Raspberry</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Grapefruit</TableCell>
        <TableCell>Apricot</TableCell>
        <TableCell>Blueberry</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Lime</TableCell>
        <TableCell>Peach</TableCell>
        <TableCell>Strawberry</TableCell>
      </TableRow>
    </TableBody>
  </Table>
);

Size

Control the cell height and font size of a Table using the size prop. Available options are small, none (default), and large.

Small Table
Small	Small
Small	Small
Default Table
Default	Default
Default	Default
Large Table
Large	Large
Large	Large
Copy
import { Flex, Table, TableCell, TableRow } from '@aws-amplify/ui-react';

export const SizeExample = () => (
  <Flex direction="column">
    <Table caption="Small Table" size="small">
      <TableRow>
        <TableCell>Small</TableCell>
        <TableCell>Small</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Small</TableCell>
        <TableCell>Small</TableCell>
      </TableRow>
    </Table>
    <Table caption="Default Table">
      <TableRow>
        <TableCell>Default</TableCell>
        <TableCell>Default</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Default</TableCell>
        <TableCell>Default</TableCell>
      </TableRow>
    </Table>
    <Table caption="Large Table" size="large">
      <TableRow>
        <TableCell>Large</TableCell>
        <TableCell>Large</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Large</TableCell>
        <TableCell>Large</TableCell>
      </TableRow>
    </Table>
  </Flex>
);

Variation

The variation prop can be used to make all cells bordered or rows striped. Note that the striped variation doesn't apply to rows in a TableHead tag.

Bordered	Bordered
Bordered	Bordered
Bordered	Bordered
Striped	Striped
Striped	Striped
Striped	Striped
Copy
import { Flex, Table, TableCell, TableRow } from '@aws-amplify/ui-react';

export const VariationExample = () => (
  <Flex direction="column">
    <Table variation="bordered">
      <TableRow>
        <TableCell>Bordered</TableCell>
        <TableCell>Bordered</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Bordered</TableCell>
        <TableCell>Bordered</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Bordered</TableCell>
        <TableCell>Bordered</TableCell>
      </TableRow>
    </Table>
    <Table variation="striped">
      <TableRow>
        <TableCell>Striped</TableCell>
        <TableCell>Striped</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Striped</TableCell>
        <TableCell>Striped</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Striped</TableCell>
        <TableCell>Striped</TableCell>
      </TableRow>
    </Table>
  </Flex>
);

Highlight on Hover

The highlightOnHover prop can be used to change the background color of table rows upon mouse hover. Note that rows in a TableHead tag are not highlighted.

Not highlighted
Highlighted on hover	Highlighted on hover
Highlighted on hover	Highlighted on hover
Copy
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
} from '@aws-amplify/ui-react';

export const HighlightExample = () => (
  <Table highlightOnHover={true}>
    <TableHead>
      <TableRow>
        <TableCell as="th" colSpan={2}>
          Not highlighted
        </TableCell>
      </TableRow>
    </TableHead>
    <TableBody>
      <TableRow>
        <TableCell>Highlighted on hover</TableCell>
        <TableCell>Highlighted on hover</TableCell>
      </TableRow>
      <TableRow>
        <TableCell>Highlighted on hover</TableCell>
        <TableCell>Highlighted on hover</TableCell>
      </TableRow>
    </TableBody>
  </Table>
);

TableCell
th and td cells

The TableCell is used for all data presented in a table. If a cell is intended to be a heading for a row or column, it's recommended to set the cell as a th element using the as property:

<TableCell as="th">Column Header</TableCell>


By default, the TableCell is rendered as a td element.

Spanning multiple columns or rows

The TableCell component can be made to span multiple columns or rows using the colspan or rowspan properties, respectively. This is similar to how the HTML native th and td elements are made to span multiple columns and rows.

		
			
	

Copy
import { Table, TableBody, TableCell, TableRow } from '@aws-amplify/ui-react';

export const SpanExample = () => (
  <Table variation="bordered">
    <TableBody>
      <TableRow>
        <TableCell />
        <TableCell />
        <TableCell
          colspan="2"
        />
      </TableRow>
      <TableRow>
        <TableCell
          rowspan="3"
        />
        <TableCell />
        <TableCell />
        <TableCell
          rowspan="3"
        />
      </TableRow>
      <TableRow>
        <TableCell />
        <TableCell />
      </TableRow>
      <TableRow>
        <TableCell
          colspan="3"
        />
      </TableRow>
    </TableBody>
  </Table>
);

Standard HTML attributes

The Table will accept any of the standard HTML attributes that a <table> element accepts. Standard <table> attributes can be found in the MDN Documentation

Citrus	Stone Fruit	Berry
Orange	Nectarine	Raspberry
Grapefruit	Apricot	Blueberry
Copy
<Table title="Table">
  <TableHead>
    <TableRow>
      <TableCell as="th">Citrus</TableCell>
      <TableCell as="th">Stone Fruit</TableCell>
      <TableCell as="th">Berry</TableCell>
    </TableRow>
  </TableHead>
  <TableBody>
    <TableRow>
      <TableCell>Orange</TableCell>
      <TableCell>Nectarine</TableCell>
      <TableCell>Raspberry</TableCell>
    </TableRow>
    <TableRow>
      <TableCell>Grapefruit</TableCell>
      <TableCell>Apricot</TableCell>
      <TableCell>Blueberry</TableCell>
    </TableRow>
  </TableBody>
</Table>

CSS Styling
Theme

You can customize the appearance of all Table components in your application with a Theme.

Table Theme Source

Citrus	Stone Fruit	Berry
Orange	Nectarine	Raspberry
Grapefruit	Apricot	Blueberry
Lime	Peach	Strawberry
Copy
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  ThemeProvider,
  Theme,
} from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'table-theme',
  tokens: {
    components: {
      table: {
        row: {
          hover: {
            backgroundColor: { value: '{colors.blue.20}' },
          },

          striped: {
            backgroundColor: { value: '{colors.blue.10}' },
          },
        },

        header: {
          color: { value: '{colors.blue.80}' },
          fontSize: { value: '{fontSizes.xl}' },
        },

        data: {
          fontWeight: { value: '{fontWeights.semibold}' },
        },
      },
    },
  },
};

export const TableThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Table highlightOnHover variation="striped">
      <TableHead>
        <TableRow>
          <TableCell as="th">Citrus</TableCell>
          <TableCell as="th">Stone Fruit</TableCell>
          <TableCell as="th">Berry</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        <TableRow>
          <TableCell>Orange</TableCell>
          <TableCell>Nectarine</TableCell>
          <TableCell>Raspberry</TableCell>
        </TableRow>
        <TableRow>
          <TableCell>Grapefruit</TableCell>
          <TableCell>Apricot</TableCell>
          <TableCell>Blueberry</TableCell>
        </TableRow>
        <TableRow>
          <TableCell>Lime</TableCell>
          <TableCell>Peach</TableCell>
          <TableCell>Strawberry</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-table	Top level element that wraps the Table primitive
amplify-table__caption	Class applied to the content provided as the caption prop
amplify-table__body	Class applied to TableBody component
amplify-table__td	Class applied to TableCell component rendered as a <td> element (<TableCell as="td" />)
amplify-table__th	Class applied to TableCell comopnent rendered as a <th> element (<TableCell as="th" />)
amplify-table__foot	Class applied to TableFoot component
amplify-table__head	Class applied to TableHead component
amplify-table__row	Class applied to TableRow component
Global Styling

Each component related to the Table primitive has its own class name which may be used to override styling with custom CSS.

Table Title
A short table description
	A	B	C
1	A1	B1	C1
2	A2	B2	C2
3	A3	B3	C3
Copy
/* styles.css */
.amplify-table__th {
  background-color: var(--amplify-colors-background-tertiary);
}

.amplify-table__th:first-child {
  text-align: right;
}

.amplify-table__row:not(:first-child) .amplify-table__th {
  border-top: none;
}

.amplify-table__row:not(:last-child) .amplify-table__th {
  border-bottom: none;
}

.amplify-table__caption {
  caption-side: top;
  text-align: right;
}

.table-summary {
  color: var(--amplify-colors-font-secondary);
  font-style: italic;
}

Copy
import { Table, TableBody, TableCell, TableRow } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

import './styles.css';

<Table
  className="global-styling-table"
  caption={
    <>
      Table Title
      <br />
      <span class="table-summary">A short table description</span>
    </>
  }
>
  <TableBody>
    <TableRow>
      <TableCell as="th" />
      <TableCell as="th">A</TableCell>
      <TableCell as="th">B</TableCell>
      <TableCell as="th">C</TableCell>
    </TableRow>
    <TableRow>
      <TableCell as="th">1</TableCell>
      <TableCell>A1</TableCell>
      <TableCell>B1</TableCell>
      <TableCell>C1</TableCell>
    </TableRow>
    <TableRow>
      <TableCell as="th">2</TableCell>
      <TableCell>A2</TableCell>
      <TableCell>B2</TableCell>
      <TableCell>C2</TableCell>
    </TableRow>
    <TableRow>
      <TableCell as="th">3</TableCell>
      <TableCell>A3</TableCell>
      <TableCell>B3</TableCell>
      <TableCell>C3</TableCell>
    </TableRow>
  </TableBody>
</Table>;

Local Styling

To override styling on a specific Table components, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Smaller Text	Smaller Text
Copy
/* styles.css */
.my-custom-table .amplify-table__td {
  font-size: var(--amplify-font-sizes-xs);
}

.my-custom-table .amplify-table__row {
  background-color: var(--amplify-colors-neutral-60);
}

Copy
import './styles.css';

<Table className="my-custom-table">
  <TableBody>
    <TableRow>
      <TableCell>Smaller Text</TableCell>
      <TableCell>Smaller Text</TableCell>
    </TableRow>
  </TableBody>
</Table>;


Using data attributes:

Larger Text	Larger Text
Copy
/* styles.css */
/* Override only large size styles */
.amplify-table[data-size='large'] .amplify-table__td {
  font-size: var(--amplify-font-sizes-xxxl);
}

Copy
import './styles.css';

<Table size="large">
  <TableBody>
    <TableRow>
      <TableCell>Larger Text</TableCell>
      <TableCell>Larger Text</TableCell>
    </TableRow>
  </TableBody>
</Table>;


Using style props:

Smaller Text	Smaller Text
Copy
import {
  Table,
  TableBody,
  TableRow,
  TableCell,
  useTheme,
} from '@aws-amplify/ui-react';

export const TableStylePropExample = () => {
  const { tokens } = useTheme();
  return (
    <Table>
      <TableBody>
        <TableRow>
          <TableCell style={{ fontSize: `${tokens.fontSizes.xs}` }}>
            Smaller Text
          </TableCell>
          <TableCell style={{ fontSize: `${tokens.fontSizes.xs}` }}>
            Smaller Text
          </TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
};


/* OR */

Copy
import {
  Table,
  TableBody,
  TableRow,
  TableCell,
  useTheme,
} from '@aws-amplify/ui-react';

export const TableFontSizePropExample = () => {
  const { tokens } = useTheme();
  return (
    <Table>
      <TableBody>
        <TableRow>
          <TableCell fontSize={tokens.fontSizes.xs}>Smaller Text</TableCell>
          <TableCell fontSize={tokens.fontSizes.xs}>Smaller Text</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
};


--------------------------------------------------------------------------------

Title: Badge | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/badge
HTML Content:
Badge

Badge is a color-coded element used to display a status or message about an item.

Theme source
React source
Feedback
Documentation
Props
Demo
Badge
Variation
default
info
error
warning
success
Size
default
small
large
Text
Copy
<Badge>
  Badge
</Badge>
Usage

Import the Badge primitive and styles.

Default badge
Copy
import { Badge } from '@aws-amplify/ui-react';

export const DefaultBadgeExample = () => <Badge>Default badge</Badge>;

Variations

Use the variation prop to change the Badge variation. Available options are info, error, warning, success, and none (default).

InfoErrorWarningSuccessDefault
Copy
import { Badge } from '@aws-amplify/ui-react';

export const BadgeVariationExample = () => (
  <>
    <Badge variation="info">Info</Badge>
    <Badge variation="error">Error</Badge>
    <Badge variation="warning">Warning</Badge>
    <Badge variation="success">Success</Badge>
    <Badge>Default</Badge>
  </>
);

Sizes

Use the size prop to change the Badge size. Available options are small, large, and none (default).

SmallDefaultLarge
Copy
import { Badge } from '@aws-amplify/ui-react';

export const BadgeSizeExample = () => (
  <>
    <Badge size="small">Small</Badge>
    <Badge>Default</Badge>
    <Badge size="large">Large</Badge>
  </>
);

CSS Styling
Theme

You can customize the appearance of all Badge components in your application with a Theme.

Badge Theme Source

Default
Success
Large
Copy
import { Badge, ThemeProvider, Theme, Flex } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'badge-theme',
  tokens: {
    components: {
      badge: {
        // Default styles
        color: { value: '{colors.white}' },
        fontWeight: { value: '{fontWeights.normal}' },
        fontSize: { value: '{fontSizes.medium}' },
        backgroundColor: { value: '{colors.blue.80}' },
        paddingVertical: { value: '{space.small}' },
        paddingHorizontal: { value: '{space.medium}' },
        borderRadius: { value: '{radii.small}' },

        // Variations
        success: {
          color: { value: '{colors.black}' },
          backgroundColor: { value: '{colors.green.60}' },
        },

        // Sizes
        large: {
          fontSize: { value: '{fontSizes.xxl}' },
        },
      },
    },
  },
};

export const BadgeThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex alignItems="flex-end">
      <Badge>Default</Badge>
      <Badge variation="success">Success</Badge>
      <Badge size="large">Large</Badge>
    </Flex>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-badge	Top level element that wraps the Badge component
Global styling

To override styling on all Badges, you can set the Amplify CSS variables or use the built-in .amplify-badge class.

Copy
/* styles.css */
[data-amplify-theme] {
  --amplify-components-badge-background-color: yellow;
}
/* OR */
.amplify-badge {
  background-color: yellow;
}


To replace the Badge styling, unset it:

Copy
.amplify-badge {
  all: unset;
  /* Add your styling here*/
}

Local styling

To override styling on a specific Badge, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

13
Copy
/* styles.css */
.flagged {
  color: white;
  background-color: crimson;
  border-radius: 3px;
}

Copy
import './styles.css';

<Badge className="flagged">13</Badge>;


Using data attributes:

/* styles.css */
/* Override only info variation styles */
.amplify-badge[data-variation='info'] {
  background-color: rebeccapurple;
}

/* Override only large size styles */
.amplify-badge[data-size='large'] {
  border: 1px solid black;
}

import './styles.css';

<Badge variation="info">Purple background</Badge>
<Badge size="large">Black border</Badge>


Using style props:

Badge
Copy
import { Badge, useTheme } from '@aws-amplify/ui-react';

export const BadgeStyleProps = () => {
  const { tokens } = useTheme();
  return (
    <Badge
      backgroundColor={tokens.colors.secondary[20]}
      color={tokens.colors.secondary[90]}
    >
      Badge
    </Badge>
  );
};


--------------------------------------------------------------------------------

Title: Pagination | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/pagination
HTML Content:
Pagination

Pagination allows users to navigate large sets of data.

Theme source
React source
Feedback
Documentation
Props
Demo
Page:
1
2
3
4
5
…
10
Current Page
Total Pages
Sibling Count
Has More Pages
Copy
<Pagination
  currentPage={1}
  totalPages={10}
  siblingCount={1}
/>
Usage

Import the Pagination component. To use Pagination as an uncontrolled component, import the usePagination hook and pass it an object including the following properties:

totalPages (required)
currentPage (optional, defaults to 1)
siblingCount (optional, defaults to 1)
hasMorePages (optional)
Page:
1
2
3
4
5
…
8
Copy
import { Pagination, usePagination } from '@aws-amplify/ui-react';

export const DefaultPaginationExample = () => {
  const paginationProps = usePagination({ totalPages: 8 });

  return <Pagination {...paginationProps} />;
};

Controlled component

To use Pagination as a controlled component, you'll need to handle state using these callback functions:

onNext: triggered when the next-page button > is pressed
onPrevious: triggered when the previous-page button < is pressed
onChange: triggered every time the page changes (e.g., when a page button is pressed directly)
Page:
1
2
3
4
5
Copy
import * as React from 'react';
import { Pagination } from '@aws-amplify/ui-react';

export const ControlledPaginationExample = () => {
  const [currentPageIndex, setCurrentPageIndex] = React.useState(1);
  const totalPages = 5;

  const handleNextPage = () => {
    console.log('handleNextPage');
    setCurrentPageIndex(currentPageIndex + 1);
  };

  const handlePreviousPage = () => {
    console.log('handlePreviousPage');
    setCurrentPageIndex(currentPageIndex - 1);
  };

  const handleOnChange = (newPageIndex, prevPageIndex) => {
    console.log(
      `handleOnChange \n - newPageIndex: ${newPageIndex} \n - prevPageIndex: ${prevPageIndex}`
    );
    setCurrentPageIndex(newPageIndex);
  };

  return (
    <Pagination
      currentPage={currentPageIndex}
      totalPages={totalPages}
      onNext={handleNextPage}
      onPrevious={handlePreviousPage}
      onChange={handleOnChange}
    />
  );
};

Paginating at an API level

It's common to use a paged API where the total number of pages in the dataset is unknown until you've reached the final page. To use the Pagination component in this scenario, set the totalPages prop to the total pages of content loaded from the API so far, and set hasMorePages initially to true (which enables the next button to be clicked to trigger another API call). Update the totalPages as you fetch more data. Once you reach the end of the data, set the hasMorePages to false (and thus the Pagination component's next button will be disabled). See below for a contrived example:

Page:
1
Copy
import * as React from 'react';
import { Pagination } from '@aws-amplify/ui-react';

export const PaginationHasMorePagesExample = () => {
  const [pageTokens, setPageTokens] = React.useState(['page2']);
  const [currentPageIndex, setCurrentPageIndex] = React.useState(1);
  const [hasMorePages, setHasMorePages] = React.useState(true);

  const handleNextPage = async () => {
    if (hasMorePages && currentPageIndex === pageTokens.length) {
      const { nextToken } = await myAPI.fetch();

      if (!nextToken) {
        setHasMorePages(false);
      }

      setPageTokens([...pageTokens, nextToken]);
    }

    setCurrentPageIndex(currentPageIndex + 1);
  };

  return (
    <Pagination
      currentPage={currentPageIndex}
      totalPages={pageTokens.length}
      hasMorePages={hasMorePages}
      onNext={handleNextPage}
      onPrevious={() => setCurrentPageIndex(currentPageIndex - 1)}
      onChange={(pageIndex) => setCurrentPageIndex(pageIndex)}
    />
  );
};

const mockedAPI = () => {
  const response = [
    {
      res: 'cat',
      nextToken: 'page3',
    },
    {
      res: 'parrot',
      nextToken: null,
    },
  ];

  let timesCalled = 0;

  return {
    fetch() {
      if (timesCalled < 2) {
        return response[timesCalled++];
      }
    },
  };
};

const myAPI = mockedAPI();

Sibling Count

siblingCount is an optional prop which controls the number of pages displayed on each side of the current page (defaults to 1). For example, in the demo below, notice how page 5 has two siblings to the left (3 and 4) and two siblings to the right (6 and 7).

1
…
3
4
Page:
5
6
7
…
11
Copy
import { Pagination, usePagination } from '@aws-amplify/ui-react';

export const PaginationSiblingCountExample = () => {
  const paginationProps = usePagination({
    totalPages: 11,
    currentPage: 5,

    siblingCount: 2,

  });

  return <Pagination {...paginationProps} />;
};

Accessibility

Accessible labels are provided for the Pagination buttons either via the aria-label attribute or by using the VisuallyHidden primitive.

Use the following props to customize these labels:

previousLabel: Set the aria-label for the previous page button (defaults to Go to previous page)

nextLabel: Set the aria-label for the next page button (defaults to Go to next page)

currentPageLabel: Set the VisuallyHidden label for current page (defaults to Page). This will be used to construct the label text for current page. e.g, Page: 1 if page 1 is the current page.

pageLabel: Set the label for each page button other than the current page (defaults to Go to page). This will be used to construct the aria-label. e.g, Go to page 1 for page 1 button.

By default, the root node of the Pagination component is a <nav> element. Elements with the navigation role, like <nav>, require unique labels if there are multiple on the same page. Passing an aria-label to the Pagination component is one way to accomodate this.

You are on page:
1
2
3
4
5
Copy
import { usePagination, Pagination } from '@aws-amplify/ui-react';

export const PaginationAccessibilityExample = () => {
  const paginationProps = usePagination({ totalPages: 5 });
  return (
    <Pagination
      aria-label="Example pagination"
      pageLabel="Jump to page"
      currentPageLabel="You are on page"
      previousLabel="Back to previous page"
      nextLabel="Forward to next page"
      {...paginationProps}
    />
  );
};

Styling
Theme

You can customize the appearance of all Pagination components in your application with a Theme.

Pagination Theme Source

Page:
1
2
3
4
5
6
Copy
import {
  Pagination,
  usePagination,
  ThemeProvider,
  Theme,
} from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'pagination-theme',
  tokens: {
    components: {
      pagination: {
        current: {
          backgroundColor: { value: '{colors.secondary.80}' },
        },
        button: {
          hover: {
            backgroundColor: { value: '{colors.neutral.40}' },
            color: { value: '{colors.secondary.80}' },
          },
        },
      },
    },
  },
};

export const PaginationThemeExample = () => {
  const paginationProps = usePagination({ totalPages: 6 });

  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Pagination {...paginationProps} />
    </ThemeProvider>
  );
};

Icons
Page:
1
2
3
4
5
6
Copy
import {
  Pagination,
  usePagination,
  IconsProvider,
} from '@aws-amplify/ui-react';
import { FiArrowLeft, FiArrowRight } from 'react-icons/fi';

export const PaginationIconExample = () => {
  const paginationProps = usePagination({ totalPages: 6 });

  return (
    <IconsProvider
      icons={{
        pagination: {
          next: <FiArrowRight />,
          previous: <FiArrowLeft />,
        },
      }}
    >
      <Pagination {...paginationProps} />
    </IconsProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-pagination	Top level element that wraps the Pagination primitive
amplify-pagination__item	Class applied to the pagination items
Global styling

To override styling on all Pagination components, you can set the Amplify CSS variables or use the built-in .amplify-pagination class.

Page:
1
2
3
4
5
…
8
Copy
/* styles.css */
.amplify-pagination {
  --amplify-components-pagination-current-background-color: var(
    --amplify-colors-red-60
  );
}

Copy
import { Pagination, usePagination } from '@aws-amplify/ui-react';
import './styles.css';

const PaginationGlobalStylingExample = () => {
  const paginationProps = usePagination({ totalPages: 8 });
  return <Pagination {...paginationProps} />;
};

Local styling

To override styling on a specific Pagination component, you can use a class selector or style props.

Using a class selector:

Page:
1
2
3
4
5
…
7
Copy
/* styles.css */
.my-custom-pagination {
  --amplify-components-pagination-current-background-color: var(
    --amplify-colors-green-80
  );
  --amplify-components-pagination-button-hover-background-color: var(
    --amplify-colors-blue-20
  );
}

Copy
import { Pagination, usePagination } from '@aws-amplify/ui-react';
import './styles.css';

const PaginationClassStylingExample= () => {
  const paginationProps = usePagination({ totalPages: 7 });
  return <Pagination {...paginationProps} className="my-custom-pagination" />;
};


Using style props:

Page:
1
2
3
4
5
Copy
import { Pagination, usePagination } from '@aws-amplify/ui-react';

const PaginationStylePropsExample = () => {
  const paginationProps = usePagination({ totalPages: 5 });
  return <Pagination {...paginationProps} backgroundColor="lavender" padding="1rem" />;
};


--------------------------------------------------------------------------------

Title: Grid | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/grid
HTML Content:
Grid

Grid provides a layout container using CSS Grid.

React source
Feedback
Documentation
Props

Grid provides a CSS Grid container with style display: grid. Any Amplify UI components can be used as grid item children. To learn how to use CSS Grid properties, see the following documentation:

Grid layout - MDN
A Complete Guide to Grid - CSS Tricks
Demo

This demo shows how to create a basic layout using the Grid primitive.

Header
Nav
Main
Footer
Grid container props
Grid item (Header) props
Grid item (Nav) props
Grid item (Main) props
Grid item (Footer) props
Copy
<Grid
  columnGap="0.5rem"
  rowGap="0.5rem"
  templateColumns="1fr 1fr 1fr"
  templateRows="1fr 3fr 1fr"
>
  <Card
    columnStart="1"
    columnEnd="-1"
  >
    Header
  </Card>
  <Card
    columnStart="1"
    columnEnd="2"
  >
    Nav
  </Card>
  <Card
    columnStart="2"
    columnEnd="-1"
  >
    Main
  </Card>
  <Card
    columnStart="2"
    columnEnd="-1"
  >
    Footer
  </Card>
</Grid>
Usage

Import the Grid primitive. Use any primitive as grid item child components.

Copy
import { Grid, View, useTheme } from '@aws-amplify/ui-react';

export const DefaultGridExample = () => {
  const { tokens } = useTheme();
  return (
    <Grid
      templateColumns="1fr 1fr"
      templateRows="10rem 10rem"
      gap={tokens.space.small}
    >
      <View backgroundColor={tokens.colors.blue[10]}></View>
      <View backgroundColor={tokens.colors.blue[20]}></View>
      <View backgroundColor={tokens.colors.blue[40]}></View>
      <View backgroundColor={tokens.colors.blue[60]}></View>
    </Grid>
  );
};

Mapping Grid CSS properties to Grid props

We've shortened some of the names of the CSS properties for a cleaner prop API. See the following list prop names (CSS => Grid props):

Grid container:
grid-auto-columns => autoColumns
grid-auto-flow => autoFlow
grid-template-areas => templateAreas
grid-template-columns => templateColumns
grid-template-rows => templateRows
column-gap => columnGap
row-gap => rowGrap
gap => gap
align-items => alignItems
align-content => alignContent
justify-content => justifyContent
Grid items *:
grid-area => area
grid-column => column
grid-column-start => columnStart
grid-column-end => columnEnd
grid-row => row
grid-row-start => rowStart
grid-row-end => rowEnd

*Note: rowSpan and columnSpan grid item props are transformed to row and column span rules.

Row and column span

Use the rowSpan or columnSpan props to stretch a grid item across multiple rows or columns. Available values are any integer value or auto. While rowSpan and columnSpan do not map to CSS properties, they are transformed to row and column style rules.

Copy
import { Grid, View, useTheme } from '@aws-amplify/ui-react';

export const GridRowAndColumnSpanExample = () => {
  const { tokens } = useTheme();
  return (
    <Grid
      templateColumns="1fr 1fr"
      templateRows="10rem 10rem 10rem"
      gap={tokens.space.small}
    >
      <View columnSpan={2} backgroundColor={tokens.colors.orange[10]}></View>
      <View rowSpan={2} backgroundColor={tokens.colors.orange[20]}></View>
      <View backgroundColor={tokens.colors.orange[40]}></View>
      <View backgroundColor={tokens.colors.orange[60]}></View>
    </Grid>
  );
};

Responsive layouts

Use array or object syntax to dynamically change layout based on screen size. Resize browser to see example below.

See responsive design for more details.

Copy
import { Grid, View, useTheme } from '@aws-amplify/ui-react';

export const GridResponsiveExample = () => {
  const { tokens } = useTheme();
  return (
    <Grid
      templateColumns={{ base: '1fr', large: '1fr 1fr' }}
      templateRows={{ base: 'repeat(4, 10rem)', large: 'repeat(3, 10rem)' }}
      gap={tokens.space.small}
    >
      <View
        columnSpan={[1, 1, 1, 2]}
        backgroundColor={tokens.colors.pink[10]}
      ></View>
      <View
        rowSpan={{ base: 1, large: 2 }}
        backgroundColor={tokens.colors.pink[20]}
      ></View>
      <View backgroundColor={tokens.colors.pink[40]}></View>
      <View backgroundColor={tokens.colors.pink[60]}></View>
    </Grid>
  );
};

CSS Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-grid	Top level element that wraps the Grid primitive

--------------------------------------------------------------------------------

Title: Collection | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/collection
HTML Content:
Collection

Collection provides a way to display items from a data source.

Theme source
React source
Feedback
Documentation
Props
Demo
Waterfront
Verified
Milford - Room #1
Book it
Mountain
Verified
Milford - Room #2
Book it
direction
row
column
gap
wrap
nowrap
wrap
wrap-reverse
Copy


const items = [
  {
    title: 'Milford - Room #1',
    badges: ['Waterfront', 'Verified'],
  },
  {
    title: 'Milford - Room #2',
    badges: ['Mountain', 'Verified'],
  },
];


<Collection
  items={items}
  type="list"
  direction="row"
  gap="20px"
  wrap="nowrap"
>
  {(item, index) => (
    <Card
      key={index}
      borderRadius="medium"
      maxWidth="20rem"
      variation="outlined"
    >
      <Image
        src="/road-to-milford-new-zealand-800w.jpg"
        alt="Glittering stream with old log, snowy mountain peaks tower over a green field."
      />
      <View padding="xs">
        <Flex>
          {item.badges.map((badge) => (
            <Badge
              key={badge}
              backgroundColor={
                badge === 'Waterfront' ? 'blue.40' 
                : badge === 'Mountain' ? 'green.40' : 'yellow.40'}
            >
              {badge}
            </Badge>
          ))}
        </Flex>
        <Divider padding="xs" />
        <Heading padding="medium">{item.title}</Heading>
        <Button variation="primary" isFullWidth>
          Book it
        </Button>
      </View>
    </Card>
  )}
</Collection>
Usage

Import the Collection component and provide your own repeating component as a function. Here's an example using the list collection type.

Fiordland National Park

This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.

Bay of Islands, North Island

Three hours north of Auckland, this area features over 144 islands to explore.

Queenstown, South Island

This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.

Copy
import { Collection, Card, Heading, Text } from '@aws-amplify/ui-react';

export const DefaultCollectionExample = () => {
  return (
    <Collection
      type="list"
      items={[
        {
          title: 'Fiordland National Park',
          description:
            'This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.',
        },
        {
          title: 'Bay of Islands, North Island',
          description:
            'Three hours north of Auckland, this area features over 144 islands to explore.',
        },
        {
          title: 'Queenstown, South Island',
          description:
            "This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.",
        },
      ]}
      gap="1.5rem"
    >
      {(item, index) => (
        <Card key={index} padding="1rem">
          <Heading level={4}>{item.title}</Heading>
          <Text>{item.description}</Text>
        </Card>
      )}
    </Collection>
  );
};

Collection types

Collection type options include list and grid.

List

The list collection type can be customized with any of following Flex props: alignItems, alignContent, direction, gap, justifyContent, wrap.

Fiordland National Park

This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.

Bay of Islands, North Island

Three hours north of Auckland, this area features over 144 islands to explore.

Queenstown, South Island

This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.

Copy
import {
  Collection,
  Card,
  Heading,
  Text,
  useTheme,
} from '@aws-amplify/ui-react';

export const ListCollectionExample = () => {
  const { tokens } = useTheme();
  const items = [
    {
      title: 'Fiordland National Park',
      description:
        'This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.',
    },
    {
      title: 'Bay of Islands, North Island',
      description:
        'Three hours north of Auckland, this area features over 144 islands to explore.',
    },
    {
      title: 'Queenstown, South Island',
      description:
        "This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.",
    },
  ];

  return (
    <Collection
      type="list"
      items={items}
      direction="row"
      justifyContent="space-between"
      wrap="wrap"
    >
      {(item, index) => (
        <Card
          key={index}
          padding={tokens.space.medium}
          maxWidth="180px"
          fontSize={tokens.fontSizes.xs}
        >
          <Heading level={4}>{item.title}</Heading>
          <Text>{item.description}</Text>
        </Card>
      )}
    </Collection>
  );
};

Grid

The grid collection type can be customized with the following Grid props: templateColumns and templateRows. Then the Collection children can use the Grid props to control their size and placement such as row and column.

Fiordland National Park

This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.

Bay of Islands

Three hours north of Auckland, this area features over 144 islands to explore.

Queenstown, South Island

This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.

Copy
import {
  Collection,
  Card,
  Heading,
  Text,
  useTheme,
} from '@aws-amplify/ui-react';

export const GridCollectionExample = () => {
  const { tokens } = useTheme();
  const items = [
    {
      title: 'Fiordland National Park',
      description:
        'This national park includes the famous fjords of Milford, Dusky and Doubtful Sounds.',
    },
    {
      title: 'Bay of Islands',
      description:
        'Three hours north of Auckland, this area features over 144 islands to explore.',
    },
    {
      title: 'Queenstown, South Island',
      description:
        "This hopping town is New Zealand's adventure capital and is located right on Lake Wakatipu.",
    },
  ];

  return (
    <Collection
      type="grid"
      items={items}
      templateColumns="1fr 1fr 1fr"
      templateRows="12rem 12rem 12rem"
    >
      {(item, index) => {
        return (
          <Card
            key={index}
            padding={tokens.space.medium}
            maxWidth="180px"
            fontSize={tokens.fontSizes.xs}
            backgroundColor={tokens.colors.background.secondary}
            row={index + 1}
            column={index + 1}
          >
            <Heading level={4}>{item.title}</Heading>
            <Text>{item.description}</Text>
          </Card>
        );
      }}
    </Collection>
  );
};

Pagination

A Collection can be paginated by adding a special isPaginated property. Change the page size by passing a itemsPerPage property (default: 10).

🇦🇩 Andorra
🇦🇪 United Arab Emirates
🇦🇫 Afghanistan
🇦🇬 Antigua and Barbuda
🇦🇮 Anguilla
🇦🇱 Albania
🇦🇲 Armenia
🇦🇴 Angola
🇦🇶 Antarctica
🇦🇷 Argentina
🇦🇸 American Samoa
🇦🇹 Austria
Page:
1
2
3
4
5
…
21
Copy
import { Collection, Button } from '@aws-amplify/ui-react';
import { countries } from 'countries-list';

export const PaginationCollectionExample = () => {
  return (
    <Collection
      type="list"
      direction="row"
      wrap="wrap"
      items={Object.values(countries).map(({ name, emoji }) => ({
        name,
        emoji,
      }))}
      isPaginated
      itemsPerPage={12}
    >
      {(regions, index) => (
        <Button grow="1" key={index}>
          {regions.emoji} {regions.name}
        </Button>
      )}
    </Collection>
  );
};

Search

Collections can also be filtered, adding a isSearchable property. Pass a custom searchFilter function to enhance your search experience (default search filter looks for any string-like property inside of items)

Search
🇦🇩 Andorra
🇦🇪 United Arab Emirates
🇦🇫 Afghanistan
🇦🇬 Antigua and Barbuda
🇦🇮 Anguilla
🇦🇱 Albania
🇦🇲 Armenia
🇦🇴 Angola
🇦🇶 Antarctica
Page:
1
2
3
4
5
…
28
Copy
import { Collection, Button } from '@aws-amplify/ui-react';
import { countries } from 'countries-list';

export const SearchCollectionExample = () => {
  return (
    <Collection
      type="grid"
      templateColumns="1fr 1fr 1fr"
      gap="15px"
      items={Object.values(countries).map(({ name, emoji }) => ({
        name,
        emoji,
      }))}
      isSearchable
      isPaginated
      itemsPerPage={9}
      searchPlaceholder="Type to search..."
      searchFilter={(regions, keyword) =>
        (regions as any).name.toLowerCase().startsWith(keyword.toLowerCase())
      }
    >
      {(regions, index) => (
        <Button grow="1" key={index}>
          {regions.emoji} {regions.name}
        </Button>
      )}
    </Collection>
  );
};

No Results Found

To handle the case when no results are found from the search, you can pass a custom ReactNode (includes string) to the searchNoResultsFound prop. By default, Collection renders the text "No results found".

Search
🇦🇩 Andorra
🇦🇪 United Arab Emirates
🇦🇫 Afghanistan
🇦🇬 Antigua and Barbuda
🇦🇮 Anguilla
🇦🇱 Albania
🇦🇲 Armenia
🇦🇴 Angola
🇦🇶 Antarctica
Page:
1
2
3
4
5
…
28
Copy
import { Collection, Button, Text, Flex } from '@aws-amplify/ui-react';
import { countries } from 'countries-list';

export const SearchNoResultsFoundCollectionExample = () => {
  return (
    <Collection
      type="grid"
      templateColumns="1fr 1fr 1fr"
      gap="15px"
      items={Object.values(countries).map(({ name, emoji }) => ({
        name,
        emoji,
      }))}
      isSearchable
      isPaginated
      itemsPerPage={9}
      searchNoResultsFound={
        <Flex justifyContent="center">
          <Text color="purple.80" fontSize="1rem">
            Nothing found, please try again
          </Text>
        </Flex>
      }
      searchPlaceholder="Type to search..."
      searchFilter={(regions, keyword) =>
        (regions as any).name.toLowerCase().startsWith(keyword.toLowerCase())
      }
    >
      {(regions, index) => (
        <Button grow="1" key={index}>
          {regions.emoji} {regions.name}
        </Button>
      )}
    </Collection>
  );
};

Customization
Theme

You can customize the appearance of all Collection components in your application with a Theme.

Collection Theme Source

Search
🇦🇩 Andorra
🇦🇪 United Arab Emirates
🇦🇫 Afghanistan
🇦🇬 Antigua and Barbuda
🇦🇮 Anguilla
🇦🇱 Albania
🇦🇲 Armenia
🇦🇴 Angola
🇦🇶 Antarctica
Page:
1
2
3
4
5
…
28
Copy
import {
  Button,
  Collection,
  ThemeProvider,
  Theme,
} from '@aws-amplify/ui-react';
import { countries } from 'countries-list';

const theme: Theme = {
  name: 'collection-theme',
  tokens: {
    components: {
      collection: {
        pagination: {
          current: {
            color: { value: 'white' },
            backgroundColor: {
              value: '{colors.blue.80}',
            },
          },
          button: {
            color: { value: '{colors.blue.60}' },
            _hover: {
              backgroundColor: {
                value: '{colors.blue.10}',
              },
              color: { value: '{colors.blue.60}' },
            },
          },
        },
        search: {
          input: {
            color: { value: '{colors.blue.60}' },
          },
          button: {
            color: { value: '{colors.blue.60}' },
            _focus: {
              backgroundColor: {
                value: '{colors.blue.60}',
              },
              color: {
                value: 'white',
              },
            },
            _hover: {
              backgroundColor: {
                value: '{colors.blue.80}',
              },
              color: {
                value: 'white',
              },
            },
          },
        },
      },
    },
  },
};

export const CollectionThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Collection
        type="grid"
        templateColumns="1fr 1fr 1fr"
        gap="15px"
        items={Object.values(countries).map(({ name, emoji }) => ({
          name,
          emoji,
        }))}
        isSearchable
        isPaginated
        itemsPerPage={9}
        searchPlaceholder="Type to search..."
        searchFilter={(regions, keyword) =>
          (regions as any).name.toLowerCase().startsWith(keyword.toLowerCase())
        }
      >
        {(regions, index) => (
          <Button grow="1" key={index}>
            {regions.emoji} {regions.name}
          </Button>
        )}
      </Collection>
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-collection	Top level element that wraps the Collection primitive
amplify-collection-items	Class applied to the element that wraps all the items in a collection
amplify-collection-search	Class applied to the element that wraps the collection search box
amplify-collection-pagination	Class applied to the element that wraps the pagination component in a collection
Global Styling

To override the styling on all Collections you can use the built in .amplify-collection class.

Search
🇦🇩 Andorra
🇦🇪 United Arab Emirates
🇦🇫 Afghanistan
🇦🇬 Antigua and Barbuda
🇦🇮 Anguilla
🇦🇱 Albania
🇦🇲 Armenia
🇦🇴 Angola
🇦🇶 Antarctica
Page:
1
2
3
4
5
…
28
Copy
.amplify-collection {
  --amplify-components-collection-pagination-current-color: var(
    --amplify-colors-secondary-20
  );
  --amplify-components-collection-pagination-current-background-color: var(
    --amplify-colors-teal-80
  );
}

Local Styling

To override styling on a specific Collection, you can use a class selector or style props.

Using a class selector:

🇦🇩
🇦🇪
🇦🇫
🇦🇬
🇦🇮
🇦🇱
🇦🇲
🇦🇴
🇦🇶
🇦🇷
🇦🇸
🇦🇹
🇦🇺
🇦🇼
🇦🇽
🇦🇿
🇧🇦
🇧🇧
🇧🇩
🇧🇪
Copy
import { Collection, Button } from '@aws-amplify/ui-react';
import { countries } from 'countries-list';

export const LocalCollectionClassExample = () => {
  const items = Object.values(countries)
    .map(({ name, emoji }) => ({
      name,
      emoji,
    }))
    .splice(0, 20);
  return (
    <Collection
      type="list"
      className="collection-local-styling-example"
      direction="row"
      items={items}
    >
      {(regions, index) => (
        <Button grow="1" key={index}>
          {regions.emoji}
        </Button>
      )}
    </Collection>
  );
};

Copy
.collection-local-styling-example {
  flex-wrap: wrap;
  gap: 20px;
  padding: 5px;
}

.collection-local-styling-example .amplify-collection-items {
  flex-wrap: wrap;
  gap: 20px;
}

.collection-local-styling-example .amplify-button {
  background-color: var(--amplify-colors-neutral-60);
}


Using style props:

🇦🇩
🇦🇪
🇦🇫
🇦🇬
🇦🇮
🇦🇱
🇦🇲
🇦🇴
🇦🇶
🇦🇷
🇦🇸
🇦🇹
🇦🇺
🇦🇼
🇦🇽
🇦🇿
🇧🇦
🇧🇧
🇧🇩
🇧🇪
Copy
import { Collection, Button, useTheme } from '@aws-amplify/ui-react';
import { countries } from 'countries-list';

export const CollectionStylePropExample = () => {
  const { tokens } = useTheme();
  const items = Object.values(countries)
    .map(({ name, emoji }) => ({
      name,
      emoji,
    }))
    .splice(0, 20);
  return (
    <Collection
      type="list"
      border={`${tokens.borderWidths.medium} solid ${tokens.colors.red[60]}`}
      direction="row"
      wrap="wrap"
      padding="5px"
      gap="20px"
      items={items}
    >
      {(regions, index) => (
        <Button grow="1" key={index}>
          {regions.emoji}
        </Button>
      )}
    </Collection>
  );
};


--------------------------------------------------------------------------------

Title: Flex | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/flex
HTML Content:
Flex

Flex provides a layout container using CSS Flexbox.

React source
Feedback
Documentation
Props

The Flex primitive provides a Flexbox container with style display: flex. To learn how to use Flexbox CSS properties, see the following documentation:

Flex layout - MDN
A Complete Guide to Flex - CSS Tricks
Demo
direction
row
column
column-reverse
row-reverse
justifyContent
flex-start
flex-end
center
space-between
space-around
space-evenly
alignItems
stretch
flex-start
flex-end
center
baseline
alignContent
flex-start
flex-end
center
space-between
space-around
stretch
wrap
nowrap
wrap
wrap-reverse
gap
Copy
<Flex
  direction="row"
  justifyContent="flex-start"
  alignItems="stretch"
  alignContent="flex-start"
  wrap="nowrap"
  gap="1rem"
>
  <View
    height="2rem"
    width="5rem"
    backgroundColor={tokens.colors.blue[20]}
  ></View>
  <View
    height="2.5rem"
    width="6.25rem"
    backgroundColor={tokens.colors.blue[40]}
  ></View>
  <View
    height="3rem"
    width="7.5rem"
    backgroundColor={tokens.colors.blue[60]}
  ></View>
  <View
    height="3.5rem"
    width="8.75rem"
    backgroundColor={tokens.colors.blue[80]}
  ></View>
</Flex>
Usage

Import the Flex primitive.

Button 1
Button 2
Button 3
Copy
import { Flex, Button, useTheme } from '@aws-amplify/ui-react';

export const DefaultFlexExample = () => {
  const { tokens } = useTheme();

  return (
    <Flex>
      <Button backgroundColor={tokens.colors.pink[10]}>Button 1</Button>
      <Button backgroundColor={tokens.colors.pink[20]}>Button 2</Button>
      <Button backgroundColor={tokens.colors.pink[40]}>Button 3</Button>
    </Flex>
  );
};

Mapping Flexbox CSS properties to Flex props
Flexbox CSS property => Flex prop:
flex-direction => direction
justify-content => justifyContent
align-items => alignItems
align-content => alignContent
flex-wrap => wrap
gap => gap
Default prop values:
direction="row"
justifyContent="normal"
alignItems="stretch"
alignContent="normal"
wrap="nowrap"
gap="1rem"
CSS Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-flex	Top level element that wraps the Flex primitive

--------------------------------------------------------------------------------

Title: Card | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/card
HTML Content:
Card

Card groups related pieces of content.

Theme source
React source
Feedback
Documentation
Props
Demo
I'm a card!
Variation
default
outlined
elevated
Copy
<Card>
  I'm a card!
</Card>
Usage

The Card component will include basic styling but the form of the Card component will come from the content passed into it.

Plus
Verified
New Zealand White Water Outdoor Adventure
Join us on this beautiful outdoor adventure through the glittering rivers through the snowy peaks on New Zealand.
Book it
Copy
import {
  Card,
  Image,
  View,
  Heading,
  Flex,
  Badge,
  Text,
  Button,
  useTheme,
} from '@aws-amplify/ui-react';

export const DefaultCardExample = () => {
  const { tokens } = useTheme();
  return (
    <View
      backgroundColor={tokens.colors.background.secondary}
      padding={tokens.space.medium}
    >
      <Card>
        <Flex direction="row" alignItems="flex-start">
          <Image
            alt="Road to milford sound"
            src="/road-to-milford-new-zealand-800w.jpg"
            width="33%"
          />
          <Flex
            direction="column"
            alignItems="flex-start"
            gap={tokens.space.xs}
          >
            <Flex>
              <Badge size="small" variation="info">
                Plus
              </Badge>
              <Badge size="small" variation="success">
                Verified
              </Badge>
            </Flex>

            <Heading level={5}>
              New Zealand White Water Outdoor Adventure
            </Heading>

            <Text as="span">
              Join us on this beautiful outdoor adventure through the glittering
              rivers through the snowy peaks on New Zealand.
            </Text>
            <Button variation="primary">Book it</Button>
          </Flex>
        </Flex>
      </Card>
    </View>
  );
};

Variations
Default card
Outlined card
Elevated card
Copy
import { Card } from '@aws-amplify/ui-react';

export const CardVariationsExample = () => {
  return (
    <>
      <Card>Default card</Card>
      <Card variation="outlined">Outlined card</Card>
      <Card variation="elevated">Elevated card</Card>
    </>
  );
};

Set rendered HTML element

The Card component renders as a div by default. You can change the HTML element rendered by Card with the as property.

I'm a section!
Copy
import { Card } from '@aws-amplify/ui-react';

export const CardAsExample = () => {
  return <Card as="section">{`I'm a section!`}</Card>;
};

Customization
Theme

You can customize the appearance of all Card components in your application with a Theme.

Card Theme Source

Default

Outlined

Elevated

Copy
import { Card, Text, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'card-theme',
  tokens: {
    components: {
      card: {
        // You can reference other tokens
        backgroundColor: { value: '{colors.background.success}' },
        borderRadius: { value: '{radii.large}' },
        padding: { value: '{space.xl}' },

        // Variations
        outlined: {
          // Or use explicit values
          borderWidth: { value: '10px' },
          backgroundColor: { value: '{colors.background.warning}' },
        },
        elevated: {
          backgroundColor: { value: '{colors.background.info}' },
          boxShadow: { value: '{shadows.large}' },
        },
      },
    },
  },
};

export const CardThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Flex>
        <Card>
          <Text>Default</Text>
        </Card>
        <Card variation="outlined">
          <Text>Outlined</Text>
        </Card>
        <Card variation="elevated">
          <Text>Elevated</Text>
        </Card>
      </Flex>
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-card	Top level element that wraps the Card primitive
CSS

To override styling on all Cards, you can set the Amplify CSS variables or use the built-in .amplify-card class.

Thick Bordered Card
Copy
/* styles.css */
:root {
  --amplify-components-card-border-color: red;
  --amplify-components-card-border-width: 3px;
}
/* OR */
.amplify-card {
  border: 3px solid red;
}


To replace all the Card styling, unset it:

.amplify-card {
  all: unset;
  /* Add your styling here*/
}

Local styling

To override styling on a specific Card, you can use a class selector or style props.

Using a class selector:

Custom card!

Copy
import { Card, Text } from '@aws-amplify/ui-react';

const css = `.custom-card-class {
  border: 3px solid red;
}`;

export const CardClassNameExample = () => {
  return (
    <>
      <style>{css}</style>
      <Card className="custom-card-class">
        <Text>Custom card!</Text>
      </Card>
    </>
  );
};


Using style props:

Special card!

Copy
import { Card, Text, useTheme } from '@aws-amplify/ui-react';

export const CardStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <Card backgroundColor={tokens.colors.primary[20]}>
      <Text>Special card!</Text>
    </Card>
  );
};

Default theme
import { DesignTokenProperties, OutputVariantKey } from '../types/designToken';

type CardVariationStyleKey =
  | 'backgroundColor'
  | 'borderRadius'
  | 'borderWidth'
  | 'borderStyle'
  | 'borderColor'
  | 'boxShadow';

type CardVariationTokens<OutputType> = DesignTokenProperties<
  CardVariationStyleKey,
  OutputType
>;

export type CardTokens<OutputType extends OutputVariantKey> =
  CardVariationTokens<OutputType> &
    DesignTokenProperties<'padding', OutputType> & {
      elevated?: CardVariationTokens<OutputType>;
      outlined?: CardVariationTokens<OutputType>;
    };

export const card: Required<CardTokens<'default'>> = {
  backgroundColor: { value: '{colors.background.primary.value}' },
  borderRadius: { value: '{radii.xs.value}' },
  borderWidth: { value: '0' },
  borderStyle: { value: 'solid' },
  borderColor: { value: 'transparent' },
  boxShadow: { value: 'none' },
  padding: { value: '{space.medium.value}' },

  outlined: {
    backgroundColor: { value: '{components.card.backgroundColor.value}' },
    borderRadius: { value: '{radii.xs.value}' },
    borderWidth: { value: '{borderWidths.small.value}' },
    borderStyle: { value: 'solid' },
    borderColor: { value: '{colors.border.primary.value}' },
    boxShadow: { value: '{components.card.boxShadow.value}' },
  },

  elevated: {
    backgroundColor: { value: '{components.card.backgroundColor.value}' },
    borderRadius: { value: '{radii.xs.value}' },
    borderWidth: { value: '0' },
    borderStyle: { value: 'solid' },
    borderColor: { value: 'transparent' },
    boxShadow: { value: '{shadows.medium.value}' },
  },
};


--------------------------------------------------------------------------------

Title: Accordion | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/accordion
HTML Content:
Accordion

The Accordion allows users to expand or collapse a set of sections.

Theme source
React source
Feedback
Documentation
Props

In Amplify UI v5 this was called Expander. We rebuilt it in v6 to use the browser native details and summary elements

Demo
Is it accessible?
Can I customize the styling?
Is it a great way to organize content?
allowMultiple
preventCollapse
Copy
<Accordion
  items={[
    {
      trigger: 'Is it accessible?',
      value: 'accessible',
      content: 'Yes! It uses HTML native elements: <details> and <summary>.'
    },
    {
      trigger: 'Can I customize the styling?',
      value: 'styling',
      content: 'Of course! See the section on CSS Styling below.'
    },
    {
      trigger: 'Is it a great way to organize content?',
      value: 'content',
      content: 'Most definitely!'
    }
  ]}
/>
Usage

Import the Accordion and Accordion.Item components and styles.

What is an Accordion?
This is the item title
Copy
import * as React from 'react';

import { Accordion } from '@aws-amplify/ui-react';

export const DefaultAccordionExample = () => {
  return (
    <Accordion.Container>
      <Accordion.Item value="Accordion-item">
        <Accordion.Trigger>
          What is an Accordion?
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          An Accordion contains all the parts of a collapsible section.
        </Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="unique-value">
        <Accordion.Trigger>
          This is the item title
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          The `children` of the Accordion are displayed here.
        </Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};

Single or multiple

The accordion by default only allows 1 item to be displayed at a time. To allow multiple items to be opened at a time, add the allowMultiple prop.

Click me first!
Then click me!
Copy
import * as React from 'react';

import { Accordion } from '@aws-amplify/ui-react';

export const BasicMultipleAccordion = () => {
  return (
    <Accordion.Container allowMultiple>
      <Accordion.Item value="item-1">
        <Accordion.Trigger>
          Click me first!
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Now when you click the second item, this item will stay open until you
          close it.
        </Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="item-2">
        <Accordion.Trigger>
          Then click me!
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Notice how both items can be open at the same time for the multiple
          Accordion.
        </Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};


The default behavior allows opening a single item at once.

Click me first!
Then click me!
Copy
import * as React from 'react';

import { Accordion } from '@aws-amplify/ui-react';

export const BasicSingleAccordion = () => {
  return (
    <Accordion.Container>
      <Accordion.Item value="item-1">
        <Accordion.Trigger>
          Click me first!
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Now when you click the second item, this item will automatically
          collapse.
        </Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="item-2">
        <Accordion.Trigger>
          Then click me!
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Notice how only one item can be open at a time for the single
          Accordion type.
        </Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};

Always open

To allow for the accordion to always have at least 1 item open, set the preventCollapse to true.

Can I collapse this item?
Only by opening the other item
What about the multiple Accordion?
Copy
import * as React from 'react';

import { Accordion } from '@aws-amplify/ui-react';

export const AlwaysOpenAccordionExample = () => {
  return (
    <Accordion.Container preventCollapse defaultValue={['item-1']}>
      <Accordion.Item value="item-1">
        <Accordion.Trigger>
          Can I collapse this item?
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>Only by opening the other item</Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="item-2">
        <Accordion.Trigger>
          What about the multiple Accordion?
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Yes, you can set the preventCollapse prop along with allowMultiple
        </Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};

Expanded by default

To expand specific items by default, pass a string[] of value(s) to the defaultValue prop. Each Accordion.Item should have a value string that lets the Accordion know which items are expanded.

Line 1
Haikus can be fun
Line 2
But sometimes they don‘t make sense...
Line 3
Copy
import * as React from 'react';

import { Accordion } from '@aws-amplify/ui-react';

export const ExpandedByDefaultMultipleAccordion = () => {
  return (
    <Accordion.Container defaultValue={['line-1', 'line-2']}>
      <Accordion.Item value="line-1">
        <Accordion.Trigger>
          Line 1
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>Haikus can be fun</Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="line-2">
        <Accordion.Trigger>
          Line 2
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          But sometimes they don&lsquo;t make sense...
        </Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="line-3">
        <Accordion.Trigger>
          Line 3
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>Refrigerator</Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};

Controlled component

To use the Accordion as controlled component, specify the value of the item(s) to expand and use in conjunction with onChange.

What do you call a deer with no eyes?
What do you call a deer with no eyes or legs?
Copy
import * as React from 'react';

import { Accordion } from '@aws-amplify/ui-react';

export const ControlledSingleAccordion = () => {
  const [value, setValue] = React.useState([]);
  return (
    <Accordion.Container value={value} onValueChange={setValue}>
      <Accordion.Item value="joke-1">
        <Accordion.Trigger>
          What do you call a deer with no eyes?
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>No eye-deer.</Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="joke-2">
        <Accordion.Trigger>
          What do you call a deer with no eyes or legs?
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>Still, no eye-deer.</Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};

Custom title component

For more control over the layout or styling of the Accordion item header, pass a custom component to the <Accordion.Item> title prop.

CS 103
Mathematical Foundations of Computing
CS 106A
Programming Methodology
Copy
import * as React from 'react';
import { Accordion, Flex, View } from '@aws-amplify/ui-react';

export const CustomTitle = ({ courseNumber, courseName }) => {
  return (
    <Flex gap="small">
      <View width="xxl" color="teal.80">
        {courseNumber}
      </View>
      <View>{courseName}</View>
    </Flex>
  );
};

export const CustomTitleComponent = () => {
  return (
    <Accordion.Container>
      <Accordion.Item value="item-1">
        <Accordion.Trigger>
          <CustomTitle
            courseNumber="CS 103"
            courseName="Mathematical Foundations of Computing"
          />
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>Example content for CS 103</Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="item-2">
        <Accordion.Trigger>
          <CustomTitle
            courseNumber="CS 106A"
            courseName="Programming Methodology"
          />
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>Example content for CS 106A</Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};

Styling
Theme

You can customize the appearance of all Accordion components in your application with a Theme.

Accordion Theme Source

Check out this themed Accordion
It is very customizable
Copy
import { Accordion, ThemeProvider, createTheme } from '@aws-amplify/ui-react';

const theme = createTheme({
  name: 'Accordion-theme',
  tokens: {
    components: {
      accordion: {
        backgroundColor: '{colors.blue.10}',
        item: {
          trigger: {
            color: '{colors.blue.80}',
            _hover: {
              color: '{colors.blue.90}',
              backgroundColor: '{colors.blue.20}',
            },
          },
          content: {
            color: '{colors.blue.80}',
          },
        },
      },
    },
  },
});

export const AccordionThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Accordion.Container>
      <Accordion.Item value="item1">
        <Accordion.Trigger>
          Check out this themed Accordion
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>Pretty cool!</Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="item2">
        <Accordion.Trigger>
          It is very customizable
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>I love it.</Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-accordion	Top level element that wraps the Accordion primitive
amplify-accordion__item	Accordion item (containier for header, trigger, and content)
amplify-accordion__item__content	Accordion content container
amplify-accordion__item__icon	Icon to indicate whether an item is expanded or collapsed
amplify-accordion__item__trigger	Accordion item trigger (summary element)
Global styling

To override styling on all Accordions, you can set the Amplify CSS variables with the built-in classes.

/* styles.css */
.amplify-accordion {
  --amplify-components-accordion-background-color: var(--amplify-colors-primary-80);
}

Click me first!
Then click me!
Local styling

To override styling on a specific Accordion, you can use (in order of increasing specificity): a class selector and style props.

Using a class selector:

/* styles.css */
.my-accordion {
  background-color: var(--amplify-colors-primary-80);
  color: var(--amplify-colors-white);
}

.amplify-accordion__item__body {
  color: var(--amplify-colors-white);
}

Section 1 title
Section 2 title
Section 3 title
Copy
import * as React from 'react';
import { Accordion } from '@aws-amplify/ui-react';

const accordionItems = [
  {
    title: 'Section 1 title',
    value: 'item-1',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
  },
  {
    title: 'Section 2 title',
    value: 'item-2',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
  },
  {
    title: 'Section 3 title',
    value: 'item-3',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
  },
];

export const ClassStylingAccordion = () => {
  return (
    <Accordion.Container className="my-accordion">
      {accordionItems.map(({ title, value, content }) => (
        <Accordion.Item value={value} key={value}>
          <Accordion.Trigger>
            {title}
            <Accordion.Icon />
          </Accordion.Trigger>
          <Accordion.Content>{content}</Accordion.Content>
        </Accordion.Item>
      ))}
    </Accordion.Container>
  );
};


Using style props:

Section 1 title
Section 2 title
Section 3 title
Copy
import * as React from 'react';

import { Accordion } from '@aws-amplify/ui-react';

export const StylePropsAccordion = () => {
  return (
    <Accordion.Container backgroundColor="secondary.80" color="font.inverse">
      <Accordion.Item value="item-1">
        <Accordion.Trigger>
          Section 1 title
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="item-2">
        <Accordion.Trigger>
          Section 2 title
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </Accordion.Content>
      </Accordion.Item>
      <Accordion.Item value="item-3">
        <Accordion.Trigger>
          Section 3 title
          <Accordion.Icon />
        </Accordion.Trigger>
        <Accordion.Content>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </Accordion.Content>
      </Accordion.Item>
    </Accordion.Container>
  );
};


--------------------------------------------------------------------------------

Title: ToggleButton | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/togglebutton
HTML Content:
ToggleButton

ToggleButton allows users to toggle the on/off state for some configuration.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Press me!
variation
default
primary
link
size
default
small
large
isDisabled
Copy
<ToggleButton>
  Press me!
</ToggleButton>
Usage

Import the ToggleButton primitive.

Press me!
Copy
import { ToggleButton } from '@aws-amplify/ui-react';

export const DefaultToggleButtonExample = () => {
  return <ToggleButton>Press me!</ToggleButton>;
};

Controlled component

A toggle button can be a controlled component when given isPressed prop and onChange prop must be provided in this case.

Press me!
Copy
import * as React from 'react';
import { ToggleButton } from '@aws-amplify/ui-react';

export const ControlledToggleButtonExample = () => {
  const [isPressed, setIsPressed] = React.useState(false);
  return (
    <ToggleButton
      isPressed={isPressed}
      onChange={() => setIsPressed(!isPressed)}
    >
      Press me!
    </ToggleButton>
  );
};

Sizes

Use the size prop to change the Button size. Available options are small, large, and none (default).

Press me!
Press me!
Press me!
Copy
import { Flex, ToggleButton } from '@aws-amplify/ui-react';

export const ToggleButtonSizeExample = () => {
  return (
    <Flex>
      <ToggleButton size="small">Press me!</ToggleButton>
      <ToggleButton>Press me!</ToggleButton>
      <ToggleButton size="large">Press me!</ToggleButton>
    </Flex>
  );
};

Variations

Use the variation prop to change the Button variation. Available options are primary, link, and none (default).

Press me!
Press me!
Press me!
Copy
import { Flex, ToggleButton } from '@aws-amplify/ui-react';

export const ToggleButtonVariationsExample = () => {
  return (
    <Flex>
      <ToggleButton defaultPressed>Press me!</ToggleButton>
      <ToggleButton variation="primary" defaultPressed>
        Press me!
      </ToggleButton>
      <ToggleButton variation="link" defaultPressed>
        Press me!
      </ToggleButton>
    </Flex>
  );
};

Disabled

A disabled toggle button will not be able to switch state and will not be focusable.

Press me!
Press me!
Copy
import { Flex, ToggleButton } from '@aws-amplify/ui-react';

export const DisabledToggleButtonExample = () => {
  return (
    <Flex>
      <ToggleButton isDisabled>Press me!</ToggleButton>
      <ToggleButton isDisabled defaultPressed>
        Press me!
      </ToggleButton>
    </Flex>
  );
};

ToggleButtonGroup

You can group related Toggle buttons easily with a ToggleButtonGroup out of box. To control the selected state of its child buttons, both value and onChange props must be provided.

Copy
import * as React from 'react';
import {
  MdFormatBold,
  MdFormatColorFill,
  MdFormatItalic,
  MdFormatUnderlined,
} from 'react-icons/md';
import { ToggleButton, ToggleButtonGroup } from '@aws-amplify/ui-react';

export const DefaultToggleButtonGroupExample = () => {
  const [multipleValue, setMultipleValue] = React.useState(['bold']);
  return (
    <ToggleButtonGroup
      value={multipleValue}
      onChange={(value) => setMultipleValue(value as string[])}
    >
      <ToggleButton value="bold">
        <MdFormatBold />
      </ToggleButton>
      <ToggleButton value="italic">
        <MdFormatItalic />
      </ToggleButton>
      <ToggleButton value="underlined">
        <MdFormatUnderlined />
      </ToggleButton>
      <ToggleButton value="color-fill">
        <MdFormatColorFill />
      </ToggleButton>
    </ToggleButtonGroup>
  );
};


To make your toggle button group exclusive, set the isExclusive prop to true.

Copy
import * as React from 'react';
import {
  MdFormatAlignCenter,
  MdFormatAlignJustify,
  MdFormatAlignLeft,
  MdFormatAlignRight,
} from 'react-icons/md';
import { ToggleButton, ToggleButtonGroup } from '@aws-amplify/ui-react';

export const ExclusiveToggleButtonGroupExample = () => {
  const [exclusiveValue, setExclusiveValue] = React.useState('align-left');
  return (
    <ToggleButtonGroup
      value={exclusiveValue}
      isExclusive
      onChange={(value) => setExclusiveValue(value as string)}
    >
      <ToggleButton value="align-left">
        <MdFormatAlignLeft />
      </ToggleButton>
      <ToggleButton value="align-center">
        <MdFormatAlignCenter />
      </ToggleButton>
      <ToggleButton value="align-right">
        <MdFormatAlignRight />
      </ToggleButton>
      <ToggleButton value="align-justify">
        <MdFormatAlignJustify />
      </ToggleButton>
    </ToggleButtonGroup>
  );
};


In cases where you need to have at least one option on, you can set the isSelectionRequired prop to true.

Copy
import * as React from 'react';
import {
  MdFormatBold,
  MdFormatColorFill,
  MdFormatItalic,
  MdFormatUnderlined,
} from 'react-icons/md';
import { ToggleButton, ToggleButtonGroup } from '@aws-amplify/ui-react';

export const SelectionRequiredToggleButtonGroupExample = () => {
  const [value, setValue] = React.useState('bold');
  return (
    <ToggleButtonGroup
      value={value}
      onChange={(value) => setValue(value as string)}
      isExclusive
      isSelectionRequired
    >
      <ToggleButton value="bold">
        <MdFormatBold />
      </ToggleButton>
      <ToggleButton value="italic">
        <MdFormatItalic />
      </ToggleButton>
      <ToggleButton value="underlined">
        <MdFormatUnderlined />
      </ToggleButton>
      <ToggleButton value="color-fill">
        <MdFormatColorFill />
      </ToggleButton>
    </ToggleButtonGroup>
  );
};

Standard HTML attributes

The ToggleButton will accept any of the standard HTML attributes that a <button> element accepts. Standard <button> attributes can be found in the MDN Documentation

Press me!
Copy
<ToggleButton name="button">Press me!</ToggleButton>

CSS Styling
Theme

You can customize the appearance of all ToggleButton components in your application with a Theme.

ToggleButton Theme Source

Default
Primary
Copy
import {
  ToggleButton,
  Flex,
  ThemeProvider,
  Theme,
} from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'toggleButton-theme',
  tokens: {
    components: {
      togglebutton: {
        borderColor: { value: '{colors.blue.90}' },
        color: { value: '{colors.blue.90}' },
        _hover: {
          backgroundColor: { value: '{colors.blue.40}' },
        },
        _focus: {
          color: { value: 'white' },
        },
        _active: {
          backgroundColor: { value: '{colors.blue.60}' },
        },
        _pressed: {
          backgroundColor: { value: '{colors.blue.80}' },
          color: { value: 'white' },
          _hover: {
            backgroundColor: { value: 'blue' },
          },
        },
        primary: {
          backgroundColor: { value: '{colors.teal.20}' },
        },
      },
    },
  },
};

export const ToggleButtonThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Flex>
        <ToggleButton>Default</ToggleButton>
        <ToggleButton variation="primary">Primary</ToggleButton>
      </Flex>
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-togglebutton	Top level element that wraps the ToggleButton primitive
amplify-togglebuttongroup	Top level element that wraps the ToggleButtonGroup primitive
Global styling

To override styling on all ToggleButtons, you can set the Amplify CSS variables or use the built-in .amplify-togglebutton class.

Press me!
Copy
:root {
  --amplify-components-togglebutton-color: var(--amplify-colors-purple-60);
}

.amplify-togglebutton {
  color: var(--amplify-colors-purple-60);
}

Copy
<ToggleButton className="my-togglebutton-global">Press me!</ToggleButton>

Local styling

To override styling on a specific ToggleButton, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Press me!
Copy
.my-togglebutton {
  border-radius: 20px;
}

Copy
<ToggleButton className="my-togglebutton">Press me!</ToggleButton>


Using data attributes:

Press me!
Copy
.amplify-togglebutton[data-variation='primary'] {
  color: var(--amplify-colors-blue-60);
}

Copy
<ToggleButton className="my-togglebutton-data-attribute" variation="primary">
  'Press me!'
</ToggleButton>


Using style props:

Press me!
Copy
import { Flex, ToggleButton, useTheme } from '@aws-amplify/ui-react';

export const ToggleButtonStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex>
      <ToggleButton color={tokens.colors.orange[60]}>Press me!</ToggleButton>
    </Flex>
  );
};


--------------------------------------------------------------------------------

Title: TextAreaField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/textareafield
HTML Content:
TextAreaField

TextAreaField allows users to input multiline text content.

React source
Feedback
Documentation
Props
Demo
Last name

Enter a valid last name

label
name
placeholder
rows
descriptiveText
errorMessage
hasError
labelHidden
isDisabled
isReadOnly
size
default
small
large
variation
default
quiet
Copy
<TextAreaField
  descriptiveText="Enter a valid last name"
  label="Last name"
  name="last_name"
  placeholder="Baggins"
  rows={3}/>
Usage

Import the TextAreaField component and styles and provide a label for accessibility/usability.

Comments
Copy
import { TextAreaField } from '@aws-amplify/ui-react';

export const DefaultTextAreaExample = () => {
  return (
    <TextAreaField label="Comments" defaultValue="Amplify UI is awesome!" />
  );
};

Accessibility

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

Resizeable

For a resizeable multiline field, use resize prop. Common values are horizontal, vertical, both. See MDN resize docs for supported values.

Address

Please enter a USPS validated address

Copy
import { TextAreaField } from '@aws-amplify/ui-react';

export const TextAreaResizableExample = () => {
  return (
    <TextAreaField
      label="Address"
      placeholder="1234 Main St."
      descriptiveText="Please enter a USPS validated address"
      resize="vertical"
    />
  );
};

Size

To change the general size, use the size prop. Available options are small, none (default), and large.

Small
Default
Large
Copy
import { Flex, TextAreaField } from '@aws-amplify/ui-react';

export const TextAreaSizeExample = () => {
  return (
    <Flex direction="column" gap="1.5rem">
      <TextAreaField
        label="Small"
        size="small"
        defaultValue="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
      />

      <TextAreaField
        label="Default"
        defaultValue="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
      />
      <TextAreaField
        label="Large"
        size="large"
        defaultValue="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
      />
    </Flex>
  );
};

Rows

To change the number of rows of text displayed, use the rows prop with desired number.

6 rows
Copy
import { TextAreaField } from '@aws-amplify/ui-react';

export const TextAreaRowsExample = () => {
  return (
    <TextAreaField
      label="6 rows"
      rows={6}
      defaultValue="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
    />
  );
};

Maximum length

To enforce a maximum length of multiline text, use the maxLength prop.

Maximum length of 100 characters
Copy
import { TextAreaField } from '@aws-amplify/ui-react';

export const TextAreaMaxLengthExample = () => {
  return (
    <TextAreaField
      label="Maximum length of 100 characters"
      defaultValue="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut laboree"
      maxLength={100}
    />
  );
};

Variations

There are two variation styles available: default and quiet.

Default
Quiet
Copy
import { TextAreaField } from '@aws-amplify/ui-react';

export const TextAreaFieldVariationExample = () => {
  return (
    <>
      <TextAreaField label="Default" />
      <TextAreaField label="Quiet" variation="quiet" />
    </>
  );
};

Descriptive text

To provide additional descriptive text of requirements of the field, use the descriptiveText field:

Address

Please enter a USPS validated address

Copy
import { Text, TextAreaField, View } from '@aws-amplify/ui-react';

export const TextAreaFieldDescriptiveExample = () => {
  return (
    <View width="100%">
      <TextAreaField
        label="Address"
        descriptiveText={
          <Text
            as="span"
            fontStyle="italic"
            fontSize="var(--amplify-font-sizes-small)"
          >
            Please enter a USPS validated address
          </Text>
        }
      />
    </View>
  );
};

States

The available TextAreaField states include isDisabled and isReadOnly. A disabled field will be not be focusable not mutable and will not be submitted with form data. A readonly field cannot be edited by the user.

Disabled
Readonly
Copy
import { Flex, TextAreaField } from '@aws-amplify/ui-react';

export const TextAreaFieldStatesExample = () => {
  return (
    <Flex direction="column" gap="1rem">
      <TextAreaField
        label="Disabled"
        defaultValue="Disabled"
        isDisabled={true}
      />
      <TextAreaField
        label="Readonly"
        defaultValue="You can't edit me!"
        isReadOnly={true}
      />
    </Flex>
  );
};

Required fields

Use the isRequired prop to specify a required field.

Essay question #1
Submit
Copy
import { Button, Flex, TextAreaField } from '@aws-amplify/ui-react';

export const DefaultRequiredTextAreaFieldExample = () => {
  return (
    <Flex as="form" direction="column">
      <TextAreaField label="Essay question #1" isRequired={true} />
      <Button type="submit">Submit</Button>
    </Flex>
  );
};


There is no default styling for required fields. Customize the label or descriptiveText to instruct the form user of the required field.

Essay Question #1 (required)

Essay Question #1

Required

Submit
Copy
import { Button, Flex, Text, TextAreaField } from '@aws-amplify/ui-react';

export const RequiredTextAreaFieldExample = () => {
  return (
    <Flex as="form" direction="column">
      <TextAreaField
        label={
          <Text>
            Essay Question #1
            <Text
              as="span"
              fontSize="var(--amplify-font-sizes-small)"
              color="var(--amplify-colors-font-error)"
            >
              {' '}
              (required)
            </Text>
          </Text>
        }
        isRequired={true}
      />
      <TextAreaField
        label="Essay Question #1"
        descriptiveText={
          <Text
            as="span"
            fontSize="var(--amplify-font-sizes-small)"
            color="var(--amplify-colors-font-error)"
            fontStyle="italic"
          >
            Required
          </Text>
        }
        isRequired={true}
      />
      <Button type="submit">Submit</Button>
    </Flex>
  );
};

Validation error styling

Use the hasError and errorMessage fields to mark a TextAreaField with a validation error.

Comments

Please enter a comment

Copy
import { Flex, TextAreaField } from '@aws-amplify/ui-react';

export const TextAreaFieldValidationErrorExample = () => {
  return (
    <Flex gap="1rem" direction="column">
      <TextAreaField
        label="Comments"
        hasError={true}
        errorMessage="Please enter a comment"
      />
    </Flex>
  );
};

CSS Styling
Theme

You can customize the appearance of all TextAreaField components in your application with a Theme.

TextAreaField Theme Source

Name
Copy
import { TextAreaField, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'textareafield-theme',
  tokens: {
    components: {
      textareafield: {
        color: { value: '{colors.blue.90}' },
        _focus: {
          borderColor: { value: '{colors.blue.40}' },
        },
      },
    },
  },
};

export const TextAreaFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <TextAreaField label="Name" defaultValue="Default Value" />
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-textarea	Class applied to the text area
amplify-textareafield	Top level element that wraps the TextAreaField primitive
Global styling

To override styling on all TextAreaField primitives, you can set the Amplify CSS variables with the built-in .amplify-textareafield class.

Globally styled field
Copy
/* styles.css */
.amplify-textareafield {
  --amplify-components-fieldcontrol-border-color: rebeccapurple;
}

Local styling

To override styling on a specific TextAreaField, you can use a class selector or style props.

Using a class selector:

Square field
Copy
/* styles.css */
.custom-textareafield-class .amplify-textarea {
  border-radius: 0;
}


Using style props:

All style props will be applied to the Flex wrapper of the TextAreaField. To style the textarea of the TextAreaField, you can pass a inputStyles prop with the style props you want to apply to the input.

Address:

Special Field
Copy
import { Text, TextAreaField, useTheme } from '@aws-amplify/ui-react';

export const TextAreaFieldStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <TextAreaField
        label={
          <Text
            fontWeight={tokens.fontWeights.bold}
            fontSize={tokens.fontSizes.xl}
          >
            Address:
          </Text>
        }
        padding="xl"
        border={`1px solid ${tokens.colors.primary[60]}`}
      />
      <TextAreaField
        label="Special Field"
        inputStyles={{
          backgroundColor: 'primary.10',
          border: `1px solid ${tokens.colors.primary[60]}`,
        }}
      />
    </>
  );
};


--------------------------------------------------------------------------------

Title: TextField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/textfield
HTML Content:
TextField

TextField allows users to input text content.

Theme source
React source
Feedback
Documentation
Props
Demo
Last name

Enter a valid last name

variation
default
quiet
size
small
default
large
descriptiveText
placeholder
label
labelHidden
errorMessage
hasError
isDisabled
Copy
<TextField
  descriptiveText="Enter a valid last name"
  placeholder="Baggins"
  label="Last name"
  errorMessage="There is an error"
/>
Usage

Import the TextField component and styles and provide a label for accessibility/usability.

Name
Copy
import { TextField } from '@aws-amplify/ui-react';

export const DefaultTextFieldExample = () => <TextField label="Name" />;

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Search
Search
Copy
import { Button, Flex, TextField } from '@aws-amplify/ui-react';

export const TextFieldAccessibilityExample = () => {
  return (
    <Flex>
      <TextField label="Search" labelHidden={true} />
      <Button>Search</Button>
    </Flex>
  );
};

Sizes

TextField sizes are designed to match styling of other field components such as Buttons. There are three sizes: small, (default), and large.

Small
Default
Large
Copy
import { Flex, TextField } from '@aws-amplify/ui-react';

export const TextFieldSizeExample = () => {
  return (
    <Flex direction="column">
      <TextField label="Small" size="small" width="50%" />
      <TextField label="Default" width="75%" />
      <TextField label="Large" size="large" width="100%" />
    </Flex>
  );
};

Variations

There are two variation styles available: default and quiet.

Default
Quiet
Copy
import { TextField } from '@aws-amplify/ui-react';

export const TextFieldVariationExample = () => {
  return (
    <>
      <TextField label="Default" />
      <TextField label="Quiet" variation="quiet" />
    </>
  );
};

Outer components

Compose field components such as Button and Select at the start or end of an TextField input using the outerStartComponent or outerEndComponent props.

Start
Start
Start and End
Start
End
End
End
Multiple End
End
End
Multiple Start
Start
Start
Copy
import { Button, Flex, TextField } from '@aws-amplify/ui-react';

export const TextFieldOuterComponentsExample = () => (
  <Flex gap="1rem" direction="column">
    <TextField label="Start" outerStartComponent={<Button>Start</Button>} />
    <TextField
      label="Start and End"
      outerStartComponent={<Button>Start</Button>}
      outerEndComponent={<Button>End</Button>}
    />
    <TextField label="End" outerEndComponent={<Button>End</Button>} />
    <TextField
      label="Multiple End"
      outerEndComponent={
        <>
          <Button>End</Button>
          <Button>End</Button>
        </>
      }
    />
    <TextField
      label="Multiple Start"
      outerStartComponent={
        <>
          <Button>Start</Button>
          <Button>Start</Button>
        </>
      }
    />
  </Flex>
);

Inner components (icons)

Compose FieldGroupIcon or FieldGroupIconButton components inside TextField input using innerStartComponent and innerEndComponent. To create an interactive icon button, use the FieldGroupIconButton component. To add an icon that's not interactive, use FieldGroupIcon component.

Note: When clicked, FieldGroupIcon will focus the field, whereas the FieldGroupIconButton will trigger its onClick event.

Start and End
Copy
import {
  Flex,
  FieldGroupIcon,
  FieldGroupIconButton,
  TextField,
} from '@aws-amplify/ui-react';
import { MdInfo, MdSearch } from 'react-icons/md';

export const TextFieldInnerComponentsExample = () => (
  <Flex gap="1rem" direction="column">
    <TextField
      label="Start and End"
      innerStartComponent={
        <FieldGroupIcon ariaLabel="">
          {/** Accessibility tip: pass empty ariaLabel for decorative icons. */}
          <MdInfo />
        </FieldGroupIcon>
      }
      innerEndComponent={
        <FieldGroupIconButton
          ariaLabel="Search"
          variation="link"
          onClick={() => alert('😎')}
        >
          <MdSearch />
        </FieldGroupIconButton>
      }
    />
  </Flex>
);


You can also both inner and outer components together

Start and End inner and outer components
Start
End
Copy
import {
  Button,
  Flex,
  FieldGroupIcon,
  FieldGroupIconButton,
  TextField,
} from '@aws-amplify/ui-react';
import { MdInfo, MdSearch } from 'react-icons/md';

export const TextFieldOuterAndInnerComponentsExample = () => (
  <Flex gap="1rem" direction="column">
    <TextField
      label="Start and End inner and outer components"
      outerStartComponent={<Button>Start</Button>}
      outerEndComponent={<Button>End</Button>}
      innerStartComponent={
        <FieldGroupIcon ariaLabel="">
          {/** Accessibility tip: pass empty ariaLabel for decorative icons. */}
          <MdInfo />
        </FieldGroupIcon>
      }
      innerEndComponent={
        <FieldGroupIconButton
          ariaLabel="Search"
          variation="link"
          onClick={() => alert('😎')}
        >
          <MdSearch />
        </FieldGroupIconButton>
      }
    />
  </Flex>
);

Descriptive text

To provide additional descriptive text of requirements of the field, use the descriptiveText field:

Password

Password length must be greater than 8 characters

Copy
import { Text, TextField, View } from '@aws-amplify/ui-react';

export const TextFieldDescriptiveTextExample = () => {
  return (
    <View width="100%">
      <TextField
        type="password"
        label="Password"
        descriptiveText={
          <Text
            as="span"
            color="purple.60"
            fontStyle="italic"
            fontSize="0.8rem"
          >
            Password length must be greater than 8 characters
          </Text>
        }
      />
    </View>
  );
};

States

The available TextField states include isDisabled and isReadOnly. A disabled field will be not be focusable not mutable and will not be submitted with form data. A readonly field cannot be edited by the user.

Disabled
Readonly
Copy
import { Flex, TextField } from '@aws-amplify/ui-react';

export const TextFieldStatesExample = () => {
  return (
    <Flex direction="column" gap="1rem">
      <TextField label="Disabled" defaultValue="Disabled" isDisabled={true} />
      <TextField
        label="Readonly"
        defaultValue="You can't edit me!"
        isReadOnly={true}
      />
    </Flex>
  );
};

Required fields

Use the isRequired prop to specify a required field.

Email
Submit
Copy
import { Button, Flex, TextField } from '@aws-amplify/ui-react';

export const DefaultRequiredTextFieldExample = () => {
  return (
    <Flex as="form" direction="column" width="20rem">
      <TextField label="Email" type="email" isRequired={true} />
      <Button type="submit">Submit</Button>
    </Flex>
  );
};


There is no default styling for required fields. Customize the label or descriptiveText to instruct the form user of the required field.

Email (required)

Password

Required

Submit
Copy
import { Button, Flex, Text, TextField } from '@aws-amplify/ui-react';

export const RequiredTextFieldExample = () => {
  return (
    <Flex as="form" direction="column" width="20rem">
      <TextField
        label={
          <Text>
            Email
            <Text as="span" fontSize="0.8rem" color="red">
              {' '}
              (required)
            </Text>
          </Text>
        }
        type="email"
        isRequired={true}
      />
      <TextField
        label="Password"
        type="password"
        descriptiveText={
          <Text as="span" fontSize="0.8rem" color="red" fontStyle="italic">
            Required
          </Text>
        }
        isRequired={true}
      />
      <Button type="submit">Submit</Button>
    </Flex>
  );
};

Validation error styling

Use the hasError and errorMessage props to mark a TextField as having a validation error.

Username

Username must include at least one digit

Copy
import { TextField } from '@aws-amplify/ui-react';
import * as React from 'react';

export const TextFieldValidationErrorExample = () => {
  const [hasError, setHasError] = React.useState(true);

  const validateUsername = (e) => {
    const containsDigit = /\d/.test(e.currentTarget.value);
    setHasError(!containsDigit);
  };

  return (
    <TextField
      label="Username"
      hasError={hasError}
      errorMessage="Username must include at least one digit"
      onChange={validateUsername}
    />
  );
};

Event handlers

TextField provides several event handlers: onSelect, onInput, onChange, onCopy, onPaste, and onCut. Open the console to interact with the demo below.

Event handlers
Copy
import { TextField } from '@aws-amplify/ui-react';

export const TextFieldEventHandlersExample = () => (
  <TextField
    label="Event handlers"
    onSelect={(e) => console.info('onSelect fired:', e.currentTarget.value)}
    onInput={(e) => console.info('onInput fired:', e.currentTarget.value)}
    onChange={(e) => console.info('onChange fired:', e.currentTarget.value)}
    onCopy={(e) => console.info('onCopy fired:', e.currentTarget.value)}
    onPaste={(e) => console.info('onPaste fired:', e.currentTarget.value)}
    onCut={(e) => console.info('onCut fired:', e.currentTarget.value)}
  />
);

Standard HTML attributes

The TextField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation

Name
Copy
<TextField
  label="Name"
  placeholder="Galadriel"
  name="name"
/>

CSS Styling
Theme

You can customize the appearance of all TextField components in your application with a Theme.

TextField Theme Source

Name
Copy
import { TextField, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'textfield-theme',
  tokens: {
    components: {
      textfield: {
        color: { value: '{colors.blue.90}' },
        _focus: {
          borderColor: { value: '{colors.blue.40}' },
        },
      },
    },
  },
};

export const TextFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <TextField label="Name" />
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-textfield	Top level element that wraps the TextField primitive
Global styling

To override styling on all TextField primitives, you can set the Amplify CSS variables with the built-in .amplify-textfield class.

Globally styled field
Copy
/* styles.css */
.amplify-textfield {
  --amplify-components-fieldcontrol-border-color: rebeccapurple;
}

Local styling

To override styling on a specific TextField, you can use a class selector or style props.

Using a class selector:

Square field
Copy
/* styles.css */
.custom-textfield-class .amplify-input {
  border-radius: 0;
}


Using style props:

All style props will be applied to the Flex wrapper of the TextField. To style the input of the TextField, you can pass a inputStyles prop with the style props you want to apply to the input.

Name:

Special Field
Copy
import { Text, TextField, useTheme } from '@aws-amplify/ui-react';

export const TextFieldStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <TextField
        label={
          <Text
            fontWeight={tokens.fontWeights.bold}
            fontSize={tokens.fontSizes.xl}
          >
            Name:
          </Text>
        }
        padding="xl"
        border={`1px solid ${tokens.colors.primary[60]}`}
      />
      <TextField
        label="Special Field"
        inputStyles={{
          backgroundColor: 'primary.10',
          border: `1px solid ${tokens.colors.primary[60]}`,
        }}
      />
    </>
  );
};


--------------------------------------------------------------------------------

Title: SwitchField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/switchfield
HTML Content:
SwitchField

SwitchField allows users to toggle an input.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
SwitchField
thumbColor
trackColor
trackCheckedColor
size
default
small
large
label
labelPosition
start
end
top
bottom
isDisabled
isChecked
Unset
Copy
<SwitchField
  isDisabled={false}
  label="SwitchField"
  labelPosition="start"
/>
Usage

The most basic usage simply includes a SwitchField component passing in a required label prop.

This is a switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const DefaultSwitchFieldExample = () => {
  return <SwitchField label="This is a switch" />;
};

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Controlled component

The SwitchFIeld can be a controlled component by passing in the controlled boolean value as the isChecked prop. To allow the user to toggle a controlled SwitchField, the onChange handler must be passed in and update the controlled value. An example of this pattern is displayed below.

This is a switch
Switch
Copy
import { SwitchField, Button } from '@aws-amplify/ui-react';
import * as React from 'react';

export const SwitchFieldIsCheckedExample = () => {
  const [isChecked, setIsChecked] = React.useState(true);

  return (
    <>
      <SwitchField
        label="This is a switch"
        isChecked={isChecked}
        onChange={(e) => {
          setIsChecked(e.target.checked);
        }}
      />
      <Button
        onClick={() => {
          setIsChecked((isChecked) => !isChecked);
        }}
      >
        Switch
      </Button>
    </>
  );
};

defaultChecked

The defaultChecked property is a boolean value and will define the starting value for an uncontrolled switchField.

This is a switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldDefaultCheckedExample = () => {
  return <SwitchField label="This is a switch" defaultChecked={true} />;
};

thumbColor

The thumbColor property is a CSS color value and will define the color of the thumb in the switchField.

This is a switch
Copy
import { SwitchField, useTheme } from '@aws-amplify/ui-react';

export const SwitchFieldThumbColorExample = () => {
  const { tokens } = useTheme();
  return (
    <SwitchField
      label="This is a switch"
      thumbColor={tokens.colors.orange[10]}
    />
  );
};

trackColor

The trackColor property is a CSS color value that will define the color of the track of the switchField while in the off position.

This is a switch
Copy
import { SwitchField, useTheme } from '@aws-amplify/ui-react';

export const SwitchFieldTrackColorExample = () => {
  const { tokens } = useTheme();
  return (
    <SwitchField label="This is a switch" trackColor={tokens.colors.blue[60]} />
  );
};

trackCheckedColor

The trackCheckedColor property is a CSS color value that will define the color of the track of the switchField while in the on position.

This is a switch
Copy
import { SwitchField, useTheme } from '@aws-amplify/ui-react';

export const SwitchFieldTrackCheckedColorExample = () => {
  const { tokens } = useTheme();
  return (
    <SwitchField
      label="This is a switch"
      trackCheckedColor={tokens.colors.green[60]}
      defaultChecked={true}
    />
  );
};

isDisabled

The isDisabled property is a boolean value that when set to true will disable the switchField from being toggled.

This is a switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const DisabledSwitchFieldExample = () => {
  return <SwitchField label="This is a switch" isDisabled={true} />;
};

name

The name property is a string that defines the name of the field that will be submitted with the form as a name/value pair.

This is a switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldNameExample = () => {
  return <SwitchField label="This is a switch" name="switchName" />;
};

size

The size property is an enum value that modifies the size of the switchField component. The available sizes are small, (default), and large.

This is a small switch
This is a switch
This is a large switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldSizeExample = () => {
  return (
    <>
      <SwitchField label="This is a small switch" size="small" />
      <SwitchField label="This is a switch" />
      <SwitchField label="This is a large switch" size="large" />
    </>
  );
};

label

The label property is a required string or ReactNode that will display next to the switchField component and wrapped in an html label tag.

This is a switch
This is a JSX label
Copy
import { SwitchField, View } from '@aws-amplify/ui-react';

export const SwitchFieldLabelExample = () => {
  return (
    <>
      <SwitchField label="This is a switch" />
      <SwitchField label={<View as="span">This is a JSX label</View>} />
    </>
  );
};

labelPosition

The labelPosition property is an enum value that defines the label's position in relation to the switchField. Available values are start, end, top, and bottom.

This is a switch
This is a switch
This is a switch
This is a switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldLabelPositionExample = () => {
  return (
    <>
      <SwitchField label="This is a switch" labelPosition="start" />
      <SwitchField label="This is a switch" labelPosition="end" />
      <SwitchField label="This is a switch" labelPosition="top" />
      <SwitchField label="This is a switch" labelPosition="bottom" />
    </>
  );
};

isLabelHidden

The isLabelHidden property is a boolean value that will visually hide the label.

This is a visually hidden label
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldLabelHiddenExample = () => {
  return (
    <SwitchField label="This is a visually hidden label" isLabelHidden={true} />
  );
};

value

The value property is a string value that defines the value of the field that will be submitted with the form as a name/value pair.

This is a switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldValueExample = () => {
  return <SwitchField label="This is a switch" value="Switch Form Value" />;
};

onChange

The onChange property is a callback function that will be called with a change event to the switchField.

This is a switch

Number of times the switch has changed 0

Copy
import * as React from 'react';
import { Text, SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldOnChangeExample = () => {
  const [switchCount, setSwitchCount] = React.useState(0);
  const changeCount = () => {
    setSwitchCount(switchCount + 1);
  };
  return (
    <>
      <SwitchField label="This is a switch" onChange={changeCount} />
      <Text>Number of times the switch has changed {switchCount}</Text>
    </>
  );
};

Error state
I agree to the terms and conditions
Submit
Copy
import { SwitchField, Button, Flex } from '@aws-amplify/ui-react';
import * as React from 'react';

export const SwitchFieldErrorExample = () => {
  const [isChecked, setIsChecked] = React.useState(false);
  const [hasError, setHasError] = React.useState(false);
  const onSubmit = (event) => {
    event.preventDefault();
    if (!isChecked) {
      setHasError(true);
    } else {
      setHasError(false);
      alert(`success`);
    }
  };

  return (
    <Flex
      as="form"
      direction="column"
      alignItems="flex-start"
      onSubmit={onSubmit}
    >
      <SwitchField
        label="I agree to the terms and conditions"
        labelPosition="end"
        isChecked={isChecked}
        hasError={hasError}
        errorMessage="Please agree to the terms and conditions"
        onChange={(e) => {
          setIsChecked(e.target.checked);
        }}
      />
      <Button type="submit">Submit</Button>
    </Flex>
  );
};

CSS Styling
Theme

You can customize the appearance of all SwitchField components in your application with a Theme.

SwitchField Theme Source

Themed Switch
Copy
import { SwitchField, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'switchfield-theme',
  tokens: {
    components: {
      switchfield: {
        thumb: {
          backgroundColor: { value: '{colors.background.primary}' },
          borderColor: { value: '{colors.border.primary}' },
          transition: {
            duration: { value: '{time.long}' },
          },
        },

        track: {
          backgroundColor: { value: '{colors.background.tertiary}' },
          checked: {
            backgroundColor: { value: '{colors.secondary.60}' },
          },
          transition: {
            duration: { value: '{time.long}' },
          },
        },
      },
    },
  },
};

export const SwitchFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <SwitchField label="Themed Switch" />
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-switchfield	Top level element that wraps the SwitchField primitive
amplify-switch__label	Class applied to the SwitchField label text
amplify-switch__thumb	Class applied to the SwitchField thumb
amplify-switch__track	Class applied to the SwitchField track
amplify-switch__wrapper	Class applied to the label element that wraps the SwitchField label and track
Global Styling

To override styling on all SwitchFields, you can set the Amplify CSS variables or use the built-in .amplify-switchfield class.

This is a switch
Copy
/* styles.css */
:root {
  --amplify-components-switchfield-default-font-size: 0.5rem;
}
/* OR */
.amplify-switchfield {
  font-size: 0.5rem;
}

Local styling

To override styling on a specific SwitchField, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

This is a switch
Copy
/* styles.css */
.my-custom-switchfield {
  font-size: 0.75rem;
}

Copy
import './styles.css';

<SwitchField label="This is a switch" className="my-custom-switchfield" />;


Using data attributes:

large switchfield
Copy
/* styles.css */
/* Override only large size styles */
.amplify-switchfield[data-size='large'] {
  font-size: 2.5rem;
}

Copy
import './styles.css';

<SwitchField label="large switchfield" size="large" />;


Using style props:

This is a switch
Copy
import { SwitchField } from '@aws-amplify/ui-react';

export const SwitchFieldStylePropsExample = () => {
  return <SwitchField label="This is a switch" fontSize="xs" />;
};


--------------------------------------------------------------------------------

Title: StepperField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/stepperfield
HTML Content:
StepperField

StepperField allows users to increment or decrement a number input.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Stepper
label
min
max
step
size
default
small
large
variation
default
quiet
labelHidden
isDisabled
Copy
<StepperField
  max={10}
  min={0}
  step={1}
  label="Stepper"
/>
Usage

Import StepperField and styles. You could edit the stepping value directly but it will be validated and rounded to a valid one when the field loses focus.

Stepper
Copy
import { StepperField } from '@aws-amplify/ui-react';

export const DefaultStepperFieldExample = () => {
  return (
    <StepperField
      label="Stepper"
      defaultValue={0}
      min={0}
      max={10}
      step={1}
      labelHidden
    />
  );
};

Controlled component

To use the StepperField as a controlled component, use the value prop and onStepChange handler.

Note that onStepChange returns a new value (number), not the event object. This is because the StepperField is a complex component which is handling input, blur, and change events on the input element as well as click events on the button elements. The onStepChange handler simplifies all of this and returns the new value of the input in response to any of these events.

Controlled stepper
Copy
import * as React from 'react';
import { StepperField } from '@aws-amplify/ui-react';

export const ControlledStepperFieldExample = () => {
  const [value, setValue] = React.useState<number>(0);

  const handleOnStepChange = (newValue: number) => {
    alert(`New value: ${newValue}`);
    setValue(newValue);
  };

  return (
    <StepperField
      label="Controlled stepper"
      value={value}
      onStepChange={handleOnStepChange}
    />
  );
};

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Stepper
Copy
import { StepperField } from '@aws-amplify/ui-react';

export const StepperFieldAccessibilityExample = () => {
  return (
    <StepperField label="Stepper" defaultValue={0} min={0} max={10} step={1} />
  );
};

Sizes

Use the size prop to change the StepperField size. Available options are small, large, and none (default).

Stepper
Stepper
Stepper
Copy
import { StepperField } from '@aws-amplify/ui-react';

export const StepperFieldSizeExample = () => {
  return (
    <>
      <StepperField
        label="Stepper"
        defaultValue={0}
        min={0}
        max={10}
        step={1}
        size="small"
        labelHidden
      />
      <StepperField
        label="Stepper"
        defaultValue={0}
        min={0}
        max={10}
        step={1}
        labelHidden
      />
      <StepperField
        label="Stepper"
        defaultValue={0}
        min={0}
        max={10}
        step={1}
        size="large"
        labelHidden
      />
    </>
  );
};

State

The available StepperField states include isDisabled and isReadOnly. A disabled field will not be focusable or mutable and will not be submitted with form data. A read-only field cannot be edited by the user.

Disabled StepperField
Stepper
Copy
import { StepperField } from '@aws-amplify/ui-react';

export const DisabledStepperFieldExample = () => {
  return (
    <StepperField
      label="Stepper"
      defaultValue={0}
      min={0}
      max={10}
      step={1}
      labelHidden
      isDisabled
    />
  );
};

Read-only StepperField
Stepper
Copy
import { StepperField } from '@aws-amplify/ui-react';

export const ReadOnlyStepperFieldExample = () => {
  return (
    <StepperField
      label="Stepper"
      defaultValue={5}
      min={0}
      max={10}
      step={1}
      labelHidden
      isReadOnly
    />
  );
};

Validation error

Use the hasError and errorMessage props to mark a StepperField as having an validation error.

Stepper

The is an error message.

Copy
import { StepperField } from '@aws-amplify/ui-react';

export const StepperFieldValidationErrorExample = () => {
  return (
    <StepperField
      label="Stepper"
      defaultValue={0}
      min={0}
      max={10}
      step={1}
      errorMessage="The is an error message."
      hasError
      labelHidden
    />
  );
};

Standard HTML attributes

The StepperField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation

Stepper
Copy
<StepperField
  label="Stepper"
  min={0}
  max={10}
  step={1}
  name="stepper"
/>

Styling
Theme

You can customize the appearance of all StepperField components in your application with a Theme.

StepperField Theme Source

Themed stepper
Copy
import { StepperField, ThemeProvider } from '@aws-amplify/ui-react';

const theme = {
  name: 'stepper-theme',
  tokens: {
    components: {
      stepperfield: {
        borderColor: { value: '{colors.secondary.20}' },
        input: {
          color: { value: '{colors.primary.80}' },
          fontSize: { value: '{fontSizes.large}' },
        },
        button: {
          color: { value: '{colors.primary.80}' },
          backgroundColor: { value: '{colors.neutral.20}' },
          _disabled: {
            color: { value: '{colors.primary.80}' },
          },
        },
      },
    },
  },
};

export const StepperFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <StepperField
      label="Themed stepper"
      defaultValue={0}
      min={0}
      max={10}
      step={1}
      labelHidden
    />
  </ThemeProvider>
);

Icons
Themed stepper
Copy
import { StepperField, IconsProvider } from '@aws-amplify/ui-react';
import { FiMinusSquare, FiPlusSquare } from 'react-icons/fi';

export const StepperFieldIconProviderExample = () => (
  <IconsProvider
    icons={{
      stepperField: {
        add: <FiPlusSquare />,
        remove: <FiMinusSquare />,
      },
    }}
  >
    <StepperField
      label="Themed stepper"
      defaultValue={0}
      min={0}
      max={10}
      step={1}
      labelHidden
    />
  </IconsProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-stepperfield	Top level element that wraps the StepperField primitive
amplify-stepperfield__button--decrease	Class applied to the decrease button
amplify-stepperfield__button--increase	Class applied to the increase button
amplify-stepperfield__input	Class applied to the StepperField input
Global styling

To override styling on all StepperFields, you can set the Amplify CSS variables or use the built-in .amplify-stepperfield, .amplify-stepperfield__input, amplify-stepperfield__button--decrease and amplify-stepperfield__button--increase class.

Stepper
Copy
/* styles.css */
:root {
  --amplify-components-stepperfield-input-border-color: var(
    --amplify-colors-purple-80
  );
}
/* OR */
.amplify-stepperfield__input {
  border-color: var(--amplify-colors-purple-80);
}

Local styling

To override styling on a specific StepperField, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Stepper
Copy
/* styles.css */
.custom-button .amplify-stepperfield__button--decrease,
.amplify-stepperfield__button--increase {
  color: var(--amplify-colors-white);
  background-color: var(--amplify-colors-purple-80);
}

Copy
import { StepperField } from '@aws-amplify/ui-react';

import './styles.css';

<StepperField
  label="Stepper"
  classname="custom-button"
  defaultValue={0}
  min={0}
  max={10}
  step={1}
  labelHidden
/>;


Using data attributes:

Stepper
Copy
/* styles.css */

/* Override only large size styles */
.amplify-stepperfield[data-size='large'] {
  width: 50%;
}


Using style props:

All style props will be applied to the Flex wrapper of the StepperField. To style the input of the StepperField, you can pass a inputStyles prop with the style props you want to apply to the input.

Stepper
Stepper
Copy
import { StepperField, useTheme } from '@aws-amplify/ui-react';

export const StepperFieldStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <StepperField
        label="Stepper"
        defaultValue={0}
        min={0}
        max={10}
        step={1}
        padding="large"
        border={`1px solid ${tokens.colors.primary[60]}`}
      />
      <StepperField
        label="Stepper"
        defaultValue={0}
        min={0}
        max={10}
        step={1}
        inputStyles={{
          backgroundColor: 'primary.10',
        }}
      />
    </>
  );
};


--------------------------------------------------------------------------------

Title: SelectField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/selectfield
HTML Content:
SelectField

SelectField allows users to select from a menu of options.

Theme source
React source
Feedback
Documentation
Props
Demo
Fruit

What's your favorite fruit?

Please select a fruit
Apple
Banana
Orange
Pineapple
Kiwi
Tangerine
size
default
small
large
variation
default
quiet
label
descriptiveText
errorMessage
selectSize
1
2
3
4
5
6
labelHidden
hasError
isDisabled
isMultiple
Copy
<SelectField
  label="Fruit"
  descriptiveText="What's your favorite fruit?"
>
    <option value="apple">Apple</option>
    <option value="banana">Banana</option>
    <option value="orange" disabled>Orange</option>
    <option value="pineapple">Pineapple</option>
    <option value="kiwi">Kiwi</option>
    <option value="tangerine">Tangerine</option>
</SelectField>
Usage

Import the SelectField primitive, and provide a label for accessibility. The <option> tags nested inside the component define the available options in the drop-down list.

Fruit
Apple
Banana
Orange
Zucchini
Copy
import { SelectField } from '@aws-amplify/ui-react';

export const DefaultSelectFieldExample = () => (
  <SelectField label="Fruit">
    <option value="apple">Apple</option>
    <option value="banana">Banana</option>
    <option value="orange">Orange</option>
    <option value="zucchini" disabled>
      Zucchini
    </option>
  </SelectField>
);

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Controlled component

To manually control the SelectField state, you can use the value and onChange props along with React's useState hook.

Fruit
This SelectField is manually controlled
X
Y
Z
Copy
import * as React from 'react';
import { SelectField } from '@aws-amplify/ui-react';

export const SelectFieldControlledExample = () => {
  const [value, setValue] = React.useState('');

  return (
    <SelectField
      label="Fruit"
      labelHidden
      placeholder="This SelectField is manually controlled"
      value={value}
      onChange={(e) => setValue(e.target.value)}
    >
      <option value="x">X</option>
      <option value="y">Y</option>
      <option value="z">Z</option>
    </SelectField>
  );
};

Options

Create a simple SelectField by passing a list to the options prop.

Animals
lions
tigers
bears
This is the same as the example above
lions
tigers
bears
Copy
import { SelectField, Flex } from '@aws-amplify/ui-react';

export const SelectFieldOptionsExample = () => (
  <Flex direction="column">
    <SelectField
      label="Animals"
      options={['lions', 'tigers', 'bears']}
    ></SelectField>

    <SelectField label="This is the same as the example above">
      <option value="lions" label="lions">
        lions
      </option>
      <option value="tigers" label="tigers">
        tigers
      </option>
      <option value="bears" label="bears">
        bears
      </option>
    </SelectField>
  </Flex>
);

Sizes

Use the size prop to change the SelectField size. Available options are small, large, and none (default).

small
small
default
default
large
large
Copy
import { SelectField, Flex } from '@aws-amplify/ui-react';

export const SelectFieldSizeExample = () => (
  <Flex direction="column">
    <SelectField size="small" label="small" labelHidden>
      <option>small</option>
    </SelectField>
    <SelectField label="default" labelHidden>
      <option>default</option>
    </SelectField>
    <SelectField size="large" label="large" labelHidden>
      <option>large</option>
    </SelectField>
  </Flex>
);

Variations

There are two variation styles available: default and quiet.

default
default
quiet
quiet
Copy
import { SelectField, Flex } from '@aws-amplify/ui-react';

export const SelectFieldVariationExample = () => (
  <Flex direction="column">
    <SelectField label="default" labelHidden>
      <option>default</option>
    </SelectField>
    <SelectField variation="quiet" label="quiet" labelHidden>
      <option>quiet</option>
    </SelectField>
  </Flex>
);

Placeholder

Text that appears in the form control when it has no value set.

placeholderExample
This is the placeholder...
This is the option
Copy
import { SelectField } from '@aws-amplify/ui-react';

export const SelectFieldPlaceholderExample = () => (
  <SelectField
    placeholder="This is the placeholder..."
    label="placeholderExample"
    labelHidden
  >
    <option value="option">This is the option</option>
  </SelectField>
);

Descriptive text

The descriptiveText prop will only be visible when label is not hidden (i.e., labelHidden={false}). You can use it to provide some additional description of the field.

SelectField

What do you think of the SelectField?

It is amazing
WOW!
Just incredible
Copy
import { SelectField } from '@aws-amplify/ui-react';

export const SelectFieldDescriptiveTextExample = () => (
  <SelectField
    label="SelectField"
    descriptiveText="What do you think of the SelectField?"
  >
    <option value="amazing">It is amazing</option>
    <option value="wow">WOW!</option>
    <option value="incredible">Just incredible</option>
  </SelectField>
);

Icon

You can change the icon used to expand the SelectField by using the icon prop. You can also change the icon's color by passing the iconColor prop.

Icon example
Check out that Icon! --->
Pretty cool, right?
Copy
import { Icon, SelectField } from '@aws-amplify/ui-react';

const IconArrowDropDown = () => {
  return <Icon pathData="M7 10L12 15L17 10H7Z" ariaLabel="Down arrow" />;
};

export const SelectFieldIconExample = () => (
  <SelectField
    label="Icon example"
    labelHidden
    icon={<IconArrowDropDown />}
    iconColor="red"
    placeholder="Check out that Icon! ---> "
  >
    <option value="cool">Pretty cool, right?</option>
  </SelectField>
);

Disabled state

A disabled field will not be focusable or mutable, and it will not be submitted with form data. Use the isDisabled prop to set the state for the SelectField.

SelectField
You cannot view or select this option
Copy
import { SelectField } from '@aws-amplify/ui-react';

export const SelectFieldDisabledStateExample = () => (
  <SelectField isDisabled label="SelectField" labelHidden>
    <option value="option">You cannot view or select this option</option>
  </SelectField>
);

Multiple selections

Use the isMultiple prop to specify that multiple options can be selected at once.

For Mac: Hold down the command button to select multiple options
For Windows: Hold down the control button to select multiple options
Fruit

What's your favorite fruit?

Apple
Banana
Orange
Pineapple
Kiwi
Tangerine
Copy
import { SelectField } from '@aws-amplify/ui-react';

export const SelectFieldMultipleStateExample = () => (
  <SelectField
    label="Fruit"
    descriptiveText="What's your favorite fruit?"
    isMultiple={true}
  >
    <option value="apple">Apple</option>
    <option value="banana">Banana</option>
    <option value="orange">Orange</option>
    <option value="pineapple">Pineapple</option>
    <option value="kiwi">Kiwi</option>
    <option value="tangerine">Tangerine</option>
  </SelectField>
);

Select size

Use the selectSize prop to set the number of visible options in a drop-down list. If the value of the selectSize attribute is greater than 1, but lower than the total number of options in the list, the browser will add a scroll bar to indicate that there are more options to view.

Fruit

What's your favorite fruit?

Apple
Banana
Orange
Pineapple
Kiwi
Tangerine
Copy
import { SelectField } from '@aws-amplify/ui-react';

export const SelectFieldSelectSizeExample = () => (
  <SelectField
    label="Fruit"
    descriptiveText="What's your favorite fruit?"
    selectSize={3}
  >
    <option value="apple">Apple</option>
    <option value="banana">Banana</option>
    <option value="orange">Orange</option>
    <option value="pineapple">Pineapple</option>
    <option value="kiwi">Kiwi</option>
    <option value="tangerine">Tangerine</option>
  </SelectField>
);

Validation error

Use the hasError and errorMessage props to mark a SelectField as having a validation error.

Fruit
Uh oh

This is a required field.

Copy
import { SelectField } from '@aws-amplify/ui-react';

export const SelectFieldValidationErrorExample = () => (
  <SelectField
    label="Fruit"
    labelHidden
    hasError={true}
    errorMessage="This is a required field."
  >
    <option value="uh oh">Uh oh</option>
  </SelectField>
);

Standard HTML attributes

The SelectField will accept any of the standard HTML attributes that a <select> element accepts. Standard <select> attributes can be found in the MDN Documentation

Fruit
Apple
Banana
Orange
Copy
<SelectField label="Fruit" name="fruit">
  <option value="apple">Apple</option>
  <option value="banana">Banana</option>
  <option value="orange">Orange</option>
</SelectField>

Styling
Theme

You can customize the appearance of all SelectField components in your application with a Theme.

SelectField Theme Source

Fruit
Apple
Banana
Orange
Copy
import { SelectField, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'selectfield-theme',
  tokens: {
    components: {
      selectfield: {
        color: { value: '{colors.blue.60}' },
        fontSize: { value: '{fontSizes.large}' },
        borderColor: { value: '{colors.red.60}' },
        _focus: {
          borderColor: { value: '{colors.red.80}' },
        },
        label: {
          color: { value: '{colors.blue.60}' },
        },
      },
    },
  },
};

export const SelectFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <SelectField label="Fruit">
      <option value="apple">Apple</option>
      <option value="banana">Banana</option>
      <option value="orange">Orange</option>
    </SelectField>
  </ThemeProvider>
);

Icons
Fruit
Apple
Banana
Orange
Copy
import { SelectField, IconsProvider } from '@aws-amplify/ui-react';
import { FiChevronsDown } from 'react-icons/fi';

export const SelectFieldIconProviderExample = () => (
  <IconsProvider
    icons={{
      select: {
        expand: <FiChevronsDown />,
      },
    }}
  >
    <SelectField label="Fruit">
      <option value="apple">Apple</option>
      <option value="banana">Banana</option>
      <option value="orange">Orange</option>
    </SelectField>
  </IconsProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-select	Class applied to the select element
amplify-selectfield	Top level element that wraps the SelectField primitive
amplify-select__wrapper	Class applied to the select wrapper
amplify-select__icon	Class applied to the select icon wrapper
Global styling

To override styling on all SelectFields, you can set the Amplify CSS variables with the built-in .amplify-selectfield class.

Globally styled field
Copy
/* styles.css */
.amplify-selectfield {
  --amplify-components-fieldcontrol-border-color: rebeccapurple;
}

Local styling

To override styling on a specific SelectField, you can use a class selector or style props.

Using a class selector:

Fruit
Please select a fruit
Apple
Banana
Orange
Copy
/* styles.css */
.my-custom-selectfield .amplify-select {
  border-radius: 0;
}


Using style props:

Fruit
Apple
Banana
Orange
Fruit
Apple
Banana
Orange
Copy
import { SelectField, useTheme } from '@aws-amplify/ui-react';

export const SelectFieldStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <SelectField
        label="Fruit"
        padding="xl"
        border={`1px solid ${tokens.colors.primary[60]}`}
      >
        <option value="apple">Apple</option>
        <option value="banana">Banana</option>
        <option value="orange">Orange</option>
      </SelectField>
      <SelectField
        label="Fruit"
        inputStyles={{
          backgroundColor: 'primary.10',
          border: `1px solid ${tokens.colors.primary[60]}`,
        }}
      >
        <option value="apple">Apple</option>
        <option value="banana">Banana</option>
        <option value="orange">Orange</option>
      </SelectField>
    </>
  );
};


--------------------------------------------------------------------------------

Title: SliderField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/sliderfield
HTML Content:
SliderField

SliderField allows users to select a value within a defined range.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Slider
50
label
min
max
step
size
default
large
small
trackSize
emptyTrackColor
filledTrackColor
thumbColor
orientation
horizontal
vertical
isDisabled
isValueHidden
labelHidden
Copy
<SliderField
  label="Slider"
  max={100}
/>
Usage

Import the SliderField component.

Default slider
0
Copy
import { SliderField } from '@aws-amplify/ui-react';

export const DefaultSliderFieldExample = () => {
  return <SliderField label="Default slider" />;
};

Controlled component

To use the SliderField as a controlled component, handle the current value using the value and onChange props.

Controlled slider
50
Copy
import { SliderField } from '@aws-amplify/ui-react';
import * as React from 'react';

export const ControlledSliderFieldExample = () => {
  const [value, setValue] = React.useState(50);

  return (
    <SliderField label="Controlled slider" value={value} onChange={setValue} />
  );
};

Basics

To control the range of the SliderField, use the min and max props. To control the interval between selectable values, use the step prop (defaults to 1). You may also set a defaultValue.

Select your favorite odd number between 1 and 9
5
Copy
import { SliderField } from '@aws-amplify/ui-react';

export const SliderFieldBasicsExample = () => {
  return (
    <SliderField
      label="Select your favorite odd number between 1 and 9"
      min={1}
      max={9}
      step={2}
      defaultValue={5}
    />
  );
};

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

You can hide the value to the right of the label with isValueHidden prop.

Accessibility demo
50
Hide label
Hide value
Copy
import { SliderField, Flex, Button } from '@aws-amplify/ui-react';
import * as React from 'react';

export const SliderFieldAccessibilityExample = () => {
  const [labelHidden, setLabelHidden] = React.useState(false);
  const [isValueHidden, setIsValueHidden] = React.useState(false);

  return (
    <>
      <SliderField
        label="Accessibility demo"
        labelHidden={labelHidden}
        isValueHidden={isValueHidden}
        defaultValue={50}
      />
      <Flex>
        <Button onClick={() => setLabelHidden(!labelHidden)}>
          {labelHidden ? 'Show label' : 'Hide label'}
        </Button>
        <Button onClick={() => setIsValueHidden(!isValueHidden)}>
          {isValueHidden ? 'Show value' : 'Hide value'}
        </Button>
      </Flex>
    </>
  );
};


The SliderField will programmatically update the value of aria-valuenow in response to user input. However, a slider sometimes is used to choose a value that is not, semantically, a number. In these cases, the ariaValuetext attribute is used to provide the appropriate text name for the currently selected value. See MDN using the slider role.

I tend to be more introverted.

Neutral

Copy
import { SliderField, Text } from '@aws-amplify/ui-react';
import * as React from 'react';

const userFeedback = [
  'Strongly disagree',
  'Disagree',
  'Neutral',
  'Agree',
  'Strongly agree',
];

export const SliderFieldAriaExample = () => {
  const [index, setIndex] = React.useState(2);

  return (
    <>
      <SliderField
        ariaValuetext={userFeedback[index]}
        label="I tend to be more introverted."
        value={index}
        onChange={setIndex}
        max={4}
        isValueHidden
      />
      <Text>{userFeedback[index]}</Text>
    </>
  );
};

Forms

To use the SliderField in a form, pass a name prop to the SliderField to access its current value. To disable the SliderField, set the isDisabled prop. A disabled SliderField will not be focusable, mutable, or submit a value with form data.

On a scale from 1-10, how much do you enjoy waterslides?
5
Submit
Disable SelectField
Copy
import { SliderField, Button, Flex } from '@aws-amplify/ui-react';
import * as React from 'react';

export const SliderFieldFormExample = () => {
  const [value, setValue] = React.useState(5);
  const [isDisabled, setIsDisabled] = React.useState(false);

  const handleOnSubmit = (event) => {
    event.preventDefault();
    alert(`Waterslide enjoyment: ${event.target.waterslides.value}`);
  };

  return (
    <form onSubmit={handleOnSubmit}>
      <SliderField
        label="On a scale from 1-10, how much do you enjoy waterslides?"
        name="waterslides"
        min={1}
        max={10}
        value={value}
        onChange={setValue}
        isDisabled={isDisabled}
      />
      <Flex>
        <Button type="submit">Submit</Button>
        <Button onClick={() => setIsDisabled(!isDisabled)}>
          {isDisabled ? 'Enable SelectField' : 'Disable SelectField'}
        </Button>
      </Flex>
    </form>
  );
};

Orientation

To change the orientation from horizontal (default) to vertical, use the orientation prop.

How tall is your cat (in inches)?
9
Copy
import { SliderField } from '@aws-amplify/ui-react';

export const SliderFieldOrientationExample = () => {
  return (
    <SliderField
      label="How tall is your cat (in inches)?"
      orientation="vertical"
      min={3}
      max={20}
      defaultValue={9}
    />
  );
};

Icons

To add icons on either side of the SliderField, you may use the outerStartComponent or outerEndComponent props.

Volume slider
50
Copy
import { SliderField, Icon } from '@aws-amplify/ui-react';

export const SliderFieldIconsExample = () => {
  return (
    <SliderField
      label="Volume slider"
      outerStartComponent={
        <Icon
          ariaLabel="volume-down-icon"
          pathData="M16 7.97V16.02C17.48 15.29 18.5 13.77 18.5 12C18.5 10.23 17.48 8.71 16 7.97ZM5 9V15H9L14 20V4L9 9H5ZM12 8.83V15.17L9.83 13H7V11H9.83L12 8.83Z"
        />
      }
      outerEndComponent={
        <Icon
          ariaLabel="volume-up-icon"
          pathData="M3 8.99998V15H7L12 20V3.99998L7 8.99998H3ZM10 8.82998V15.17L7.83 13H5V11H7.83L10 8.82998ZM16.5 12C16.5 10.23 15.48 8.70998 14 7.96998V16.02C15.48 15.29 16.5 13.77 16.5 12ZM14 3.22998V5.28998C16.89 6.14998 19 8.82998 19 12C19 15.17 16.89 17.85 14 18.71V20.77C18.01 19.86 21 16.28 21 12C21 7.71998 18.01 4.13998 14 3.22998V3.22998Z"
        />
      }
      defaultValue={50}
      size="large"
    />
  );
};

Format value

To format how the value is displayed, you can pass in a render function to formatValue prop.

SliderField with formatted value
50%
Copy
import { SliderField } from '@aws-amplify/ui-react';

export const SliderFieldFormatValueExample = () => {
  const formatValue = (value: number) => {
    return `${value}%`;
  };
  return (
    <SliderField
      label="SliderField with formatted value"
      defaultValue={50}
      formatValue={formatValue}
    />
  );
};

Validation error

To validate the SliderField input, use the hasError and errorMessage props.

Select your age
13

You must be at least 18 years old.

Copy
import { SliderField } from '@aws-amplify/ui-react';
import * as React from 'react';

export const SliderFieldValidationExample = () => {
  const [age, setAge] = React.useState(13);

  return (
    <SliderField
      label="Select your age"
      value={age}
      onChange={setAge}
      hasError={age < 18}
      errorMessage="You must be at least 18 years old."
    />
  );
};

CSS Styling
Theme

You can customize the appearance of all SliderField components in your application with a Theme.

SliderField Theme Source

Themed Slider
50
Copy
import { SliderField, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'slider-theme',
  tokens: {
    components: {
      sliderfield: {
        thumb: {
          width: { value: '{space.xl}' },
          height: { value: '{space.xl}' },
          backgroundColor: { value: '{colors.neutral.90}' },
          borderRadius: { value: '{radii.medium}' },
          _hover: {
            backgroundColor: { value: '{colors.neutral.80}' },
            borderColor: { value: '{colors.neutral.90}' },
          },
          _focus: {
            borderColor: { value: '{colors.green.80}' },
            boxShadow: {
              // @ts-ignore //IGNORE
              value: {
                spreadRadius: '3px',
                color: '{colors.green.20}',
              },
            },
          },
        },
        track: {
          backgroundColor: {
            value: '{colors.blue.20}',
          },
          height: { value: '{fontSizes.medium}' },
        },
        range: {
          backgroundColor: { value: '{colors.blue.80}' },
        },
      },
    },
  },
};

export const SliderFieldThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <SliderField label="Themed Slider" defaultValue={50} labelHidden />
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-sliderfield	Top level element that wraps the SliderField primitive
amplify-sliderfield__group	Class applied to the element that wraps the slider root
amplify-sliderfield__label	Class applied to the slider label
amplify-sliderfield__range	Class applied to the filled in portion of the slider track
amplify-sliderfield__root	Class applied to the slider root which wraps the track and thumb
amplify-sliderfield__thumb	Class applied to the slider thumb
amplify-sliderfield__track	Class applied to the slider track
Global styling

To override styling on all SliderField components, you can set the Amplify CSS variables or use the target classes.

Globally Styled Slider
50
/* styles.css */
.amplify-sliderfield {
  --amplify-components-sliderfield-range-background-color: var(
    --amplify-colors-orange-60
  );
}

Local styling

To override styling on a specific SliderField, you can use class selectors or style props.

Using a class selector:

Note that .amplify-sliderfield__range applies to the filled-in portion of the SliderField track, and .amplify-sliderfield__track applies to the empty portion.

Classname Slider
50
/* styles.css */
.custom-slider .amplify-sliderfield__track {
  background-color: var(--amplify-colors-purple-80);
}

import { SliderField } from '@aws-amplify/ui-react';
import './styles.css';

<SliderField
  className="custom-slider"
  label="Classname Slider"
  defaultValue={50}
/>;


Using style props:

There are several props you can use to style different parts of the SliderField:

filledTrackColor applies to the filled-in part of the SliderField
emptyTrackColor applies to the empty part of the SliderField
thumbColor applies to the thumb component that users can slide
trackSize applies to the width of the track itself (e.g., 15px)
size applies to the overall size of the SliderField, including the thumb (options include 'small', 'large', and default)
Style Props Slider
50
Copy
import { SliderField, useTheme } from '@aws-amplify/ui-react';

export const SliderFieldStylePropsExample = () => {
  const { tokens } = useTheme();

  return (
    <SliderField
      label="Style Props Slider"
      filledTrackColor={tokens.colors.green[80]}
      emptyTrackColor={tokens.colors.green[20]}
      thumbColor={tokens.colors.red[60]}
      trackSize="15px"
      defaultValue={50}
    />
  );
};


--------------------------------------------------------------------------------

Title: SearchField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/searchfield
HTML Content:
SearchField

SearchField accepts query text for search.

React source
Feedback
Documentation
Props

Users may clear the field by hitting the Esc key or by clicking the clear button. When users hit Enter key or click the search icon, the onSubmit event handler will be fired.

Demo
Search
label
placeholder
size
default
small
large
variation
default
quiet
hasSearchButton
hasSearchIcon
labelHidden
isDisabled
Copy
<SearchField
  label="Search"
  placeholder="Search here..."
/>
Usage

Import the SearchField primitive, and provide a label for accessibility/usability.

search
Copy
import { SearchField } from '@aws-amplify/ui-react';

export const DefaultSearchFieldExample = () => <SearchField label="search" />;


Note: The clear text (x) button will show after user has entered text.

Controlled component
search
Copy
import { SearchField } from '@aws-amplify/ui-react';
import * as React from 'react';

export const SearchFieldControlledExample = () => {
  const [value, setValue] = React.useState('');

  const onChange = (event) => {
    setValue(event.target.value);
  };

  // It is your responsibility to set up onClear
  const onClear = () => {
    setValue('');
  };

  return (
    <SearchField
      label="search"
      onChange={onChange}
      onClear={onClear}
      value={value}
    />
  );
};


Note: When you use SearchField in controlled way, it is your responsibility to set up onClear other than onChange since the input value is under your control.

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Placeholder

Text that appears in the form control when it has no value set.

search
Copy
import { SearchField } from '@aws-amplify/ui-react';

export const PlaceholderSearchFieldExample = () => (
  <SearchField label="search" placeholder="Search..." />
);

Sizes

Use the size prop to change SearchField size. Available options are small, large, and none (default).

search
search
search
Copy
import { SearchField, Flex } from '@aws-amplify/ui-react';

export const SizeSearchFieldExample = () => (
  <Flex direction="column">
    <SearchField label="search" size="small" />
    <SearchField label="search" />
    <SearchField label="search" size="large" />
  </Flex>
);

Variations

There are two variation styles available: default and quiet.

search
search
Copy
import { SearchField, Flex } from '@aws-amplify/ui-react';

export const VariationSearchFieldExample = () => (
  <Flex direction="column">
    <SearchField label="search" />
    <SearchField label="search" variation="quiet" />
  </Flex>
);

Forward refs
Important

Refs are an escape hatch to the underlying DOM element of our primitives, but are typically not necessary for most applications.

See Refs and the DOM and Forwarding Refs for more information.

The standard ref prop will forward to the input element, the searchButtonRef prop forwards to the search button element.

The following is a contrived example demonstrating use of the ref props:

Password
Copy
import * as React from 'react';
import { SearchField } from '@aws-amplify/ui-react';

export const RefExample = () => {
  const inputRef = React.useRef(null);
  const searchButtonRef = React.useRef(null);

  const onClick = React.useCallback(() => {
    inputRef.current.focus();
    alert(`You searched for: ${inputRef.current.value}`);
  }, []);

  React.useEffect(() => {
    const searchButtonRefCurrent = searchButtonRef.current;
    if (searchButtonRef && searchButtonRefCurrent) {
      // Note: this example is contrived to demonstrate using refs.
      // Use the `onSubmit` prop on `SearchField` instead which
      // responds to input field `Enter` keypresses and Submit button clicks.
      searchButtonRefCurrent.addEventListener('click', onClick, false);
      return () => {
        searchButtonRefCurrent.removeEventListener('click', onClick, false);
      };
    }
  }, [onClick]);

  return (
    <SearchField
      label="Password"
      ref={inputRef}
      searchButtonRef={searchButtonRef}
    />
  );
};

Standard HTML attributes

The SearchField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation

Search
Copy
<SearchField label="Search" name="search"/>

Styling
Theme

You can customize the appearance of all SearchField components in your application with a Theme.

SearchField Theme Source

search
Copy
import { SearchField, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'searchfield-theme',
  tokens: {
    components: {
      searchfield: {
        button: {
          color: { value: '{colors.blue.80}' },
          backgroundColor: { value: '{colors.blue.20}' },
          _focus: {
            backgroundColor: {
              value: '{colors.blue.60}',
            },
            color: { value: 'white' },
          },
          _hover: {
            backgroundColor: {
              value: '{colors.blue.80}',
            },
            color: { value: 'white' },
          },
        },
      },
    },
  },
};

export const SearchFieldThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <SearchField label="search" />
    </ThemeProvider>
  );
};

Icons
Password
Copy
import { SearchField, IconsProvider } from '@aws-amplify/ui-react';
import { FiSearch } from 'react-icons/fi';

export const SearchFieldIconExample = () => (
  <IconsProvider
    icons={{
      searchField: {
        search: <FiSearch />,
      },
    }}
  >
    <SearchField label="Password" />
  </IconsProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-searchfield	Top level element that wraps the SearchField primitive
amplify-searchfield__clear	Class applied to the search field clear button
amplify-searchfield__search	Class applied to the search button
Global styling

To override styling on all SearchField primitives, you can set the Amplify CSS variables or use the built-in .amplify-searchfield class.

/* styles.css */
:root {
  --amplify-components-button-color: black;
  --amplify-components-button-border-color: black;
  --amplify-components-fieldcontrol-border-color: black;
}
/* OR */
.amplify-searchfield {
  --amplify-components-button-color: black;
  --amplify-components-button-border-color: black;
  --amplify-components-fieldcontrol-border-color: black;
}

Globally styled search field
Copy
/* styles.css */
.amplify-searchfield {
  --amplify-components-button-color: rebeccapurple;
  --amplify-components-button-border-color: rebeccapurple;
  --amplify-components-fieldcontrol-border-color: rebeccapurple;
}

Local styling

To override styling on a specific SearchField, you can use a class selector or style props.

Using a class selector:

Square password field
Copy
/* styles.css */
.custom-searchfield-class .amplify-input,
.custom-searchfield-class .amplify-button {
  border-radius: 0;
}


Using style props:

All style props will be applied to the Flex wrapper of the SearchField. To style the input of the SearchField, you can pass a inputStyles prop with the style props you want to apply to the input.

search
search
Copy
import { SearchField, useTheme } from '@aws-amplify/ui-react';

export const SearchFieldStyledPropsExample = () => {
  const { tokens } = useTheme();

  return (
    <>
      <SearchField
        label="search"
        padding="xl"
        border={`1px solid ${tokens.colors.primary[60]}`}
      />
      <SearchField
        label="search"
        inputStyles={{
          border: `1px solid ${tokens.colors.primary[60]}`,
          backgroundColor: tokens.colors.primary[10],
        }}
      />
    </>
  );
};


--------------------------------------------------------------------------------

Title: RadioGroupField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/radiogroupfield
HTML Content:
RadioGroupField

RadioGroupField allows users to select a single option from a list of mutually exclusive options.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Language
Language
HTML
CSS
JavaScript
legend
labelPosition
default
start
end
top
bottom
variation
plain (default)
outlined
direction
column
row
size
default
small
large
isDisabled
Copy
<RadioGroupField
  legend="Language"
  name="language"
>
  <Radio value="HTML">HTML</Radio>
  <Radio value="CSS">CSS</Radio>
  <Radio value="JavaScript">JavaScript</Radio>
</RadioGroupField>
Usage

Import the Radio and RadioGroupField components, and nest the Radio options inside the RadioGroupField.

RadioGroupField requires both legend and name for accessibility and form submission, respectively. Radio only requires the value prop, which will be submitted with form data.

You also have the option to set a Radio as pre-selected by passing its value to the defaultValue prop on the RadioGroupField.

Animal
Animal
Dog
Cat
Bird
Copy
import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

export const BasicExample = () => (
  <RadioGroupField legend="Animal" name="animal" defaultValue="Dog">
    <Radio value="Dog">Dog</Radio>
    <Radio value="Cat">Cat</Radio>
    <Radio value="Bird">Bird</Radio>
  </RadioGroupField>
);

Controlled component

To manually control the RadioGroupField state, you can use the value and onChange props.

Fruit
Fruit
🍎
🍌
🥕
Copy
import * as React from 'react';
import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

export const ControlledExample = () => {
  const [value, setValue] = React.useState('apple');

  return (
    <RadioGroupField
      legend="Fruit"
      name="fruit"
      value={value}
      onChange={(e) => setValue(e.target.value)}
    >
      <Radio value="apple">🍎</Radio>
      <Radio value="banana">🍌</Radio>
      <Radio value="carrot">🥕</Radio>
    </RadioGroupField>
  );
};

Sizes

Use the size prop to change the RadioGroupField size. Available options are small, large, and none (default).

small
small
Small
default
default
Default
large
large
Large
Copy
import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

export const SizeExample = () => (
  <>
    <RadioGroupField legend="small" name="small" size="small" legendHidden>
      <Radio value="small">Small</Radio>
    </RadioGroupField>
    <RadioGroupField legend="default" name="default" legendHidden>
      <Radio value="default">Default</Radio>
    </RadioGroupField>
    <RadioGroupField legend="large" name="large" size="large" legendHidden>
      <Radio value="large">Large</Radio>
    </RadioGroupField>
  </>
);

Direction

Use the direction prop to change the RadioGroupField direction. Available options are row and column (default).

Column
Column
Top
To
Bottom
Row
Row
Left
To
Right
Copy
import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

export const DirectionExample = () => (
  <>
    <RadioGroupField legend="Column" name="column">
      <Radio value="top">Top</Radio>
      <Radio value="to-column">To</Radio>
      <Radio value="bottom">Bottom</Radio>
    </RadioGroupField>
    <RadioGroupField legend="Row" name="row" direction="row">
      <Radio value="left">Left</Radio>
      <Radio value="to-row">To</Radio>
      <Radio value="right">Right</Radio>
    </RadioGroupField>
  </>
);

Label position

Use the labelPosition prop to control where the label is in relation to the Radio. You may pass labelPosition to either the RadioGroupField or individual Radios.

Default
Default
Default
Start
Start
Start
Top
Top
Top
Bottom
Bottom
Bottom
Copy
import { Radio, RadioGroupField, Flex } from '@aws-amplify/ui-react';

export const LabelPositionExample = () => (
  <Flex>
    <RadioGroupField legend="Default" name="default" legendHidden>
      <Radio value="default">Default</Radio>
    </RadioGroupField>

    <RadioGroupField
      legend="Start"
      name="start"
      labelPosition="start"
      legendHidden
    >
      <Radio value="start">Start</Radio>
    </RadioGroupField>

    <RadioGroupField legend="Top" name="top" labelPosition="top" legendHidden>
      <Radio value="top">Top</Radio>
    </RadioGroupField>

    <RadioGroupField
      legend="Bottom"
      name="bottom"
      labelPosition="bottom"
      legendHidden
    >
      <Radio value="bottom">Bottom</Radio>
    </RadioGroupField>
  </Flex>
);

State

The available RadioGroupField states include isDisabled and isReadOnly. A disabled field will be not be focusable not mutable and will not be submitted with form data. A readonly field cannot be edited by the user, but will be submitted with form data.

Disabled radios and radio group
Disabled Radio
Disabled Radio
Option 1
Option 2 is disabled
Option 3
Disabled RadioGroupField
Disabled RadioGroupField
All
Options
Disabled
Copy
import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

export const DisabledExample = () => (
  <>
    <RadioGroupField legend="Disabled Radio" name="disabled-radio">
      <Radio value="option-1">Option 1</Radio>
      <Radio value="option-2" isDisabled>
        Option 2 is disabled
      </Radio>
      <Radio value="option-3">Option 3</Radio>
    </RadioGroupField>

    <RadioGroupField
      legend="Disabled RadioGroupField"
      name="disabled-field"
      isDisabled
    >
      <Radio value="all">All</Radio>
      <Radio value="options">Options</Radio>
      <Radio value="disabled">Disabled</Radio>
    </RadioGroupField>
  </>
);

Read-only radio group
Read-only
Read-only
I love Amplify UI 😍
I like Amplify UI 👍
I appreciate Amplify UI 🙏
Copy
import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

export const ReadOnlyExample = () => (
  <RadioGroupField
    legend="Read-only"
    name="read-only"
    defaultValue="love"
    isReadOnly
  >
    <Radio value="love">I love Amplify UI 😍</Radio>
    <Radio value="like">I like Amplify UI 👍</Radio>
    <Radio value="appreciate">I appreciate Amplify UI 🙏</Radio>
  </RadioGroupField>
);

Validation error

Use the hasError and errorMessage props to mark a RadioGroupField as having a validation error.

Language
Language
HTML
CSS
JavaScript

This is a required field. Please select an option.

Copy
import * as React from 'react';
import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

const options = ['HTML', 'CSS', 'JavaScript'];

export const ErrorExample = () => {
  const [language, setLanguage] = React.useState(null);

  return (
    <RadioGroupField
      legend="Language"
      name="example-12"
      onChange={(e) => setLanguage(e.target.value)}
      errorMessage="This is a required field. Please select an option."
      hasError={!language}
      legendHidden
    >
      {options.map((option) => (
        <Radio key={option} value={option}>
          {option}
        </Radio>
      ))}
    </RadioGroupField>
  );
};

Accessibility

An HTML <legend> element is automatically associated with the RadioGroupField's <fieldset> via the legend prop so that the radiogroup is accessibly labelled. For Radio, a <label> element will be automatically generated via the label prop. Both can accept a string or ReactNode.

If no id is provided to <Radio>, one will be automatically generated and connected to both the label and the form control; in this case the input[type="radio"].

How can I visually hide the legend or labels while maintaining accessibility?

In some applications it may be desirable to hide the legend when the field purpose is visually apparent such as a search field with button. The legendHidden prop can be used on RadioGroupField to visually hide the <legend> while still keeping it available to screenreaders. Similarily, the labelHidden prop can be used to accessibly hide a <Radio> element's <label>

UX Tip: refrain hiding legends and labels if doing so hides important information needed by the user to fill out the field.

CSS Styling
Theme

You can customize the appearance of all RadioGroupField components in your application with a Theme.

RadioGroupField Theme Source

Themed example
Themed example
Blue
Navy
Cerulean
Copy
import { Radio, RadioGroupField, ThemeProvider } from '@aws-amplify/ui-react';

const theme = {
  name: 'radiogroup-theme',
  tokens: {
    components: {
      radiogroup: {
        radio: {
          borderWidth: { value: '{borderWidths.small}' },
          borderColor: { value: '{colors.blue.60}' },
          backgroundColor: { value: '{colors.blue.20}' },
          _checked: {
            color: { value: '{colors.blue.80}' },
          },
          label: {
            color: { value: '{colors.blue.80}' },
          },
        },
        legend: {
          color: { value: '{colors.blue.80}' },
          fontWeight: { value: '{fontWeights.bold}' },
        },
      },
    },
  },
};

export const RadioGroupFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <RadioGroupField legend="Themed example" name="themed" defaultValue="blue">
      <Radio value="blue">Blue</Radio>
      <Radio value="navy">Navy</Radio>
      <Radio value="cerulean">Cerulean</Radio>
    </RadioGroupField>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-radio	Top level element that wraps the Radio primitive
amplify-radio__button	Class applied to the displayed radio button
amplify-radio__input	Class applied to the visually hidden radio input
amplify-radio__label	Class applied to the radio label
amplify-radiogroupfield	Top level element that wraps the RadioGroupField primitive
amplify-radiogroup	Class applied to the radio group wrapper
Global styling

To override styling on all Radio buttons, you can set the Amplify CSS variables or use the built-in .amplify-radio__button class.

Colors
Colors

A

B

C

/* styles.css */
[data-amplify-theme] {
  --amplify-components-radio-button-background-color: green;
  --amplify-components-radio-button-border-color: lightgreen;
}
/* OR */
.amplify-radio__button {
  background-color: green;
  border-color: lightgreen;
}


To replace Radio button styling, unset it:

.amplify-radio__button {
  all: unset;
  /* Add your styling here*/
}

Local styling

To override styling on a specific Radio, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Colors
Colors

Red

Orange

Yellow

Copy
/* styles.css */
.custom-radio .amplify-radio__input:checked + .amplify-radio__button {
  background-color: orange;
  border-color: red;
  color: yellow;
}

import { Radio, RadioGroupField } from '@aws-amplify/ui-react';

<RadioGroupField legend="Language" name="language" defaultValue="html">
  <Radio value="html" className="custom-radio">
    html
  </Radio>
</RadioGroupField>;


Using data attributes:

/* styles.css */

/* Override only large size styles */
.amplify-radiogroupfield[data-size='large'] {
  font-size: 1.25rem;
}


--------------------------------------------------------------------------------

Title: PhoneNumberField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/phonenumberfield
HTML Content:
PhoneNumberField

PhoneNumberField allows users to input phone numbers.

React source
Feedback
Documentation
Props
Demo
Phone number

Please enter your phone number

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
label
labelHidden
descriptiveText
placeholder
size
default
small
large
variation
default
quiet
errorMessage
hasError
isDisabled
isReadOnly
Copy
<PhoneNumberField
  defaultDialCode="+1"
  label="Phone number"
  descriptiveText="Please enter your phone number"
  placeholder="234-567-8910"
/>
Usage

Import the PhoneNumberField component and provide a label for accessibility/usability as well as a defaultDialCode which will auto-populate the dial code select field.

Phone Number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
import { PhoneNumberField } from '@aws-amplify/ui-react';

export const DefaultPhoneNumberFieldExample = () => (
  <PhoneNumberField label="Phone Number" defaultDialCode="+1" />
);

Dial Code Select Properties
All countryCode fields are being deprecated in favor of the new dialCode fields. If you still have instances of defaultCountryCode, countryCodeList, countryCodeName, countryCodeLabel, and onCountryCodeChange then please update these to the new dialCode props listed below.

The dial code selector can be customized by setting several properties when using the PhoneNumberField primitive. The custom properties specific to the dial code selector are the following:

defaultDialCode (required): The default dial code that will be selected upon render
dialCodeList: An array of dial codes (strings) used as options in the dial code selector
dialCodeName: A name used when handling form submission for the dial code selector
dialCodeLabel: A hidden accessible label for the dial code selector
onDialCodeChange: A custom change handler for the dial code selector
If both defaultDialCode, dialCodeList, dialCodeName, dialCodeLabel, and onDialCodeChange and the corresponding countryCode prop are provided, then the value in the dialCode prop will be preferred.
Phone Number
Dial Code
+1
+44
+52
+86
+91
Copy
import { PhoneNumberField } from '@aws-amplify/ui-react';

export const DialCodeSelectExample = () => (
  <PhoneNumberField
    label="Phone Number"
    defaultDialCode="+7"
    dialCodeList={['+1', '+44', '+52', '+86', '+91']}
    dialCodeName="dial_code"
    dialCodeLabel="Dial Code"
    onDialCodeChange={(e) => alert(`Dial Code changed to: ${e.target.value}`)}
  />
);

Autocomplete - supporting password managers

Use the autoComplete prop to tell the browser how to populate the PhoneNumberField. By default, the PhoneNumberField primitive uses tel-national as the autoComplete property for the text field and tel-country-code as the autoComplete property for the dial code selector.

If the PhoneNumberField primitive is intended to be used in a form that is compatible with most password managers, the autoComplete property should be set to username (see Password Form Styles that Chromium Understands).

Phone Number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Sign In
Copy
import { Flex, PhoneNumberField, Button } from '@aws-amplify/ui-react';

export const AutoCompleteExample = () => {
  const handleSubmit = (event) => {
    event.preventDefault();
    alert(
      `Phone number submitted with form: ${event.target.phone_number.value}`
    );
  };

  return (
    <Flex as="form" direction="column" gap="1rem" onSubmit={handleSubmit}>
      <PhoneNumberField
        autoComplete="username"
        label="Phone Number"
        name="phone_number"
        defaultDialCode="+1"
      />
      <Button type="submit">Sign In</Button>
    </Flex>
  );
};

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Phone Number
Dial code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
import { PhoneNumberField } from '@aws-amplify/ui-react';

export const AccessibilityExample = () => (
  <PhoneNumberField
    label="Phone Number"
    labelHidden={true}
    defaultDialCode="+1"
    placeholder="Phone Number"
    dialCodeLabel="Dial code"
  />
);

Sizes

PhoneNumberField sizes are designed to match the styling of other form field components such as Buttons. There are three sizes: 'small', (default), and 'large'.

Small
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Small
Default
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Default
Large
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Large
Copy
import { PhoneNumberField, Flex, Button } from '@aws-amplify/ui-react';

export const SizeExample = () => (
  <Flex direction="column" gap="1rem">
    <Flex>
      <PhoneNumberField
        defaultDialCode="+1"
        label="Small"
        size="small"
        labelHidden
      />
      <Button size="small">Small</Button>
    </Flex>
    <Flex>
      <PhoneNumberField defaultDialCode="+1" label="Default" labelHidden />
      <Button>Default</Button>
    </Flex>
    <Flex>
      <PhoneNumberField
        defaultDialCode="+1"
        label="Large"
        size="large"
        labelHidden
      />
      <Button size="large">Large</Button>
    </Flex>
  </Flex>
);

Variations

There are two variation styles available: default and quiet.

Default
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Quiet
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
import { PhoneNumberField, Flex } from '@aws-amplify/ui-react';

export const VariationExample = () => (
  <Flex direction="column">
    <PhoneNumberField defaultDialCode="+1" label="Default" />
    <PhoneNumberField defaultDialCode="+1" label="Quiet" variation="quiet" />
  </Flex>
);

Descriptive text

To provide additional descriptive text of the field's requirements, use the descriptiveText prop. To customize the descriptive text, you may pass a Text component as the prop's value.

Phone Number

This is basic descriptive text

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Phone Number

This is customized descriptive text

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
import { PhoneNumberField, Text } from '@aws-amplify/ui-react';

export const DescriptiveTextExample = () => (
  <>
    <PhoneNumberField
      defaultDialCode="+1"
      label="Phone Number"
      descriptiveText="This is basic descriptive text"
    />
    <PhoneNumberField
      defaultDialCode="+1"
      label="Phone Number"
      descriptiveText={
        <Text
          color="rebeccapurple"
          fontStyle="normal"
          fontSize="1.2rem"
          as="span"
        >
          This is customized descriptive text
        </Text>
      }
    />
  </>
);

States

The available PhoneNumberField states include isDisabled and isReadOnly. A disabled field will be not be focusable, mutable, or submitted with form data. A readonly field cannot be edited by the user.

Disabled

You can't submit me

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Readonly

You can't edit me

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
import { PhoneNumberField, Flex } from '@aws-amplify/ui-react';

export const StatesExample = () => (
  <Flex direction="column" gap="2rem">
    <PhoneNumberField
      defaultDialCode="+1"
      label="Disabled"
      isDisabled={true}
      descriptiveText="You can't submit me"
    />
    <PhoneNumberField
      defaultDialCode="+1"
      label="Readonly"
      isReadOnly={true}
      descriptiveText="You can't edit me"
    />
  </Flex>
);

Required field

Use the isRequired prop to specify a required field. If a user attempts to submit a field that is both required and empty, they will be prompted to fill out the field.

Phone Number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Submit
Copy
import { PhoneNumberField, Flex, Button } from '@aws-amplify/ui-react';

export const RequiredFieldExample = () => {
  const handleSubmit = (event) => {
    event.preventDefault();
    alert(
      `Phone number submitted with form: ${event.target.phone_number.value}`
    );
  };

  return (
    <Flex as="form" direction="column" onSubmit={handleSubmit}>
      <PhoneNumberField
        defaultDialCode="+1"
        label="Phone Number"
        name="phone_number"
        isRequired={true}
      />
      <Button type="submit" width="10rem">
        Submit
      </Button>
    </Flex>
  );
};


There is no default styling for required form fields. Customize the label or descriptiveText to instruct the user of the required field.

Primary phone number

Required

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998

Secondary phone number(required)

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Submit
Copy
import { PhoneNumberField, Flex, Button, Text } from '@aws-amplify/ui-react';

export const RequiredFieldStyledExample = () => {
  const handleSubmit = (event) => {
    event.preventDefault();
    alert(
      `Primary phone number: ${event.target.primary_phone.value} \nSecondary phone number: ${event.target.secondary_phone.value}`
    );
  };

  return (
    <Flex as="form" direction="column" onSubmit={handleSubmit}>
      <PhoneNumberField
        defaultDialCode="+1"
        label="Primary phone number"
        name="primary_phone"
        descriptiveText={
          <Text as="span" fontSize="0.8rem" color="red" fontStyle="italic">
            Required
          </Text>
        }
        isRequired={true}
      />
      <PhoneNumberField
        defaultDialCode="+1"
        label={
          <Text>
            Secondary phone number
            <Text as="span" fontSize="0.8rem" color="red" padding="0.25rem">
              (required)
            </Text>
          </Text>
        }
        name="secondary_phone"
        isRequired={true}
      />
      <Button type="submit">Submit</Button>
    </Flex>
  );
};

Validation error

Use the hasError and errorMessage fields to mark a PhoneNumberField as having a validation error.

Phone number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998

Not a valid phone number! 😱

Copy
import { PhoneNumberField } from '@aws-amplify/ui-react';

export const ValidationErrorExample = () => (
  <PhoneNumberField
    defaultDialCode="+1"
    label="Phone number"
    defaultValue="1234"
    hasError={true}
    errorMessage="Not a valid phone number! 😱"
  />
);

Forward refs
Important

Refs are an escape hatch to the underlying DOM element of our primitives, but are typically not necessary for most applications.

See Refs and the DOM and Forwarding Refs for more information.

The standard ref prop will forward to the underlying input element, and the dialCodeRef prop forwards to the dial code select element.

The following is a contrived example demonstrating use of the ref and dialCodeRef props:

Phone number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998

`inputRef` value:

Copy
import { PhoneNumberField, Flex, Text } from '@aws-amplify/ui-react';
import * as React from 'react';

export const RefsExample = () => {
  const inputRef = React.useRef(null);
  const dialCodeRef = React.useRef(null);

  const [inputRefValue, setInputRefValue] = React.useState('');

  const onBlur = () => {
    dialCodeRef.current.focus();
    setInputRefValue(inputRef.current.value);
  };

  return (
    <Flex direction="column">
      <PhoneNumberField
        ref={inputRef}
        dialCodeRef={dialCodeRef}
        label="Phone number"
        defaultDialCode="+1"
        onBlur={onBlur}
      />
      <Text>`inputRef` value: {inputRefValue}</Text>
    </Flex>
  );
};

Standard HTML attributes

The PhoneNumberField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation

Phone Number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
<PhoneNumberField label="Phone Number" name="phone"/>

CSS Styling
Theme

You can customize the appearance of all PhoneNumberField components in your application with a Theme.

PhoneNumberField Theme Source

Themed field
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
import { ThemeProvider, PhoneNumberField } from '@aws-amplify/ui-react';

const theme = {
  name: 'phonenumber-theme',
  tokens: {
    components: {
      phonenumberfield: {
        //these design tokens will apply to both the select and input that are part of the phonenumber field
        color: { value: '{colors.blue.60}' },
        fontSize: { value: '{fontSizes.large}' },
        borderColor: { value: '{colors.neutral.80}' },
        _focus: {
          borderColor: { value: '{colors.neutral.100}' },
        },
      },
    },
  },
};

export const PhoneNumberFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <PhoneNumberField
      label="Themed field"
      defaultDialCode="+1"
      labelHidden={true}
    />
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-countrycodeselect	Class applied to the Dial Code Select within the PhoneNumberField primitive
amplify-dialcodeselect	Class applied to the Dial Code Select within the PhoneNumberField primitive
amplify-phonenumberfield	Top level element that wraps the PhoneNumberField primitive
Global styling

To override styling on all PhoneNumberField primitives, you can set the Amplify CSS variables with the built-in .amplify-phonenumberfield and .amplify-dialcodeselect class.

Globally styled field
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
/* styles.css */
.amplify-phonenumberfield,
.amplify-dialcodeselect {
  --amplify-components-fieldcontrol-border-color: rebeccapurple;
}

Local styling

To override styling on a specific PhoneNumberField, you can use a class selector or style props.

Using a class selector:

Square field
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
/* styles.css */
.custom-phonenumberfield-class .amplify-phonenumberfield,
.custom-phonenumberfield-class .amplify-dialcodeselect {
  border-radius: 0;
}


Using style props:

All style props will be applied to the Flex wrapper of the PhoneNumberField. To style the input of the PhoneNumberField, you can pass a inputStyles prop with the style props you want to apply to the input.

Phone Number:

Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Phone number
Country code
+1
+7
+20
+27
+30
+31
+32
+33
+34
+36
+39
+40
+41
+43
+44
+45
+46
+47
+48
+49
+51
+52
+53
+54
+55
+56
+57
+58
+60
+61
+62
+63
+64
+65
+66
+81
+82
+84
+86
+90
+91
+92
+93
+94
+95
+98
+212
+213
+216
+218
+220
+221
+222
+223
+224
+225
+226
+227
+228
+229
+230
+231
+232
+233
+234
+235
+236
+237
+238
+239
+240
+241
+242
+243
+244
+245
+246
+248
+249
+250
+251
+252
+253
+254
+255
+256
+257
+258
+260
+261
+262
+263
+264
+265
+266
+267
+268
+269
+290
+291
+297
+298
+299
+345
+350
+351
+352
+353
+354
+355
+356
+357
+358
+359
+370
+371
+372
+373
+374
+375
+376
+377
+378
+379
+380
+381
+382
+385
+386
+387
+389
+420
+421
+423
+500
+501
+502
+503
+504
+505
+506
+507
+508
+509
+537
+590
+591
+593
+594
+595
+596
+597
+598
+599
+670
+672
+673
+674
+675
+676
+677
+678
+679
+680
+681
+682
+683
+685
+686
+687
+688
+689
+690
+691
+692
+850
+852
+853
+855
+856
+872
+880
+886
+960
+961
+962
+963
+964
+965
+966
+967
+968
+970
+971
+972
+973
+974
+975
+976
+977
+992
+993
+994
+995
+996
+998
Copy
import { PhoneNumberField, Text, useTheme } from '@aws-amplify/ui-react';

export const StylePropsExample = () => {
  const { tokens } = useTheme();

  return (
    <>
      <PhoneNumberField
        defaultDialCode="+1"
        label={
          <Text fontWeight="bold" fontSize={tokens.fontSizes.large}>
            Phone Number:
          </Text>
        }
        padding="xl"
        border={`1px solid ${tokens.colors.primary[60]}`}
      />
      <PhoneNumberField
        defaultDialCode="+1"
        label="Phone number"
        inputStyles={{
          backgroundColor: 'primary.10',
        }}
      />
    </>
  );
};


--------------------------------------------------------------------------------

Title: PasswordField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/passwordfield
HTML Content:
PasswordField

PasswordField allows users to input passwords with the convenience of full password manager support.

React source
Feedback
Documentation
Props
Demo
Password

Please enter password

Password is hidden
autoComplete
current-password
new-password
defaultValue
descriptiveText
errorMessage
hasError
isDisabled
isReadOnly
isRequired
label
labelHidden
name
placeholder
size
Defaul
Small
Large
value
variation
Default
Quiet
hideShowPassword
Copy


<PasswordField
  autoComplete="new-password"
  descriptiveText="Please enter password"
  label="Password"
  name="password"
  size="small"
/>
Usage

Import the PasswordField component and provide a label for accessibility/usability.

Password
Password is hidden
Copy
import { PasswordField } from '@aws-amplify/ui-react';

export const DefaultPasswordFieldExample = () => {
  return <PasswordField label="Password" />;
};

Hiding the show password button

Use the hideShowPassword prop to hide the show password button.

Password
HideShowPassword: true
Copy
import * as React from 'react';
import { PasswordField, Button, Flex } from '@aws-amplify/ui-react';

export const HidePasswordFieldExample = () => {
  const [hideShowPassword, setHideShowPassword] = React.useState(true);
  const toggleHide = () => {
    setHideShowPassword(!hideShowPassword);
  };
  return (
    <Flex direction="column">
      <PasswordField
        label="Password"
        name="password"
        hideShowPassword={hideShowPassword}
      />
      <Button onClick={toggleHide}>
        HideShowPassword: {hideShowPassword.toString()}
      </Button>
    </Flex>
  );
};

Autocomplete - supporting password managers

Use the autoComplete prop to tell browser how to populate a password field. Options for autoComplete are current-password (default) and new-password.

If customers are logging in, setting autoComplete is not required because current-password is the default. If customers are signing up for a new account, set autoComplete to new-password.

See MDN for more information on autocomplete.

Signup form example: new-password

Sign Up
Username
Password

Password must be at least 8 characters

Password is hidden
Sign Up
Copy
import {
  Flex,
  Heading,
  TextField,
  PasswordField,
  Button,
  useTheme,
} from '@aws-amplify/ui-react';

export const SignUpFormExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex as="form" direction="column" gap={tokens.space.medium}>
      <Heading level={3}>Sign Up</Heading>
      <TextField label="Username" name="username" autoComplete="username" />
      <PasswordField
        label="Password"
        name="password"
        autoComplete="new-password"
        descriptiveText="Password must be at least 8 characters"
      />
      <Button type="submit" onClick={(e) => e.preventDefault()}>
        Sign Up
      </Button>
    </Flex>
  );
};


Login form example: current-password (default)

Login
Username
Password
Password is hidden
Login
Copy
import {
  Button,
  Flex,
  Heading,
  PasswordField,
  TextField,
  useTheme,
} from '@aws-amplify/ui-react';

export const LoginFormExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex as="form" direction="column" gap={tokens.space.medium}>
      <Heading level={3}>Login</Heading>
      <TextField label="Username" name="username" autoComplete="username" />
      <PasswordField
        label="Password"
        name="password"
        autoComplete="current-password"
      />
      <Button type="submit" onClick={(e) => e.preventDefault()}>
        Login
      </Button>
    </Flex>
  );
};


Change password example: current-password and new-password

Change Password
Username
Current password

Password must be at least 8 characters

Password is hidden
New password

Password must be at least 8 characters

Password is hidden
Confirm password
Password is hidden
Submit
Copy
import {
  Flex,
  Heading,
  TextField,
  PasswordField,
  Button,
  useTheme,
} from '@aws-amplify/ui-react';

export const ChangePasswordFormExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex as="form" direction="column" gap={tokens.space.medium}>
      <Heading level={3}>Change Password</Heading>
      <TextField label="Username" name="username" autoComplete="username" />
      <PasswordField
        label="Current password"
        name="current_password"
        autoComplete="current-password"
        descriptiveText="Password must be at least 8 characters"
      />
      <PasswordField
        label="New password"
        name="new_password"
        autoComplete="new-password"
        descriptiveText="Password must be at least 8 characters"
      />
      <PasswordField
        label="Confirm password"
        name="confirm_password"
        autoComplete="new-password"
      />
      <Button type="submit" onClick={(e) => e.preventDefault()}>
        Submit
      </Button>
    </Flex>
  );
};

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

🚀

Space Rocket Launch Codes
Password is hidden
Copy
import { PasswordField, Text, Flex, useTheme } from '@aws-amplify/ui-react';

export const LabelHiddenExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex>
      <Text paddingTop={tokens.space.small}>🚀</Text>
      <PasswordField label="Space Rocket Launch Codes" labelHidden={true} />
    </Flex>
  );
};

ShowPasswordButton

The ShowPasswordButton renders a <button> element with role="switch". Its aria-checked attribute is set to false when the password is hidden, and true when the password is shown.

There are several optional props for customizing the accessibility of the ShowPasswordButton:

showPasswordButtonLabel: Sets the aria-label for the ShowPasswordButton (defaults to "Show password")
passwordIsHiddenLabel: Sets the text read by screen readers when the password is hidden (defaults to "Password is hidden")
passwordIsShownLabel: Sets the text read by screen readers when the password is shown (defaults to "Password is shown")
Password
Your password is hidden
Copy
import { PasswordField } from '@aws-amplify/ui-react';

export const ShowPasswordButtonExample = () => {
  return (
    <PasswordField
      label="Password"
      showPasswordButtonLabel="Toggle password shown/hidden"
      passwordIsHiddenLabel="Your password is hidden"
      passwordIsShownLabel="Your password is shown"
    />
  );
};

Sizes

Use the size prop to change the visual size of the PasswordField. Three sizes are available: small, (default), and large.

Password
Password is hidden
Password
Password is hidden
Password
Password is hidden
Copy
import { Flex, PasswordField, useTheme } from '@aws-amplify/ui-react';

export const SizeExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex direction="column" gap={tokens.space.medium}>
      <PasswordField label="Password" name="password" size="small" />
      <PasswordField label="Password" name="password" />
      <PasswordField label="Password" name="password" size="large" />
    </Flex>
  );
};

Variations

There are two variation styles available: default and quiet.

Password
Password is hidden
Password
Password is hidden
Copy
import { Flex, PasswordField, useTheme } from '@aws-amplify/ui-react';

export const VariationExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex direction="column" gap={tokens.space.medium}>
      <PasswordField label="Password" name="password" />
      <PasswordField label="Password" name="password" variation="quiet" />
    </Flex>
  );
};

Descriptive text

To provide additional descriptive text of requirements of the field, use the descriptiveText field.

Password

Password length must be greater than 8 characters

Password is hidden
Copy
import { PasswordField, Text, useTheme } from '@aws-amplify/ui-react';

export const DescriptiveTextExample = () => {
  const { tokens } = useTheme();
  return (
    <PasswordField
      label="Password"
      name="password"
      descriptiveText={
        <Text
          as="span"
          color="rebeccapurple"
          fontStyle="italic"
          fontSize={tokens.fontSizes.small}
        >
          Password length must be greater than 8 characters
        </Text>
      }
    />
  );
};

Required fields

Use the isRequired prop to specify a required field.

Password
Password is hidden
Submit
Copy
import { Flex, PasswordField, Button } from '@aws-amplify/ui-react';

export const IsRequiredExample = () => {
  return (
    <Flex as="form" direction="column" width="20rem">
      <PasswordField label="Password" name="password" isRequired={true} />
      <Button type="submit">Submit</Button>
    </Flex>
  );
};


There is no default styling for required fields. Customize the label or descriptiveText to instruct the form user of the required field.

Password (required)

Password is hidden
Password

Required

Password is hidden
Submit
Copy
import { Flex, PasswordField, Text, Button } from '@aws-amplify/ui-react';

export const RequiredPasswordFieldExample = () => (
  <Flex as="form" direction="column" width="20rem">
    <PasswordField
      label={
        <Text>
          Password
          <Text as="span" fontSize="0.8rem" color="red">
            {' '}
            (required)
          </Text>
        </Text>
      }
      name="password"
      isRequired={true}
    />
    <PasswordField
      label="Password"
      descriptiveText={
        <Text as="span" fontSize="0.8rem" color="red" fontStyle="italic">
          Required
        </Text>
      }
      name="password"
      isRequired={true}
    />
    <Button type="submit">Submit</Button>
  </Flex>
);

Validation error styling

Use the hasError and errorMessage fields to mark a PasswordField as having a validation error.

Password
Password is hidden

Requires uppercase, lowercase, and number with a minimum of 8 chars

Copy
import * as React from 'react';
import { Flex, PasswordField } from '@aws-amplify/ui-react';

export const ValidationErrorExample = () => {
  const [password, setPassword] = React.useState('1234');
  const validationRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  const errorMessage = `Requires uppercase, lowercase, and number with a minimum of 8 chars`;
  return (
    <Flex gap="1rem" direction="column">
      <PasswordField
        onChange={(e) => {
          setPassword(e.target.value);
        }}
        label="Password"
        value={password}
        hasError={!validationRegex.test(password)}
        errorMessage={errorMessage}
      />
    </Flex>
  );
};

Forward refs
Important

Refs are an escape hatch to the underlying DOM element of our primitives, but are typically not necessary for most applications.

See Refs and the DOM and Forwarding Refs for more information.

The standard ref prop will forward to the underlying input element, and the showPasswordButtonRef prop forwards to the show password button element.

The following is an example demonstrating use of the ref and showPasswordButtonRef props to put the focus on the password input field when the showPassword button is clicked:

Password
Password is hidden
Copy
import * as React from 'react';
import { PasswordField } from '@aws-amplify/ui-react';

export const RefExample = () => {
  const inputRef = React.useRef(null);
  const showPasswordButtonRef = React.useRef(null);

  const onShowPasswordClick = React.useCallback(() => {
    inputRef.current.focus();
  }, []);

  React.useEffect(() => {
    const showPasswordButtonRefCurrent = showPasswordButtonRef.current;
    if (showPasswordButtonRefCurrent) {
      showPasswordButtonRefCurrent.addEventListener(
        'click',
        onShowPasswordClick,
        false
      );
      return () => {
        showPasswordButtonRefCurrent.removeEventListener(
          'click',
          onShowPasswordClick,
          false
        );
      };
    }
  }, [onShowPasswordClick]);

  return (
    <PasswordField
      label="Password"
      ref={inputRef}
      showPasswordButtonRef={showPasswordButtonRef}
    />
  );
};

Standard HTML attributes

The PasswordField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation

Password
Password is hidden
Copy
import { PasswordField } from '@aws-amplify/ui-react';

export const MaxLengthExample = () => {
  return <PasswordField label="Password" name="password" maxLength={10} />;
};

Styling
Theme

You can customize the appearance of all PasswordField components in your application with a Theme.

PasswordField Theme Source

Password
Password is hidden
Password with Error
Password is hidden
Copy
import {
  PasswordField,
  ThemeProvider,
  Theme,
  Button,
} from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'passwordfield-theme',
  tokens: {
    components: {
      passwordfield: {
        button: {
          color: { value: 'red' },
          _hover: {
            backgroundColor: { value: '{colors.blue.60}' },
            color: { value: 'white' },
          },
          _active: {
            backgroundColor: { value: '{colors.green.60}' },
            color: { value: 'white' },
          },
          _focus: {
            color: { value: 'white' },
          },
          _error: {
            backgroundColor: { value: 'orange' },
            _hover: { backgroundColor: { value: 'lavender' } },
            _focus: { borderColor: { value: 'green' } },
            _active: { borderColor: { value: 'white' } },
          },
        },
      },
      fieldcontrol: {
        borderColor: {
          value: '{colors.blue.60}',
        },
        color: {
          value: '{colors.red.80}',
        },
      },
    },
  },
};

export const PasswordFieldThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <PasswordField label="Password" />
      <PasswordField hasError={true} label="Password with Error" />
    </ThemeProvider>
  );
};

Icons
Password
Password is hidden
Copy
import { PasswordField, IconsProvider } from '@aws-amplify/ui-react';
import { FiLock, FiUnlock } from 'react-icons/fi';

export const PasswordFieldIconExample = () => (
  <IconsProvider
    icons={{
      passwordField: {
        visibility: <FiLock />,
        visibilityOff: <FiUnlock />,
      },
    }}
  >
    <PasswordField label="Password" />
  </IconsProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-passwordfield	Top level element that wraps the PasswordField primitive
Global styling

To override styling on all TextField primitives, you can set the Amplify CSS variables or use the built-in .amplify-textfield class.

Globally styled password field
Password is hidden
Copy
/* styles.css */
[data-amplify-theme] {
  --amplify-components-field-border-color: var(--amplify-colors-purple-80);
}
/* OR */
.amplify-passwordfield {
  --amplify-components-field-border-color: var(--amplify-colors-purple-80);
}

Local styling

To override styling on a specific TextField, you can use a class selector or style props.

Using a class selector:

Square password field
Password is hidden
Copy
/* styles.css */
.custom-passwordfield-class .amplify-input,
.custom-passwordfield-class .amplify-button {
  border-radius: 0;
}


Using style props:

Flex styling props will be applied to the PasswordField wrapping Flex component, whereas other style props will be applied to the input field. This allows us to change the layout of the label and input field, while also styling the input field directly.

Password:

Password is hidden
Password
Password is hidden
Copy
import { PasswordField, Text, useTheme } from '@aws-amplify/ui-react';

export const PasswordFieldStyledPropsExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <PasswordField
        label={
          <Text fontWeight="bold" fontSize={tokens.fontSizes.xl}>
            Password:
          </Text>
        }
        padding="xl"
        border={`1px solid ${tokens.colors.primary[60]}`}
      />
      <PasswordField
        label="Password"
        inputStyles={{
          backgroundColor: 'primary.10',
        }}
      />
    </>
  );
};


--------------------------------------------------------------------------------

Title: Label | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/label
HTML Content:
Label

Label represents a caption for a UI element.

React source
Feedback
Documentation
Props
Usage

Import the Label component and pair it with a field control.

First Name:
Copy
import { Flex, Input, Label } from '@aws-amplify/ui-react';

export const DefaultLabelExample = () => (
  <Flex direction="column" gap="small">
    <Label htmlFor="first_name">First Name:</Label>
    <Input id="first_name" name="first_name" />
  </Flex>
);

Accessibility

Label is used to visually and programmatically associate a text label with a form control. Clicking on a label will highligh the associated field, and a screen reader can read the text label, allowing an accessibility technology user to understand the purpose of a form control.

Departure date
Copy
import { Flex, Input, Label } from '@aws-amplify/ui-react';

export const AccessibilityExample = () => (
  <Flex direction="column" gap="small">
    <Label htmlFor="departure">Departure date</Label>
    <Input id="departure" type="date" />
  </Flex>
);

Standard HTML attributes

The Label will accept any of the standard HTML attributes that a <label> element accepts. Standard <label> attributes can be found in the MDN Documentation

CSS Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-label	Class applied to the label element
Global styling

To override styling on all Input primitives, you can set the Amplify CSS variables with the built-in .amplify-input class.

Globally styled label

Copy
/* styles.css */
.amplify-input {
  font-style: italic;
}

Local styling

To override styling on a specific Input, you can use a class selector or style props.

Using a class selector:

Custom styled label
Copy
/* styles.css */
.custom-label-class.amplify-label {
  color: rebeccapurple;
}


Using style props:

Awesome label
Copy
import { Label, useTheme } from '@aws-amplify/ui-react';

export const StylePropsExample = () => {
  const { tokens } = useTheme();

  return (
    <Label fontSize={tokens.fontSizes.xl} fontStyle="italic">
      Awesome label
    </Label>
  );
};


--------------------------------------------------------------------------------

Title: Fieldset | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/fieldset
HTML Content:
Fieldset

Fieldsets are used to group related form fields.

Theme source
React source
Feedback
Documentation
Props
Demo
Favorite fruits
Favorite fruits
Apple
Pear
Legend
Variation
plain (default)
outlined
direction
column
column-reverse
row
row-reverse
Size
small
default
large
isDisabled
legendHidden
Copy
<Fieldset
  legend="Favorite fruits"
  variation="plain"
  direction="column">
  <CheckboxField
    label="Apple"
    name="apple"
  />
  <CheckboxField
    label="Pear"
    name="pear"
  />
</Fieldset>
Usage
Basic fieldset
Basic fieldset
Fieldset content
Copy
import { Fieldset } from '@aws-amplify/ui-react';

export const BasicFieldset = () => {
  return <Fieldset legend="Basic fieldset">Fieldset content</Fieldset>;
};

Sizes

Fieldset size can be changed via the size prop. It affects the Fieldset's padding and gap size and the font size of its legend element.

Small fieldset
Small fieldset
Small fieldset size content.
Default fieldset
Default fieldset
Default fieldset size content.
Large fieldset
Large fieldset
Large fieldset size content.
Copy
import { Flex, Fieldset } from '@aws-amplify/ui-react';

export const FieldsetSizes = () => {
  return (
    <Flex direction="column">
      <Fieldset legend="Small fieldset" size="small">
        Small fieldset size content.
      </Fieldset>
      <Fieldset legend="Default fieldset">
        Default fieldset size content.
      </Fieldset>
      <Fieldset legend="Large fieldset" size="large">
        Large fieldset size content.
      </Fieldset>
    </Flex>
  );
};

Variation

Fieldset by default uses the plain variation which has no border or padding. Use the outlined variation to add a border and padding.

Outlined fieldset
Outlined fieldset
Outlined fieldset variation content.
Plain fieldset
Plain fieldset
Plain fieldset variation content.
Copy
import { Flex, Fieldset } from '@aws-amplify/ui-react';

export const FieldsetVariations = () => {
  return (
    <Flex direction="column">
      <Fieldset legend="Outlined fieldset" variation="outlined">
        Outlined fieldset variation content.
      </Fieldset>
      <Fieldset legend="Plain fieldset" variation="plain">
        Plain fieldset variation content.
      </Fieldset>
    </Flex>
  );
};

Direction

Fieldset uses the Flex primitive for layout which allows you to use Flex props to control the direction and alignment of the Fieldset. Use direction="row|row-reverse|column|column-reverse" to change the direction of the Fieldset.

row
row
Item 1
Item 2
row-reverse
row-reverse
Item 3
Item 4
column
column
Item 5
Item 6
column-reverse
column-reverse
Item 7
Item 8
Copy
import { Flex, Fieldset, Text, CheckboxField } from '@aws-amplify/ui-react';

export const FieldsetDirection = () => {
  return (
    <Flex direction="column">
      <Fieldset legend="row" direction="row" variation="outlined">
        <CheckboxField label="Item 1" name="Item 1" />
        <CheckboxField label="Item 2" name="Item 2" />
      </Fieldset>
      <Fieldset
        legend="row-reverse"
        direction="row-reverse"
        variation="outlined"
      >
        <CheckboxField label="Item 3" name="Item 3" />
        <CheckboxField label="Item 4" name="Item 4" />
      </Fieldset>
      <Fieldset legend="column" direction="column" variation="outlined">
        <CheckboxField label="Item 5" name="Item 5" />
        <CheckboxField label="Item 6" name="Item 6" />
      </Fieldset>
      <Fieldset
        legend="column-reverse"
        direction="column-reverse"
        variation="outlined"
      >
        <CheckboxField label="Item 7" name="Item 7" />
        <CheckboxField label="Item 8" name="Item 8" />
      </Fieldset>
    </Flex>
  );
};

Disabled

Fieldset can be disabled by using isDisabled={true} prop which will apply the [disabled] attribute to the fieldset. Fieldset has no special disabled styles.

Note about disabled fieldsets:

Disabled fieldsets in HTML will disable all inputs nested within them; even those nested within fieldsets that are not disabled. This is default browser behavior that the Fieldset primitive supports.

Disabled Fieldset
Disabled Fieldset

The input in this fieldset is disabled because of the parent fieldset.

Test input
Nested fieldset
Nested fieldset

This input is also disabled because the fieldset above it is disabled, even though its immediate parent fieldset is not disabled.

Test nested input
Copy
import { Fieldset, Text, TextField } from '@aws-amplify/ui-react';

export const DisabledFieldset = () => {
  return (
    <Fieldset legend="Disabled Fieldset" isDisabled variation="outlined">
      <Text fontStyle="italic" variation="tertiary">
        The input in this fieldset is disabled because of the parent fieldset.
      </Text>
      <TextField label="Test input" />
      <Fieldset legend="Nested fieldset" variation="outlined">
        <Text fontStyle="italic" variation="tertiary">
          This input is also disabled because the fieldset above it is disabled,
          even though its immediate parent fieldset is not disabled.
        </Text>
        <TextField label="Test nested input" />
      </Fieldset>
    </Fieldset>
  );
};

Name attribute

Fieldset supports the [name] attribute. Use the name prop to supply a name for your Fieldset. This can be useful if parsing form controls using the form.elements api

Fieldset with a name
Fieldset with a name
Fieldset content
Fieldset name: Fieldset #1
Copy
import { Flex, Fieldset, Text } from '@aws-amplify/ui-react';
import { useRef, useEffect, useState } from 'react';

export const NameAttribute = () => {
  const formRef = useRef(null);
  const [fieldsetName, setFieldsetName] = useState('');

  useEffect(() => {
    if (formRef.current) {
      setFieldsetName(formRef.current.elements[0].name);
    }
  }, [setFieldsetName]);
  return (
    <Flex as="form" ref={formRef} direction="column">
      <Fieldset
        legend="Fieldset with a name"
        name="Fieldset #1"
        variation="outlined"
      >
        Fieldset content
      </Fieldset>
      Fieldset name: {fieldsetName}
    </Flex>
  );
};

Styling
Theme

You can customize the appearance of all Fieldset components in your application with a Theme.

Fieldset Theme Source

Default fieldset with theming
Default fieldset with theming
Some content of the fieldset.
Copy
import { Fieldset, ThemeProvider, createTheme } from '@aws-amplify/ui-react';

const theme = createTheme({
  name: 'fieldset-theme',
  tokens: {
    components: {
      fieldset: {
        outlined: {
          borderStyle: 'dashed',
          borderWidth: '2px',
          borderColor: '{colors.primary.20}',
          padding: '{space.large}',
        },
        legend: {
          fontSize: '{fontSizes.large}',
          color: '{colors.primary.80}',
          fontWeight: '400',
        },
      },
    },
  },
});

export const FieldsetThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Fieldset legend="Default fieldset with theming">
      Some content of the fieldset.
    </Fieldset>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-fieldset	Top level element that wraps the Fieldset primitive
amplify-fieldset__legend	Visual label for the Fieldset primitive
Global Styling

To override styling on all Fieldsets, you can set the Amplify CSS variables or use the target classes.

A fieldset with a larger border radius
A fieldset with a larger border radius
A Fieldset styled with CSS.
Copy
/* styles.css */
:root {
  --amplify-components-fieldset-border-radius: 12px;
}
/* OR */
.amplify-fieldset {
  border-radius: 12px;
}

Local styling

To override styling on a specific Fieldset, you can use (in order of increasing specificity): a class selector or style props.

Using a class selector
A purple fieldset
A purple fieldset

This is a purple fieldset

Copy
/* styles.css */
.purple-fieldset {
  background-color: var(--amplify-colors-purple-10);
  border-color: var(--amplify-colors-purple-60);
}

Copy
import './styles.css';

<Fieldset className="purple-fieldset" legend="A purple fieldset">
  This is a purple fieldset
</Fieldset>

Using style props
Fieldset with style props
Fieldset with style props
Fieldset content
Copy
import { Fieldset } from '@aws-amplify/ui-react';

export const FieldsetStylePropsExample = () => {
  return (
    <Fieldset
      legend="Fieldset with style props"
      borderColor="teal.60"
      backgroundColor="teal.10"
    >
      Fieldset content
    </Fieldset>
  );
};

Accessibility

ARIA attributes, roles, and other HTML attributes that are passed to Fieldset are passed to the parent DOM element which is a <fieldset>.

Legend

Fieldset outputs a <legend> as the first nested element within the Fieldset. The <legend> element does not currently behave well as a flexbox child in browsers. To allow Fieldset to still operate well as a flex parent, Fieldset duplicates the contents of the legend prop:

the first is output as a VisuallyHidden <legend> which is accessible to screen readers.
The second is output as a visible <div> element set to aria-hidden={true} so that the content is not repeated for screenreaders.

This enables Fieldset to have a legend as the suggested way to accessibly label a fieldset.

--------------------------------------------------------------------------------

Title: Input | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/input
HTML Content:
Input

Input allows users to enter text content.

Theme source
React source
Feedback
Documentation
Props
Demo
variation
default
quiet
size
small
default
large
placeholder
hasError
isDisabled
Copy
<Input
  placeholder="Baggins"
/>
Usage

Import the Input component and styles and connect a Label for accessibility/usability.

First Name:
Copy
import { Input, Label, Flex } from '@aws-amplify/ui-react';

export const DefaultInputExample = () => (
  <Flex direction="column" gap="small">
    <Label htmlFor="first_name">First Name:</Label>
    <Input id="first_name" name="first_name" />
  </Flex>
);

Sizes

Input sizes are designed to match styling of other field components such as Buttons. There are three sizes: small, (default), and large.

Small
Default
Large
Copy
import { Flex, Input, Label } from '@aws-amplify/ui-react';

export const InputSizeExample = () => {
  return (
    <Flex direction="column">
      <Flex direction="column" gap="small">
        <Label htmlFor="small">Small</Label>
        <Input id="small" size="small" width="50%" />
      </Flex>

      <Flex direction="column" gap="small">
        <Label htmlFor="default">Default</Label>
        <Input id="default" width="75%" />
      </Flex>

      <Flex direction="column" gap="small">
        <Label htmlFor="large">Large</Label>
        <Input id="large" size="large" width="100%" />
      </Flex>
    </Flex>
  );
};

Variations

There are two variation styles available: default and quiet.

Default
Quiet
Copy
import { Flex, Input, Label } from '@aws-amplify/ui-react';

export const InputVariationExample = () => {
  return (
    <Flex direction="column">
      <Flex direction="column" gap="small">
        <Label htmlFor="Default">Default</Label>
        <Input id="default" />
      </Flex>
      <Flex direction="column" gap="small">
        <Label htmlFor="Quiet">Quiet</Label>
        <Input id="quiet" variation="quiet" />
      </Flex>
    </Flex>
  );
};

States

The available Input states include isDisabled and isReadOnly. A disabled field will be not be focusable, is not mutable, and will not be submitted with form data. A readonly field cannot be edited by the user.

Disabled
Readonly
Copy
import { Flex, Input, Label } from '@aws-amplify/ui-react';

export const InputStatesExample = () => {
  return (
    <Flex direction="column">
      <Flex direction="column" gap="small">
        <Label htmlFor="disabled">Disabled</Label>
        <Input id="disabled" defaultValue="Disabled" isDisabled />
      </Flex>
      <Flex direction="column" gap="small">
        <Label htmlFor="readonly">Readonly</Label>
        <Input id="readonly" defaultValue="You can't edit me!" isReadOnly />
      </Flex>
    </Flex>
  );
};

Required fields

Use the isRequired prop to specify a required field.

Email
Submit
Copy
import { Button, Flex, Input, Label } from '@aws-amplify/ui-react';

export const DefaultRequiredInputExample = () => {
  return (
    <Flex as="form" direction="column" width="20rem">
      <Flex direction="column" gap="small">
        <Label htmlFor="email">Email</Label>
        <Input id="email" type="email" isRequired />
      </Flex>
      <Button type="submit">Submit</Button>
    </Flex>
  );
};


There is no default styling for required fields. Customize the label to instruct the form user of the required field.

Email (required)
Submit
Copy
import { Button, Flex, Text, Input, Label } from '@aws-amplify/ui-react';

export const RequiredInputExample = () => {
  return (
    <Flex as="form" direction="column" width="100%">
      <Flex direction="column" gap="small">
        <Label htmlFor="email">
          Email
          <Text as="span" fontSize="small" color="font.error">
            {' '}
            (required)
          </Text>
        </Label>
        <Input id="email" name="email" type="email" isRequired={true} />
      </Flex>
      <Button type="submit">Submit</Button>
    </Flex>
  );
};

Validation error styling

Use the hasError prop to mark an Input as having a validation error.

Username
Copy
import * as React from 'react';
import { Input, Label, Flex } from '@aws-amplify/ui-react';

export const InputValidationErrorExample = () => {
  const [hasError, setHasError] = React.useState(true);

  const validateUsername = (e) => {
    const containsDigit = /\d/.test(e.currentTarget.value);
    setHasError(!containsDigit);
  };

  return (
    <Flex direction="column" gap="small">
      <Label htmlFor="username">Username</Label>
      <Input id="username" hasError={hasError} onChange={validateUsername} />
    </Flex>
  );
};

Event handlers

Input provides several event handlers: onSelect, onInput, onChange, onCopy, onPaste, and onCut. Open the console to interact with the demo below.

Event handlers
Copy
import { Input, Label, Flex } from '@aws-amplify/ui-react';

export const InputEventHandlersExample = () => (
  <Flex direction="column" gap="small">
    <Label htmlFor="events">Event handlers</Label>
    <Input
      id="events"
      onSelect={(e) => console.info('onSelect fired:', e.currentTarget.value)}
      onInput={(e) => console.info('onInput fired:', e.currentTarget.value)}
      onChange={(e) => console.info('onChange fired:', e.currentTarget.value)}
      onCopy={(e) => console.info('onCopy fired:', e.currentTarget.value)}
      onPaste={(e) => console.info('onPaste fired:', e.currentTarget.value)}
      onCut={(e) => console.info('onCut fired:', e.currentTarget.value)}
    />
  </Flex>
);

Standard HTML attributes

The Input will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation

Input Types

Input primitive comes styled for text input only (type text, date, number, etc). For text component combining Input and Label, see TextField. For other input types, see TextAreaField, CheckBoxField, and SelectField.

Enter departing date ✈️
Copy
<Flex direction="column" gap="small">
  <Label htmlFor="departing">Enter departing date ✈️</Label>
  <Input
    id="departing"
    type="date"
  />
</Flex>

Enter quantity needed:
Copy
<Flex direction="column" gap="small">
  <Label htmlFor="quantity">Enter quantity needed: </Label>
  <Input
    id="quantity"
    type="number"
  />
</Flex>

Styling
Theme

You can customize the appearance of all Input components in your application with a Theme.

Input Theme Source

Name
Copy
import {
  Flex,
  Input,
  Label,
  ThemeProvider,
  Theme,
} from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'input-theme',
  tokens: {
    components: {
      input: {
        color: { value: '{colors.blue.90}' },
        _focus: {
          borderColor: { value: '{colors.blue.40}' },
        },
      },
    },
  },
};

export const InputThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex direction="column" gap="small">
      <Label htmlFor="name">Name</Label>
      <Input id="name" />
    </Flex>
  </ThemeProvider>
);

Global styling

To override styling on all Input primitives, you can set the Amplify CSS variables with the built-in .amplify-input class.

Copy
/* styles.css */
.amplify-input {
  --amplify-components-input-border-color: rebeccapurple;
}

Local styling

To override styling on a specific Input, you can use a class selector or style props.

Using a class selector:

Square field
Copy
/* styles.css */
.custom-input-class.amplify-input {
  border-radius: 0;
}


Using style props:

Name:

Special Field
Copy
import { Text, Input, Label, useTheme, Flex } from '@aws-amplify/ui-react';

export const InputStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex direction="column">
      <Flex direction="column" gap="small">
        <Label htmlFor="name">
          <Text
            fontWeight={tokens.fontWeights.bold}
            fontSize={tokens.fontSizes.xl}
          >
            Name:
          </Text>
        </Label>
        <Input
          id="name"
          fontWeight={tokens.fontWeights.bold}
          fontSize={tokens.fontSizes.xl}
          padding="xl"
          border={`1px solid ${tokens.colors.primary[60]}`}
        />
      </Flex>

      <Flex direction="column" gap="small">
        <Label htmlFor="special">Special Field</Label>
        <Input
          id="special"
          backgroundColor="primary.10"
          border={`1px solid ${tokens.colors.primary[60]}`}
        />
      </Flex>
    </Flex>
  );
};


--------------------------------------------------------------------------------

Title: DropZone | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/dropzone
HTML Content:
DropZone

The Dropzone component captures files from user with drag and drop

Theme source
React source
Feedback
Documentation
Props
Usage

The DropZone component adds the necessary event handlers to an element and filters dropped files by file type. To get the files after they are dropped you can use the onDropComplete prop which is a function that has files and rejectedFiles arrays.

Drag images here
Copy
import * as React from 'react';
import { DropZone, Text } from '@aws-amplify/ui-react';

export default function DefaultDropZoneExample() {
  const [files, setFiles] = React.useState([]);
  return (
    <>
      <DropZone
        onDropComplete={({ acceptedFiles, rejectedFiles }) => {
          setFiles(acceptedFiles);
        }}
      >
        Drag images here
      </DropZone>
      {files.map((file) => (
        <Text key={file.name}>{file.name}</Text>
      ))}
    </>
  );
}

Disabled

Add an isDisabled prop to DropZone to make it disabled. Disabling the DropZone will remove any drag/drop handlers and style the DropZone so it looks disabled.

Drag images here
Copy
import { DropZone } from '@aws-amplify/ui-react';

export default function DisabledDropZoneExample() {
  return (
    <DropZone
      isDisabled
      onDropComplete={({ acceptedFiles }) => {
        console.log(acceptedFiles);
      }}
    >
      Drag images here
    </DropZone>
  );
}

Accepted and Rejected files

DropZone.Accept, DropZone.Reject and DropZone.Default are helper components that render at different times:

DropZone.Accept is visible when the user drags files that are all acceptable based on the acceptedFileTypes prop
Dropzone.Reject is visible when the user drags files that any are not acceptable based on the acceptedFileTypes prop.
DropZone.Default is the default state, visible when there is no drag interaction on the DropZone.

All of these helper components are mutually exclusive and cover all possible states. If the user is dragging files over the element the files will either be all acceptable or not.

Drag images here

Copy
import { DropZone, Flex, Text } from '@aws-amplify/ui-react';
import { MdCheckCircle, MdFileUpload, MdRemoveCircle } from 'react-icons/md';

export default function DefaultDropZoneExample() {
  return (
    <DropZone
      acceptedFileTypes={['image/*']}
      onDropComplete={({ acceptedFiles }) => {
        console.log(acceptedFiles);
      }}
    >
      <Flex direction="row" justifyContent="center" alignItems="center">
        <DropZone.Accepted>
          <MdCheckCircle fontSize="2rem" />
        </DropZone.Accepted>
        <DropZone.Rejected>
          <MdRemoveCircle fontSize="2rem" />
        </DropZone.Rejected>
        <DropZone.Default>
          <MdFileUpload fontSize="2rem" />
        </DropZone.Default>
        <Text>Drag images here</Text>
      </Flex>
    </DropZone>
  );
}

Opening the file picker

You can add a button to open the file picker by adding a hidden input and firing the click event on the input element. Using an input element will automatically disable selecting files that don't match the accepted file types.

Drag images here or

Browse
Copy
import * as React from 'react';
import {
  Button,
  DropZone,
  Flex,
  Text,
  VisuallyHidden,
} from '@aws-amplify/ui-react';

const acceptedFileTypes = ['image/png', 'image/jpeg'];

export default function DropZoneInputExample() {
  const [files, setFiles] = React.useState([]);
  const hiddenInput = React.useRef(null);

  const onFilePickerChange = (event) => {
    const { files } = event.target;
    if (!files || files.length === 0) {
      return;
    }
    setFiles(Array.from(files));
  };

  return (
    <>
      <DropZone
        acceptedFileTypes={acceptedFileTypes}
        onDropComplete={({ acceptedFiles, rejectedFiles }) => {
          setFiles(acceptedFiles);
        }}
      >
        <Flex direction="column" alignItems="center">
          <Text>Drag images here or</Text>
          <Button size="small" onClick={() => hiddenInput.current.click()}>
            Browse
          </Button>
        </Flex>
        <VisuallyHidden>
          <input
            type="file"
            tabIndex={-1}
            ref={hiddenInput}
            onChange={onFilePickerChange}
            multiple={true}
            accept={acceptedFileTypes.join(',')}
          />
        </VisuallyHidden>
      </DropZone>
      {files.map((file) => (
        <Text key={file.name}>{file.name}</Text>
      ))}
    </>
  );
}

Styling
Theme

You can customize the appearance of all DropZone components in your application with a Theme.

DropZone Theme Source

Drag images here
Copy
import { DropZone, ThemeProvider, createTheme } from '@aws-amplify/ui-react';

const theme = createTheme({
  name: 'dropzone-theme',
  tokens: {
    components: {
      dropzone: {
        backgroundColor: '{colors.primary.10}',
        borderColor: '{colors.primary.80}',
      },
    },
  },
});

export default function DropZoneThemeExample() {
  return (
    <ThemeProvider theme={theme}>
      <DropZone
        onDropComplete={({ acceptedFiles }) => {
          console.log(acceptedFiles);
        }}
      >
        Drag images here
      </DropZone>
    </ThemeProvider>
  );
}

Target classes
Target Classes
CSS Variables
Class	Description
amplify-dropzone	Class applied to the DropZone component
Global styling

To override styling on all Breadcrumbs components, you can set Amplify CSS variables or use the target classes like .amplify-dropzone class.

Copy
/* styles.css */
.amplify-dropzone {
  background-color: pink;
}

Local styling

To override styling on a specific DropZone component or sub-component, you can use (in order of increasing specificity): a class selector and style props.

Using a class selector:

Copy
<DropZone className="my-dropzone">
</DropZone>

/* styles.css */
.my-dropzone {
   background-color: pink;
}


Using style props:

Drag images here
Copy
import { DropZone } from '@aws-amplify/ui-react';

export default function DropZoneStyleExample() {
  return (
    <DropZone
      onDropComplete={({ acceptedFiles }) => {
        console.log(acceptedFiles);
      }}
      borderWidth="4px"
      borderColor="red"
    >
      Drag images here
    </DropZone>
  );
}


--------------------------------------------------------------------------------

Title: Button | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/button
HTML Content:
Button

Button allows users to perform actions.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Click me!
Variation
Default
Primary
Link
ColorTheme
Default
Error
Info
Warning
Success
Overlay
Size
Default
Small
Large
isFullWidth
isDisabled
isLoading
loadingText
Copy
<Button
  loadingText=""
  onClick={() => alert('hello')}
>
  Click me!
</Button>
Usage

Import the Button primitive and styles.

Hello world
Copy
import { Button } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

<Button>Hello world</Button>;

onClick

Use the onClick prop to add a click handler to the Button.

Click me
Copy
<Button onClick={() => alert('👋 hello')}>Click me</Button>

Sizes

Use the size prop to change the Button size. Available options are small, large, and none (default).

SmallDefaultLarge
Copy
<Button size="small">Small</Button>
<Button>Default</Button>
<Button size="large">Large</Button>

Variations

Use the variation prop to change the Button variation. Available options are primary, link, menu, warning, destructive and none (default).

Default
Primary
Link
Copy
<Button>Default</Button>
<Button variation="primary">Primary</Button>
<Button variation="link">Link</Button>

Color themes

Use the colorTheme prop to change the Button's color theme. Available options are error, info, warning, success, and overlay.

Default
Success
Warning
Error
Info
Overlay
Copy
<Button>Default</Button>
<Button colorTheme="success">Success</Button>
<Button colorTheme="warning">Warning</Button>
<Button colorTheme="error">Error</Button>
<Button colorTheme="warning">Info</Button>
<Button colorTheme="overlay">Overlay</Button>


The colorTheme prop can be combined with variation to provide more Button options.

Success
error
Warning
Info
Overlay
Success
error
Warning
Info
Overlay
Copy
// Primary variation with color themes
<Button variation="primary" colorTheme="success">Success</Button>
<Button variation="primary" colorTheme="error">error</Button>
<Button variation="primary" colorTheme="warning">Warning</Button>
<Button variation="primary" colorTheme="info">Info</Button>
<Button variation="primary" colorTheme="overlay">Overlay</Button>

// Link variation with color themes
<Button variation="link" colorTheme="success">Success</Button>
<Button variation="link" colorTheme="error">error</Button>
<Button variation="link" colorTheme="warning">Warning</Button>
<Button variation="link" colorTheme="info">Info</Button>
<Button variation="link" colorTheme="overlay">Overlay</Button>

Icon buttons

Icons can be added to buttons and will adapt to the surrounding font-size.

Save
Save
Save
Copy
import * as React from 'react';
import { Button, Flex, Icon, View } from '@aws-amplify/ui-react';

const IconSave = () => {
  return (
    <Icon
      ariaLabel=""
      pathData="M17 3H5C3.89 3 3 3.9 3 5V19C3 20.1 3.89 21 5 21H19C20.1 21 21 20.1 21 19V7L17 3ZM19 19H5V5H16.17L19 7.83V19ZM12 12C10.34 12 9 13.34 9 15C9 16.66 10.34 18 12 18C13.66 18 15 16.66 15 15C15 13.34 13.66 12 12 12ZM6 6H15V10H6V6Z"
    />
  );
};

export const IconButtonExample = () => {
  return (
    <Flex direction="column" gap="1rem">
      <View>
        <Button gap="0.1rem" size="small">
          <IconSave /> Save
        </Button>
        <Button gap="0.2rem">
          <IconSave /> Save
        </Button>
        <Button gap="0.2rem" size="large">
          <IconSave /> Save
        </Button>
      </View>
      <View>
        <Button size="small">
          <IconSave />
        </Button>
        <Button>
          <IconSave />
        </Button>
        <Button size="large">
          <IconSave />
        </Button>
      </View>
    </Flex>
  );
};

Loading state
Loading...
Copy
<Button isLoading={true} loadingText="Loading..." variation="primary">
  Hello
</Button>

Other states
Disabled
Full width
Copy
<Button isDisabled={true}>Disabled</Button>
<Button isFullWidth={true}>Full width</Button>

Accessibility

Setting an aria-label attribute for an icon Button:

🚀
Copy
<Button ariaLabel="To the moon!">🚀</Button>

ButtonGroup

Use a ButtonGroup to group buttons with the same size or variation.

🚀
🚀
🚀
🚀
🚀
🚀
Copy
import { Button, ButtonGroup } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

// same size
<ButtonGroup size="small">
  <Button>🚀</Button>
  <Button>🚀</Button>
  <Button>🚀</Button>
</ButtonGroup>;

// same variation
<ButtonGroup variation="primary">
  <Button>🚀</Button>
  <Button>🚀</Button>
  <Button>🚀</Button>
</ButtonGroup>;


ButtonGroup is also a flex container, so any flex props can apply to it for layout purpose. See Flex.

🚀
🚀
🚀
🚀
🚀
🚀
Copy
import { Button, ButtonGroup } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

<ButtonGroup justifyContent="center">
  <Button>🚀</Button>
  <Button>🚀</Button>
  <Button>🚀</Button>
</ButtonGroup>

<ButtonGroup direction="column">
  <Button>🚀</Button>
  <Button>🚀</Button>
  <Button>🚀</Button>
</ButtonGroup>;

Standard HTML attributes

The Button will accept any of the standard HTML attributes that a <button> element accepts. Standard <button> attributes can be found in the MDN Documentation

Named
Copy
<Button name="named">Named</Button>

Customization
Theme

You can customize the appearance of all Button components in your application with a Theme.

Button Theme Source

Default
Primary
Primary error
Primary (disabled)
Default info
Copy
import { Button, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'button-theme',
  tokens: {
    colors: {
      border: {
        // this will affect the default button's border color
        primary: { value: 'black' },
      },
    },
    components: {
      button: {
        // this will affect the font weight of all button variants
        fontWeight: { value: '{fontWeights.extrabold}' },
        backgroundColor: { value: '#f1fff5' },
        borderColor: { value: '{colors.purple.80}' },
        color: { value: '{colors.purple.100}' },
        outlined: {
          info: {
            borderColor: '{colors.purple.60}',
            color: '{colors.purple.90}',
          },
        },

        // style the primary variation
        primary: {
          backgroundColor: { value: '{colors.blue.60}' },
          _hover: {
            backgroundColor: { value: '{colors.blue.80}' },
          },
          _focus: {
            backgroundColor: { value: '{colors.blue.80}' },
          },
          _active: {
            backgroundColor: { value: '{colors.blue.90}' },
          },
          _disabled: {
            backgroundColor: { value: 'transparent' },
            borderColor: { value: '{colors.neutral.30}' },
          },
          error: {
            backgroundColor: { value: '{colors.pink.10}' },
            color: { value: '{colors.red.80}' },
            _hover: {
              backgroundColor: { value: '#a51b34' },
            },
            _focus: {
              backgroundColor: { value: '#9a0c26' },
            },
            _active: {
              backgroundColor: { value: '#9a0c26' },
            },
          },
        },
      },
    },
  },
};

export const ButtonThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex direction="row">
      <Button>Default</Button>
      <Button variation="primary">Primary</Button>
      <Button variation="primary" colorTheme="error">
        Primary error
      </Button>
      <Button variation="primary" isDisabled={true}>
        Primary (disabled)
      </Button>
      <Button colorTheme="info">Default info</Button>
    </Flex>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-button	Top level element that wraps the Button primitive
amplify-button__loader-wrapper	Class applied to the Loader component within the Button Loading state
CSS

To override styling on all Buttons, you can set the Amplify CSS variables or use the built-in .amplify-button class.

Copy
/* styles.css */
[data-amplify-theme] {
  --amplify-components-button-primary-background-color: #0057ff;
  --amplify-components-button-primary-hover-background-color: #4d89fc;
}
/* OR */
.amplify-button {
  background-color: #0057ff;
}
.amplify-button:hover {
  background-color: #4d89fc;
}


To replace the Button styling, unset it:

Copy
.amplify-button {
  all: unset;
  /* Add your styling here*/
}

Local styling

To override styling on a specific Button, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

I'm colorful!
Copy
/* Example: class selector styling override */
.colorful-button {
  background: linear-gradient(90deg, #fdbb2d 0%, #22c1c3 100%);
}

Copy
import './styles.css';

<Button className="colorful-button">I'm colorful!</Button>;


Using data attributes:

Copy
/* styles.css */
/* Override only primary variation styles */
.amplify-button[data-variation='primary'] {
  background-color: teal;
  color: white;
}

/* Override loading styles */
.amplify-button[data-loading='true'] {
  opacity: 0.8;
}

/* Override disabled styles */
.amplify-button[disabled='true'] {
  opacity: 0.8;
}

Copy
import './styles.css';

<Button variation="primary">Teal background</Button>
<Button isLoading={true}>Loading...</Button>
<Button isDisabled={true}>Lighter opacity</Button>


Using style props:

GreenPurple
Copy
<Button style={{ backgroundColor: 'green', color: 'white' }}>Green</Button>;
{
  /* OR */
}
<Button backgroundColor="purple" color="white">
  Purple
</Button>;


--------------------------------------------------------------------------------

Title: CheckboxField | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/checkboxfield
HTML Content:
CheckboxField

CheckboxField allows users to mark items as selected.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Subscribe
label
size
default
small
large
labelPosition
default
start
end
top
bottom
isDisabled
isIndeterminate
Copy
<CheckboxField
  label="Subscribe"
  name="subscribe"
  value="yes"
/>
Usage

Import the CheckboxField primitive.

Subscribe
Copy
import * as React from 'react';
import { CheckboxField } from '@aws-amplify/ui-react';

export const DefaultCheckboxFieldExample = () => (
  <CheckboxField label="Subscribe" name="subscribe" value="yes" />
);

Controlled component
Subscribe
Copy
import * as React from 'react';

import { CheckboxField } from '@aws-amplify/ui-react';

export const CheckboxFieldControlledExample = () => {
  const [checked, setChecked] = React.useState(false);
  return (
    <CheckboxField
      name="subscribe-controlled"
      value="yes"
      checked={checked}
      onChange={(e) => setChecked(e.target.checked)}
      label="Subscribe"
    />
  );
};

Sizes

Use the size prop to change the SelectField size. Available options are small, large, and none (default).

Subscribe
Subscribe
Subscribe
Copy
import * as React from 'react';
import { CheckboxField, Flex } from '@aws-amplify/ui-react';

export const CheckboxFieldSizesExample = () => (
  <Flex>
    <CheckboxField
      label="Subscribe"
      name="subscribe"
      value="yes"
      size="small"
    />
    <CheckboxField label="Subscribe" name="subscribe" value="yes" />
    <CheckboxField
      label="Subscribe"
      name="subscribe"
      value="yes"
      size="large"
    />
  </Flex>
);

Value

The value associated with the checkbox name in form data, used when submitting an HTML form. If a checkbox is unchecked when its form is submitted, its value will not be submitted. See MDN.

Subscribe
Submit
Copy
import { CheckboxField, Button } from '@aws-amplify/ui-react';
import * as React from 'react';

export const CheckboxFieldValueExample = () => {
  const onSubmit = (event) => {
    event.preventDefault();
    alert(event.target.subscribe.value);
  };
  return (
    <form onSubmit={onSubmit}>
      <CheckboxField label="Subscribe" name="subscribe" value="yes" />
      <Button type="submit">Submit</Button>
    </form>
  );
};


In this example, we've got a name of subscribe, and a value of yes. When the form is submitted, the data name/value pair will be subscribe=yes.

State
Disabled

A disabled checkbox will be not be focusable not mutable. A checked checkbox could also be disabled but it will not be submitted with form data.

Subscribe
Subscribe
Copy
import * as React from 'react';

import { CheckboxField, Flex } from '@aws-amplify/ui-react';

export const CheckboxFieldDisabledExample = () => {
  return (
    <Flex>
      <CheckboxField
        label="Subscribe"
        name="subscribe"
        value="yes"
        isDisabled
      />
      <CheckboxField
        label="Subscribe"
        name="subscribe"
        value="yes"
        defaultChecked
        isDisabled
      />
    </Flex>
  );
};

Indeterminate

In addition to the checked and unchecked states, there is a third state a checkbox can be in: indeterminate. This is a state in which it's impossible to say whether the item is toggled on or off.

All Pets
Cat
Dog
Copy
import * as React from 'react';

import { CheckboxField, Flex, View } from '@aws-amplify/ui-react';

export const CheckboxFieldIndeterminateExample = () => {
  const [checkedItems, setCheckedItems] = React.useState([false, false]);
  const checkedItemsRef = React.useRef(null);
  const allChecked = checkedItems.every(Boolean);
  const isIndeterminate = checkedItems.some(Boolean) && !allChecked;

  if (isIndeterminate) {
    checkedItemsRef.current = [...checkedItems];
  }
  const handleAllPetsChange = () => {
    if (isIndeterminate) {
      setCheckedItems([true, true]);
    } else if (allChecked) {
      setCheckedItems([false, false]);
    } else if (checkedItemsRef.current) {
      setCheckedItems(checkedItemsRef.current);
    } else {
      setCheckedItems([true, true]);
    }
  };

  const handleCatChange = (e) => {
    const newCheckedItems = [e.target.checked, checkedItems[1]];
    if (!newCheckedItems.some(Boolean) || newCheckedItems.every(Boolean)) {
      checkedItemsRef.current = null;
    }
    setCheckedItems(newCheckedItems);
  };

  const handleDogChange = (e) => {
    const newCheckedItems = [checkedItems[0], e.target.checked];
    if (!newCheckedItems.some(Boolean) || newCheckedItems.every(Boolean)) {
      checkedItemsRef.current = null;
    }
    setCheckedItems(newCheckedItems);
  };

  return (
    <Flex direction="column" gap="0">
      <CheckboxField
        name="all-pets"
        label="All Pets"
        value="allPets"
        checked={allChecked}
        isIndeterminate={isIndeterminate}
        onChange={handleAllPetsChange}
      />
      <View paddingLeft="25px">
        <CheckboxField
          name="cat"
          label="Cat"
          value="cat"
          checked={checkedItems[0]}
          onChange={handleCatChange}
        />
        <CheckboxField
          name="dog"
          label="Dog"
          value="dog"
          checked={checkedItems[1]}
          onChange={handleDogChange}
        />
      </View>
    </Flex>
  );
};

Validation error

Use the hasError and errorMessage props to mark a CheckboxField as having an validation error.

I agree to the terms and conditions
Submit
Copy
import * as React from 'react';
import { CheckboxField, Button } from '@aws-amplify/ui-react';

export const CheckboxFieldWithErrorExample = () => {
  const [checked, setChecked] = React.useState(false);
  const [hasError, setHasError] = React.useState(false);

  const onSubmit = (event) => {
    event.preventDefault();
    if (!checked) {
      setHasError(true);
    } else {
      setHasError(false);
      alert(`success`);
    }
  };

  return (
    <form onSubmit={onSubmit}>
      <CheckboxField
        label="I agree to the terms and conditions"
        name="toc"
        value="yes"
        checked={checked}
        hasError={hasError}
        errorMessage="Please agree to the terms and conditions"
        onChange={(e) => setChecked(e.target.checked)}
      />
      <Button type="submit">Submit</Button>
    </form>
  );
};

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Subscribe
Subscribe
Copy
import * as React from 'react';
import { CheckboxField, Flex } from '@aws-amplify/ui-react';

export const CheckboxFieldLabelHiddenExample = () => (
  <Flex>
    <CheckboxField label="Subscribe" name="subscribe" value="yes" />
    <CheckboxField
      label="Subscribe"
      name="subscribe"
      value="yes"
      labelHidden={true}
    />
  </Flex>
);

Standard HTML attributes

The CheckboxField will accept any of the standard HTML attributes that a <input> element accepts. Standard <input> attributes can be found in the MDN Documentation

Subscribe to our newsletter
Copy
<CheckboxField label="Subscribe to our newsletter" name="subscribe" value="yes" />

Styling
Theme

You can customize the appearance of all CheckboxField components in your application with a Theme.

CheckboxField Theme Source

Subscribe
Disabled example
Copy
import { CheckboxField, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'checkbox-theme',
  tokens: {
    components: {
      checkbox: {
        button: {
          color: { value: '{colors.yellow.40}' },
          _focus: {
            outlineColor: { value: '{colors.blue.40}' },
            borderColor: { value: '{colors.red.40}' },
          },
        },
        icon: {
          backgroundColor: { value: '{colors.secondary.80}' },
        },
        label: {
          color: { value: '{colors.purple.80}' },
          _disabled: {
            color: { value: '{colors.purple.60}' },
          },
        },
      },
    },
  },
};

export const CheckboxFieldThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <CheckboxField label="Subscribe" name="subscribe" />
    <CheckboxField
      label="Disabled example"
      name="disabledExample"
      value="yes"
      isDisabled={true}
    />
  </ThemeProvider>
);

Icons
Cat
Dog
Copy
import { CheckboxField, Flex, IconsProvider } from '@aws-amplify/ui-react';
import { HiMinus, HiCheck } from 'react-icons/hi';

export const CheckboxFieldIconExample = () => (
  <IconsProvider
    icons={{
      checkbox: {
        checked: <HiCheck />,
        indeterminate: <HiMinus />,
      },
    }}
  >
    <Flex direction="column">
      <CheckboxField name="cat" label="Cat" value="cat" defaultChecked={true} />
      <CheckboxField name="dog" label="Dog" value="dog" isIndeterminate />
    </Flex>
  </IconsProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-checkboxfield	Top level element that wraps the CheckboxField primitive
Global styling

To override styling on all Checkbox icons, you can set the Amplify CSS variables or use the built-in .amplify-checkbox__icon class.

/* styles.css */
:root {
  --amplify-components-checkbox-icon-background-color: var(
    --amplify-colors-blue-80
  );
}
/* OR */
.amplify-checkbox__icon {
  background-color: var(--amplify-colors-blue-80);
}

Subscribe
Subscribe
Local styling

To override styling on a specific Checkbox, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

/* styles.css */
.custom-checkbox .amplify-checkbox {
  align-items: flex-start;
  flex-direction: column-reverse;
}

import { CheckboxField } from '@aws-amplify/ui-react';
import './styles.css';

<CheckboxField
  label="Subscribe"
  name="subscribe"
  value="yes"
  className="custom-checkbox"
/>;

Subscribe

Using data attributes:

/* styles.css */

.amplify-checkbox__icon[data-checked='true'] {
  background-color: var(--amplify-colors-purple-80);
}

import { CheckboxField } from '@aws-amplify/ui-react';
import './styles.css';

<CheckboxField label="Subscribe" name="subscribe" value="yes" />;

Subscribe

Using style props:

import { CheckboxField } from '@aws-amplify/ui-react';

<CheckboxField label="Subscribe" name="subscribe" value="yes" gap="1rem" />;

Subscribe

--------------------------------------------------------------------------------

Title: Autocomplete | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/autocomplete
HTML Content:
Autocomplete

Autocomplete is a SearchField enhanced by a list of suggested options.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Autocomplete
label
placeholder
size
default
small
large
variation
default
quiet
isLoading
labelHidden
isDisabled
Copy
<Autocomplete
  label="Autocomplete"
  options={[{"id":"apple","label":"apple"},{"id":"banana","label":"banana"},{"id":"cherry","label":"cherry"},{"id":"grape","label":"grape"},{"id":"kiwis","label":"kiwis"},{"id":"lemon","label":"lemon"},{"id":"mango","label":"mango"},{"id":"orange","label":"orange"},{"id":"strawberry","label":"strawberry"}]}
  placeholder="Search here..."
/>
Usage

Import the Autocomplete, provide options for autocomplete and a label for accessibility/usability.

Default autocomplete
Copy
import { Autocomplete } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const DefaultAutocompleteExample = () => (
  <Autocomplete label="Default autocomplete" options={options} />
);

Accessibility / Label behavior

The form primitives are accessible by default. A matching label HTML element will be connected to the form control -- simply provide a label prop with a string or ReactNode. If no id is provided, one will be automatically generated and connected to both label and form control elements.

How can I visually hide the label while maintaining accessibility?

In some applications it may be desirable to hide the label when the field purpose is visually apparent such as a search field with button. The labelHidden prop can be used to visually hide the label while still keeping it visible for screenreaders.

UX Tip: refrain hiding label if doing so hides important information needed by the user to fill out the field.

Controlled component
Controlled autocomplete
Copy
import { Autocomplete } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompleteControlledExample = () => {
  const [value, setValue] = React.useState('');

  const onChange = (event) => {
    setValue(event.target.value);
  };

  // It is your responsibility to set up onSelect
  const onSelect = (option) => {
    const { label } = option;
    setValue(label);
  };

  // It is your responsibility to set up onClear
  const onClear = () => {
    setValue('');
  };

  return (
    <Autocomplete
      label="Controlled autocomplete"
      options={options}
      value={value}
      onChange={onChange}
      onClear={onClear}
      onSelect={onSelect}
    />
  );
};


Note: When using Autocomplete in controlled way, you are also responsible to set up onClear and onSelect event handlers in addition to onChange since the input value is under your control.

Placeholder

Text that appears in Autocomplete when it has no value set.

Autocomplete placeholder example
Copy
import { Autocomplete } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompletePlaceholderExample = () => (
  <Autocomplete
    label="Autocomplete placeholder example"
    options={options}
    placeholder="Search for fruit..."
  />
);

Sizes

Use the size prop to change Autocomplete size. Available options are small, large, and none (default).

Autocomplete size example
Autocomplete size example
Autocomplete size example
Copy
import { Autocomplete, Flex } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompleteSizeExample = () => (
  <Flex direction="column">
    <Autocomplete
      label="Autocomplete size example"
      options={options}
      size="small"
    />
    <Autocomplete label="Autocomplete size example" options={options} />
    <Autocomplete
      label="Autocomplete size example"
      options={options}
      size="large"
    />
  </Flex>
);

Variations

There are two variation styles available: default and quiet.

Autocomplete variation example
Autocomplete variation example
Copy
import { Autocomplete, Flex } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompleteVariationExample = () => (
  <Flex direction="column">
    <Autocomplete label="Autocomplete variation example" options={options} />
    <Autocomplete
      label="Autocomplete variation example"
      options={options}
      variation="quiet"
    />
  </Flex>
);

Loading state

By setting isLoading to true, Autocomplete will be in loading state.

Autocomplete in loading state
Copy
import { Autocomplete } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [];

export const AutocompleteLoadingStateExample = () => {
  return (
    <Autocomplete
      label="Autocomplete in loading state"
      options={options}
      isLoading
    />
  );
};

Custom filtering

By default, Autocomplete will filter against option label. You can customize the filtering behavior by providing optionFilter.

Autocomplete with custom filtering
Copy
import { Autocomplete, HighlightMatch } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  {
    id: 'apple',
    label: 'apple',
    description: 'An apple is an edible fruit produced by an apple tree.',
  },
  {
    id: 'banana',
    label: 'banana',
    description:
      'A banana is an elongated, edible fruit produced by several kinds of large herbaceous flowering plants.',
  },
  {
    id: 'cherry',
    label: 'cherry',
    description:
      'A cherry is the fruit of many plants of the genus Prunus, and is a fleshy drupe.',
  },
  {
    id: 'grape',
    label: 'grape',
    description:
      'A grape is a fruit, botanically a berry, of the deciduous woody vines of the flowering plant genus Vitis.',
  },
  {
    id: 'kiwis',
    label: 'kiwis',
    description:
      'Kiwifruit or Chinese gooseberry is the edible berry of several species of woody vines in the genus Actinidia.',
  },
  {
    id: 'lemon',
    label: 'lemon',
    description:
      'The lemon is a species of small evergreen trees in the flowering plant family Rutaceae.',
  },
  {
    id: 'mango',
    label: 'mango',
    description:
      'A mango is an edible stone fruit produced by the tropical tree Mangifera indica.',
  },
  {
    id: 'orange',
    label: 'orange',
    description:
      'An orange is a fruit of various citrus species in the family Rutaceae.',
  },
  {
    id: 'strawberry',
    label: 'strawberry',
    description:
      'The garden strawberry is a widely grown hybrid species of the genus Fragaria, collectively known as the strawberries.',
  },
];

const renderOptions = (option, value) => {
  return <HighlightMatch query={value}>{option?.description}</HighlightMatch>;
};

export const AutocompleteCustomFilteringExample = () => {
  const [value, setValue] = React.useState('');

  // Create your own filtering
  const optionFilter = (option, value) => {
    // filter options against description
    return option?.description?.includes(value);
  };

  return (
    <Autocomplete
      label="Autocomplete with custom filtering"
      optionFilter={optionFilter}
      options={options}
      value={value}
      onChange={(event) => setValue(event.target.value)}
      onClear={() => setValue('')}
      onSelect={(option) => {
        setValue(option?.description);
      }}
      renderOption={renderOptions}
    />
  );
};


Note: When you create your own filtering logic, match highlighting will be disabled. If you want to enable it, you can build a custom option and wrap the label with HighlightMatch. See custom option example.

Custom option

You can create a custom option by providing renderOption.

Autocomplete with custom options
Copy
import {
  Autocomplete,
  Flex,
  HighlightMatch,
  Image,
} from '@aws-amplify/ui-react';
import * as React from 'react';

// When you run the code locally, you need to update the url with yours.
const options = [
  { id: 'cat-1', label: 'cat-1', url: '/cats/1.jpg' },
  { id: 'cat-2', label: 'cat-2', url: '/cats/2.jpg' },
  { id: 'cat-3', label: 'cat-3', url: '/cats/3.jpg' },
  { id: 'cat-4', label: 'cat-4', url: '/cats/4.jpg' },
  { id: 'cat-5', label: 'cat-5', url: '/cats/5.jpg' },
];

export const AutocompleteCustomOptionExample = () => {
  const renderOption = (option, value) => {
    const { label, url } = option;
    return (
      <Flex alignItems="center">
        <Image src={url} alt={label} width="100px" height="100px" />
        <HighlightMatch query={value}>{label}</HighlightMatch>
      </Flex>
    );
  };

  return (
    <Autocomplete
      label="Autocomplete with custom options"
      options={options}
      renderOption={renderOption}
    />
  );
};

Custom menu

You can customize the option menu by setting menuSlots. The available slots accept a ReactNode.

Custom header
Autocomplete custom header example
Copy
import { Autocomplete, Divider, View } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompleteCustomHeaderExample = () => (
  <Autocomplete
    label="Autocomplete custom header example"
    options={options}
    menuSlots={{
      Header: (
        <View padding="xxxs">
          <View>Search results:</View>
          <Divider />
        </View>
      ),
    }}
  />
);

Custom footer
Autocomplete custom footer example
Copy
import { Autocomplete, Divider, Link, View } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompleteCustomFooterExample = () => (
  <Autocomplete
    label="Autocomplete custom footer example"
    options={options}
    menuSlots={{
      Footer: (
        <View padding="xxxs">
          <Divider />
          <View>
            <Link>See more results...</Link>
          </View>
        </View>
      ),
    }}
  />
);

Custom empty
Autocomplete custom empty example
Copy
import { Autocomplete, View } from '@aws-amplify/ui-react';
import * as React from 'react';

export const AutocompleteCustomEmptyExample = () => (
  <Autocomplete
    label="Autocomplete custom empty example"
    options={[]}
    menuSlots={{
      Empty: <View>No results found :(</View>,
    }}
  />
);

Custom loading
Autocomplete custom loading example
Copy
import { Autocomplete, Flex, Loader } from '@aws-amplify/ui-react';
import * as React from 'react';

export const AutocompleteCustomLoadingExample = () => (
  <Autocomplete
    label="Autocomplete custom loading example"
    options={[]}
    menuSlots={{
      LoadingIndicator: (
        <Flex alignItems="center" gap="0.25rem">
          <Loader />
          Loading more cats...
        </Flex>
      ),
    }}
    isLoading={true}
  />
);

Styling
Theme

You can customize the appearance of all Autocomplete components in your application with a Theme.

Autocomplete Theme Source

Autocomplete theme example
Copy
import { Autocomplete, ThemeProvider, Theme } from '@aws-amplify/ui-react';
import * as React from 'react';

const theme: Theme = {
  name: 'autocomplete-theme',
  tokens: {
    components: {
      autocomplete: {
        menu: {
          option: {
            _active: {
              backgroundColor: {
                value: '{colors.secondary.80}',
              },
            },
          },
        },
      },
    },
  },
};

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompleteThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Autocomplete label="Autocomplete theme example" options={options} />
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-autocomplete	Top level element that wraps the Autocomplete primitive
amplify-autocomplete__menu	Top level element that wraps the dropdown menu
amplify-autocomplete__menu--empty	Class applied to the no options slot of menu
amplify-autocomplete__menu__footer	Class applied to menu footer
amplify-autocomplete__menu__header	Class applied to menu header
amplify-autocomplete__menu--loading	Class applied to the loading slot of menu
amplify-autocomplete__menu__option	Class applied to each li option
amplify-autocomplete__menu__options	Class applied to ul container element
Global styling

To override styling on all Autocompletes, you can set the Amplify CSS variables with the built-in .amplify-autocomplete class.

Copy
/* styles.css */
.amplify-autocomplete {
  --amplify-components-autocomplete-menu-option-active-background-color: var(--amplify-colors-secondary-80);
}

Local styling

To override styling on a specific Autocomplete, you can use (in order of increasing specificity): a class selector and style props.

Using a class selector:

Copy
/* styles.css */
.my-autocomplete {
  --amplify-components-autocomplete-menu-option-active-background-color: var(--amplify-colors-secondary-80);
}


Using style props:

Autocomplete style props example
Copy
import { Autocomplete } from '@aws-amplify/ui-react';
import * as React from 'react';

const options = [
  { id: 'apple', label: 'apple' },
  { id: 'banana', label: 'banana' },
  { id: 'cherry', label: 'cherry' },
  { id: 'grape', label: 'grape' },
  { id: 'kiwis', label: 'kiwis' },
  { id: 'lemon', label: 'lemon' },
  { id: 'mango', label: 'mango' },
  { id: 'orange', label: 'orange' },
  { id: 'strawberry', label: 'strawberry' },
];

export const AutocompleteStylePropsExample = () => (
  <Autocomplete
    label="Autocomplete style props example"
    options={options}
    borderRadius="10px"
  />
);


--------------------------------------------------------------------------------

Title: Tabs | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/tabs
HTML Content:
Tabs

Tabs allow users to navigate between sections of related content.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
Tab 1
Tab 2
Disabled tab
Tab content #1
Spacing
default
equal
relative
Indicator Position
default
top
Justify Content
flex-start
flex-end
center
space-between
space-around
space-evenly
Copy
<Tabs
  justifyContent="flex-start"
  defaultValue='Tab 1'
  items={[
    { label: 'Tab 1', value: 'Tab 1', content: 'Tab content #1' },
    { label: 'Tab 2', value: 'Tab 2', content: 'Tab content #2' },
    { label: 'Disabled tab', value: 'Tab 3', content: 'Tab content #3', isDisabled: true },
  ]}
/>
Usage

The Tabs component had some breaking changes in v6. Please see the migration docs for more information.

Import the Tabs component and pass an array of items and a defaultValue.

Tab 1
Tab 2
Tab 3
Tab content #1
Copy
import { Tabs } from '@aws-amplify/ui-react';

export const DefaultTabUncontrolled = () => (
  <Tabs
    defaultValue={'Tab 1'}
    items={[
      { label: 'Tab 1', value: 'Tab 1', content: 'Tab content #1' },
      { label: 'Tab 2', value: 'Tab 2', content: 'Tab content #2' },
      { label: 'Tab 3', value: 'Tab 3', content: 'Tab content #3' },
    ]}
  />
);

Controlled Tabs

The Tabs component also works as a controlled component. This allows you to programmatically set the current tab by setting the value prop. You can also use the onValueChange handler to know when a Tab would change.

Always include a defaultValue or value prop. If both are undefined, no initial tab is selected!

First
Second
Content of the first tab
Copy
import { useState } from 'react';
import { Tabs, Button } from '@aws-amplify/ui-react';

export const ControlledTabExample = () => {
  const [tab, setTab] = useState('1');
  return (
    <Tabs
      value={tab}
      onValueChange={(tab) => setTab(tab)}
      items={[
        {
          label: 'First',
          value: '1',
          content: 'Content of the first tab',
        },
        {
          label: 'Second',
          value: '2',
          content: (
            <>
              <p>Content of the second tab.</p>
              <Button isFullWidth onClick={() => setTab('1')}>
                Go to first tab
              </Button>
            </>
          ),
        },
      ]}
    />
  );
};

Lazy loading tabs

By default, each tab's content is always rendered into the DOM and hidden with CSS. This allows search engines and users (using cmd/ctrl+F) to see all the tab content. Sometimes this is not preferrable and you would rather only load tab content when a tab is shown. To do that use the isLazy prop.

Tab 1
Tab 2
Tab 3
Tab 1 content
Copy
import { Tabs } from '@aws-amplify/ui-react';

export const LazyTabsExample = () => {
  return (
    <Tabs
      defaultValue="1"
      items={[
        { label: 'Tab 1', value: '1', content: 'Tab 1 content' },
        { label: 'Tab 2', value: '2', content: 'Tab 2 content' },
        { label: 'Tab 3', value: '3', content: 'Tab 3 content' },
      ]}
      isLazy
    />
  );
};

Tab spacing

In the Tabs component, use the spacing prop to control how Tabs take up the remaining space. Pass equal to make each tab take up the same amount of space, and relative to make each tab take up space relative to the size of its title.

First
This is the second tab
Really long title for demonstration
Content of the first tab
First
This is the second tab
Really long title for demonstration
Content of the first tab
Copy
import { Flex, Tabs } from '@aws-amplify/ui-react';

export const Spacing = () => (
  <Flex direction="column" gap="2rem">
    <Tabs.Container defaultValue="1">
      <Tabs.List spacing="equal">
        <Tabs.Item value="1">First</Tabs.Item>
        <Tabs.Item value="2">This is the second tab</Tabs.Item>
        <Tabs.Item value="3">Really long title for demonstration</Tabs.Item>
      </Tabs.List>
      <Tabs.Panel value="1">Content of the first tab</Tabs.Panel>
      <Tabs.Panel value="2">Content of the second tab</Tabs.Panel>
      <Tabs.Panel value="3">Content of the third tab</Tabs.Panel>
    </Tabs.Container>
    <Tabs.Container defaultValue="1">
      <Tabs.List spacing="relative">
        <Tabs.Item value="1">First</Tabs.Item>
        <Tabs.Item value="2">This is the second tab</Tabs.Item>
        <Tabs.Item value="3">Really long title for demonstration</Tabs.Item>
      </Tabs.List>
      <Tabs.Panel value="1">Content of the first tab</Tabs.Panel>
      <Tabs.Panel value="2">Content of the second tab</Tabs.Panel>
      <Tabs.Panel value="3">Content of the third tab</Tabs.Panel>
    </Tabs.Container>
  </Flex>
);

Justify Content

In the Tabs component, use the justifyContent prop to control how space is distributed between and around the Tabs. Available options include flex-start (default), flex-end, center, space-between, space-around, and space-evenly.

Note: this prop only has an effect if the spacing prop is not set, otherwise the spacing prop will take precedence.

First
Second
Third
Tabs are centered
First
Second
Third
Tabs are stacked to the right
Copy
import { Flex, Tabs } from '@aws-amplify/ui-react';

export const JustifyContent = () => (
  <Flex direction="column" gap="2rem">
    <Tabs.Container defaultValue="First">
      <Tabs.List justifyContent="center">
        <Tabs.Item value="First">First</Tabs.Item>
        <Tabs.Item value="Second">Second</Tabs.Item>
        <Tabs.Item value="Third">Third</Tabs.Item>
      </Tabs.List>
      <Tabs.Panel value="First">Tabs are centered</Tabs.Panel>
      <Tabs.Panel value="Second">Content of the second tab</Tabs.Panel>
      <Tabs.Panel value="Third">Content of the third tab</Tabs.Panel>
    </Tabs.Container>

    <Tabs.Container defaultValue="First">
      <Tabs.List justifyContent="flex-end">
        <Tabs.Item value="First">First</Tabs.Item>
        <Tabs.Item value="Second">Second</Tabs.Item>
        <Tabs.Item value="Third">Third</Tabs.Item>
      </Tabs.List>
      <Tabs.Panel value="First">Tabs are stacked to the right</Tabs.Panel>
      <Tabs.Panel value="Second">Content of the second tab</Tabs.Panel>
      <Tabs.Panel value="Third">Content of the third tab</Tabs.Panel>
    </Tabs.Container>
  </Flex>
);

Indicator Position

You can change the position of the tab border and current tab indicator with the indicatorPosition prop. The only values are top or bottom (default).

Tab 1
Tab 2
Copy
import { Tabs } from '@aws-amplify/ui-react';

export const IndicatorPosition = () => (
  <Tabs.Container>
    <Tabs.List indicatorPosition="top">
      <Tabs.Item value="1">Tab 1</Tabs.Item>
      <Tabs.Item value="2">Tab 2</Tabs.Item>
    </Tabs.List>
    <Tabs.Panel value="1">Tab 1 content</Tabs.Panel>
    <Tabs.Panel value="2">Tab 2 content</Tabs.Panel>
  </Tabs.Container>
);

Disabled Tabs

In the TabItem component, use the isDisabled prop to make a Tab not clickable and its content not visible to the user.

Tab 1
Tab 2
Tab 3
Tab 1 Content
Copy
import { Tabs } from '@aws-amplify/ui-react';

export const DisabledTabs = () => (
  <Tabs.Container defaultValue="1">
    <Tabs.List>
      <Tabs.Item value="1">Tab 1</Tabs.Item>
      <Tabs.Item value="2">Tab 2</Tabs.Item>
      <Tabs.Item value="3" isDisabled>
        Tab 3
      </Tabs.Item>
    </Tabs.List>
    <Tabs.Panel value="1">Tab 1 Content</Tabs.Panel>
    <Tabs.Panel value="2">Tab 2 Content</Tabs.Panel>
    <Tabs.Panel value="3" isDisabled>
      This Tab is not clickable and will not display its content to the user.
    </Tabs.Panel>
  </Tabs.Container>
);

Composable

The Tabs component is composable so you can rearrange parts of the tabs or access any props for each sub-component. Here are the composable parts of the Tabs component:

<Tabs.Container>: outermost element to wrap all the pieces
<Tabs.List>: the tab bar that contains the tabs
<Tabs.Item>: each individual tab in the tab bar
<Tabs.Panel>: the content for each tab

There should be a 1-to-1 relationship between <Tabs.Item>s and <Tabs.Panel>s. The corresponding item/panel should have the same value.

All of the visual props, indicatorPosition, spacing, justifyContent, should be placed on the <Tabs.List> element. The other props like defaultValue and isLazy should go on the <Tabs.Container> element.

Tab 1
Tab 2
Tab 3
Tab 1 content
Copy
import { Tabs } from '@aws-amplify/ui-react';

export const ComposedTabsExample = () => {
  return (
    <Tabs.Container defaultValue="Tab 1">
      <Tabs.List>
        <Tabs.Item value="Tab 1">Tab 1</Tabs.Item>
        <Tabs.Item value="Tab 2">Tab 2</Tabs.Item>
        <Tabs.Item value="Tab 3" isDisabled>
          Tab 3
        </Tabs.Item>
      </Tabs.List>
      <Tabs.Panel value="Tab 1">Tab 1 content</Tabs.Panel>
      <Tabs.Panel value="Tab 2">Tab 2 content</Tabs.Panel>
      <Tabs.Panel value="Tab 3" isDisabled>
        Tab 3 content
      </Tabs.Panel>
    </Tabs.Container>
  );
};


With the composable interface you can add elements to the tabs like badges and icons

Email 21
 Email
Content of the first tab
Copy
import { Badge, Icon, Tabs } from '@aws-amplify/ui-react';

const IconEmail = () => {
  return (
    <Icon
      pathData="M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6ZM20 6L12 11L4 6H20ZM20 18H4V8L12 13L20 8V18Z"
      ariaLabel=""
    />
  );
};

export const BadgeIcons = () => (
  <Tabs.Container defaultValue="1">
    <Tabs.List>
      <Tabs.Item value="1">
        Email{' '}
        <Badge size="small" variation="info">
          21
        </Badge>
      </Tabs.Item>
      <Tabs.Item value="2">
        <IconEmail /> Email
      </Tabs.Item>
    </Tabs.List>
    <Tabs.Panel value="1">Content of the first tab</Tabs.Panel>
    <Tabs.Panel value="2">Content of the second tab</Tabs.Panel>
  </Tabs.Container>
);

Styling
Theme

You can customize the appearance of all Tabs components in your application with a Theme.

Tabs Theme Source

Tab 1
Tab 2
Tab 3
Tab 1 Content
Copy
import { Tabs, ThemeProvider, createTheme } from '@aws-amplify/ui-react';

const theme = createTheme({
  name: 'tabs-theme',
  tokens: {
    components: {
      tabs: {
        borderColor: { value: '{colors.neutral.20}' },
        item: {
          color: { value: '{colors.blue.80}' },
          fontSize: { value: '{fontSizes.xl}' },
          fontWeight: { value: '{fontWeights.normal}' },

          _hover: {
            color: { value: '{colors.blue.60}' },
          },
          _focus: {
            color: { value: '{colors.blue.60}' },
          },
          _active: {
            color: { value: '{colors.blue.80}' },
            borderColor: { value: '{colors.blue.80}' },
            backgroundColor: { value: '{colors.blue.10}' },
          },
          _disabled: {
            color: { value: 'gray' },
            backgroundColor: { value: 'transparent' },
          },
        },
      },
    },
  },
});

export const TabsThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Tabs.Container defaultValue="1">
        <Tabs.List>
          <Tabs.Item value="1">Tab 1</Tabs.Item>
          <Tabs.Item value="2">Tab 2</Tabs.Item>
          <Tabs.Item value="3" isDisabled>
            Tab 3
          </Tabs.Item>
        </Tabs.List>
        <Tabs.Panel value="1">Tab 1 Content</Tabs.Panel>
        <Tabs.Panel value="2">Tab 2 Content</Tabs.Panel>
        <Tabs.Panel value="3" isDisabled>
          Tab 3 Content
        </Tabs.Panel>
      </Tabs.Container>
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-tabs	Top level element that wraps the Tabs primitive
amplify-tabs__item	Tab element (button) in a TabPanel
amplify-tabs__list	Top level element that wraps the TabItem primitive
amplify-tabs__panel	Top level element that wraps the TabItem primitive
Global styling

To override styling on all Tabs components, you can set Amplify CSS variables or use the target classes like .amplify-tabs class.

Tab 1
Tab 2
Tab 3
Tab content #1
Copy
/* styles.css */
[data-amplify-theme] {
  /* background for the whole tab bar */
  --amplify-components-tabs-background-color: var(
    --amplify-colors-background-secondary
  );
  /* background for each tab */
  --amplify-components-tabs-item-background-color: var(
    --amplify-colors-background-primary
  );
}
/* OR */
.amplify-tabs {
  background-color: var(--amplify-colors-background-secondary);
}

.amplify-tabs__item {
  background-color: var(--amplify-colors-background-primary);
}


To replace the Tabs styling, unset it:

.amplify-tabs {
  all: unset;
  /* Add your styling here*/
}

.amplify-tabs__item {
  all: unset;
  /* Add your styling here*/
}

Local styling

To override styling on a specific Tabs component, you can use (in order of increasing specificity): a class selector or style props.

Using a class selector
Tab 1
Tab 2
Content of Tab 1
Copy
/* styles.css */
.custom-tabs {
  background-color: var(--amplify-colors-primary-60);
  justify-content: center;
  border-color: transparent;
}

.custom-tab-item {
background-color: var(--amplify-colors-primary-80);
color: var(--amplify-colors-font-inverse);
border-color: transparent;
}

.custom-tab-item:hover {
color: var(--amplify-colors-font-inverse);
background-color: var(--amplify-colors-primary-90);
}

.custom-tab-item[aria-selected='true'] {
color: var(--amplify-colors-font-inverse);
border-color: transparent;
background-color: var(--amplify-colors-primary-100);
}


Using style props
Tab 1
Tab 2
Content of Tab 1
Copy
import { Tabs } from '@aws-amplify/ui-react';

export const StyleProps = () => {
  return (
    <Tabs.Container defaultValue="1">
      <Tabs.List backgroundColor="background.secondary">
        <Tabs.Item value="1" color="font.secondary">
          Tab 1
        </Tabs.Item>
        <Tabs.Item value="2" color="secondary.60">
          Tab 2
        </Tabs.Item>
      </Tabs.List>
      <Tabs.Panel value="1">Content of Tab 1</Tabs.Panel>
      <Tabs.Panel value="2">Content of Tab 2</Tabs.Panel>
    </Tabs.Container>
  );
};


Note: there is currently no way to style different states like hover using only style props. However Amplify UI works well with CSS in JS frameworks for this usecase. Take a look at the alternative styling docs for information how to use CSS in JS with Amplify UI.

Accessibility

Adheres to the Tabs WAI-ARIA design pattern.

We recommend passing an ariaLabel prop to help enable assistive technology.

Apples
Bananas
Play with the Tab and Arrow keys to engage with this component.
Copy
import { Tabs } from '@aws-amplify/ui-react';

export const AriaLabel = () => (
  <Tabs.Container ariaLabel="fruits" defaultValue="Apples">
    <Tabs.List>
      <Tabs.Item value="Apples">Apples</Tabs.Item>
      <Tabs.Item value="Bananas">Bananas</Tabs.Item>
    </Tabs.List>
    <Tabs.Panel value="Apples">
      Play with the Tab and Arrow keys to engage with this component.
    </Tabs.Panel>
    <Tabs.Panel value="Bananas">
      Notice how an outline is added when the :focus-visible pseudo-class is
      applied.
    </Tabs.Panel>
  </Tabs.Container>
);


--------------------------------------------------------------------------------

Title: Menu | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/menu
HTML Content:
Menu

Menu provides a way for users to navigate and select actions within an application.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
menuAlign
start
center
end
size
default
small
large
Copy
<Menu
  menuAlign="start"
>
  <MenuItem onClick={() => alert('Download')}>
    Download
  </MenuItem>
  <MenuItem onClick={() => alert('Create a Copy')}>
    Create a Copy
  </MenuItem>
  <MenuItem onClick={() => alert('Mark as Draft')}>
    Mark as Draft
  </MenuItem>
  <Divider />
  <MenuItem isDisabled onClick={() => alert('Delete')}>
    Delete
  </MenuItem>
  <MenuItem onClick={() => alert('Attend a workshop')}>
    Attend a workshop
  </MenuItem>
</Menu>
Usage

Import the Menu and MenuItem components. Note that the Menu component is rendered in a React Portal, so you can set the Menu button's width from its outer container.

Copy
import { Menu, MenuItem, View } from '@aws-amplify/ui-react';

export const BasicExample = () => {
  return (
    <View width="4rem">
      <Menu>
        <MenuItem>Option 1</MenuItem>
        <MenuItem>Option 2</MenuItem>
        <MenuItem>Option 3</MenuItem>
      </Menu>
    </View>
  );
};

Menu items

Use the MenuItem component to configure Menu options. The example below demonstrates how to add interactivity to the MenuItem's via the onClick handler, as well as how to use the Divider component and isDisabled prop.

Copy
import { Menu, MenuItem, View, Divider } from '@aws-amplify/ui-react';

export const MenuItemsExample = () => {
  return (
    <View width="4rem">
      <Menu>
        <MenuItem onClick={() => alert('Download')}>Download</MenuItem>
        <MenuItem onClick={() => alert('Create a Copy')}>
          Create a Copy
        </MenuItem>
        <Divider />
        <MenuItem isDisabled onClick={() => alert('Delete')}>
          Delete
        </MenuItem>
      </Menu>
    </View>
  );
};

Customize Menu button

The default Menu button can be customized by importing the MenuButton component and passing it to the Menu's trigger prop. MenuButton can take all the same props as Button.

Custom trigger button 🚀
Copy
import { Menu, MenuItem, MenuButton } from '@aws-amplify/ui-react';

export const MenuExample = () => (
  <Menu
    trigger={
      <MenuButton variation="primary" size="large" width="40%">
        Custom trigger button 🚀
      </MenuButton>
    }
  >
    <MenuItem>Download</MenuItem>
    <MenuItem>Create a Copy</MenuItem>
    <MenuItem>Mark as Draft</MenuItem>
  </Menu>
);

Menu alignment

To control the alignment of the Menu with the Menu button, use the menuAlign prop. Available options are start (default), center, and end.

Copy
import { Flex, Menu, MenuItem } from '@aws-amplify/ui-react';

export const MenuAlignExample = () => {
  return (
    <Flex direction="column" width="4rem">
      <Menu>
        <MenuItem>Align start (default)</MenuItem>
      </Menu>
      <Menu menuAlign="center">
        <MenuItem>Align center</MenuItem>
      </Menu>
      <Menu menuAlign="end">
        <MenuItem>Align end</MenuItem>
      </Menu>
    </Flex>
  );
};

Size

Control the size of the Menu button and items using the size prop. Available options are small, none (default), and large.

Copy
import { Menu, MenuItem, Flex } from '@aws-amplify/ui-react';

export const SizeExample = () => {
  return (
    <Flex direction="column" width="4rem">
      <Menu size="small">
        <MenuItem>Download</MenuItem>
        <MenuItem>Create a Copy</MenuItem>
      </Menu>
      <Menu>
        <MenuItem>Download</MenuItem>
        <MenuItem>Create a Copy</MenuItem>
      </Menu>
      <Menu size="large">
        <MenuItem>Download</MenuItem>
        <MenuItem>Create a Copy</MenuItem>
      </Menu>
    </Flex>
  );
};

Controlled Menu

Create a controlled Menu using the isOpen and onOpenChange props.

Copy
import * as React from 'react';
import { Menu, MenuItem, View } from '@aws-amplify/ui-react';

export const ControlledExample = () => {
  const [isOpen, setIsOpen] = React.useState(false);

  const handleOpenChange = (open) => {
    setIsOpen(open);
    // Do something else
  };

  const closeMenu = () => setIsOpen(false);

  return (
    <View width="4rem">
      <Menu
        isOpen={isOpen}
        onOpenChange={handleOpenChange}
        width="3rem"
        maxWidth="4rem"
      >
        <MenuItem
          onClick={() => {
            closeMenu();
            alert('Download');
          }}
        >
          Download
        </MenuItem>
        <MenuItem
          onClick={() => {
            closeMenu();
            alert('Create a Copy');
          }}
        >
          Create a Copy
        </MenuItem>
        <MenuItem
          onClick={() => {
            closeMenu();
            alert('Mark as Draft');
          }}
        >
          Mark as Draft
        </MenuItem>
      </Menu>
    </View>
  );
};

Styling
Theme

You can customize the appearance of all Menu components in your application with a Theme.

Menu Theme Source

Copy
import { Menu, MenuItem, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'menu-theme',
  tokens: {
    components: {
      menu: {
        backgroundColor: { value: '{colors.blue.20}' },
        borderRadius: { value: '0' },
        item: {
          minHeight: { value: '5rem' },
        },
      },
    },
  },
};

export const MenuThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Menu>
        <MenuItem>Download</MenuItem>
        <MenuItem>Create a Copy</MenuItem>
        <MenuItem>Mark as Draft</MenuItem>
      </Menu>
    </ThemeProvider>
  );
};

Icons
Copy
import { Menu, MenuItem, IconsProvider } from '@aws-amplify/ui-react';
import { FiMoreHorizontal } from 'react-icons/fi';

export const MenuIconExample = () => (
  <IconsProvider
    icons={{
      menu: {
        menu: <FiMoreHorizontal />,
      },
    }}
  >
    <Menu>
      <MenuItem>Download</MenuItem>
      <MenuItem>Create a Copy</MenuItem>
      <MenuItem>Mark as Draft</MenuItem>
    </Menu>
  </IconsProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-menu__content	Menu content container (Flex)
amplify-menu__wrapper	Menu content wrapper
amplify-menu__content__item	Menu item button (MenuButton, wrapped in amplify-menu-content class)
amplify-menu__trigger	Menu trigger button (MenuButton, not wrapped in amplify-menu-content class)
Global styling

To override styling on all Menus, you can set the Amplify CSS variables with the built-in classes.

/* styles.css */
.amplify-menu-content {
  --amplify-components-button-color: var(--amplify-colors-secondary-90);
}
.amplify-menu-trigger {
  --amplify-components-button-border-color: var(
    --amplify-colors-secondary-90
  );
  --amplify-components-button-color: var(--amplify-colors-secondary-90);
}

import { Menu, MenuItem } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

import './styles.css';

export const GlobalStylingExample = () => (
  <Menu>
    <MenuItem>Download</MenuItem>
    <MenuItem>Create a Copy</MenuItem>
    <MenuItem>Mark as Draft</MenuItem>
  </Menu>
);

Local styling

To override styling on a specific Menu, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Note: The classname prop is applied to the Menu dropdown content. Use the triggerClassName prop to apply a class to the menu trigger button.

/* styles.css */
.my-menu-trigger.amplify-menu-trigger {
  border-color: var(--amplify-colors-secondary-90);
  color: var(--amplify-colors-secondary-90);
}
.my-menu-content .amplify-menu-content__item {
  color: var(--amplify-colors-secondary-90);
}
.my-menu-content .amplify-menu-content__item:hover {
  background-color: var(--amplify-colors-secondary-90);
}

import { Menu, MenuItem } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

import './styles.css';

export const ClassNameExample = () => (
  <Menu className="my-menu-content" triggerClassName="my-menu-trigger">
    <MenuItem>Download</MenuItem>
    <MenuItem>Create a Copy</MenuItem>
    <MenuItem>Mark as Draft</MenuItem>
  </Menu>
);


Using data attributes:

/* styles.css */
.amplify-menu-content__item[data-size='large'] {
  font-size: var(--amplify-font-sizes-xxxxl);
}

import { Menu, MenuItem } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

import './styles.css';

export const DataAttributesExample = () => (
  <Menu size="large">
    <MenuItem>Download</MenuItem>
    <MenuItem>Create a Copy</MenuItem>
    <MenuItem>Mark as Draft</MenuItem>
  </Menu>
);


Using style props:

Copy
import { Menu, MenuItem, View, useTheme } from '@aws-amplify/ui-react';

export const StylePropsExample = () => {
  const { tokens } = useTheme();

  return (
    <View width="4rem">
      <Menu direction="row">
        <MenuItem>Download</MenuItem>
        <MenuItem fontStyle="italic">Create a Copy</MenuItem>
        <MenuItem backgroundColor={tokens.colors.red[40]}>Delete</MenuItem>
      </Menu>
    </View>
  );
};


--------------------------------------------------------------------------------

Title: Link | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/link
HTML Content:
Link

Link renders an anchor element <a> by default and is primarily used for navigation.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Demo
My Demo Link
children
color
textDecoration
none
underline
underline overline #FF3028
underline dotted
underline dotted red
green wavy underline
isExternal
Copy
<Link
 href="https://ui.docs.amplify.aws/react/components/link"
 color="#007EB9"
>
 My Demo Link
</Link>
Usage

Import the Link component. Link renders an anchor element <a> by default, which accepts an href attribute that specifies the Link's destination.

My recursive link
Copy
import { Link } from '@aws-amplify/ui-react';

export const DefaultLinkExample = () => {
  return (
    <Link href="https://ui.docs.amplify.aws/react/components/link">
      My recursive link
    </Link>
  );
};

External Links

To create a Link which opens in a new tab, use the isExternal prop. Under the hood, isExternal sets target="_blank" and rel="noopener noreferrer" on the <a> anchor element.

This Link will open in new tab
Copy
import { Link } from '@aws-amplify/ui-react';

export const ExternalLinkExample = () => {
  return (
    <Link
      href="https://ui.docs.amplify.aws/react/components/link"
      isExternal={true}
    >
      This Link will open in new tab
    </Link>
  );
};

Routing Libraries

You can use a Link with any React routing library that supports custom components. Below is an example using Link with React Router v5, in which the Link is passed to the component prop as a custom navigation component:

Copy
import { Link, Flex, Heading } from '@aws-amplify/ui-react';

import {
  BrowserRouter as Router,
  Link as ReactRouterLink,
  Routes,
  Route,
} from 'react-router-dom';

function Home() {
  return <Heading level={2}>Home</Heading>;
}

function About() {
  return <Heading level={2}>About</Heading>;
}

function Users() {
  return <Heading level={2}>Users</Heading>;
}

function App() {
  return (
    <Router>
      <Flex>
        <ReactRouterLink to="/" component={Link}>Home</ReactRouterLink>
        <ReactRouterLink to="/about" component={Link}>About</ReactRouterLink>
        <ReactRouterLink to="/users" component={Link}>Users</ReactRouterLink>
      </Flex>

      <Routes>
        <Route path="/about" element={<About />} />
        <Route path="/users" element={<Users />} />
        <Route path="/" element={<Home />} />
      </Routes>
    </Router>
  );
}

export default App;

CSS Styling
Theme

You can customize the appearance of all Link components in your application with a Theme.

Link Theme Source

Themed Link
Copy
import { Link, Theme, ThemeProvider } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'link-theme',
  tokens: {
    components: {
      link: {
        focus: {
          color: { value: '{colors.blue.40}' },
        },
        hover: {
          color: { value: '{colors.blue.60}' },
        },
        visited: {
          color: { value: '{colors.blue.80}' },
        },
      },
    },
  },
};

export const LinkThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Link href="https://ui.docs.amplify.aws/react/components/link" isExternal>
        Themed Link
      </Link>
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-link	Top level element that wraps the Link primitive
Global Styling

To override styling on all Links, you can set the Amplify CSS variables or use the built in .amplify-link class.

CSS Pseudo-classes

To style the Link component in different states, you can use any of these four CSS Pseudo-classes: :active, :focus, :hover and :visited.

Link Global Styling
Copy
/* styles.css */
[data-amplify-theme] {
  --amplify-components-link-color: var(--amplify-colors-purple-80);
  --amplify-components-link-hover-color: var(--amplify-colors-purple-60);
}
/* OR */
.amplify-link {
  color: var(--amplify-colors-purple-80);
}
.amplify-link:hover {
  color: var(--amplify-colors-purple-60);
}

Local Styling

To override styling on a specific Link, you can use (in order of increasing specificity): a class selector or style props.

Using a class selector:

My Custom Link
Copy
/* styles.css */
.link-local-styles {
  color: var(--amplify-colors-blue-80);
  font-weight: var(--amplify-font-weights-bold);
}

.link-local-styles:hover {
  color: var(--amplify-colors-blue-60);
}

.link-local-styles:active {
  color: var(--amplify-colors-green-80);
}

Copy
import './styles.css';

<Link className="link-local-styles">My Custom Link</Link>;


Using style props:

Styled Link
Copy
import { Link } from '@aws-amplify/ui-react';

export const LinkStylePropsExample = () => {
  return (
    <Link fontSize="xl" fontWeight="bold" textDecoration="underline">
      Styled Link
    </Link>
  );
};


--------------------------------------------------------------------------------

Title: Breadcrumbs | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/breadcrumbs
HTML Content:
Breadcrumbs

The breadcrumbs component is a navigation list used to visualize the information architecture of a website and the users current place in the hierarchy.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props
Usage

Import the Breadcrumbs component and and render individual Breadcrumbs.Items with a Breadcrumbs.Link inside. The current breadcrumb should use the isCurrent prop which sets the appropriate aria attributes.

Home
/
Components
/
Breadcrumbs
Copy
import { Breadcrumbs } from '@aws-amplify/ui-react';

export default function DefaultBreadcrumbsExample() {
  return (
    <Breadcrumbs
      items={[
        {
          href: '/',
          label: 'Home',
        },
        {
          href: '/react/components',
          label: 'Components',
        },
        {
          label: 'Breadcrumbs',
        },
      ]}
    />
  );
}

Custom separator

You can customize the separator between breadcrumb links with the separator prop.

Home
|
Components
|
Breadcrumbs
Copy
import { Breadcrumbs } from '@aws-amplify/ui-react';

export default function CustomSeparatorExample() {
  return (
    <Breadcrumbs
      items={[
        {
          href: '/',
          label: 'Home',
        },
        {
          href: '/react/components',
          label: 'Components',
        },
        {
          label: 'Breadcrumbs',
          isCurrent: true,
        },
      ]}
      separator={<Breadcrumbs.Separator>|</Breadcrumbs.Separator>}
    />
  );
}

Custom separator with icon
Home
Components
Breadcrumbs
Copy
import { Breadcrumbs } from '@aws-amplify/ui-react';
import { MdChevronRight } from 'react-icons/md';

export default function CustomSeparatorIconExample() {
  return (
    <Breadcrumbs
      items={[
        {
          href: '/',
          label: 'Home',
        },
        {
          href: '/react/components',
          label: 'Components',
        },
        {
          label: 'Breadcrumbs',
        },
      ]}
      separator={<MdChevronRight />}
    />
  );
}

No separator
Home
Components
Breadcrumbs
Copy
import { Breadcrumbs } from '@aws-amplify/ui-react';

export default function NoSeparatorExample() {
  return (
    <Breadcrumbs
      items={[
        {
          href: '/',
          label: 'Home',
        },
        {
          href: '/react/components',
          label: 'Components',
        },
        {
          label: 'Breadcrumbs',
        },
      ]}
      separator={null}
    />
  );
}

Composable

The sub-components of the Breadcrumbs component are exposed so you can compose the Breadcrumbs however you want. With the composable API you can full control over what is rendered and unlock more advanced use-cases.

<Breadcrumbs.Container>
<Breadcrumbs.Item>
<Breadcrumbs.Link>
<Breadcrumbs.Separator>
Beginning and ending separator
/
Home
/
Components
/
Breadcrumbs
/
Copy
import { Breadcrumbs } from '@aws-amplify/ui-react';

export default function ComposableBreadcrumbsExample() {
  return (
    <Breadcrumbs.Container>
      <Breadcrumbs.Item>
        <Breadcrumbs.Separator />
        <Breadcrumbs.Link href="/">Home</Breadcrumbs.Link>
        <Breadcrumbs.Separator />
      </Breadcrumbs.Item>
      <Breadcrumbs.Item>
        <Breadcrumbs.Link href="/react/components">Components</Breadcrumbs.Link>
        <Breadcrumbs.Separator />
      </Breadcrumbs.Item>
      <Breadcrumbs.Item>
        <Breadcrumbs.Link href="/react/components/breadcrumbs" isCurrent>
          Breadcrumbs
        </Breadcrumbs.Link>
        <Breadcrumbs.Separator />
      </Breadcrumbs.Item>
    </Breadcrumbs.Container>
  );
}

NextJS

You can use Breacrumbs with NextJS's Link component and useRouter to automatically generate the breadcrumbs based on the current path.

Home
/
react
/
components
/
breadcrumbs
Copy
import NextLink from 'next/link';
import { Breadcrumbs } from '@aws-amplify/ui-react';
import { useRouter } from 'next/router';

export default function NextBreadcrumbsExample() {
  const { asPath } = useRouter();

  const nestedRoutes = asPath
    .split('#')[0]
    .split('?')[0]
    .split('/')
    .filter((subpath) => subpath.length > 0);

  const breadcrumbs = [
    { href: '/', text: 'Home' },
    ...nestedRoutes.map((subpath, i) => {
      const href = '/' + nestedRoutes.slice(0, i + 1).join('/');

      const text = subpath;
      return { href, text };
    }),
  ];

  return (
    <Breadcrumbs.Container>
      {breadcrumbs.map(({ href, text }, i) => {
        const isCurrent = i === breadcrumbs.length - 1;
        return (
          <Breadcrumbs.Item key={href}>
            <NextLink href={href} passHref legacyBehavior>
              <Breadcrumbs.Link isCurrent={isCurrent}>{text}</Breadcrumbs.Link>
            </NextLink>
            {isCurrent ? null : <Breadcrumbs.Separator />}
          </Breadcrumbs.Item>
        );
      })}
    </Breadcrumbs.Container>
  );
}

With dropdown
Home
/
Components
/
branch
Breadcrumbs
Breadcrumbs.Item
Breadcrumbs.Link
Copy
import { Breadcrumbs, SelectField } from '@aws-amplify/ui-react';

export default function BreadcrumbsWithDropdownExample() {
  return (
    <Breadcrumbs.Container>
      <Breadcrumbs.Item>
        <Breadcrumbs.Link href="/">Home</Breadcrumbs.Link>
        <Breadcrumbs.Separator />
      </Breadcrumbs.Item>
      <Breadcrumbs.Item>
        <Breadcrumbs.Link href="/react/components">Components</Breadcrumbs.Link>
        <Breadcrumbs.Separator />
      </Breadcrumbs.Item>
      <Breadcrumbs.Item>
        <SelectField
          label="branch"
          labelHidden
          variation="quiet"
          size="small"
          options={['Breadcrumbs', 'Breadcrumbs.Item', 'Breadcrumbs.Link']}
        />
      </Breadcrumbs.Item>
    </Breadcrumbs.Container>
  );
}

Styling
Theme

You can customize the appearance of all Breadcrumbs components in your application with a Theme.

Breadcrumbs Theme Source

Home
/
Components
/
Breadcrumbs
Copy
import { Breadcrumbs, ThemeProvider, createTheme } from '@aws-amplify/ui-react';

const theme = createTheme({
  name: 'breadcrumbs-theme',
  tokens: {
    components: {
      breadcrumbs: {
        separator: {
          color: '{colors.secondary.20}',
          fontSize: '{fontSizes.xl}',
          paddingInline: '{space.medium}',
        },
        link: {
          current: {
            color: '{colors.secondary.80}',
          },
        },
      },
    },
  },
});

export default function BreadcrumbsThemeExample() {
  return (
    <ThemeProvider theme={theme}>
      <Breadcrumbs
        items={[
          {
            href: '/',
            label: 'Home',
          },
          {
            href: '/react/components',
            label: 'Components',
          },
          {
            label: 'Breadcrumbs',
          },
        ]}
      />
    </ThemeProvider>
  );
}

Target classes
Target Classes
CSS Variables
Class	Description
amplify-breadcrumbs	Top level element that wraps the Breadcrumbs component
amplify-breadcrumbs__item	Each breadcrumb
amplify-breadcrumbs__link	Links used within breadcrumbs
amplify-breadcrumbs__list	List element within nav
amplify-breadcrumbs__separator	Separator between each breadcrumb
Global styling

To override styling on all Breadcrumbs components, you can set Amplify CSS variables or use the target classes like .amplify-breadcrumbs class.

Copy
/* styles.css */
.amplify-breadcrumbs {
  background-color: pink;
}

Local styling

To override styling on a specific Breadcrumbs component or sub-component, you can use (in order of increasing specificity): a class selector and style props.

Using a class selector:

Copy
<Breadcrumbs className="my-breadcrumbs">
</Breadcrumbs>

/* styles.css */
.my-breadcrumbs {
   background-color: pink;
}


Using style props:

Home
Components
Breadcrumbs
Copy
import { Breadcrumbs } from '@aws-amplify/ui-react';

const breadcrumbs = [
  {
    href: '/',
    text: 'Home',
  },
  {
    href: '/react/components',
    text: 'Components',
  },
  {
    text: 'Breadcrumbs',
    isCurrent: true,
  },
];

export default function BreadcrumbsStyleExample() {
  return (
    <Breadcrumbs.Container
      backgroundColor="background.tertiary"
      borderRadius="medium"
      padding="medium"
    >
      {breadcrumbs.map(({ href, text, isCurrent }, idx) => (
        <Breadcrumbs.Item key={`${href}${idx}`}>
          <Breadcrumbs.Link
            fontWeight="bold"
            textDecoration="underline"
            href={href}
            isCurrent={isCurrent}
          >
            {text}
          </Breadcrumbs.Link>
        </Breadcrumbs.Item>
      ))}
    </Breadcrumbs.Container>
  );
}

Accessibility

https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/

The Breadcrumbs component is a nav element to let browsers know it is for navigation, with aria-label="Breadcrumbs" to identify it as breadcrumbs
The list of links is rendered in an ordered list, ol
Separators have aria-hidden="true" so they are not announced by screen readers
Use the isCurrent prop for the current element in the navigation which sets aria-current="page" and aria-disabled="true" on the link.

--------------------------------------------------------------------------------

Title: Message | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/message
HTML Content:
Message

A Message can be used to display feedback to the user.

Theme source
React source
Feedback
Documentation
Props
Demo
A message heading
Basic message content
variation
filled (default)
outlined
plain
colorTheme
neutral (default)
error
success
warning
info
Body
Heading
isDismissible
hasIcon
Copy
<Message
  variation="filled"
  colorTheme="info"
  heading="A message heading">
  Basic message content
</Message>
Usage
Message heading
This is message content.
Copy
import { Message } from '@aws-amplify/ui-react';

export const BasicUsage = () => {
  return <Message heading="Message heading">This is message content.</Message>;
};

Color themes

Message accepts the colorTheme prop which allows for different color variations. The available options are neutral (default), error, info, success, and warning. Messages that use a error, info, success, or warning colorTheme will show an icon by default.

An error message
An info message
A success message
A warning message
A neutral message
Copy
import { Message, Flex } from '@aws-amplify/ui-react';

export const MessageColorThemes = () => {
  return (
    <Flex direction="column">
      <Message colorTheme="error">An error message</Message>
      <Message colorTheme="info">An info message</Message>
      <Message colorTheme="success">A success message</Message>
      <Message colorTheme="warning">A warning message</Message>
      <Message colorTheme="neutral">A neutral message</Message>
    </Flex>
  );
};

Icon

The Message icon can be hidden by using the prop hasIcon={false}. See this section on using IconProvider to configure your own icons for Message to use.

A warning message with no icon.
Copy
import { Message, Flex } from '@aws-amplify/ui-react';

export const HideIcon = () => {
  return (
    <Message hasIcon={false} colorTheme="warning">
      A warning message with no icon.
    </Message>
  );
};

Variations

Message accepts the variation prop which allows for different background and border options.

Filled (default) message
Outlined messsage
Plain message
Copy
import { Message, Flex } from '@aws-amplify/ui-react';

export const MessageVariations = () => {
  return (
    <Flex direction="column">
      <Message colorTheme="info">Filled (default) message</Message>
      <Message variation="outlined" colorTheme="info">
        Outlined messsage
      </Message>
      <Message variation="plain" colorTheme="info">
        Plain message
      </Message>
    </Flex>
  );
};

Dismissable

Messages can be dismissed by setting isDismissible={true}. Additional dismiss behavior can be added by passing a function to the onDismiss prop. By default, we provide accessible button text that is hidden visually with VisuallyHidden; you can override this label by using the dismissLabel prop.

For more control over the appearance and functionality of the dismiss button, consider using Message as a composable component.

A basic dismissible message
Dismiss this custom message
Copy
import { Message } from '@aws-amplify/ui-react';

export const BasicWithDismiss = () => {
  return (
    <Message
      isDismissible={true}
      dismissLabel="Dismiss this custom message"
      onDismiss={() => {
        alert('Dismissed message');
      }}
    >
      A basic dismissible message
    </Message>
  );
};

Styling
Theme

You can customize the appearance of all Message components in your application with a Theme.

Message Theme Source

Custom info Message theme
Content for custom info message.
Custom error outlined Message theme
Content for custom error outlined message.
Copy
import {
  Flex,
  Message,
  ThemeProvider,
  createTheme,
} from '@aws-amplify/ui-react';

const theme = createTheme({
  name: 'message-theme',
  tokens: {
    components: {
      message: {
        borderRadius: '12px',
        borderStyle: 'dotted',
        borderWidth: '2px',
        outlined: {
          error: {
            color: '{colors.pink.100}',
            backgroundColor: '{colors.pink.10}',
            borderColor: '{colors.pink.100}',
          },
        },
        filled: {
          info: {
            backgroundColor: '{colors.teal.10}',
            color: '{colors.teal.90}',
          },
        },
      },
    },
  },
});

export const MessageThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Flex direction="column">
        <Message colorTheme="info" heading="Custom info Message theme">
          Content for custom info message.
        </Message>
        <Message
          colorTheme="error"
          variation="outlined"
          heading="Custom error outlined Message theme"
        >
          Content for custom error outlined message.
        </Message>
      </Flex>
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-message	Class applied to the root element of the Message
amplify-message__icon	Class applied to Icon component within the Message primitive
amplify-message__heading	Class applied to the heading View
amplify-message__body	Class applied to the body View
amplify-message__content	Class applied to the wrappar around heading and children of the Message
amplify-message__dismiss	Class applied to the close Button
Global styling

To override styling on all Messages, you can override Amplify CSS variables or use the target classes for Message in your own stylesheet.

Message heading
Message with global styling
Copy
/* Override CSS variables */
[data-amplify-theme] {
  --amplify-components-message-filled-background-color: var(--amplify-colors-purple-10);
  --amplify-components-message-heading-font-size: var(--amplify-font-sizes-xl);
}
/* Or target class names */
.amplify-message {
  background-color: var(--amplify-colors-purple-10);
}
.amplify-message__heading {
  font-size: var(--amplify-font-sizes-xl);
}

Local styling

To override styling on a specific Message or sub-component, you can use (in order of increasing specificity): a class selector and style props.

Copy
<Message className="my-message"></Message>

/* styles.css */
.my-message {
  background-color: #ebffff;
}

Using style props
Message heading
Message styled via style props
Copy
import { Message } from '@aws-amplify/ui-react';

export const MessageStyleProps = () => {
  return (
    <Message
      alignItems="center"
      colorTheme="info"
      color="neutral.100"
      backgroundColor="teal.10"
      heading="Message heading"
    >
      Message styled via style props
    </Message>
  );
};

Icons

Message icons can be customized using IconProvider.

Info message with custom icon
Dismiss message
Success message with custom icon
Error message with custom icon
Warning message with custom icon
Copy
import { Message, Flex, IconsProvider } from '@aws-amplify/ui-react';
import {
  FcMediumPriority,
  FcHighPriority,
  FcInfo,
  FcOk,
  FcMinus,
} from 'react-icons/fc';

export const IconProviderExample = () => (
  <IconsProvider
    icons={{
      message: {
        info: <FcInfo />,
        success: <FcOk />,
        error: <FcHighPriority />,
        warning: <FcMediumPriority />,
        close: <FcMinus />,
      },
    }}
  >
    <Flex direction="column">
      <Message colorTheme="info" isDismissible>
        Info message with custom icon
      </Message>
      <Message colorTheme="success">Success message with custom icon</Message>
      <Message colorTheme="error">Error message with custom icon</Message>
      <Message colorTheme="warning">Warning message with custom icon</Message>
    </Flex>
  </IconsProvider>
);

Accessibility

Message does not have an ARIA role configured by default. Depending on your own use case, you can pass a role attribute or add your own ARIA attributes where needed.

As an alert

You can pass a role, such as alert, to the wrapper element of Message.

Toggle Alert
Copy
import { Flex, Button, Message } from '@aws-amplify/ui-react';
import { useState } from 'react';

export const MessageAsAlert = () => {
  const [alertActive, setAlertActive] = useState(false);
  return (
    <Flex direction="column">
      <Button onClick={() => setAlertActive(!alertActive)}>Toggle Alert</Button>
      {alertActive ? (
        <Message role="alert" heading="Alert" colorTheme="error">
          This is the alert content.
        </Message>
      ) : null}
    </Flex>
  );
};


--------------------------------------------------------------------------------

Title: Placeholder | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/placeholder
HTML Content:
Placeholder

Placeholder can be used to fill out an interface while the content is loading.

Theme source
React source
Feedback
Documentation
Props
Demo
size
default
small
large
isLoaded
Copy
<Placeholder />
Usage

Import the Placeholder component.

Copy
import { Placeholder } from '@aws-amplify/ui-react';

export const DefaultPlaceholderExample = () => {
  return <Placeholder />;
};

isLoaded

Use isLoaded prop to indicate whether or not the content is loaded.

Copy
import { Placeholder } from '@aws-amplify/ui-react';

export const PlaceholderIsLoadedExample = () => {
  return <Placeholder isLoaded={true} />;
};

Sizes

Use the size prop to change the Placeholder size. Available options are small, large, and none (default).

Copy
import { Flex, Placeholder } from '@aws-amplify/ui-react';

export const PlaceholderSizeExample = () => {
  return (
    <Flex direction="column">
      <Placeholder size="small" />
      <Placeholder />
      <Placeholder size="large" />
    </Flex>
  );
};

Customization
Theme

You can customize the appearance of all Placeholder components in your application with a Theme.

Placeholder Theme Source

Copy
import { Placeholder, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'placeholder-theme',
  tokens: {
    components: {
      placeholder: {
        transitionDuration: { value: '1250ms' },
        startColor: { value: '{colors.blue.40}' },
        endColor: { value: '{colors.blue.80}' },
        borderRadius: { value: '{radii.large}' },
        large: {
          height: { value: '{space.xxxl}' },
        },
      },
    },
  },
};

export const PlaceholderThemeExample = () => {
  return (
    <ThemeProvider theme={theme} colorMode="light">
      <Placeholder size="large" />
    </ThemeProvider>
  );
};

Target classes
Target Classes
CSS Variables
Class	Description
amplify-placeholder	Top level element that wraps the Placeholder primitive
Global styling

To override styling on all Placeholder components, you can set the Amplify CSS variables or use the built-in .amplify-placeholder class.

Copy
/* styles.css */
[data-amplify-theme] {
  --amplify-components-placeholder-height: var(--amplify-space-xl);
  --amplify-components-placeholder-border-radius: var(--amplify-space-medium);
}
/* OR */
.amplify-placeholder {
  height: var(--amplify-space-xl);
  border-radius: var(--amplify-space-medium);
}

Copy
<Placeholder />

Local styling

To override styling on a specific Placeholder, you can use a class selector or style props.

Using a class selector:

Set the starting and ending colors for the Placeholder animation using a custom CSS class with the Amplify CSS variables:

Copy
/* styles.css */
.placeholder-local-styles {
  --amplify-components-placeholder-start-color: var(--amplify-colors-purple-80);
  --amplify-components-placeholder-end-color: var(--amplify-colors-blue-80);
}

Copy
import './styles.css';

<Placeholder className="placeholder-local-styles" />


Using style props:

Copy
import { Placeholder } from '@aws-amplify/ui-react';

export const PlaceholderStylePropsExample = () => {
  return <Placeholder height="123px" width="50%" />;
};


--------------------------------------------------------------------------------

Title: Loader | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/loader
HTML Content:
Loader

Loader provides a visual cue to the user that the system is processing, awaiting a result or working to fulfill a request.

Theme source
React source
Feedback
Documentation
Props
Demo
size
default
small
large
variation
default
linear
emptyColor
filledColor
isDeterminate
Copy
<Loader 
/>
Usage

Import the Loader component and styles.

Copy
import { Loader } from '@aws-amplify/ui-react';

export const DefaultLoaderExample = () => {
  return <Loader />;
};

Sizes

Use the size prop to change the Loader size. Available options are small, large, and none (default).

Copy
import { Flex, Loader } from '@aws-amplify/ui-react';

export const LoaderSizesExample = () => {
  return (
    <Flex alignItems="center">
      <Loader size="small" />
      <Loader />
      <Loader size="large" />
    </Flex>
  );
};

Variation

Loader comes in 2 variants, linear and none(default). Pass the variation prop and set it to either of these values.

Copy
import { Loader } from '@aws-amplify/ui-react';

export const LoaderVariationExample = () => {
  return (
    <>
      <Loader />
      <Loader variation="linear" />
    </>
  );
};

Colors

Pass filledColor and emptyColor props to color your own Loader.

Copy
import { Loader, useTheme } from '@aws-amplify/ui-react';

export const LoaderColorExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <Loader
        emptyColor={tokens.colors.black}
        filledColor={tokens.colors.orange[40]}
      />
      <Loader
        variation="linear"
        emptyColor={tokens.colors.black}
        filledColor={tokens.colors.orange[40]}
      />
    </>
  );
};

Determinate

Most often loaders are indeterminate (looped) but may be determinate (percentage-based) when the system can calculate the size of the request — for example, when downloading a large file. To use a determinate loader, set isDeterminate to true and pass percentage.

0%
0%
Copy
import * as React from 'react';
import { Loader } from '@aws-amplify/ui-react';

export const DeterminateLoaderExample = () => {
  const [percentage, setPercentage] = React.useState(0);
  React.useEffect(() => {
    const clearID = setInterval(() => {
      setPercentage((percentage) => {
        if (percentage < 100) {
          return percentage + 1;
        }
        return 0;
      });
    }, 1000);
    return () => clearInterval(clearID);
  }, []);
  return (
    <>
      <Loader percentage={percentage} isDeterminate />
      <Loader variation="linear" percentage={percentage} isDeterminate />
    </>
  );
};


To hide the percentage text, set isPercentageTextHidden to true.

60%
Copy
import { Loader } from '@aws-amplify/ui-react';

export const LoaderIsPercentageTextHiddenExample = () => {
  return <Loader percentage={60} isDeterminate isPercentageTextHidden />;
};

Accessibility

The Loader is a SVG image with role set to img on the outer <svg> element. This will tell screen readers to just consider it as a single entity and describe it using the label, rather than trying to read out all the child nodes. You can give it a label by passing ariaLabel prop.

Copy
import { Loader } from '@aws-amplify/ui-react';

export const LoaderAccessibilityExample = () => {
  return <Loader ariaLabel="Loading..." />;
};

CSS Styling
Theme

You can customize the appearance of all Loader components in your application with a Theme.

Loader Theme Source

Copy
import { Loader, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'loader-theme',
  tokens: {
    components: {
      loader: {
        strokeEmpty: { value: '{colors.neutral.20}' },
        strokeFilled: { value: '{colors.green.80}' },

        // sizes
        large: {
          width: { value: '{fontSizes.xxxl}' },
          height: { value: '{fontSizes.xxxl}' },
        },

        // linear loader
        linear: {
          width: { value: '50%' },
          strokeWidth: { value: '{fontSizes.xxs}' },
          strokeFilled: { value: '{colors.secondary.80}' },
          strokeEmpty: { value: '{colors.neutral.20}' },
          animationDuration: { value: '2s' },
        },
      },
    },
  },
};

export const LoaderThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex direction="column">
      <Loader size="large" />
      <Loader variation="linear" />
    </Flex>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-loader	Top level element that wraps the Loader primitive
amplify-loader__label	Class applied to the track of loader
Global styling

To override styling on all Loaders, you can set the Amplify CSS variables with the built-in .amplify-loader class.

Copy
/* styles.css */
.amplify-loader {
  --amplify-components-loader-stroke-filled-color: var(--amplify-colors-red-80);
}

Copy
import { Loader } from '@aws-amplify/ui-react';
import './styles.css';

<Loader />;

Local styling

To override styling on a specific Loader, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Copy
/* styles.css */
.my-loader {
  width: 5rem;
  height: 5rem;
}

Copy
import { Loader } from '@aws-amplify/ui-react';
import './styles.css';

<Loader className="my-loader" />;


Using data attributes:

Copy
/* styles.css */
.amplify-loader[data-size='large'] {
  width: 5rem;
  height: 5rem;
}

Copy
import { Loader } from '@aws-amplify/ui-react';
import './styles.css';

<Loader variation="large" />;


Using style props:

Copy
import { Loader } from '@aws-amplify/ui-react';

<Loader width="5rem" height="5rem" />


--------------------------------------------------------------------------------

Title: Alert | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/alert
HTML Content:
Alert

Alert displays a brief message in a way that attracts the user’s attention without interrupting their task.

ARIA pattern
Theme source
React source
Feedback
Documentation
Props

Usage note: The Alert component has an ARIA alert role by default which has some accessibility implications.

Demo
Alert heading
This is the alert message
Variation
default
info
error
warning
success
Heading
Body
isDismissable
hasIcon
Copy
<Alert
  isDismissible={false}
  hasIcon={true}
  heading="Alert heading"
  >
  This is the alert message
</Alert>
Usage

Import the Alert component and styles.

Default Alert
Copy
import { Alert } from '@aws-amplify/ui-react';

export const DefaultAlertExample = () => {
  return <Alert>Default Alert</Alert>;
};

Variations

Use the variation prop to change the Alert variation. Available options are info, error, warning, success, and none (default).

Info
Error
Warning
Success
Default
Copy
import { Alert } from '@aws-amplify/ui-react';

export const AlertVariationsExample = () => {
  return (
    <>
      <Alert variation="info">Info</Alert>
      <Alert variation="error">Error</Alert>
      <Alert variation="warning">Warning</Alert>
      <Alert variation="success">Success</Alert>
      <Alert>Default</Alert>
    </>
  );
};

Heading

Use the heading prop to pass a heading to the Alert.

This Alert does not have a heading
This is the heading
Cool heading!
Copy
import { Alert } from '@aws-amplify/ui-react';

export const AlertHeadingExample = () => {
  return (
    <>
      <Alert variation="warning">This Alert does not have a heading</Alert>
      <Alert variation="success" heading="This is the heading">
        Cool heading!
      </Alert>
    </>
  );
};

Icon

Use the hasIcon prop to change whether the Alert includes an icon. Defaults to true (includes icon).

This Alert shows an icon by default
This Alert does not have an icon
Copy
import { Alert } from '@aws-amplify/ui-react';

export const AlertIconExample = () => {
  return (
    <>
      <Alert variation="info">This Alert shows an icon by default</Alert>
      <Alert variation="error" hasIcon={false}>
        This Alert does not have an icon
      </Alert>
    </>
  );
};

Dismissible

Use the isDismissible prop to control whether the user can dismiss the Alert. Defaults to false (not dismissible).

This Alert is not dismissible by default
Click the X to dismiss this Alert
Copy
import { Alert } from '@aws-amplify/ui-react';

export const DismissibleAlertExample = () => {
  return (
    <>
      <Alert>This Alert is not dismissible by default</Alert>
      <Alert isDismissible={true}>Click the X to dismiss this Alert</Alert>
    </>
  );
};

onDismiss

Use the onDismiss prop to pass a function that will run when the Alert is dismissed. Note that isDismissible must be set to true.

Run a function on dismiss (click the X)
Copy
import { Alert } from '@aws-amplify/ui-react';

export const OnDismissAlertExample = () => {
  return (
    <Alert
      onDismiss={() => alert('Alert dismissed, user metric recorded')}
      isDismissible={true}
    >
      Run a function on dismiss (click the X)
    </Alert>
  );
};

Styling
Theme

You can customize the appearance of all Alert components in your application with a Theme.

Alert Theme Source

Default alert title
Hello
Info
Here is some info
Success
Hooray!
Copy
import { Alert, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'alert-theme',
  tokens: {
    components: {
      alert: {
        // Default styles
        backgroundColor: { value: '{colors.teal.20}' },

        icon: {
          size: { value: '{fontSizes.xxxl}' },
        },

        heading: {
          fontSize: { value: '{fontSizes.large}' },
          fontWeight: { value: '{fontWeights.normal}' },
        },

        // Variations
        info: {
          color: { value: 'white' },
          backgroundColor: { value: '{colors.blue.80}' },
        },

        success: {
          color: { value: 'black' },
          backgroundColor: { value: '{colors.yellow.40}' },
        },
      },
    },
  },
};

export const AlertThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex direction="column">
      <Alert heading="Default alert title">Hello</Alert>
      <Alert variation="info" heading="Info">
        Here is some info
      </Alert>
      <Alert variation="success" heading="Success">
        Hooray!
      </Alert>
    </Flex>
  </ThemeProvider>
);

Icons
Info
Here is some info
Success
Hooray!
Warning
Error
Copy
import { Alert, Flex, IconsProvider } from '@aws-amplify/ui-react';
import {
  FcMediumPriority,
  FcHighPriority,
  FcInfo,
  FcOk,
  FcMinus,
} from 'react-icons/fc';

export const AlertIconProviderExample = () => (
  <IconsProvider
    icons={{
      alert: {
        info: <FcInfo />,
        success: <FcOk />,
        error: <FcHighPriority />,
        warning: <FcMediumPriority />,
        close: <FcMinus />,
      },
    }}
  >
    <Flex direction="column">
      <Alert variation="info" heading="Info">
        Here is some info
      </Alert>
      <Alert variation="success" heading="Success" isDismissible>
        Hooray!
      </Alert>
      <Alert variation="warning" heading="Warning" />
      <Alert variation="error" heading="Error" />
    </Flex>
  </IconsProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-alert	Top level element that wraps the Alert primitive
amplify-alert__icon	Class applied to Icon component within the Alert primitive
amplify-alert__heading	Class applied to the heading View
amplify-alert__body	Class applied to the body View
amplify-alert__dismiss	Class applied to the close Button
Global styling

To override styling on all Alerts, you can set the Amplify CSS variables or use the built-in .amplify-alert class.

Change the default Alert to yellow
Copy
/* styles.css */
:root {
  --amplify-components-alert-background-color: yellow;
}
/* OR */
.amplify-alert {
  background-color: yellow;
}


To replace the Alert styling, unset it:

Copy
.amplify-alert {
  all: unset;
  /* Add your styling here*/
}

Local styling

To override styling on a specific Alert, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Attention

This is a purple Alert

Copy
/* styles.css */
.purple-alert {
  color: white;
  background-color: rebeccapurple;
}

Copy
import './styles.css';

<Alert className="purple-alert" heading="Attention">
  This is a purple Alert
</Alert>;


Using data attributes:

System Error

Red Alert!

Default Alert styling unaffected
Copy
/* styles.css */
/* Override only error variation styles */
.amplify-alert[data-variation='error'] {
  color: white;
  background-color: crimson;
}

Copy
import './styles.css';

<Alert variation="error" heading="System Error">Red Alert!</Alert>
<Alert>Default Alert styling unaffected</Alert>


Using style props:

Passing props directly
Copy
import { Alert, useTheme } from '@aws-amplify/ui-react';

export const AlertStylePropsExample = () => {
  const { tokens } = useTheme();

  return (
    <Alert
      backgroundColor={tokens.colors.primary[10]}
      color={tokens.colors.font.primary}
      fontWeight="bold"
      border={`${tokens.borderWidths.large} solid ${tokens.colors.primary[80]}`}
      borderRadius="10px"
    >
      Passing props directly
    </Alert>
  );
};

Accessibility

The Alert component in Amplify UI has the alert role by default. The alert role is an assertive live region which means any changes to the content of the Alert or adding the Alert dynamically to the DOM will cause the Alert to be announced by a screen reader. This can be disruptive to screen reader users, so it is best used sparingly and only when the Alert content requires the user's immediate attention.

Please see the ARIA Authoring Practices Guide for the alert role for more information and use cases.

Dynamic Alert

The following code shows an example of dynamically displaying an Alert. A screenreader will announce the content of the Alert when it is visible.

Toggle Alert
Copy
import { Flex, Button, Alert } from '@aws-amplify/ui-react';
import { useState } from 'react';

export const AccessibleAlert = () => {
  const [isAlertVisible, setIsAlertVisible] = useState(false);

  return (
    <Flex direction="column">
      <Button onClick={() => setIsAlertVisible(!isAlertVisible)}>
        Toggle Alert
      </Button>
      {isAlertVisible ? (
        <Alert variation="error">This is an example alert.</Alert>
      ) : null}
    </Flex>
  );
};

Role override

If you're displaying information that isn't critical or time sensitive, and only want the visual style of the Alert component without the accessibility side effects, you can override the role attribute like in the following example:

This alert will not be announced to screen readers if dyamically added to the DOM.
Copy
import { Alert } from '@aws-amplify/ui-react';

export const RoleOverride = () => {
  return (
    <Alert role="none" variation="info">
      This alert will not be announced to screen readers if dyamically added to
      the DOM.
    </Alert>
  );
};

Custom aria label

You can configure a custom aria-label for the dismiss button using the dismissButtonLabel prop (defaults to 'Dismiss alert').

Configure a custom aria label for the dismiss button
Copy
import { Alert } from '@aws-amplify/ui-react';

export const DismissButtonLabelExample = () => {
  return (
    <Alert dismissButtonLabel="Custom dismiss button label" isDismissible>
      Configure a custom aria label for the dismiss button
    </Alert>
  );
};


--------------------------------------------------------------------------------

Title: View | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/view
HTML Content:
View

View is the foundational component for Amplify UI primitives. While View renders a <div> by default, it can render any HTML element and supports styling via props.

React source
Feedback
Documentation
Props
Demo
I'm a <div>! 🤩
As element type
div
button
p
span
Aria Label
Background Color
Border
Border Radius
Box Shadow
Color
Height
Max Width
Padding
Width
Copy
<View
  as="div"
  ariaLabel="View example"
  backgroundColor="var(--amplify-colors-white)"
  borderRadius="6px"
  border="1px solid var(--amplify-colors-black)"
  boxShadow="3px 3px 5px 6px var(--amplify-colors-neutral-60)"
  color="var(--amplify-colors-blue-60)"
  height="4rem"
  maxWidth="100%"
  padding="1rem"
  width="20rem"
  onClick={() => alert('🏔 What a beautiful <View>! 🔭')}
  >
  {"I'm a <div>! 🤩"}
</View>
Usage

Import the View component.

Nice view! 🏔
Copy
import { View } from '@aws-amplify/ui-react';

export const DefaultViewExample = () => {
  return <View>Nice view! 🏔</View>;
};

Set rendered HTML element

To change the HTML element rendered by the View, use the as prop. View renders a <div> by default.

I am a section
Copy
import { View } from '@aws-amplify/ui-react';

export const SetRenderedHTML = () => {
  return <View as="section">I am a section</View>;
};

Disabled state

To mark a View as disabled, pass the isDisabled prop.

You cannot click me!
Copy
import { View } from '@aws-amplify/ui-react';

export const DisabledStateExample = () => {
  return (
    <View
      as="button"
      isDisabled={true}
      onClick={() => alert("This won't fire 🚫")}
    >
      You cannot click me!
    </View>
  );
};

Accessibility

The example below demonstrates setting an aria-label attribute and role for an icon button.

Copy
import { View } from '@aws-amplify/ui-react';
import { MdAccessibility } from 'react-icons/md';

export const AccessibilityExample = () => {
  return (
    <View
      ariaLabel="So accessible!"
      role="button"
      onClick={() => alert('Hooray for accessbility!')}
    >
      <MdAccessibility />
    </View>
  );
};

Standard HTML attributes

View will accept any of the standard HTML attributes that its underlying HTML element accepts.

Copy
import { View } from '@aws-amplify/ui-react';

export const CustomAttributesExample = () => {
  return <View as="progress" data-progress-bar max="100" value="75" />;
};

CSS Styling
Local styling

To override styling on a specific View, you can use a class selector or style props.

Using a class selector:

/* styles.css */
.mountain-view {
  background-color: #b7daf9;
  display: block;
  font-size: 5em;
  text-align: center;
}

import { View } from '@aws-amplify/ui-react';
import './styles.css';

export const ClassNameExample = () => {
  return <View className="mountain-view">🏔</View>;
};

🏔

Using style props:

🌲🌲🌲 🏕 🌲🌲🌲
Copy
import { View, useTheme } from '@aws-amplify/ui-react';

export const StylePropsExample = () => {
  const { tokens } = useTheme();

  return (
    <View
      backgroundColor={tokens.colors.green[20]}
      borderRadius={tokens.radii.large}
      fontSize={tokens.fontSizes.xxxxl}
      textAlign="center"
    >
      🌲🌲🌲 🏕 🌲🌲🌲
    </View>
  );
};


--------------------------------------------------------------------------------

Title: Text | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/text
HTML Content:
Text

Text is used to display text in an interface, and renders a <p> element by default.

Theme source
React source
Feedback
Documentation
Props
Demo

Hello World!

Displayed Text
variation
primary
secondary
tertiary
error
warning
info
success
as
p
span
strong
em
color
isTruncated
lineHeight
fontSize
fontStyle
textDecoration
fontWeight
400
Copy


<Text
    variation="primary"
    as="p"
    lineHeight="1.5em"
    fontWeight={400}
    fontSize="1em"
    fontStyle="normal"
    textDecoration="none"
    width="30vw"
  >
    Hello World!
</Text>
Usage

Import the Text primitive.

Hello world

Copy
import { Text } from '@aws-amplify/ui-react';

export const DefaultTextExample = () => <Text>Hello world</Text>;

Variations

Use the variation prop to change the Text variation. Available options are primary, secondary, tertiary, error, warning, info, and success.

Primary

Secondary

Tertiary

Error

Warning

Info

Success

Default

Copy
import { Text } from '@aws-amplify/ui-react';

export const TextVariationExample = () => (
  <>
    <Text variation="primary">Primary</Text>
    <Text variation="secondary">Secondary</Text>
    <Text variation="tertiary">Tertiary</Text>
    <Text variation="error">Error</Text>
    <Text variation="warning">Warning</Text>
    <Text variation="info">Info</Text>
    <Text variation="success">Success</Text>
    <Text>Default</Text>
  </>
);

Truncate

The isTruncated prop will render an ellipsis when the text exceeds the defined width.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Copy
import { Text } from '@aws-amplify/ui-react';

export const TextTruncatedExample = () => (
  <Text isTruncated={true}>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea cupidatat
    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
  </Text>
);

CSS Styling
Theme

You can customize the appearance of all Text components in your application with a Theme.

Text Theme Source

Default

Primary

Warning

Copy
import { Text, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'text-theme',
  tokens: {
    components: {
      text: {
        color: { value: '{colors.green.80}' },
        primary: {
          color: { value: '{colors.teal.80}' },
        },
        warning: {
          color: { value: '{colors.pink.80}' },
        },
      },
    },
  },
};

export const TextThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex>
      <Text>Default</Text>
      <Text variation="primary">Primary</Text>
      <Text variation="warning">Warning</Text>
    </Flex>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-text	Top level element that wraps the Text primitive
Global styling

To override styling on all Text, you can set the Amplify CSS variables or use the built-in .amplify-text class.

(Revise this example)

This is my styled text

Copy
/* styles.css */
.amplify-text {
  --amplify-components-text-color-primary: var(--amplify-colors-red-80);
}

import { Text } from '@aws-amplify/ui-react';

export const GlobalStylingExample = () => (
  <Text className="primary-styled-variable-text" variation="primary">
    This is my styled text
  </Text>
);

Local styling

To override styling on a specific Text, you can use a class selector or style props.

Using a class selector:

This is my styled text

Copy
/* styles.css */
.styled-text {
font-weight: var(--amplify-font-weights-bold);
color: var(--amplify-colors-red-80);
text-decoration: underline;
}

import './styles.css';

<Text className="styled-text">This is my styled text</Text>;


Using style props:

This is my styled text
Copy
import { Text, useTheme } from '@aws-amplify/ui-react';

export const LocalStylingExample = () => {
  const theme = useTheme();
  return (
    <Text
      fontWeight={theme.tokens.fontWeights.bold}
      color={theme.tokens.colors.red[80]}
      textDecoration="underline"
      as="span"
    >
      This is my styled text
    </Text>
  );
};


--------------------------------------------------------------------------------

Title: ScrollView | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/scrollview
HTML Content:
ScrollView

ScrollView allows content to be scrollable.

React source
Feedback
Documentation
Props
Demo
Copy


<ScrollView width="100%" height="300px" maxWidth="580px">
  <Image
    width="800px"
    maxWidth="800px"
    src="/amplify-logo.svg"
    alt="Amplify-logo"
  />
</ScrollView>
Usage

Import the ScrollView component.

Copy
import { Image, ScrollView } from '@aws-amplify/ui-react';

export const DefaultScrollViewExample = () => {
  return (
    <ScrollView height="300px" width="400px" maxWidth="100%">
      <Image
        width="800px"
        maxWidth="800px"
        src="/amplify-logo.svg"
        alt="Amplify-logo"
      />
    </ScrollView>
  );
};

Horizontal overflow

For horizontal scrollbars, set the width of the ScrollView smaller than the width of the content.

The value of Pi is 3.1415926535897932384626433832795029. The value of e is 2.7182818284590452353602874713526625.
Copy
import { ScrollView } from '@aws-amplify/ui-react';

export const ScrollViewHorizontalExample = () => {
  return (
    <ScrollView width="200px" className="horizontal-example">
      The value of Pi is 3.1415926535897932384626433832795029. The value of e is
      2.7182818284590452353602874713526625.
    </ScrollView>
  );
};

Vertical overflow

For vertical scrollbars, set the height of the ScrollView smaller than the height of the content.

Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.
Copy
import { ScrollView } from '@aws-amplify/ui-react';

export const ScrollViewVerticalExample = () => {
  return (
    <ScrollView height="100px" width="200px">
      {`Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's
      Inn Hall. Implacable November weather. As much mud in the streets as if
      the waters had but newly retired from the face of the earth.`}
    </ScrollView>
  );
};

Accessibility

If your scrollable content does not have any focusable elements, there are additional HTML attributes you can add to your ScrollView to make it more friendly to keyboard users.

To create accessible, scrollable regions, you can add a tabIndex to the ScrollView to make it keyboard navigable. Additionally, you can add an accessible label to the ScrollView to give extra context about the scrollable content to screen reader users. In the following example, we've used an aria-label.

Read more about keyboard friendly, scrollable regions from W3.org

This scrollview is keyboard focusable and has an accessible label.
Copy
import { ScrollView, Card } from '@aws-amplify/ui-react';

export const AccessibleScrollViewExample = () => {
  return (
    <ScrollView
      width="400px"
      maxWidth="100%"
      tabIndex={0}
      aria-label="Accessible Scrollview"
    >
      <Card width="600px" backgroundColor="neutral.10">
        This scrollview is keyboard focusable and has an accessible label.
      </Card>
    </ScrollView>
  );
};

CSS Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-scrollview	Top level element that wraps the ScrollView primitive
Local styling

To override styling on a specific View, you can use a class selector or style props.

Using a class selector:

Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.
Copy
/* styles.css */
.my-scrollview {
  height: 100px;
  width: 200px;
  padding: var(--amplify-space-medium);
  background-color: var(--amplify-colors-blue-10);
}

Copy
import { ScrollView } from '@aws-amplify/ui-react';

import './styles.css';

<ScrollView className="my-scrollview">
  {
    "Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth."
  }
</ScrollView>


Using style props:

Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth.
Copy
import { ScrollView } from '@aws-amplify/ui-react';

export const ScrollViewStylePropsExample = () => {
  return (
    <ScrollView
      height="100px"
      width="200px"
      padding="medium"
      backgroundColor="blue.10"
    >
      {
        "Michaelmas term lately over, and the Lord Chancellor sitting in Lincoln's Inn Hall. Implacable November weather. As much mud in the streets as if the waters had but newly retired from the face of the earth."
      }
    </ScrollView>
  );
};


--------------------------------------------------------------------------------

Title: Image | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/image
HTML Content:
Image

Image is used to display responsive images.

Theme source
React source
Feedback
Documentation
Props
Demo
alt
src
objectFit
initial
cover
none
objectPosition
backgroundColor
height
width
opacity
Copy
<Image
  alt="Amplify logo"
  src="/amplify-logo.svg"
  objectFit="initial"
  objectPosition="50% 50%"
  backgroundColor="initial"
  height="75%"
  width="75%"
  opacity="100%"
  onClick={() => alert('📸 Say cheese!')}
/>
Usage

Import the Image component. Images are responsive by default (if you're on desktop, try resizing your browser window).

Copy
import { Image } from '@aws-amplify/ui-react';

export const DefaultImageExample = () => {
  return (
    <Image
      src="/road-to-milford-new-zealand-800w.jpg"
      alt="View from road to Milford Sound, New Zealand.
  Glittering stream with old log, snowy mountain peaks
  tower over a green field."
    />
  );
};

Responsive Image optimization

Use sizes and srcSet to dynamically load different Image sizes based on screen size/resolution. For more information, see MDN responsive images article.

Copy
import { Image } from '@aws-amplify/ui-react';

export const ImageOptimizationExample = () => {
  return (
    <Image
      src="/road-to-milford-new-zealand-800w.jpg"
      srcSet="/road-to-milford-new-zealand-800w.jpg 800w,
          /road-to-milford-new-zealand-1200w.jpg 1200w,
          /road-to-milford-new-zealand-1400w.jpg 1400w"
      alt="View from road to Milford Sound, New Zealand.
      Glittering stream with old log, snowy mountain peaks
      tower over a green field."
    />
  );
};

Object fit and object position

To control how an Image fits its container, use the objectFit and objectPosition properties.

Copy
import { Image } from '@aws-amplify/ui-react';

export const ImageObjectFitAndPositionExample = () => {
  return (
    <Image
      width="100%"
      height="100%"
      objectFit="cover"
      objectPosition="50% 50%"
      src="/road-to-milford-new-zealand-800w.jpg"
      alt="Glittering stream with old log, snowy mountain peaks
    tower over a green field."
    />
  );
};

CSS Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-image	Top level element that wraps the Image primitive

--------------------------------------------------------------------------------

Title: Icon | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/icon
HTML Content:
Icon

Icon is used to display Scalable Vector Graphics (SVG).

Theme source
React source
Feedback
Documentation
Props
Demo
pathData
width
height
color
ariaLabel
viewBox
viewBox
viewBox width
viewBox height
Copy
<Icon
  pathData="M142.938822,125.786164 L133.905089,125.786164 L130.703259,122.698685 C142.296993,109.25125 148.66898,92.0834126 148.656375,74.3281875 C148.656375,33.2778631 115.378512,0 74.3281875,0 C33.2778631,0 0,33.2778631 0,74.3281875 C0,115.378512 33.2778631,148.656375 74.3281875,148.656375 C92.7387078,148.656375 109.662664,141.909663 122.698685,130.703259 L125.786164,133.905089 L125.786164,142.938822 L182.961692,200 L200,182.961692 L142.938822,125.786164 Z M73.5042735,124.786325 C45.1282051,124.786325 22.2222222,101.880342 22.2222222,73.5042735 C22.2222222,45.1282051 45.1282051,22.2222222 73.5042735,22.2222222 C101.880342,22.2222222 124.786325,45.1282051 124.786325,73.5042735 C124.786325,101.880342 101.880342,124.786325 73.5042735,124.786325 Z"
  viewBox={{
    width: 200,
    height: 200,
  }}
  ariaLabel="Search"
/>
Note

Icons should be thought of as plain text; they inherit the size and color of their context or can be set directly. Icons themselves do not have any state or handlers, those should be at a higher level like a button. Amplify UI does not include any icons other than the ones Amplify UI components like Alert and Accordion use.

Usage

Import the Icon component and styles.

Copy
import { Icon } from '@aws-amplify/ui-react';

// This is a favorite icon
export const DefaultIconExample = () => (
  <Icon
    ariaLabel="Favorite"
    viewBox={{ width: 24, height: 24 }}
    pathData="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0
    3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
  />
);

Built-in iconset
Deprecated

The built-in icons were removed in version 3.0. You can use the react-icons package or other React icon libraries in its place.

// Removed
import {ICON_NAME} from '@aws-amplify/ui-react';

// Suggested
import {ICON_NAME} from 'react-icons/md';`


To customize the default icons used in components like Alert and Rating, you can use the IconProvider.

Custom icon
Using path data

To create a custom icon using a path data, provide the d attribute in svg to pathData prop.

Copy
import { Icon } from '@aws-amplify/ui-react';

export const CustomIconExample = () => {
  return (
    // This is a thumbs up icon
    <Icon
      ariaLabel="Thumbs up"
      pathData="M9 21h9c.83 0 1.54-.5
1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17
1 7.58 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2zM9 9l4.34-4.34L12 10h9v2l-3 7H9V9zM1 9h4v12H1z"
    />
  );
};


You can use the viewBox prop to change the SVG viewBox. Both width and height default to 24.

Copy
import { Icon } from '@aws-amplify/ui-react';

export const ViewboxExample = () => (
  <Icon
    ariaLabel="Camera"
    viewBox={{ width: 30, height: 30 }}
    pathData="M10 8v8l5-4-5-4zm9-5H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z"
  />
);

Using SVG

You can also pass SVG elements as children to the Icon component if you have more than 1 path or want to provide other SVG attributes like stroke

Copy
import { Icon } from '@aws-amplify/ui-react';

export const CustomIconWithSvgExample = () => {
  return (
    // This is an align bottom icon
    <Icon ariaLabel="Align bottom">
      <path d="M13 10H17V16H13V10Z" fill="currentColor" opacity="0.5" />
      <path d="M11 4H7V16H11V4Z" fill="currentColor" />
      <path d="M18 18H6V20H18V18Z" fill="currentColor" />
    </Icon>
  );
};


You can also optionally use a paths array of path-like objects that will be mapped to <path> elements.

Copy
import { Icon } from '@aws-amplify/ui-react';

export const CustomIconWithPathsExample = () => {
  return (
    <Icon
      ariaLabel="tag"
      viewBox={{ width: 23, height: 15 }}
      paths={[
        {
          d: 'M1 0.5C0.723858 0.5 0.5 0.723858 0.5 1V14C0.5 14.2761 0.723858 14.5 1 14.5H14C14.1148 14.5 14.2262 14.4605 14.3153 14.3881L22.3153 7.88806C22.4322 7.79311 22.5 7.65056 22.5 7.5C22.5 7.34944 22.4322 7.20689 22.3153 7.11194L14.3153 0.611943C14.2262 0.539529 14.1148 0.5 14 0.5H1Z',
          strokeLinejoin: 'bevel',
          strokeLinecap: 'round',
          strokeDasharray: '4 4',
          fill: 'transparent',
          stroke: 'currentColor',
        },
      ]}
    />
  );
};

Using a library

To use an icon library like React Icons, import the desired icon and pass it to the as prop.

Copy
import { Icon } from '@aws-amplify/ui-react';
import { DiJsBadge } from 'react-icons/di';

export const CustomIconWithLibExample = () => {
  return <Icon ariaLabel="Javascript" as={DiJsBadge} />;
};


Here are some good open source icon libraries:

React icons
Hero icons
Styling
Target classes
Target Classes
CSS Variables
Class	Description
amplify-icon	Top level element that wraps the Icon primitive
Sizes

Icon size matches the font-size of the container. Adjust the font-size to set a specific height.

Inherited size from button sizes

Save
Save
Save
Save
Copy
import { Button, Icon, Text } from '@aws-amplify/ui-react';

const SaveIcon = () => (
  <Icon
    ariaLabel=""
    pathData="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"
  />
);

export const IconSizesExample = () => {
  return (
    <>
      {/* Inherited from button sizes */}
      <Button gap="0.1rem" size="small">
        <SaveIcon /> {'Save'}
      </Button>
      <Button gap="0.2rem">
        <SaveIcon /> {'Save'}
      </Button>
      <Button gap="0.2rem" size="large">
        <SaveIcon /> {'Save'}
      </Button>
      <Text as="span" fontSize="50px">
        <SaveIcon />
        Save
      </Text>
    </>
  );
};

Color

Use the color prop to change the Icon color. The fill of the path inside the SVG is set to currentColor(inherits color from current font color).

Copy
import { Icon, useTheme } from '@aws-amplify/ui-react';

export const IconColorExample = () => {
  const { tokens } = useTheme();
  return (
    <>
      <Icon
        ariaLabel="Flag"
        pathData="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z"
        color={tokens.colors.pink[80]}
      />
      <Icon
        ariaLabel="Flag"
        pathData="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z"
        color="rebeccapurple"
      />
    </>
  );
};

Accessibility

The Icon component does not require a label by default because there are a number of ways to use an Icon in an accessible way:

You can set an aria-label attribute on the Icon
You can use a <title></title> element when passing SVG elements as the child of the Icon
You can use the Icon decoratively, when a label would be redundant.

Announcement

Copy
import { Icon, Flex, Text } from '@aws-amplify/ui-react';
import { MdAnnouncement } from 'react-icons/md';

export const AccessibilityIconExample = () => (
  <Flex direction="column" alignItems="flex-start">
    {/* Icon labeled via aria-label */}
    <Icon
      ariaLabel="Close"
      pathData="M6.2253 4.81108C5.83477 4.42056 5.20161 4.42056 4.81108 4.81108C4.42056 5.20161 4.42056 5.83477 4.81108 6.2253L10.5858 12L4.81114 17.7747C4.42062 18.1652 4.42062 18.7984 4.81114 19.1889C5.20167 19.5794 5.83483 19.5794 6.22535 19.1889L12 13.4142L17.7747 19.1889C18.1652 19.5794 18.7984 19.5794 19.1889 19.1889C19.5794 18.7984 19.5794 18.1652 19.1889 17.7747L13.4142 12L19.189 6.2253C19.5795 5.83477 19.5795 5.20161 19.189 4.81108C18.7985 4.42056 18.1653 4.42056 17.7748 4.81108L12 10.5858L6.2253 4.81108Z"
    />

    {/* Icon labeled via SVG <title></title> element */}
    <Icon>
      <title>Document</title>
      <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"></path>
    </Icon>

    {/* 
      Decorative Icon, hidden from the accessibility tree 
      because it is accompanied by descriptive text. 
    */}
    <Flex gap="xxxs" alignItems="center">
      <Icon as={MdAnnouncement} aria-hidden="true" /> <Text>Announcement</Text>
    </Flex>
  </Flex>
);


--------------------------------------------------------------------------------

Title: Heading | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/heading
HTML Content:
Heading

Heading renders semantic section heading text representing six levels.

Theme source
React source
Feedback
Documentation
Props
Demo
Heading text
Displayed Text
level
1
2
3
4
5
6
isTruncated
Copy
<Heading
  width='30vw'
  level={6} 
>
   Heading text
</Heading>
Usage

Import the Heading primitive.

Hello world
Copy
import * as React from 'react';
import { Heading } from '@aws-amplify/ui-react';

export const DefaultHeadingExample = () => {
  return <Heading>Hello world</Heading>;
};

Heading levels

Use the level prop to change the heading level (e.g., h1 - h6). Default heading level is 6 and available options are 1, 2, 3, 4, 5 and 6.

Heading 1
Heading 2
Heading 3
Heading 4
Heading 5
Heading 6
Default (level 6)
Copy
import * as React from 'react';
import { Heading } from '@aws-amplify/ui-react';

export const HeadingLevelExample = () => {
  return (
    <>
      <Heading level={1}>Heading 1</Heading>
      <Heading level={2}>Heading 2</Heading>
      <Heading level={3}>Heading 3</Heading>
      <Heading level={4}>Heading 4</Heading>
      <Heading level={5}>Heading 5</Heading>
      <Heading level={6}>Heading 6</Heading>
      <Heading>Default (level 6)</Heading>
    </>
  );
};

Truncate

The isTruncated prop will render an ellipsis when the Heading text exceeds its allowed width.

Hello world Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Copy
import { Heading } from '@aws-amplify/ui-react';

export const TruncatedHeading = () => {
  return (
    <Heading isTruncated={true} level={3}>
      Hello world Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
      do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
      ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
      velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
      cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
      est laborum.
    </Heading>
  );
};

CSS Styling
Theme

You can customize the appearance of all Heading components in your application with a Theme.

Heading Theme Source

Title
Default
Copy
import { Heading, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'heading-theme',
  tokens: {
    components: {
      heading: {
        color: { value: '{colors.blue.80}' },

        1: {
          fontSize: { value: '{fontSizes.xxl}' },
          fontWeight: { value: '{fontWeights.bold}' },
        },
        6: {
          fontSize: { value: '{fontSizes.large}' },
          fontWeight: { value: '{fontWeights.normal}' },
        },
      },
    },
  },
};

export const HeadingThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex direction="column">
      <Heading level={1}>Title</Heading>
      <Heading>Default</Heading>
    </Flex>
  </ThemeProvider>
);

Target classes
Target Classes
CSS Variables
Class	Description
amplify-heading	Top level element that wraps the Heading primitive
Global styling

To override styling on all Headings, you can set the Amplify CSS variables or use the built-in .amplify-heading class.

Hello world
Copy
/* styles.css */
:root {
  --amplify-components-heading-color: gray;
}
/* OR */
.amplify-heading {
  color: gray;
}


Override styles for any Heading component h1 - h6 using the .amplify-heading--[LEVEL] classes.

Small and italic

Big and bold

Copy
/* styles.css */
.amplify-heading--1 {
  font-size: 1rem;
  font-style: italic;
}

.amplify-heading--6 {
  font-size: 2rem;
  font-weight: bold;
}

Copy
import './styles.css';

<Heading level={1}>Small and italic</Heading>
<Heading>Big and bold</Heading>

Local styling

To override styling on a specific Heading, you can use a class selector or style props.

Using a class selector:

Hello world

Copy
/* styles.css */
.heading-blue {
  color: var(--amplify-colors-blue-80);
}

Copy
import './styles.css';

<Heading className="heading-blue" level={3}>
  Hello world
</Heading>;


Using style props:

Hello world
Copy
<Heading level={3} color="green" fontWeight="bold">
  Hello world
</Heading>


--------------------------------------------------------------------------------

Title: Divider | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components/divider
HTML Content:
Divider

Divider helps organize content, separate sections and establish visual rhythm.

Theme source
React source
Feedback
Documentation
Props
Demo

Before

After

Size
default
small
large
Orientation
horizontal
vertical
label
Copy
<Flex direction="column">
  <Text>Before</Text>
  <Divider
    orientation="horizontal" />
  <Text>After</Text>
</Flex>
Usage

Import the Divider component and place it between components you want separated. Most of the time you will want to use the divider in a <Flex> component.

Before

After

Copy
import { Flex, Text, Divider } from '@aws-amplify/ui-react';

export const DefaultDividerExample = () => (
  <Flex direction="column">
    <Text>Before</Text>
    <Divider />
    <Text>After</Text>
  </Flex>
);

Orientation

Horizontal (default)

Before

After

Copy
import { Flex, Text, Divider } from '@aws-amplify/ui-react';

export const HorizontalDividerExample = () => (
  <Flex direction="column">
    <Text>Before</Text>
    <Divider orientation="horizontal" />
    <Text>After</Text>
  </Flex>
);


Vertical

Before

After

Copy
import { Flex, Text, Divider } from '@aws-amplify/ui-react';

export const VerticalDividerExample = () => (
  <Flex direction="row" justifyContent="space-around">
    <Text>Before</Text>
    <Divider orientation="vertical" />
    <Text>After</Text>
  </Flex>
);

Sizes

Available options are small, large, and none (default).

Copy
import { Flex, Divider } from '@aws-amplify/ui-react';

export const DividerSizesExample = () => (
  <Flex direction="column">
    <Divider size="small" />
    <Divider />
    <Divider size="large" />
  </Flex>
);

Label

Before

After

Copy
import { Flex, Text, Divider } from '@aws-amplify/ui-react';

export const LabelExample = () => (
  <Flex direction="column">
    <Text>Before</Text>
    <Divider label="OR" />
    <Text>After</Text>
  </Flex>
);

Customization
Theme

You can customize the appearance of all Divider components in your application with a Theme.

Divider Theme Source

Copy
import { Divider, Flex, ThemeProvider, Theme } from '@aws-amplify/ui-react';

const theme: Theme = {
  name: 'divider-theme',
  tokens: {
    components: {
      divider: {
        borderStyle: { value: 'dotted' },
        borderColor: { value: '{colors.blue.80}' },
        borderWidth: { value: '{borderWidths.small}' },

        label: {
          color: { value: '{colors.white}' },
          backgroundColor: { value: '{colors.blue.80}' },
        },

        large: {
          borderWidth: { value: '{borderWidths.large}' },
        },
      },
    },
  },
};

export const DividerThemeExample = () => (
  <ThemeProvider theme={theme} colorMode="light">
    <Flex direction="column" gap="3rem">
      <Divider label="Default" />
      <Divider size="large" label="Large" />
    </Flex>
  </ThemeProvider>
);

CSS

You can set the Amplify CSS variables or use the built-in .amplify-divider class to customize all Dividers in your application as well.

Copy
/* styles.css */
[data-amplify-theme] {
  --amplify-components-divider-border-style: dashed;
}
/* OR */
.amplify-divider {
  border-style: dashed;
}


To replace all the Divider styling, unset it:

.amplify-divider {
  all: unset;
  /* Add your styling here*/
}

Target classes
Target Classes
CSS Variables
Class	Description
amplify-divider	Top level element that wraps the Divider primitive
amplify-divider--label	Class applied to the label of the Divider component
Local styling

To override styling on a specific Divider, you can use (in order of increasing specificity): a class selector, data attributes, or style props.

Using a class selector:

Copy
import { Flex, Divider } from '@aws-amplify/ui-react';

const css = `.custom-divider {
  border-style: dashed;
}`;

export const DividerClassNameExample = () => (
  <Flex direction="column">
    <style>{css}</style>
    <Divider className="custom-divider" />
  </Flex>
);


Using style props:

Copy
import { Flex, Divider, useTheme } from '@aws-amplify/ui-react';

export const DividerStylePropsExample = () => {
  const { tokens } = useTheme();
  return (
    <Flex direction="column">
      <Divider
        border={`${tokens.borderWidths.large} solid ${tokens.colors.primary[80]}`}
      />
      <Divider border="5px solid pink" borderRadius="10px" />
    </Flex>
  );
};

Default theme
import { DesignTokenProperties, OutputVariantKey } from '../types/designToken';

type DividerSizeTokens<Output> = DesignTokenProperties<'borderWidth', Output>;

export type DividerTokens<Output extends OutputVariantKey> =
  DesignTokenProperties<
    'borderStyle' | 'borderColor' | 'borderWidth' | 'opacity',
    Output
  > & {
    label?: DesignTokenProperties<
      'color' | 'paddingInline' | 'fontSize' | 'backgroundColor',
      Output
    >;
    small?: DividerSizeTokens<Output>;
    large?: DividerSizeTokens<Output>;
  };

export const divider: Required<DividerTokens<'default'>> = {
  borderStyle: { value: 'solid' },
  borderColor: { value: '{colors.border.primary.value}' },
  borderWidth: { value: '{borderWidths.medium.value}' },

  label: {
    color: { value: '{colors.font.tertiary.value}' },
    paddingInline: { value: '{space.medium.value}' },
    fontSize: { value: '{fontSizes.small.value}' },
    backgroundColor: { value: '{colors.background.primary.value}' },
  },

  small: {
    borderWidth: { value: '{borderWidths.small.value}' },
  },

  large: {
    borderWidth: { value: '{borderWidths.large.value}' },
  },

  opacity: {
    value: '{opacities.60.value}',
  },
};


--------------------------------------------------------------------------------

Title: Components | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/components
HTML Content:
Components
Feedback
Base components
Divider
A Divider creates separations in content. Dividers can help organize content and establish visual rhythm.
Heading
This is a separate primitive from Text for semantic purposes. The Heading primitive maps to an <h*> tag, and Text maps to a <p> tag.
Icon
The icon component displays simple vector graphics for use in other components like Buttons.
Image
The Image primitive can be used to display responsive images.
ScrollView
ScrollView is essentially a View that allows scrolling of its inner contents.
Text
The Text primitive is used to display simple strings of text in an interface.
View
View is the foundational component for Amplify UI primitives. While View renders a <div> by default, it can render any HTML element and supports styling via props.
Feedback components
Alert
An Alert displays a brief, important message in a way that attracts the user's attention without interrupting the user's task. Alerts are typically intended to be read out dynamically by a screen reader.
Loader
Loaders provide a visual cue that an action is either processing or awaiting a result. They are used to help the customer understand the system is working to fulfill a request.
Message
A Message can be used to display feedback to the user.
Placeholder
The Placeholder component is used to fill out the interface while content is loaded asynchronously.
Navigation components
Breadcrumbs
The breadcrumbs component is a navigation list used to visualize the information architecture of a website and the user's current place in the hierarchy.
Link
Links are customizable and themeable elements used for Navigation. By default Links render an anchor tag but can be configured to be used with routing libraries.
Menu
Menu provides an accessible, interactive menu for selecting actions within an application. Dropdown menu is collision-aware and will automatically change location based on available space.
Tabs
Tabs organize content into multiple sections and allow users to navigate between them.
Input components
Autocomplete
Autocomplete is a SearchField enhanced by a list of suggested options.
Button
The Button primitive is used to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation.
Checkbox Field
CheckboxField is used to mark an individual item as selected, or to select multiple items from a list of individual items.
DropZone
The Dropzone component captures files from user with drag and drop
Fieldset
Fieldsets are used to group related form fields.
Input
Input primitive allows creating interactive form controls
Label
Label primitive enables captioning a user interface item
Password Field
PasswordField allows users to input passwords, featuring full password manager support and an optional show/hide password button for user convenience - Amplify UI
Phone Number Field
The PhoneNumberField form primitive allows users to input a phone number
Radio Group Field
A RadioGroupField allows users to select a single option from a list of mutually exclusive options.
Search Field
SearchField accepts query text for search.
Select Field
The SelectField primitive allows you to create a drop-down list.
Slider Field
Sliders allow users to quickly select a value within a range. They should be used when the upper and lower bounds to the range are invariable.
Stepper Field
A StepperField is a number input with buttons to increase or decrease the value.
Switch Field
The SwitchField form primitive is a toggleable input type with a checked (on) and unchecked (off) state.
Text Field
The TextField form primitive allows users to input text content.
TextArea Field
The TextAreaField form primitive can be used allow users to input multiline text content.
Toggle Button
A toggle button represents an on/off state for some configuration, for example switching on/off bold text in a text editor.
Layout components
Accordion
The Accordion primitive enables users to expand or collapse a set of sections.
Card
The Card component can be used to group related pieces of content.
Collection
A Collection wraps Flex and Grid components, and provides a way to display items in a collection from a data source.
Flex
A layout container using Flexbox.
Grid
A layout container using CSS Grid
Pagination
Pagination provides navigation to allow customers to move between large sets of content that are distributed across multiple pages.
Table
The Table primitive provides users with a styled and customizable table element.
Data display components
Badge
A Badge is a small visual element to denote a status or message about an item. A small, color-coded visual element that contains letters or numbers, that you can use to label, categorize, or organize items.
Rating
The Rating component displays a read-only star rating of a product or service.
Utility components
Highlight Match
HighlightMatch is used to highlight a substring of a text.
Visually Hidden
The Visually Hidden component is used to visually hide content while leaving it available to screen readers.

--------------------------------------------------------------------------------

Title: Troubleshooting | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/troubleshooting
HTML Content:
Troubleshooting

Workarounds for common issues using Amplify UI.

Feedback
Astro
Uncaught ReferenceError: global is not defined

Note: this issue was fixed in aws-amplify version 6

When working with a Astro project you must make a few modifications. Please follow the steps below.

TypeScript
JavaScript

1. Add the following script to the bottom of the index.astro file. This will only run on the client side and will polyfill Node globals.

<script>
  window.global = window;
  window.process = {
    env: { DEBUG: undefined },
  } as unknown as NodeJS.Process;
  var exports = {};
</script>


2. Update the astro.config.mjs to add a resolve object inside the defineConfig({}) as seen below.

export default defineConfig({
  plugins: [react()],
  resolve: {
      alias: [
      {
        find: './runtimeConfig',
        replacement: './runtimeConfig.browser',
      },
    ]
  }
})

Create React App
CRA 4: Uncaught ReferenceError: g is not defined

When using Geo components and Create React App v4, users may experience the following error when rendering the <MapView> component in a production build:

Uncaught ReferenceError: g is not defined


The error is related to this maplibre-gl issue and surfaces due to the dropped support for Internet Explorer in maplibre-gl v2. To correct this error, you'll need to adjust your browser target for production to exclude Internet Explorer:

1. In your package.json file of your Create React App, adjust the browserslist.production block from:

"browserslist": {
  "production": [
    ">0.2%",
    "not dead",
    "not op_mini all"
  ],
  ...
}


to the following:

"browserslist": {
  "production": [
    "defaults",
    "not ie 11"
  ],
  ...
}


2. Rebuild your production application using npx run build.

3. Run your production build using a tool like serve (serve -s build) and verify the <MapView> component renders without error.

CRA 4: Can’t import the named export ‘Amplify’ from non EcmaScript module (only default export is available)

Create React App v4 is not officially supported by Amplify UI. When you use it, you may get the following error

 ./node_modules/@aws-amplify/ui-react/dist/esm/components/..\/\*.mjs

 Can’t import the named export ‘Amplify’ from non EcmaScript module (only default export is available)


To resolve the error, you may either (1) upgrade to Create React App version 5 (Migration Guide), or (2) override the webpack config using tools like React App Rewired, Craco to add the following rule:

{
  module: {
    rules: [
      {
        test: /\.mjs$/,
        include: /node_modules/,
        type: 'javascript/auto'
      }
    ]
  }
}

Jest
window.URL.createObjectURL is not a function

As of v2.15.0 of @aws-amplify/ui-react which included the release of Geo components, users of the Jest testing framework may run into the following error when attempting to run tests:

window.URL.createObjectURL is not a function


Please follow the steps below to resolve this issue.

1. Navigate to or create a Jest setup file for your project.

2. Add the following code to polyfill the unrecognized function in your Jest setup file:

if (typeof window.URL.createObjectURL === 'undefined') {
  window.URL.createObjectURL = jest.fn();
}


This is a known problem when using the jsdom library (a dependency of Jest) with a package that uses an unrecognized function. See this issue.

Next.js
Next 13.4+: React Server Components

Next.js 13.4+ introduces app directory with the usage of Server Components. To use Amplify UI componenents, you must use them inside the Client Component tree by placing "use client" at the boundary between your Client and Server component module graph. Please see the Next.js documentation on how you could achieve this.

Next 13.4+: Module not found Errors

When you use Amplify with Next.js App Router, you will see the follow errors from aws-crt and encoding in the server terminal:

./node_modules/node-fetch/lib/index.js
Module not found: Can't resolve 'encoding' in 'xxx'

./node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
Module not found: Can't resolve 'aws-crt' in 'xxx'


These errors will not affect the use and functionality of the client, nor will errors appear in the browser console. This is a known transitive issue when using the AWS SDK. The issue is currently tracked here.

Webpack
Webpack 5+: Uncaught ReferenceError: process is not defined

Note: this issue has been fixed in aws-amplify version 6. The polyfill is only required for projects that use aws-amplify version 5 (or earlier) with Webpack version 5 (or later).

Follow the instructions below if you are using Webpack 5:

Add node-polyfill-webpack-plugin as dev dependency:
npm
yarn
npm install node-polyfill-webpack-plugin -D
Copy
Add the plugin to your webpack.config.js plugins list:_
  plugins: [
    new NodePolyfillPlugin(), // Polyfill Node.js globals (e.g. global, process, etc)
  ],

Webpack 4: Can’t import the named export ‘Amplify’ from non EcmaScript module (only default export is available)

Follow here for solutions.

Vite
Uncaught ReferenceError: global is not defined

Note: this issue was fixed in aws-amplify version 6

When working with a Vite project you must make a few modifications. Please follow the steps below.

TypeScript
JavaScript

1. Add the following script tag to the index.html file right before the </body> tag. This will only run on the client side and will polyfill Node globals.

  <script>
    window.global = window;
    window.process = {
      env: { DEBUG: undefined },
    }
    var exports = {};
  </script>
</body>


2. Update the vite.config.ts (or vite.config.js) and add a resolve alias inside the defineConfig({}) as seen below.

export default defineConfig({
  plugins: [react()],
  resolve: {
      alias: [
      {
        find: './runtimeConfig',
        replacement: './runtimeConfig.browser', // ensures browser compatible version of AWS JS SDK is used
      },
    ]
  }
})


3. (Optional) If you run into TypeScript errors importing aws-exports.js, you may need to update the tsconfig.json file with the following config and add a type declaration file:

  "compilerOptions": {
    "allowJs": true,
  }


aws-exports.d.ts file:

declare const awsmobile: Record<string, any>
export default awsmobile;


If you are still having issues, please see comments on the following issue for additional Vite workarounds. Note that there is active ongoing work to make these modifications unnecessary.

--------------------------------------------------------------------------------

Title: Migration | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/migration
HTML Content:
Migration
Feedback

Migration guides for Liveness, In-App Messaging and Storage packages can be found towards the bottom of this page.

@aws-amplify/ui-react
Migrate from 5.x to 6.x
Installation

Install the 6.x version of both @aws-amplify/ui-react and aws-amplify.

The 6.x version of @aws-amplify/ui-react has a minimum dependency of 6.x on aws-amplify. aws-amplify@6 introduced breaking API changes.

npm
yarn
npm install @aws-amplify/ui-react@6.x aws-amplify@6.x
Copy
Update and usage

@aws-amplify/ui-react@6.x introduces the following breaking changes:

1. Updates to the Authenticator

The initialState property now accepts forgotPassword in place of resetPassword:

- <Authenticator initialState="resetPassword" />
+ <Authenticator initialState="forgotPassword" />


The corresponding key of the components prop has been updated to reflect the change as well:

- <Authenticator components={{ ResetPassword: MyResetPassword }} />
+ <Authenticator components={{ ForgotPassword: MyForgotPassword }} />


The user object provided after an end user has been authenticated has been updated to reflect the AuthUser interface available from aws-amplify/auth:

- interface AmplifyUser {
-   challengeName?: ChallengeName;
-   attributes?: CognitoAttributes;
-   username: string;  
- }
+ interface AuthUser  {
+   username: string;
+   userId: string;
+   signInDetails?: CognitoAuthSignInDetails;
+ }


AuthUser can be imported from aws-amplify/auth:

import { AuthUser } from 'aws-amplify/auth';


User attributes are now available by directly calling fetchUserAttribues:

import { fetchUserAttributes } from 'aws-amplify/auth';

const userAttributes = await fetchUserAttributes();


The function signatures of the services interface have been updated to align with the shape of the underlying aws-amplify/auth APIs used by the Authenticator and provide improved typescript support:

interface AuthenticatorProps {
  services?: {
-    getCurrentUser?: () => Promise<any>,
+    getCurrentUser?: () => Promise<AuthUser>,

-    handleSignIn?: ({ username, password, }: { username: string;password: string; }) => Promise<any>,
+    handleSignIn?: (input: SignInInput) => Promise<SignInOutput>,

-    handleSignUp?: (formData: any) => Promise<ISignUpResult>,
+    handleSignUp?: (input: SignUpInput) => Promise<SignUpOutput>,

-    handleConfirmSignIn?: ({ user, code, mfaType, }: { user: any; code: string; mfaType: ChallengeName; }) =>Promise<any>),
+    handleConfirmSignIn?: (input: ConfirmSignInInput) => Promise<ConfirmSignInOutput>,

-    handleConfirmSignUp?: ({ username, code, }: { username: string; code: string; }) => Promise<any>,
+    handleConfirmSignUp?: (input: ConfirmSignUpInput) => Promise<ConfirmSignUpOutput>,

-    handleForgotPasswordSubmit?: ({ username, code, password, }: { username: string; code: string; password:string; }) => Promise<string>),
+    handleForgotPasswordSubmit?: (input: ConfirmResetPasswordInput) => Promise<void>,

-    handleForgotPassword?: (formData: any) => Promise<any>,
+    handleForgotPassword?: (input: ResetPasswordInput) => Promise<ResetPasswordOutput>,
  }
}


The input and return type interfaces are available as imports from aws-amplify/auth:

import { ConfirmSignInInput } from 'aws-amplify';

2. Expander is now Accordion

The Expander component has been replaced by the Accordion component in Amplify UI v6. The Accordion is fully composable and uses HTML elements <summary> and <details>.

<Expander type="single">
  <ExpanderItem title="Is it accessible?" value="demo-item-1">
    Yes! It adheres to the WAI-ARIA design pattern.
  </ExpanderItem>
  <ExpanderItem title="Can I customize the styling?" value="demo-item-2">
    Of course! See the section on CSS Styling below.
  </ExpanderItem>
  <ExpanderItem
    title="Is it a great way to organize content?"
    value="demo-item-3"
  >
    Most definitely!
  </ExpanderItem>
</Expander>

// Becomes 

<Accordion
  items={[
    {
      trigger: 'Is it accessible?',
      value: 'accessible',
      content: 'Yes! It uses HTML native elements: <details> and <summary>.'
    },
    {
      trigger: 'Can I customize the styling?',
      value: 'styling',
      content: 'Of course! See the section on CSS Styling below.'
    },
    {
      trigger: 'Is it a great way to organize content?',
      value: 'content',
      content: 'Most definitely!'
    }
  ]}
/>


The Accordion is also fully composable now too:

<Accordion.Container>
  <Accordion.Item value="Accordion-item">
    <Accordion.Trigger>
      What is an Accordion?
      <Accordion.Icon />
    </Accordion.Trigger>
    <Accordion.Content>
      An Accordion contains all the parts of a collapsible section.
    </Accordion.Content>
  </Accordion.Item>
  <Accordion.Item value="unique-value">
    <Accordion.Trigger>
      This is the item title
      <Accordion.Icon />
    </Accordion.Trigger>
    <Accordion.Content>
      The `children` of the Accordion are displayed here.
    </Accordion.Content>
  </Accordion.Item>
</Accordion.Container>


Behavior

Here are some differences in behavior between the Expander and Accordion components:

The Accordion allows only 1 item expanded by default, while the Expander allowed multiple items expanded by default. To allow multiple open with Accordion, you need to add the allowMultiple prop.
The Accordion cannot be fully collapsed by default, while the Expander could be collapsed. To make the Accordion always have 1 item open, use the preventCollapse prop.

Styling

The class names have changed between Expander and Accordion. Here is a mapping:

amplify-expander -> amplify-accordion
amplify-expander__item -> amplify-accordion__item
amplify-expander__content -> amplify-accordion__content
amplify-expander__header -> amplify-accordion__trigger
amplify-expander__icon -> amplify-accordion__icon

The --amplify-components-accordion- CSS variables can also be used to style Accordion.

3. Tabs refactor

The Tabs component is now fully composable and more light-weight after removing the Radix dependency.

- import { Tabs, TabItem } from '@aws-amplify/ui-react'
+ import { Tabs } from '@aws-amplify/ui-react'

- <Tabs>
-  <TabItem title="Tab 1">
-    Tab 1 Content
-  </TabItem>

+ <Tabs.Container defaultValue="Tab 1">
+  <Tabs.List>
+    <Tabs.Item value="Tab 1">Tab 1</Tabs.Item>
+  </Tabs.List>
+  <Tabs.Panel value="Tab 1">
+    Tab 1 Content
+  </Tabs.Panel>


You can also use the Tabs in a uncomposed way too:

  <Tabs
    defaultValue={'Tab 1'}
    items={[
      { label: 'Tab 1', value: 'Tab 1', content: 'Tab content #1' },
      { label: 'Tab 2', value: 'Tab 2', content: 'Tab content #2' },
      { label: 'Tab 3', value: 'Tab 3', content: 'Tab content #3' },
    ]}
  />


Some notable differences:

Instead of providing a defaultIndex or currentIndex you provide a defaultValue or value. Each Tabs.Item and Tabs.Panel should have a value that matches with the corresponding element.
onChange becomes onValueChange
You should supply a defaultValue or value or else there will be no default selected tab. Previously the Tabs component would default to the first tab.

There are also more design tokens and better CSS classes for easier customization.

4. Removal of extraneous data attributes and updating classNames

#4452

If you were using [data-] attributes in CSS to target styling components you will need to change these selectors to classes.

ClassName updates:

amplify-loader__percentage-text -> amplify-loader__label
amplify-menu-content-wrapper -> amplify-menu__wrapper
amplify-menu-trigger -> amplify-menu__trigger
amplify-menu-content -> amplify-menu__content
amplify-menu-content__item -> amplify-menu__content__item
amplify-pagination__item-button -> amplify-pagination__item
amplify-pagination__item-current -> amplify-pagination__item--current
amplify-pagination__item-ellipsis -> amplify-pagination__item--ellipsis
amplify-rating-icon-container -> amplify-rating__item
amplify-rating-icon -> amplify-rating__icon
amplify-rating-icon-filled -> amplify-rating__icon--filled
amplify-rating-icon-empty -> amplify-rating__icon--empty
amplify-select__icon-wrapper -> amplify-select__icon
.amplify-switch-label -> .amplify-switch__label
.amplify-switch-thumb -> .amplify-switch__thumb
.amplify-switch-track -> .amplify-switch__track
5. Moving brand.primary and brand.secondary up a level

To make it easier to access the primary and secondary colors in the Theme, we removed the brand namespace and moved primary and secondary up a level.

- tokens.colors.brand.primary[10]
+ tokens.colors.primary[10]

const theme = createTheme({
  tokens: {
    colors: {
-       brand: {
        primary: {
          //... 
        }
-       }
    }
  }
})


We also added the ability to easily set the entire range of primary and secondary colors at the theme level

const theme = createTheme({
  primaryColor: 'red',
  secondaryColor: 'green'
});

Migrate from 4.x to 5.x
Installation

Install the 5.x version of the @aws-amplify/ui-react library.

npm
yarn
npm install @aws-amplify/ui-react@5.x
Copy
Update and usage

@aws-amplify/ui-react@5.x introduces the following breaking changes:

1. @aws-amplify/ui-react@5.x drops Amplify Geo components. They are moved to a separate new package @aws-amplify/ui-react-geo.

Install the 1.x version of the @aws-amplify/ui-react-geo library and update your existing imports accordingly.

npm
yarn
npm install @aws-amplify/ui-react-geo@1.x
Copy

Styles supporting Amplify Geo UI components are moved to @aws-amplify/ui-react-geo library and are not available through @aws-amplify/ui-react library anymore. When using components like MapView or LocationSearch from @aws-amplify/ui-react-geo library, import the styles from the same library as well.

import '@aws-amplify/ui-react-geo/styles.css';


For example, you can import the MapView component with related styles from @aws-amplify/ui-react-geo library.

import { Amplify } from 'aws-amplify';
import { MapView } from '@aws-amplify/ui-react-geo';

import '@aws-amplify/ui-react-geo/styles.css';

import awsExports from './aws-exports';

Amplify.configure(awsExports);

export default function BasicMap() {
  return <MapView />;
}

2. @aws-amplify/ui-react@5.x drops Amplify Notifications components. They are moved to a separate new package @aws-amplify/ui-react-notifications.

Install the 1.x version of the @aws-amplify/ui-react-notifications library and update your existing imports accordingly.

npm
yarn
npm install @aws-amplify/ui-react-notifications@1.x
Copy

For example, you can import the In-App messaging components like InAppMessageDisplay and InAppMessagingProvider from @aws-amplify/ui-react-notifications library.

import { Text } from '@aws-amplify/ui-react';
import {
  InAppMessageDisplay
  InAppMessagingProvider,
} from '@aws-amplify/ui-react-notifications';

import '@aws-amplify/ui-react/styles.css';

import awsExports from './aws-exports';

Amplify.configure(awsExports);

const App = () => {
  useEffect(() => {
    InAppMessaging.syncMessages();
  }, []);

  return (
    <InAppMessagingProvider>
      <InAppMessageDisplay />
      <Text>In-App Messaging Example</Text>
    </InAppMessagingProvider>
  );
};

3. @aws-amplify/ui-react@5.x removes the to prop from the Link component.

If using a Link component with the to prop, remove to and instead extend from the underlying rendered third-party Link. For example, using React Router Link with the Amplify UI Link component:

import { Link } from '@aws-amplify/ui-react';
import { Link as ReactRouterLink } from 'react-router-dom';

<Link as={ReactRouterLink} to="/">Home</Link>

4. @aws-amplify/ui-react@5.x updates component types to include the underlying rendered HTML element's attributes and strictly types the View component.
Migrate from 3.x to 4.x
Installation

Install the 4.x version of the @aws-amplify/ui-react library and the 5.x version of the aws-amplify library.

npm
yarn
npm install aws-amplify@5.x @aws-amplify/ui-react@4.x
Copy
Update and usage

@aws-amplify/ui-react@4.x introduces the following breaking changes:

1. @aws-amplify/ui-react@4.x removes isMultiline prop from TextField.

Replace any TextField components using the isMultiline prop with the TextAreaField component.

- <TextField
-  isMultiline
+ <TextAreaField

2. @aws-amplify/ui-react@4.x moves text directionality support to ThemeProvider
Note

If you are NOT using dir="rtl" in your application, feel free to skip this item.

@aws-amplify/ui-react has a dependency on Radix components for Menu, SliderField, Tabs, and Expander. There were a number of changes in the July 21, 2022 release of radix-ui/* packages, and the breaking change for @aws-amplify/ui-react was removal of support for the dir HTML attribute, and the addition of the DirectionProvider. In order to make the transition seamless for most of Amplify users, we've added the DirectionProvider with a default direction of ltr to the ThemeProvider.

If your application is using right to left directionality, the example below shows the needed change for apps using the native HTML dir="rtl":

- <View dir="rtl">
+ <ThemeProvider direction="rtl">


Also see: Internationalization

3. @aws-amplify/ui-react@4.x removes legacy component exports

The following deprecated components imported from @aws-amplify/ui-react/legacy are removed:

AmplifyAuthenticator
AmplifySignIn
AmplifySignOut
AmplifyChatbot
AmplifyPhotoPicker
AmplifyPicker
AmplifyS3Album
AmplifyS3Image
AmplifyS3ImagePicker
AmplifyS3Text
AmplifyS3TextPicker
withAuthenticator

Depending on the v1 version of this package and re-exporting these components caused issues. If you still want to use these legacy components you can depend on the v1 version of this package with an npm alias in your dependencies:

"@aws-amplify/ui-react-v1": "npm:@aws-amplify/ui-react@1.2.9"

Documentation for legacy components

4. @aws-amplify/ui-react@4.x adds inputStyles prop to Field primitives

Before 4.0, Field components like TextField would try to intelligently apply certain style props onto the wrapper element and some on the input element. We felt this was a little too opaque to users, but we still want to allow you to style the input element directly. @aws-amplify/ui-react@4.x adds an inputStyles prop to Field components so you can apply style props directly on the input (or textarea or select) as well as on the wrapper element.

Hopefully this change won't affect your code but will allow for more customization and control.

Note

The TextAreaField component does apply 1 style prop directly on the textarea element: resize. We felt this one makes sense to apply direclty on the the textarea element and not the wrapper element.

5. @aws-amplify/ui-react@4.x moves automatic signin on signup logic to aws-amplify.

If you are overriding Auth.signUp, update the override function call to include the autoSignIn option set to enabled. If this change is not made, users will not be automatically signed in on signup.

 async handleSignUp(formData) {
  let { username, password, attributes } = formData;
  // custom username
  username = username.toLowerCase();
  attributes.email = attributes.email.toLowerCase();
  return Auth.signUp({
    username,
    password,
    attributes,
+   autoSignIn: {
+     enabled: true
+   }
  });
}


6. @aws-amplify/ui-react@4.x removes legacy i18n translation keys removed

We replaced following legacy Authenticator texts:

Forgot your password?  with the trailing space is replaced by Forgot your password.

If you were using I18n to translate those keys, please update your translations accordingly to match the new strings.

Migrate from 2.x to 3.x
Installation

Install the 3.x version of the @aws-amplify/ui-react library.

npm
yarn
npm install aws-amplify @aws-amplify/ui-react@3.x
Copy
Update and usage

@aws-amplify/ui-react@3.x introduces the following breaking changes:

1. @aws-amplify/ui-react@3.x removes the built-in icons (Icon360, IconSave, etc).

Replace any icon components in use the react-icons package or other React icon libraries in its place.

- import { IconSave } from '@aws-amplify/ui-react';
+ import { MdSave } from 'react-icons/md';


Note: We did not remove the Icon component, which allows customers to easily add SVG icons using the pathData prop.

2. @aws-amplify/ui-react@3.x removes ShareText.

This export has been removed and should no longer be used.

Migrate from 1.x to 2.x
Installation

Install the 2.x version of the @aws-amplify/ui-react library.

npm
yarn
npm install aws-amplify @aws-amplify/ui-react@2.x
Copy
Update and Usage

Update the App.js with the new Authenticator and remove the old AmplifyAuthenticator as seen below:

App.js

- import { AmplifyAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';
import { Amplify } from 'aws-amplify';

+ import { Authenticator } from '@aws-amplify/ui-react';
+ import '@aws-amplify/ui-react/styles.css';

import awsExports from './aws-exports';
Amplify.configure(awsExports);

 const App = () => (
-  <AmplifyAuthenticator>
-    <div>
-      My App
-      <AmplifySignOut />
-    </div>
-  </AmplifyAuthenticator>
+  <Authenticator>
+      {({ signOut, user }) => (
+        <main>
+          <h1>Hello {user.username}</h1>
+          <button onClick={signOut}>Sign out</button>
+        </main>
+      )}
+    </Authenticator>
);


Authenticator breaking changes (1.x to 2.x)

The latest version of the Authenticator component has several differences from earlier versions. Here are a few of the major changes that you'll need to look out for.

Slots

All the slot locations have changed with the latest version of the Authenticator. To get a sense of the changes please check out the Headers and Footers section.

Form Fields

The latest version of the Authenticator has a different format for the formFields prop. It also no longer accepts inputProps nor hint. Instead, it's recommended that you use the Headers and Footers Slots or use the Sign Up Fields customization. For more information on form field customizations please see the Form Field Customization section.

CSS Styling

The latest version of the Authenticator has a completely different set of CSS variables. Please look over the Amplify CSS Variables section for more information.

onAuthUIStateChange

Previous versions of Authenticator exposed a onAuthUIStateChange handler to detect Auth state changes. For similar functionality see useAuthenticator.

@aws-amplify/ui-react-liveness
Migrate from 2.x to 3.x
Installation

Install the 3.x version of the @aws-amplify/ui-react-liveness library.

npm
yarn
npm install aws-amplify@6.x @aws-amplify/ui-react-liveness@3.x
Copy
Update and Usage

Optionally update your App with the new prop usage:

App.js

 const App = () => (
  return (
    <ThemeProvider>
      {loading ? (
        <Loader />
      ) : (
        <FaceLivenessDetector
          sessionId={createLivenessApiData.sessionId}
          region="us-east-1"
          onAnalysisComplete={handleAnalysisComplete}
-         disableInstructionScreen={true}
+         disableStartScreen={true}
        />
      )}
    </ThemeProvider>
  );
);


CDN CSP Policy

The 3.x version of the FaceLivenessDetector has been updated to use the latest version of TensorFlow and Blazeface, thus the default CDN paths have changed. If your application has an existing CSP policy, ensure your policy allows https://cdn.liveness.rekognition.amazonaws.com. If you are using a custom CDN make sure to update your CDN versions to match @tensorflow/tfjs-backend-wasm and @tensorflow-models/face-detection.Please look over the Liveness Config section for more information.

Migrate from 1.x to 2.x
Installation

Install the 2.x version of the @aws-amplify/ui-react-liveness library.

npm
yarn
npm install aws-amplify@5.x @aws-amplify/ui-react-liveness@2.x
Copy
Update and Usage

Optionally update your App with the new prop usage:

App.js

 const App = () => (
  return (
    <ThemeProvider>
      {loading ? (
        <Loader />
      ) : (
        <FaceLivenessDetector
          sessionId={createLivenessApiData.sessionId}
          region="us-east-1"
          onAnalysisComplete={handleAnalysisComplete}
-         onError={(error) => {
-           console.error(error);
-         }}
+         onError={(livenessError) => {
+           console.error({ state: livenessError.state, error: livenessError.error});
+         }}
        />
      )}
    </ThemeProvider>
  );
);


CDN CSP Policy

The 2.x version of the FaceLivenessDetector has updated the default CDN for TensorFlow and Blazeface to a new URL. If your application has an existing CSP policy, update your policy to allow https://cdn.liveness.rekognition.amazonaws.com. Please look over the Liveness Config section for more information.

@aws-amplify/ui-react-notifications
Installation

Install the 2.x version of @aws-amplify/ui-react-notifications and the 6.x version of aws-amplify.

The 2.x version of @aws-amplify/ui-react-notifications has a minimum dependency of 6.x on aws-amplify. aws-amplify@6 introduced breaking API changes.

npm
yarn
npm install @aws-amplify/ui-react-notifications@2.x aws-amplify@6.x
Copy
Update and usage

@aws-amplify/ui-react-notifications@2.x introduces the following breaking changes:

Migrate from 1.x to 2.x

Starting with aws-amplify@6, the Notifications category is no longer exported from the base aws-amplify package. If you are using in-app messaging you will need to change your imports accordingly and run initializeInAppMessaging before your application code:

- import { Amplify, Notifications } from 'aws-amplify'
+ import { Amplify } from 'aws-amplify';
+ import { initializeInAppMessaging, syncMessages } from 'aws-amplify/in-app-messaging';
- import exports from './aws-exports';
+ import config from './amplifyconfiguration';

Amplify.configure(config);

- const { InAppMessaging } = Notifications;
+ initializeInAppMessaging()

const MyApp = () => {
  React.useEffect(() => {
-    InAppMessaging.syncMessages()
+    syncMessages();
  }, [])

  // ..
}

@aws-amplify/ui-react-storage
Migrate from 2.x to 3.x
Installation

Install the 3.x version of @aws-amplify/ui-react-storage and the 6.x version of aws-amplify.

The 3.x version of @aws-amplify/ui-react-storage has a minimum dependency of 6.x on aws-amplify. aws-amplify@6 introduced breaking API changes.

npm
yarn
npm install @aws-amplify/ui-react-storage@3.x aws-amplify@6.x
Copy
Update and usage

@aws-amplify/ui-react-storage@3.x introduces the following breaking changes:

1. public accessLevel becomes 'guest' in Storage components

Starting in v6 of the Amplify JS libraries, 'public' access level, meaning unauthentiated users can access it, became 'guest'. The accessLevel property on StorageManager and StorageImage components have been updated to reflect this change.

2. Removal of FileUploader

The FileUploader component was the predecessor to the StorageManager component. In this major version we are removing the FileUploader component. Please use the StorageManager component which covers all of the use-cases of FileUploader and more.

--------------------------------------------------------------------------------

Title: Internationalization (i18n) | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/internationalization
HTML Content:
Internationalization (i18n)

How to build localized apps with Amplify UI.

Feedback
What's included?

Amplify UI components follow Web Standards with all components with the aim of making internationalization straightforward. We use logical properties for margins, borders, and padding. An example would be our use of padding-inline-start and padding-inline-end CSS properties in the default theme which ensure paddings are flipped when the language direction is changed. In addition, Flex and Grid will both honor the language direction and flip the layout as well due to the underlying use of CSS Flexbox and Grid Layout APIs.

Changing the language direction

To change the directionality of the text and layout in your application to right to left (RTL), add the direction prop with value rtl to your ThemeProvider:

Left to Right

This paragraph is in English, so it should go from left to right.

Right to Left

هذه الفقرة باللغة العربية ، لذا يجب الانتقال من اليمين إلى اليسار.

Copy
import { Alert, Text, ThemeProvider } from '@aws-amplify/ui-react';
import { useState } from 'react';

export const ThemeProviderDirectionExample = () => {
  return (
    <>
      <ThemeProvider>
        <Alert
          variation="info"
          isDismissible={false}
          hasIcon={true}
          heading="Left to Right"
        >
          <Text>
            This paragraph is in English, so it should go from left to right.
          </Text>
        </Alert>
      </ThemeProvider>
      <ThemeProvider direction="rtl">
        <Alert
          variation="success"
          isDismissible={false}
          hasIcon={true}
          heading="Right to Left"
        >
          <Text>
            هذه الفقرة باللغة العربية ، لذا يجب الانتقال من اليمين إلى اليسار.
          </Text>
        </Alert>
      </ThemeProvider>
    </>
  );
};


--------------------------------------------------------------------------------

Title: Figma to code | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/figma
HTML Content:
Figma

Amplify Studio offers an integration with Figma, allowing you to generate clean React code by importing your Figma design file.

Feedback

Amplify Studio allows you to design components in Figma, visually bind those components to your data in Amplify Studio, and pull them into your application codebase. The Studio generated components are plain React components that compose the Amplify UI primitive components. Studio generated components can be easily extended or overridden so you never eject or throw them away.

Figma file

Get the Figma file

The Amplify UI Figma file for Amplify UI is not a typical design system Figma file. The main difference is it does not have all components Amplify UI offers and those components do not have all the variants you might expect to see (component states like hover for example). This is because this is not a normal Figma file. It is built to work with Amplify Studio's UI Builder functionality which lets you design components in Figma and generate usable and extensible React code you can use in your application.

Figma plugin

Get the Figma plugin

The Amplify UI theme editor plugin allows you to create and edit an Amplify UI theme and save it to your Figma file. This theme is synced with your Amplify application and you can pull it into your app along with the generated UI components.

To install the Amplify Theme Editor:

Go to the Amplify Theme Editor Figma plugin page
Click "Install" on the top-right corner
Go to your Figma file
Right-click an empty area of the canvas and select Plugins > Amplify Theme Editor or use the Figma quick actions menu by pressing command/control + / then typing "AWS Amplify"
Figma to code

Learn more about Amplify Studio's Figma to code capabilities

Data binding

Amplify Studio offers visual data binding capabilities to bind UI components to data to build dynamic components. Use the UI component editor to map fields to static values, or map fields to your backend data model. All data bindings get automatically included in generated code.

Learn more about data binding in Amplify Studio

Event handling

Amplify Studio offers the ability to bind UI component events (onClick, onChange, and more) to actions to build interactive components. Use the UI component editor to map UI components' events to actions for navigation, data manipulation, authentication, and more. All data bindings get automatically included in generated code.

Learn more about event handling in Amplify Studio

Working with collections

Collections are any list of repeating items. You can visually create a collection from any individual component by selecting the Create collection button in the top right corner of the UI component editor. All collections are generated as code with real-time subscriptions automatically set up.

Learn more about collections in Amplify Studio

Theming

Learn about theming Amplify UI in Figma

Responsive Components

You can use Amplify Studio to dynamically toggle between different component variants based on your app's breakpoint. For example, you can have the navigation bar shrink to a smaller size as the window gets smaller.

Learn about responsive components in Amplify Studio

Extend via code

When you run amplify pull, Amplify automatically generates JSX and TS versions of your Figma components. You cannot directly edit the code for these components as they will get overwritten on the next pull, but we have exposed mechanisms to extend the code.

Learn about extending Amplify Studio components

--------------------------------------------------------------------------------

Title: Accessibility | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/accessibility
HTML Content:
Accessibility

An introduction to building accessible apps with Amplify UI.

Feedback

Amplify UI components follow WCAG and WAI-ARIA best practices and guidelines for color contrast, keyboard navigation, accessible labels, and focus management. The intent of Amplify UI is to provide components that are flexible and can be composed into modern, accessible patterns with as few limitations as possible.

Report an accessibility issue

Have you found an accessibility bug or limitation? Open an issue so we can take a look!

What's included?

Amplify UI components have some accessibility needs baked in for ease of use. This includes auto-associating labels with form inputs, a default theme with accessible color contrast, and the flexibility to enhance components to create your own accessible patterns.

Accessible form fields
Form Labels

All of Amplify UI's form field components require passing a label to the input. If an ID is not supplied for the component, one is autogenerated for you so that the label can be programatically associated with the input.

Example text field
Example text field (with custom ID)
Copy
import { Grid, TextField } from '@aws-amplify/ui-react';

export const LabelInputExample = () => (
  <Grid
    gap="var(--amplify-space-large)"
    templateColumns="repeat(auto-fill, minmax(280px, 1fr))"
  >
    <TextField label="Example text field" />
    <TextField
      label="Example text field (with custom ID)"
      id="custom-input-id"
    />
  </Grid>
);


One use case for passing your own custom id to the field is if you need to target it for testing.

Web standards

Amplify UI also follows web standards as much as possible for our components, including relying on native web controls. For example, our CheckboxField is styled to match our default theme, but still uses an <input type="checkbox" /> as the base component.

Example checkbox
Copy
import { CheckboxField } from '@aws-amplify/ui-react';

export const CheckboxExample = () => (
  <CheckboxField label="Example checkbox" name="example" value="yes" />
);

Accessible input labels
Learn about making accessible labels for the TextField component
Styling Checkbox inputs
Various ways to style the CheckboxField
Themeable design tokens

Amplify UI uses design tokens for the color palette, which makes modifying the theme to meet your own color contrast goals more manageable. Amplify UI also provides tokens for properties such as border width and font size if you need to make your own customizations for higher contrast requirements.

The example below shows how to use Theming to supply higher contrast text and border styles.

Example Card
Copy
import { ThemeProvider, Card } from '@aws-amplify/ui-react';

export const ThemeExample = () => {
  const theme = {
    name: 'high-contrast',
    tokens: {
      colors: {
        font: {
          primary: { value: '{colors.black}' },
        },
      },
      components: {
        card: {
          outlined: {
            borderWidth: { value: '{borderWidths.large}' },
            borderColor: { value: '{colors.black}' },
          },
        },
      },
    },
  };

  return (
    <ThemeProvider theme={theme}>
      <Card variation="outlined">Example Card</Card>
    </ThemeProvider>
  );
};

Theming overview
Learn how to make a custom theme
Enhanceable primitives

Since Amplify UI supports passing down HTML and ARIA attributes to primitive components, it's possible to create your own accessible patterns. The following example shows how to use a View component as an HTML nav element and how to add a unique name to the nav element using an aria-label attribute.

Example nav element with aria label.
Copy
import { View } from '@aws-amplify/ui-react';

export const NavRoleExample = () => (
  <View as="nav" aria-label="Component navigation">
    Example nav element with aria label.
  </View>
);


The next example shows how we can add an aria-live attribute to our Badge component to announce when the value is updated.

Add card to list.
0 cards in list
Copy
import { Flex, Button, Badge } from '@aws-amplify/ui-react';
import { useState } from 'react';

export const AriaLiveExample = () => {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <Flex>
      <Button onClick={handleClick}>Add card to list.</Button>
      <Badge aria-live="polite" alignSelf="center">
        {`${count} cards in list`}
      </Badge>
    </Flex>
  );
};


--------------------------------------------------------------------------------

Title: Vite | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/usage/vite
HTML Content:
Vite

How to get started using Amplify UI with Vite

Feedback
Tutorial

In this brief tutorial, we're going to build a basic shopping cart component using Vite.js and Amplify UI. Then, we'll elaborate on our shopping card to play with the possibilities of using Amplify UI.

Setup and Installation

First, execute the command below in your terminal. When prompted for the name of your project, enter amplify-ui-demo. Also see Vite Guide.

JavaScript
TypeScript
npm 7+
npm create vite@latest amplify-ui-demo -- --template react && cd amplify-ui-demo
Copy

Next, install the Amplify UI React package:

npm install @aws-amplify/ui-react aws-amplify
Copy
Basic Demo

Open up the project in your IDE and delete the contents of the index.css file.

Next, replace the contents of the App.jsx or App.tsx file with the code below:

Copy
import { Button, Flex, Heading, Image, Text } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

function App() {
  return (
    <Flex
      direction={{ base: 'column', large: 'row' }}
      maxWidth="32rem"
      padding="1rem"
      width="100%"
    >
      <Image
        alt="Abstract art"
        height="21rem"
        objectFit="cover"
        src="https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987"
      />
      <Flex justifyContent="space-between" direction="column">
        <Heading level={3}>Abstract art</Heading>
        <Text>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat
          sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in
          voluptate velit esse.
        </Text>
        <Button
          variation="primary"
          onClick={() => alert('Added item to cart!')}
        >
          Add to Cart
        </Button>
      </Flex>
    </Flex>
  );
}

export default App;

Abstract art

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in voluptate velit esse.

Add to Cart

Now start the app by running npm run dev and you should see a basic shopping card component.

Advanced Demo

If you’d like to play around with a more comprehensive demo of the Amplify UI library, create a separate file under the pages folder named paintings.js, and copy/paste this code into it:

Copy
export const PAINTINGS = [
  {
    title: 'Hallway',
    artist: 'Efe Kurnaz',
    src: 'https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.',
    price: '$899.99',
    avgRating: 4.8,
    reviews: 445,
    inStock: true,
    readyForPickup: true,
    bestSeller: true,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Fire and Ice',
    artist: 'Pawel Czerwinski',
    src: 'https://images.unsplash.com/photo-1604871000636-074fa5117945?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, ubique patrioque at qui, modo hinc ne duo, ad consul animal volumus est. Ea quo etiam deleniti, amet singulis in sed. Omnesque lobortis vis ex. Wisi latine splendide vis ei, libris commodo no has.',
    price: '$699.99',
    avgRating: 4.1,
    reviews: 222,
    inStock: true,
    readyForPickup: true,
    bestSeller: false,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Orange, pink, yellow',
    artist: 'Kseniya Lapteva',
    src: 'https://images.unsplash.com/photo-1629196914375-f7e48f477b6d?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1306',
    description:
      'Lorem ipsum dolor sit amet, cu porro vivendum ius. Ad mei sint homero, cum an soluta epicurei. At pri minimum corrumpit. Minim percipitur eu mei, erant habemus deserunt qui et.',
    price: '$139.99',
    avgRating: 3.5,
    reviews: 142,
    inStock: true,
    readyForPickup: false,
    bestSeller: false,
    isNew: true,
    limitedSupply: false,
  },
  {
    title: 'Melted Purple',
    artist: 'Maria Orlova',
    src: 'https://images.unsplash.com/photo-1549490349-8643362247b5?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, facer nemore ei sea, mea facilis eloquentiam at. Et modus pertinax tincidunt est. Propriae argumentum necessitatibus eos ad.',
    price: '$499.99',
    avgRating: 4.5,
    reviews: 301,
    inStock: true,
    readyForPickup: true,
    bestSeller: true,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Experimental',
    artist: 'Bruno Thethe',
    src: 'https://images.unsplash.com/photo-1550275994-cdc89cd1948f?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, ea probo choro tollit pri, ad pro justo intellegam repudiandae, labores civibus eu quo. Cum latine instructior at, est no odio tibique epicuri.',
    price: '$159.99',
    avgRating: 3.1,
    reviews: 56,
    inStock: true,
    readyForPickup: true,
    bestSeller: false,
    isNew: true,
    limitedSupply: false,
  },
  {
    title: 'Rainbow',
    artist: 'Felix Spiske',
    src: 'https://images.unsplash.com/photo-1543857778-c4a1a3e0b2eb?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1310',
    description:
      'Lorem ipsum dolor sit amet, sea tritani indoctum cu, facilis praesent at qui. Cu cetero veritus vel, et prima erant perfecto vix. Tollit delectus scaevola duo et, inermis sensibus voluptatum cu ius.',
    price: '$799.99',
    avgRating: 4.9,
    reviews: 550,
    inStock: true,
    readyForPickup: false,
    bestSeller: true,
    isNew: false,
    limitedSupply: true,
  },
  {
    title: 'Fearless Hue',
    artist: 'Radienta',
    src: 'https://images.unsplash.com/photo-1579547621113-e4bb2a19bdd6?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=939',
    description:
      'Lorem ipsum dolor sit amet, te labore lucilius pro, te his consul singulis, cu vel unum impedit complectitur. In usu erat dicta doctus, purto aeterno vis te. Facete deterruisset nec id. At omittam antiopam pri.',
    price: '$249.99',
    avgRating: 3.3,
    reviews: 294,
    inStock: true,
    readyForPickup: true,
    bestSeller: false,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Liquid',
    artist: 'Joel Filipe',
    src: 'https://images.unsplash.com/photo-1485163819542-13adeb5e0068?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, cum cu meliore tacimates, vel no sale maiorum. His cu autem placerat. Homero urbanitas vituperata ad sit, ex mel convenire elaboraret.',
    price: '$549.99',
    avgRating: 4.5,
    reviews: 440,
    inStock: false,
    readyForPickup: false,
    bestSeller: false,
    isNew: false,
    limitedSupply: true,
  },
];


Then, replace the contents of App.jsx or App.tsx with the code below, restart the app, and experience all the beautiful components in action!

Copy
import * as React from 'react';
import {
  Alert,
  Badge,
  Button,
  Card,
  Collection,
  Divider,
  Flex,
  Heading,
  Image,
  Rating,
  SelectField,
  StepperField,
  SwitchField,
  Text,
  View,
} from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';
import { PAINTINGS } from './paintings';

function App() {
  const [currentPainting, setCurrentPainting] = React.useState(PAINTINGS[0]);
  const [image, setImage] = React.useState(PAINTINGS[0].src);
  const [frame, setFrame] = React.useState(true);
  const [quantity, setQuantity] = React.useState(1);
  const [size, setSize] = React.useState('');
  const [error, setError] = React.useState(false);

  const handleAddToCart = () => {
    if (size === '') {
      setError(true);
      return;
    }
    alert(
      `Added to cart!\n${quantity} ${size} "${currentPainting.title}" by ${
        currentPainting.artist
      } with ${frame ? 'a' : 'no'} frame`
    );
  };

  return (
    <View width="100%" maxWidth="50rem" padding={{ base: 0, large: '2rem' }}>
      <Card variation="outlined">
        <Flex
          direction={{ base: 'column', large: 'row' }}
          justifyContent="space-evenly"
        >
          <Flex direction="column" gap="5rem" alignItems="center">
            <View width="15rem" height="19rem">
              <Image
                src={image}
                alt={`${currentPainting.title} abstract painting`}
                width="100%"
                height="21rem"
                border={frame ? '3px solid black' : ''}
              />
            </View>
            <Collection
              type="grid"
              items={PAINTINGS}
              templateColumns="1fr 1fr 1fr 1fr"
              templateRows="1fr 1fr"
              width="14rem"
            >
              {(item, index) => (
                <Flex
                  width="100%"
                  onMouseOver={() => setImage(item.src)}
                  onMouseLeave={() => setImage(currentPainting.src)}
                  key={index}
                  justifyContent="center"
                >
                  <Image
                    src={item.src}
                    alt={`${item.title} abstract painting`}
                    width="2rem"
                    height="2.5rem"
                    onClick={() => setCurrentPainting(item)}
                    borderRadius="5px"
                    padding="3px"
                    marginBottom="1rem"
                    style={{
                      cursor: 'pointer',
                      ...(currentPainting.src === item.src && {
                        border: '1px solid #e77600',
                        boxShadow: 'rgba(0, 0, 0, 0.35) 0px 3px 8px',
                      }),
                    }}
                  />
                </Flex>
              )}
            </Collection>
          </Flex>
          <Flex direction="column" justifyContent="space-between">
            <Flex direction="column" gap="0.7rem">
              <Flex justifyContent="space-between" alignItems="center">
                <Heading level={3}>{currentPainting.title}</Heading>
                <Flex height="1.8rem">
                  {currentPainting.bestSeller ? (
                    <Badge variation="success">Bestseller</Badge>
                  ) : null}
                  {currentPainting.isNew ? (
                    <Badge variation="info">New</Badge>
                  ) : null}
                  {currentPainting.limitedSupply ? (
                    <Badge variation="warning">Limited supply</Badge>
                  ) : null}
                </Flex>
              </Flex>
              <Text fontWeight="bold">{currentPainting.artist}</Text>
              <Flex
                direction={{ base: 'column', large: 'row' }}
                alignItems="baseline"
              >
                <Rating
                  value={currentPainting.avgRating}
                  fillColor="#f4a41d"
                ></Rating>
                <Text fontSize="small" fontWeight="lighter">
                  {currentPainting.reviews} reviews
                </Text>
              </Flex>
              <Divider />
              <Flex alignItems="baseline">
                <Text fontSize="medium" fontWeight="bold">
                  Price:
                </Text>
                <Text fontSize="large" color="#B12704" fontWeight="bold">
                  {currentPainting.price}
                </Text>
              </Flex>
              <Text fontSize="small" paddingBottom="1rem">
                {currentPainting.description}
              </Text>
              {currentPainting.readyForPickup ? (
                <Text>
                  <Text variation="success" as="span">
                    Ready within 2 hours
                  </Text>{' '}
                  for pickup inside the store
                </Text>
              ) : null}
              <SwitchField
                label={frame ? 'Frame' : 'No frame'}
                labelPosition="end"
                isChecked={frame}
                onChange={(e) => {
                  setFrame(e.target.checked);
                }}
                isDisabled={!currentPainting.inStock}
              />
              <SelectField
                label="Size"
                labelHidden
                variation="quiet"
                placeholder="Select your size"
                value={size}
                onChange={(e) => {
                  e.target.value !== '' && setError(false);
                  setSize(e.target.value);
                }}
                hasError={error}
                errorMessage="Please select a size."
                isDisabled={!currentPainting.inStock}
              >
                <option value="Small" label='Small (12x16")' />
                <option value="Medium" label='Medium (18x24")' />
                <option value="Large" label='Large (24x36")' />
                <option value="X-Large" label='X-Large (30x40")' disabled />
              </SelectField>
              {!currentPainting.inStock ? (
                <Alert variation="error">Out of stock!</Alert>
              ) : null}
            </Flex>
            <Flex
              justifyContent="space-between"
              direction={{ base: 'column', large: 'row' }}
            >
              <Flex alignItems="center" gap="5px">
                <Text>Qty:</Text>
                <StepperField
                  label="Quantity"
                  value={quantity}
                  onStepChange={setQuantity}
                  min={0}
                  max={10}
                  step={1}
                  labelHidden
                  width="10rem"
                  isDisabled={!currentPainting.inStock}
                />
              </Flex>
              <Button
                variation="primary"
                onClick={handleAddToCart}
                disabled={!currentPainting.inStock || !quantity}
              >
                Add to Cart
              </Button>
            </Flex>
          </Flex>
        </Flex>
      </Card>
    </View>
  );
}

export default App;

Hallway
Bestseller

Efe Kurnaz

4.8 out of 5 rating

445 reviews

Price:

$899.99

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.

Ready within 2 hours for pickup inside the store

Frame
Size
Select your size

Qty:

Quantity
Add to Cart

--------------------------------------------------------------------------------

Title: Next.js | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/usage/nextjs
HTML Content:
Next.js

How to get started using Amplify UI with Next.js

Feedback
Tutorial

In this brief tutorial, we're going to build a basic shopping card component using Next.js and Amplify UI. Then, we'll elaborate on our shopping card to play with the possibilities of using Amplify UI.

App Router

Next.js 13.4+ introduces App Router with the usage of Server Components. Amplify UI components are interactive and designed to work on the client side. To use them inside of Server Components you must wrap them in a Client Component with "use client". For more info, visit Next.js third party package documentation.

If you are using Next.js Pages Router, no changes are required to use Amplify UI components.

Setup and Installation

First, execute the command below in your terminal. When prompted for the name of your project, enter amplify-ui-demo.

Pages Router (Next.js 11.0+)
App Router (Next.js 13.4+)
npx create-next-app@latest amplify-ui-demo --no-app && cd amplify-ui-demo
Copy

Then, install the Amplify UI React package:

npm
yarn
npm install @aws-amplify/ui-react aws-amplify
Copy
Basic Demo
Pages Router (Next.js 11.0+)
App Router (Next.js 13.4+)

Open up the project in your IDE and replace the contents of the pages/index.js with the code below:

Copy
import { Button, Flex, Heading, Image, Text } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

export default function Home() {
  return (
    <Flex
      direction={{ base: 'column', large: 'row' }}
      maxWidth="32rem"
      padding="1rem"
      width="100%"
    >
      <Image
        alt="Abstract art"
        height="21rem"
        src="https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987"
        width="100%"
      />
      <Flex justifyContent="space-between" direction="column">
        <Heading level={3}>Abstract art</Heading>
        <Text>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat
          sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in
          voluptate velit esse.
        </Text>
        <Button
          variation="primary"
          onClick={() => alert('Added item to cart!')}
        >
          Add to Cart
        </Button>
      </Flex>
    </Flex>
  );
}

Abstract art

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Duis aute irure dolor in reprehenderit in voluptate velit esse.

Add to Cart

When you start the app (npm run dev or yarn dev), you should see a basic shopping card component.

Advanced Demo
Pages Router (Next.js 11.0+)
App Router (Next.js 13.4+)

If you’d like to play around with a more comprehensive demo of the Amplify UI library, create a separate file under the pages folder named paintings.js, and copy/paste this code into it:

Copy
export const PAINTINGS = [
  {
    title: 'Hallway',
    artist: 'Efe Kurnaz',
    src: 'https://images.unsplash.com/photo-1500462918059-b1a0cb512f1d?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.',
    price: '$899.99',
    avgRating: 4.8,
    reviews: 445,
    inStock: true,
    readyForPickup: true,
    bestSeller: true,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Fire and Ice',
    artist: 'Pawel Czerwinski',
    src: 'https://images.unsplash.com/photo-1604871000636-074fa5117945?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, ubique patrioque at qui, modo hinc ne duo, ad consul animal volumus est. Ea quo etiam deleniti, amet singulis in sed. Omnesque lobortis vis ex. Wisi latine splendide vis ei, libris commodo no has.',
    price: '$699.99',
    avgRating: 4.1,
    reviews: 222,
    inStock: true,
    readyForPickup: true,
    bestSeller: false,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Orange, pink, yellow',
    artist: 'Kseniya Lapteva',
    src: 'https://images.unsplash.com/photo-1629196914375-f7e48f477b6d?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1306',
    description:
      'Lorem ipsum dolor sit amet, cu porro vivendum ius. Ad mei sint homero, cum an soluta epicurei. At pri minimum corrumpit. Minim percipitur eu mei, erant habemus deserunt qui et.',
    price: '$139.99',
    avgRating: 3.5,
    reviews: 142,
    inStock: true,
    readyForPickup: false,
    bestSeller: false,
    isNew: true,
    limitedSupply: false,
  },
  {
    title: 'Melted Purple',
    artist: 'Maria Orlova',
    src: 'https://images.unsplash.com/photo-1549490349-8643362247b5?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, facer nemore ei sea, mea facilis eloquentiam at. Et modus pertinax tincidunt est. Propriae argumentum necessitatibus eos ad.',
    price: '$499.99',
    avgRating: 4.5,
    reviews: 301,
    inStock: true,
    readyForPickup: true,
    bestSeller: true,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Experimental',
    artist: 'Bruno Thethe',
    src: 'https://images.unsplash.com/photo-1550275994-cdc89cd1948f?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, ea probo choro tollit pri, ad pro justo intellegam repudiandae, labores civibus eu quo. Cum latine instructior at, est no odio tibique epicuri.',
    price: '$159.99',
    avgRating: 3.1,
    reviews: 56,
    inStock: true,
    readyForPickup: true,
    bestSeller: false,
    isNew: true,
    limitedSupply: false,
  },
  {
    title: 'Rainbow',
    artist: 'Felix Spiske',
    src: 'https://images.unsplash.com/photo-1543857778-c4a1a3e0b2eb?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1310',
    description:
      'Lorem ipsum dolor sit amet, sea tritani indoctum cu, facilis praesent at qui. Cu cetero veritus vel, et prima erant perfecto vix. Tollit delectus scaevola duo et, inermis sensibus voluptatum cu ius.',
    price: '$799.99',
    avgRating: 4.9,
    reviews: 550,
    inStock: true,
    readyForPickup: false,
    bestSeller: true,
    isNew: false,
    limitedSupply: true,
  },
  {
    title: 'Fearless Hue',
    artist: 'Radienta',
    src: 'https://images.unsplash.com/photo-1579547621113-e4bb2a19bdd6?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=939',
    description:
      'Lorem ipsum dolor sit amet, te labore lucilius pro, te his consul singulis, cu vel unum impedit complectitur. In usu erat dicta doctus, purto aeterno vis te. Facete deterruisset nec id. At omittam antiopam pri.',
    price: '$249.99',
    avgRating: 3.3,
    reviews: 294,
    inStock: true,
    readyForPickup: true,
    bestSeller: false,
    isNew: false,
    limitedSupply: false,
  },
  {
    title: 'Liquid',
    artist: 'Joel Filipe',
    src: 'https://images.unsplash.com/photo-1485163819542-13adeb5e0068?crop=entropy&cs=tinysrgb&fm=jpg&ixlib=rb-1.2.1&q=80&raw_url=true&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=987',
    description:
      'Lorem ipsum dolor sit amet, cum cu meliore tacimates, vel no sale maiorum. His cu autem placerat. Homero urbanitas vituperata ad sit, ex mel convenire elaboraret.',
    price: '$549.99',
    avgRating: 4.5,
    reviews: 440,
    inStock: false,
    readyForPickup: false,
    bestSeller: false,
    isNew: false,
    limitedSupply: true,
  },
];


Then, replace the contents of pages/index.js with the code below, restart the app, and experience all the beautiful components in action!

Copy
import * as React from 'react';
import {
  Alert,
  Badge,
  Button,
  Card,
  Collection,
  Divider,
  Flex,
  Heading,
  Image,
  Rating,
  SelectField,
  StepperField,
  SwitchField,
  Text,
  View,
} from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';
import { PAINTINGS } from './paintings';

export default function Home() {
  const [currentPainting, setCurrentPainting] = React.useState(PAINTINGS[0]);
  const [image, setImage] = React.useState(PAINTINGS[0].src);
  const [frame, setFrame] = React.useState(true);
  const [quantity, setQuantity] = React.useState(1);
  const [size, setSize] = React.useState('');
  const [error, setError] = React.useState(false);

  const handleAddToCart = () => {
    if (size === '') {
      setError(true);
      return;
    }
    alert(
      `Added to cart!\n${quantity} ${size} "${currentPainting.title}" by ${
        currentPainting.artist
      } with ${frame ? 'a' : 'no'} frame`
    );
  };

  return (
    <View width="100%" maxWidth="50rem" padding={{ base: 0, large: '2rem' }}>
      <Card variation="outlined">
        <Flex
          direction={{ base: 'column', large: 'row' }}
          justifyContent="space-evenly"
        >
          <Flex direction="column" gap="5rem" alignItems="center">
            <View width="15rem" height="19rem">
              <Image
                src={image}
                alt={`${currentPainting.title} abstract painting`}
                width="100%"
                height="21rem"
                border={frame ? '3px solid black' : ''}
              />
            </View>
            <Collection
              type="grid"
              items={PAINTINGS}
              templateColumns="1fr 1fr 1fr 1fr"
              templateRows="1fr 1fr"
              width="14rem"
            >
              {(item, index) => (
                <Flex
                  width="100%"
                  onMouseOver={() => setImage(item.src)}
                  onMouseLeave={() => setImage(currentPainting.src)}
                  key={index}
                  justifyContent="center"
                >
                  <Image
                    src={item.src}
                    alt={`${item.title} abstract painting`}
                    width="2rem"
                    height="2.5rem"
                    onClick={() => setCurrentPainting(item)}
                    borderRadius="5px"
                    padding="3px"
                    marginBottom="1rem"
                    style={{
                      cursor: 'pointer',
                      ...(currentPainting.src === item.src && {
                        border: '1px solid #e77600',
                        boxShadow: 'rgba(0, 0, 0, 0.35) 0px 3px 8px',
                      }),
                    }}
                  />
                </Flex>
              )}
            </Collection>
          </Flex>
          <Flex direction="column" justifyContent="space-between">
            <Flex direction="column" gap="0.7rem">
              <Flex justifyContent="space-between" alignItems="center">
                <Heading level={3}>{currentPainting.title}</Heading>
                <Flex height="1.8rem">
                  {currentPainting.bestSeller ? (
                    <Badge variation="success">Bestseller</Badge>
                  ) : null}
                  {currentPainting.isNew ? (
                    <Badge variation="info">New</Badge>
                  ) : null}
                  {currentPainting.limitedSupply ? (
                    <Badge variation="warning">Limited supply</Badge>
                  ) : null}
                </Flex>
              </Flex>
              <Text fontWeight="bold">{currentPainting.artist}</Text>
              <Flex
                direction={{ base: 'column', large: 'row' }}
                alignItems="baseline"
              >
                <Rating
                  value={currentPainting.avgRating}
                  fillColor="#f4a41d"
                ></Rating>
                <Text fontSize="small" fontWeight="lighter">
                  {currentPainting.reviews} reviews
                </Text>
              </Flex>
              <Divider />
              <Flex alignItems="baseline">
                <Text fontSize="medium" fontWeight="bold">
                  Price:
                </Text>
                <Text fontSize="large" color="#B12704" fontWeight="bold">
                  {currentPainting.price}
                </Text>
              </Flex>
              <Text fontSize="small" paddingBottom="1rem">
                {currentPainting.description}
              </Text>
              {currentPainting.readyForPickup ? (
                <Text>
                  <Text variation="success" as="span">
                    Ready within 2 hours
                  </Text>{' '}
                  for pickup inside the store
                </Text>
              ) : null}
              <SwitchField
                label={frame ? 'Frame' : 'No frame'}
                labelPosition="end"
                isChecked={frame}
                onChange={(e) => {
                  setFrame(e.target.checked);
                }}
                isDisabled={!currentPainting.inStock}
              />
              <SelectField
                label="Size"
                labelHidden
                variation="quiet"
                placeholder="Select your size"
                value={size}
                onChange={(e) => {
                  e.target.value !== '' && setError(false);
                  setSize(e.target.value);
                }}
                hasError={error}
                errorMessage="Please select a size."
                isDisabled={!currentPainting.inStock}
              >
                <option value="Small" label='Small (12x16")' />
                <option value="Medium" label='Medium (18x24")' />
                <option value="Large" label='Large (24x36")' />
                <option value="X-Large" label='X-Large (30x40")' disabled />
              </SelectField>
              {!currentPainting.inStock ? (
                <Alert variation="error">Out of stock!</Alert>
              ) : null}
            </Flex>
            <Flex
              justifyContent="space-between"
              direction={{ base: 'column', large: 'row' }}
            >
              <Flex alignItems="center" gap="5px">
                <Text>Qty:</Text>
                <StepperField
                  label="Quantity"
                  value={quantity}
                  onStepChange={setQuantity}
                  min={0}
                  max={10}
                  step={1}
                  labelHidden
                  width="10rem"
                  isDisabled={!currentPainting.inStock}
                />
              </Flex>
              <Button
                variation="primary"
                onClick={handleAddToCart}
                disabled={!currentPainting.inStock || !quantity}
              >
                Add to Cart
              </Button>
            </Flex>
          </Flex>
        </Flex>
      </Card>
    </View>
  );
}

Hallway
Bestseller

Efe Kurnaz

4.8 out of 5 rating

445 reviews

Price:

$899.99

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat sed cras ornare arcu dui. Ac feugiat sed lectus vestibulum.

Ready within 2 hours for pickup inside the store

Frame
Size
Select your size

Qty:

Quantity
Add to Cart

--------------------------------------------------------------------------------

Title: Usage | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/usage
HTML Content:
Usage
Feedback
React and Amplify UI

Amplify UI is designed to integrate seamlessly with the React framework so you can get started in no time.

Installation

If you haven't already, install @aws-amplify/ui-react with npm or yarn:

npm
yarn
npm install @aws-amplify/ui-react aws-amplify
Copy
Quick start

Here's all you need to get up and running:

Copy
import * as React from 'react';
import { Button } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

function App() {
  return <Button variation="primary">Hello world</Button>;
}

export default App;


Copy/paste the code above into your React app, start the app, and look at that lovely Button!

Hello world
Components

You can use all of Amplify UI's primitive components (e.g., Button, Tabs, Flex) right out-of-the-box. These are the same components we use to build our connected components such as the Authenticator. Please refer to each component's documentation to see how they should be imported, configured and styled.

Add to Cart
Copy
import * as React from 'react';
import { Button } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';

function App() {
  return (
    <Button
      ariaLabel="Add item to cart"
      backgroundColor="#ffd811"
      borderRadius="1rem"
      color="black"
      fontWeight="normal"
      onClick={() => alert('Added to cart! ✅')}
      size="small"
      width="8rem"
    >
      Add to Cart
    </Button>
  );
}

export default App;

Theming

Amplify UI ships with a default theme that you can customize to match the look and feel of your project. Remember to load the default styling by importing our CSS at the entry-point to your application (e.g., src/App.js).

import '@aws-amplify/ui-react/styles.css';


To learn how to customize the appearance of all components in your application with a theme, see theming.

Custom button
Copy
import { Button, ThemeProvider } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css'; // default theme

const theme = {
  name: 'custom-button-theme',
  tokens: {
    components: {
      button: {
        // this will affect the font weight of all Buttons
        fontWeight: { value: '{fontWeights.black.value}' },
        // this will only style Buttons which are the "primary" variation
        primary: {
          backgroundColor: { value: 'rebeccapurple' },
          _hover: {
            backgroundColor: { value: 'hotpink' },
          },
        },
      },
    },
  },
};

function App() {
  return (
    <ThemeProvider theme={theme}>
      <Button variation="primary">Custom button</Button>
    </ThemeProvider>
  );
}

export default App;


--------------------------------------------------------------------------------

Title: Installation | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/installation
HTML Content:
Installation
Feedback
Dependencies
Packages

Install @aws-amplify/ui-react with npm or yarn:

npm
yarn
npm install @aws-amplify/ui-react aws-amplify
Copy

After adding the aws-amplify and @aws-amplify/ui-react dependencies you are now ready to add any of our components to your application.

Styles

Amplify UI ships with a default theme that you can customize to match the look and feel of your project.

JS
CSS

Modern bundlers like Create React App & Next.js allow you to import .css from within your .js files. This may be src/index.js, src/App.js, pages/_app.js, or whatever your entry-point is.

import '@aws-amplify/ui-react/styles.css';

CSS Layers

CSS Layers are a new feature of the CSS spec that make it easy to override styles without needing to use a higher specificity. This means you don't have to worry about making sure your CSS selectors are specific enough to override the CSS selectors in Amplify UI's styles. Support for CSS Layers is pretty good, but we are introducing this as an opt-in feature. All CSS files have a regular CSS file version and a version with CSS Layers. To use CSS Layers with the example above, you would change the imports to this:

Copy
import '@aws-amplify/ui-react/styles/reset.layer.css' // global CSS reset
import '@aws-amplify/ui-react/styles/base.layer.css' // base styling needed for Amplify UI
import '@aws-amplify/ui-react/styles/button.layer.css' // component specific styles


You can also use this for the main CSS export, '@aws-amplify/ui-react/styles.layer.css'.

Fonts

By default, Amplify UI does not bundle a font so that you can choose which font to use in your application and how you want to load the font. The default theme references the Inter font because it works well for UI design and is offered as a variable font. The easiest way to add the Inter font to your application is to use the Google Fonts CDN:

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900&display=swap"
  rel="stylesheet"
/>


or

@import url('https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900&display=swap');


You can also install it as an NPM dependency:

npm
yarn
npm install @fontsource/inter
Copy

Then import the variable font in your application:

import '@fontsource/inter/variable.css';


Check out Fontsource for more information and documentation on this library.

If you want to enable OpenType features like alternative styles, you can use the font directly from the creator's website: https://rsms.me/inter/

@import url('https://rsms.me/inter/inter.css');

html {
  /* this enables some alternative styles and contextual characters to the font */
  font-feature-settings: 'ss01', 'ss02', 'case', 'salt';
}


--------------------------------------------------------------------------------

Title: Introduction | Amplify UI for React
URL: https://ui.docs.amplify.aws/react/getting-started/introduction
HTML Content:
Introduction

What is Amplify UI?

Feedback

Amplify UI is an open-source UI library that brings the simplicity and extensibility of AWS Amplify to UI development. It consists of connected components that simplify complex workflows like authentication and dynamic data, primitive components that form the building blocks of a UI, and themes to make Amplify UI fit any brand. Extensibility and customization are at the forefront of Amplify UI allowing easy integration into any application regardless of the front-end tech stack.

We want to take care of the details, like accessibility and cloud connectivity, so developers can focus on their product.

Connected components

Amplify UI connected components abstract away complex front-end code like authentication and dynamic data to provide an intuitive API. Connected components are built on top of primitive components and Amplify Libraries.

Connected components are completely customizable at every layer. Customize the look-and-feel with theming controls, override components and function calls, bring your own UI with a headless mode, or even go un-styled, giving you full control over state, layout, styling, and transitions.

Primitive components

Primitive components are React-only for now

Amplify UI primitive components are in the middle of the spectrum between 'headless' UI frameworks like Radix and Headless UI, and 'batteries included' frameworks like MUI and Chakra. We want to provide a solid base that doesn't force a particular front-end architecture and every detail can be customized.

All the styling is handled by plain CSS and themeable with CSS variables. However we do provide some extra styling utilities in React-like responsive style props, ThemeProvider and useTheme hook, and useBreakpointValue for responsive values.

Amplify UI primitive components adhere to WCAG (Web Content Accessibility Guidelines) and WAI-ARIA (Web Accessibility Initiative - Accessible Rich Internet Applications) specifications for accessibility including color contrast for low-vision users, and accessible labels, keyboard navigation, and focus state management for keyboard-only users.

Tenets

Minimal footprint, maximum performance Good components are fast and use native styling systems when possible, adding less dependencies, smaller memory footprint, and minimizing side effects.

Escape Hatches over ejections Users should be able to control any aspect of our components using their favorite tools without throwing everything away. We meet users where they are and play nicely with platforms and frameworks.

Accessible by default Component implementations follows platform accessibility standards and best practices (e.g. WCAG 2.1AA for Web, Apple HIG for iOS).

Respect the platform We want to share as much as possible between platforms (like themes and schemas), and respect each platform identity and rules when possible (e.g. following name conventions and idioms). For example, React components should feel like React components.

Current status

Currently, the Authenticator is available for React, Angular, Vue, Flutter and Swift. The Android and React Native Authenticators are currently in developer preview. Primitive components are available for React, with Angular, Vue, and React Native coming soon.

If you are an Angular or Vue developer and want to get started, they share the same CSS as React so with the right class names (we use BEM syntax) you can at least get the styling and theming that React has!

Roadmap

Upcoming projects include:

React Native Authenticator
Improved Storage components for React, Angular, and Vue
Primitives and theming for Angular and Vue
Data components and hooks for React
More primitives

If you would like to see something on our roadmap, let us know on Github.

--------------------------------------------------------------------------------

Title: Amplify UI - Build UI fast with Amplify on React
URL: https://ui.docs.amplify.aws/react
HTML Content:
Themeable, accessible components
Ready to connect to the cloud

Amplify UI is a collection of accessible, themeable, performant React (and more!) components that can connect directly to the cloud.

Cloud connected
Focus on your UI and let us take care of the rest
Build visually
Compose in your IDE—or visually with Amplify Studio
Styling your way
Use plain CSS, design tokens, or with your favorite CSS-in-JS library
npm i @aws-amplify/ui-react aws-amplify
Copy
Get started building
Or try it out
Take it for a test drive
<Card variation="elevated">
  <Flex alignItems="flex-start">
    <Image src="/amplify-placeholder.svg"
      alt="Amplify" width="8rem"/>
    <Flex direction="column" gap="xs">
      <Flex>
        <Badge variation="success">New</Badge>
      </Flex>
      <Text fontSize="large" fontWeight="semibold">
        Product title
      </Text>
      <Text color="font.tertiary">
        Product description
      </Text>
      <Text
        fontSize="large"
        color="secondary">
        $199.99
      </Text>
      <Flex>
        <StepperField
          label="Quantity"
          min={0}
          max={10}
          step={1}
          defaultValue={1}
          labelHidden
        />
        <Button variation="primary">Add to cart</Button>
      </Flex>
    </Flex>
  </Flex>
</Card>
New

Product title

Product description

$199.99

Quantity
Add to cart
Speed up development with over
40 production-ready components

Amplify UI components are built with plain React and CSS to provide a solid foundation for building UIs and design systems. These components are themeable, responsive, composable, and accessible. They play nicely with other UI components or styling frameworks.

Switch
1
…
11
Page:
12
13
…
99
Button
Button
Button
Sports
Donuts new
Search
Language
Language
HTML
CSS
javascript
Slider
50
Sprinkles
View all components
Authentication made easy

Add authentication to your app in under 10 lines of code using the Authenticator component. The Authenticator works seamlessly with the Amplify CLI to automatically work with your backend, no extra configuration needed! Customize every detail of the authentication flow with themes, overrides, or bring your own UI with a headless mode.

https://localhost
Sign In
Create Account
Sign in
Username
Password
Password is hidden
Sign in
Forgot your password?
index.tsx
import { Amplify } from 'aws-amplify';


import { Authenticator } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';


import awsExports from './aws-exports';
Amplify.configure(awsExports);


export default function App() {
  return (
    <Authenticator>
      {({ signOut, user }) => (
        <main>
          <h1>Hello {user.username}</h1>
          <button onClick={signOut}>Sign out</button>
        </main>
      )}
    </Authenticator>
  );
}
Get started with the Authenticator
Theming controls to match your brand

Create a unique look-and-feel for your application in minutes. Amplify UI uses design tokens and plain CSS so every detail can be customized. Dynamic theming for dark mode, responsive, and user preferences is easy with theme overrides.

Default
Terminal
Synthwave
Classic
theme.ts
import { defaultDarkModeOverride } from '@aws-amplify/ui-react';


const theme = {
  name: 'default-theme',
  overrides: [defaultDarkModeOverride],
};
export default theme;


Flash sale!
Sm
Md
Lg
XL
$29.99
20% off
Add to cart
Sprinkles
Frosting
Language
Language
HTML
CSS
Javascript
Slider
50
Search

Aa

Aa

Aa

Aa

Aa

Aa

switch
Amplify
Studio new
Learn more about theming
Build UI visually in Figma

With Amplify Studio you can design components in Figma, bind them to your data, and generate production-ready React code. Go from design to production-ready code in minutes and eliminate the design-development gap.

ProductCard

AWS Amplify

3.5 out of 5 rating

$99

Add to cart

Product

Product.title

Product.rating

Product.price

<ProductCard />
Learn more about Figma integration
Better together with AWS Amplify

Build your application visually in Amplify Studio

Deploy and manage your app backend with a GraphQL API, User login, File storage and more in minutes. Start small and build to the full scale of AWS! Build components visually in Figma, bind them to your data, and use them in your codebase.
Learn more about Amplify Studio

Connect your UI to your backend with Amplify libraries.

Amplify Libraries offer an opinionated and declarative interfaces to connect to your backend. The libraries are pluggable and can be extended to use other providers.
Learn more about Amplify Libraries

Deploy your front-end in minutes with Amplify Hosting.

Fully managed web hosting with full-stack CI/CD. Amplify Hosting has support for common SPA and SSG frameworks like Next.js, Gatsby, and Eleventy.
Learn more about Amplify Hosting

Accessibility built-in

Amplify UI components follow WCAG and WAI-ARIA best practices to ensure all users can use your application.

Color contrast

All components have AA or higher contrast in both light and dark mode

Keyboard navigation

Interactive components support keyboard navigation users would expect

Focus management

Focusable components have proper focus states and interactivity

Accessible labels

Form fields and icons have accessible labels, plus there are utilities to help make sure your application is labelled.

View our accessibility guidelines
Compatible with your front-end

Escape hatches

Connected components like the Authenticator have headless, or UI-less, implementations that handle complex state management and leave the UI up to you.

Styling optional

Don‘t like our style? Throw it out and use your own! Amplify UI components use plain CSS so you have complete control over the styling.

TypeScript & IntelliSense

Let your IDE do the work for you and make UI development a breeze with strongly typed interfaces and inline documentation.

Learn more about Amplify UI‘s design philosophy
Contribute on GitHub
Discuss on Discord

Amplify open source software, documentation and community are supported by Amazon Web Services.

© 2024 Amazon Web Services, Inc. and its affiliates. All rights reserved. View the site terms and privacy policy.

Flutter and the related logo are trademarks of Google LLC. We are not endorsed by or affiliated with Google LLC.

--------------------------------------------------------------------------------

