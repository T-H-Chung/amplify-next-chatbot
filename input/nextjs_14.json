[
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/cli/next#next-telemetry-options",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/cli/next#next-lint-options",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/cli/next#next-info-options",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "API Reference: instrumentation.js | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/file-conventions/instrumentation",
    "html": "instrumentation.js\n\nThe instrumentation.js|ts file is used to integrate observability tools into your application, allowing you to track the performance and behavior, and to debug issues in production.\n\nTo use it, place the file in the root of your application or inside a src folder if using one.\n\nEnabling Instrumentation\n\nInstrumentation is currently an experimental feature, to use the instrumentation.js file, you must explicitly opt-in by defining experimental.instrumentationHook = true; in your next.config.js:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\n \nexport default nextConfig\nExports\nregister (required)\n\nThe file exports a register function that is called once when a new Next.js server instance is initiated. register can be an async function.\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { registerOTel } from '@vercel/otel'\n \nexport function register() {\n  registerOTel('next-app')\n}\nonRequestError (optional)\n\nThis API is available in Next.js canary.\n\nYou can optionally export an onRequestError function to track and send server errors to an observability tool.\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { type Instrumentation } from 'next'\n \nexport const onRequestError: Instrumentation.onRequestError = (\n  err,\n  request,\n  context\n) => {\n  fetch('https://.../write-log', {\n    method: 'POST',\n    body: JSON.stringify({\n      message: err.message,\n      request,\n      context,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\nParameters\n\nThe function accepts three parameters: error, request, and context.\n\nTypes\nexport function onRequestError(\n  error: { digest: string } & Error,\n  request: {\n    path: string // resource path, e.g. /blog?name=foo\n    method: string // request method. e.g. GET, POST, etc\n    headers: { [key: string]: string }\n  },\n  context: {\n    routerKind: 'Pages Router' | 'App Router' // the router type\n    routePath: string // the route file path, e.g. /app/blog/[dynamic]\n    routeType: 'render' | 'route' | 'action' | 'middleware' // the context in which the error occurred\n    renderSource:\n      | 'react-server-components'\n      | 'react-server-components-payload'\n      | 'server-rendering'\n    revalidateReason: 'on-demand' | 'stale' | undefined // undefined is a normal request without revalidation\n    renderType: 'dynamic' | 'dynamic-resume' // 'dynamic-resume' for PPR\n  }\n)\nerror: The caught error itself (type is always Error), and a digest property which is the unique ID of the error.\nrequest: Read-only request information associated with the error.\ncontext: The context in which the error occurred. This can be the type of router (App or Pages Router), and/or (Server Components ('render'), Route Handlers ('route'), Server Actions ('action'), or Middleware ('middleware')).\nVersion History\nVersion\tChanges\nv15.0.0\tonRequestError introduced\nv14.0.4\tTurbopack support for instrumentation\nv13.2.0\tinstrumentation introduced as an experimental feature"
  },
  {
    "title": "`next/dynamic` has deprecated loading multiple modules at once | Next.js",
    "url": "https://nextjs.org/docs/messages/next-dynamic-modules",
    "html": "`next/dynamic` has deprecated loading multiple modules at once\nWhy This Error Occurred\n\nThe ability to load multiple modules at once has been deprecated in next/dynamic to be closer to React's implementation (React.lazy and Suspense).\n\nUpdating code that relies on this behavior is relatively straightforward! We've provided an example of a before/after to help you migrate your application:\n\nPossible Ways to Fix It\n\nMigrate to using separate dynamic calls for each module.\n\nBefore\n\nexample.js\nimport dynamic from 'next/dynamic'\n \nconst HelloBundle = dynamic({\n  modules: () => {\n    const components = {\n      Hello1: () => import('../components/hello1').then((m) => m.default),\n      Hello2: () => import('../components/hello2').then((m) => m.default),\n    }\n \n    return components\n  },\n  render: (props, { Hello1, Hello2 }) => (\n    <div>\n      <h1>{props.title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  ),\n})\n \nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n \nexport default DynamicBundle\n\nAfter\n\nexample.js\nimport dynamic from 'next/dynamic'\n \nconst Hello1 = dynamic(() => import('../components/hello1'))\nconst Hello2 = dynamic(() => import('../components/hello2'))\n \nfunction HelloBundle({ title }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  )\n}\n \nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n \nexport default DynamicBundle"
  },
  {
    "title": "Upgrading: Codemods | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/codemods",
    "html": "Codemods\n\nCodemods are transformations that run on your codebase programmatically. This allows a large number of changes to be programmatically applied without having to manually go through every file.\n\nNext.js provides Codemod transformations to help upgrade your Next.js codebase when an API is updated or deprecated.\n\nUsage\n\nIn your terminal, navigate (cd) into your project's folder, then run:\n\nTerminal\nnpx @next/codemod <transform> <path>\n\nReplacing <transform> and <path> with appropriate values.\n\ntransform - name of transform\npath - files or directory to transform\n--dry Do a dry-run, no code will be edited\n--print Prints the changed output for comparison\nNext.js Codemods\n14.0\nMigrate ImageResponse imports\nnext-og-import\nTerminal\nnpx @next/codemod@latest next-og-import .\n\nThis codemod moves transforms imports from next/server to next/og for usage of Dynamic OG Image Generation.\n\nFor example:\n\nimport { ImageResponse } from 'next/server'\n\nTransforms into:\n\nimport { ImageResponse } from 'next/og'\nUse viewport export\nmetadata-to-viewport-export\nTerminal\nnpx @next/codemod@latest metadata-to-viewport-export .\n\nThis codemod migrates certain viewport metadata to viewport export.\n\nFor example:\n\nexport const metadata = {\n  title: 'My App',\n  themeColor: 'dark',\n  viewport: {\n    width: 1,\n  },\n}\n\nTransforms into:\n\nexport const metadata = {\n  title: 'My App',\n}\n \nexport const viewport = {\n  width: 1,\n  themeColor: 'dark',\n}\n13.2\nUse Built-in Font\nbuilt-in-next-font\nTerminal\nnpx @next/codemod@latest built-in-next-font .\n\nThis codemod uninstalls the @next/font package and transforms @next/font imports into the built-in next/font.\n\nFor example:\n\nimport { Inter } from '@next/font/google'\n\nTransforms into:\n\nimport { Inter } from 'next/font/google'\n13.0\nRename Next Image Imports\nnext-image-to-legacy-image\nTerminal\nnpx @next/codemod@latest next-image-to-legacy-image .\n\nSafely renames next/image imports in existing Next.js 10, 11, or 12 applications to next/legacy/image in Next.js 13. Also renames next/future/image to next/image.\n\nFor example:\n\npages/index.js\nimport Image1 from 'next/image'\nimport Image2 from 'next/future/image'\n \nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n\nTransforms into:\n\npages/index.js\n// 'next/image' becomes 'next/legacy/image'\nimport Image1 from 'next/legacy/image'\n// 'next/future/image' becomes 'next/image'\nimport Image2 from 'next/image'\n \nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\nMigrate to the New Image Component\nnext-image-experimental\nTerminal\nnpx @next/codemod@latest next-image-experimental .\n\nDangerously migrates from next/legacy/image to the new next/image by adding inline styles and removing unused props.\n\nRemoves layout prop and adds style.\nRemoves objectFit prop and adds style.\nRemoves objectPosition prop and adds style.\nRemoves lazyBoundary prop.\nRemoves lazyRoot prop.\nRemove <a> Tags From Link Components\nnew-link\nTerminal\nnpx @next/codemod@latest new-link .\n\nRemove <a> tags inside Link Components, or add a legacyBehavior prop to Links that cannot be auto-fixed.\n\nFor example:\n\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\">\n  About\n</Link>\n \n<Link href=\"/about\">\n  <a onClick={() => console.log('clicked')}>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\" onClick={() => console.log('clicked')}>\n  About\n</Link>\n\nIn cases where auto-fixing can't be applied, the legacyBehavior prop is added. This allows your app to keep functioning using the old behavior for that particular link.\n\nconst Component = () => <a>About</a>\n \n<Link href=\"/about\">\n  <Component />\n</Link>\n// becomes\n<Link href=\"/about\" legacyBehavior>\n  <Component />\n</Link>\n11\nMigrate from CRA\ncra-to-next\nTerminal\nnpx @next/codemod cra-to-next\n\nMigrates a Create React App project to Next.js; creating a Pages Router and necessary config to match behavior. Client-side only rendering is leveraged initially to prevent breaking compatibility due to window usage during SSR and can be enabled seamlessly to allow the gradual adoption of Next.js specific features.\n\nPlease share any feedback related to this transform in this discussion\n.\n\n10\nAdd React imports\nadd-missing-react-import\nTerminal\nnpx @next/codemod add-missing-react-import\n\nTransforms files that do not import React to include the import in order for the new React JSX transform\n to work.\n\nFor example:\n\nmy-component.js\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n\nTransforms into:\n\nmy-component.js\nimport React from 'react'\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n9\nTransform Anonymous Components into Named Components\nname-default-component\nTerminal\nnpx @next/codemod name-default-component\n\nVersions 9 and above.\n\nTransforms anonymous components into named components to make sure they work with Fast Refresh\n.\n\nFor example:\n\nmy-component.js\nexport default function () {\n  return <div>Hello World</div>\n}\n\nTransforms into:\n\nmy-component.js\nexport default function MyComponent() {\n  return <div>Hello World</div>\n}\n\nThe component will have a camel-cased name based on the name of the file, and it also works with arrow functions.\n\n8\nTransform AMP HOC into page config\nwithamp-to-config\nTerminal\nnpx @next/codemod withamp-to-config\n\nTransforms the withAmp HOC into Next.js 9 page configuration.\n\nFor example:\n\n// Before\nimport { withAmp } from 'next/amp'\n \nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n \nexport default withAmp(Home)\n// After\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n \nexport const config = {\n  amp: true,\n}\n6\nUse withRouter\nurl-to-withrouter\nTerminal\nnpx @next/codemod url-to-withrouter\n\nTransforms the deprecated automatically injected url property on top level pages to using withRouter and the router property it injects. Read more here: https://nextjs.org/docs/messages/url-deprecated\n\nFor example:\n\nFrom\nimport React from 'react'\nexport default class extends React.Component {\n  render() {\n    const { pathname } = this.props.url\n    return <div>Current pathname: {pathname}</div>\n  }\n}\nTo\nimport React from 'react'\nimport { withRouter } from 'next/router'\nexport default withRouter(\n  class extends React.Component {\n    render() {\n      const { pathname } = this.props.router\n      return <div>Current pathname: {pathname}</div>\n    }\n  }\n)\n\nThis is one case. All the cases that are transformed (and tested) can be found in the __testfixtures__ directory\n."
  },
  {
    "title": "No Cache Detected | Next.js",
    "url": "https://nextjs.org/docs/messages/no-cache",
    "html": "No Cache Detected\nWhy This Error Occurred\n\nA Next.js build was triggered in a continuous integration environment, but no cache was detected.\n\nThis results in slower builds and can hurt Next.js' persistent caching of client-side bundles across builds.\n\nPossible Ways to Fix It\n\nNote: If this is a new project, or being built for the first time in your CI, you can ignore this error. However, you'll want to make sure it doesn't continue to happen and fix it if it does!\n\nFollow the instructions in CI Build Caching to ensure your Next.js cache is persisted between builds."
  },
  {
    "title": "Addressing \"App Container Deprecated\" Error in Next.js | Next.js",
    "url": "https://nextjs.org/docs/messages/app-container-deprecated",
    "html": "Addressing \"App Container Deprecated\" Error in Next.js\n\nThis document guides developers on how to resolve the \"App Container Deprecated\" error in Next.js by updating their custom App component.\n\nWhy This Error Occurred\n\nThe \"App Container Deprecated\" error usually occurs when you are using the <Container> component in your custom <App> (pages/_app.js). Prior to version 9.0.4 of Next.js, the <Container> component was used to handle scrolling to hashes.\n\nFrom version 9.0.4 onwards, this functionality was moved up the component tree, rendering the <Container> component unnecessary in your custom <App>.\n\nPossible Ways to Fix It\n\nTo resolve this issue, you need to remove the <Container> component from your custom <App> (pages/_app.js).\n\nBefore\n\npages/_app.js\nimport React from 'react'\nimport App, { Container } from 'next/app'\n \nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props\n    return (\n      <Container>\n        <Component {...pageProps} />\n      </Container>\n    )\n  }\n}\n \nexport default MyApp\n\nAfter\n\npages/_app.js\nimport React from 'react'\nimport App from 'next/app'\n \nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props\n    return <Component {...pageProps} />\n  }\n}\n \nexport default MyApp\n\nAfter making this change, your custom <App> should work as expected without the <Container> component.\n\nUseful Links\nCustom App"
  },
  {
    "title": "Webpack 5 Adoption | Next.js",
    "url": "https://nextjs.org/docs/messages/webpack5",
    "html": "Webpack 5 Adoption\nWhy This Message Occurred\n\nNext.js has adopted webpack 5 as the default for compilation. We've spent a lot of effort into ensuring the transition from webpack 4 to 5 will be as smooth as possible.\n\nYour application currently has webpack 5 disabled using the webpack5: false flag which has been removed in Next.js 12:\n\nnext.config.js\nmodule.exports = {\n  // Webpack 5 is enabled by default\n  // You can still use webpack 4 while upgrading to the latest version of Next.js by adding the \"webpack5: false\" flag\n  webpack5: false,\n}\n\nUsing webpack 5 in your application has many benefits, notably:\n\nImproved Disk Caching: next build is significantly faster on subsequent builds\nImproved Fast Refresh: Fast Refresh work is prioritized\nImproved Long Term Caching of Assets: Deterministic code output that is less likely to change between builds\nImproved Tree Shaking\nSupport for assets using new URL(\"file.png\", import.meta.url)\nSupport for web workers using new Worker(new URL(\"worker.js\", import.meta.url))\nSupport for exports/imports field in package.json\n\nIn the past releases we have gradually rolled out webpack 5 to Next.js applications:\n\nIn Next.js 10.2 we automatically opted-in applications without custom webpack configuration in next.config.js\nIn Next.js 10.2 we automatically opted-in applications that do not have a next.config.js\nIn Next.js 11 webpack 5 was enabled by default for all applications. You could still opt-out and use webpack 4 to help with backwards compatibility using webpack5: false in next.config.js\nIn Next.js 12 webpack 4 support was removed.\nCustom webpack configuration\n\nIn case you do have custom webpack configuration, either through custom plugins or your own modifications you'll have to take a few steps to ensure your applications works with webpack 5.\n\nWhen using next-transpile-modules make sure you use the latest version which includes this patch\nWhen using @zeit/next-css / @zeit/next-sass make sure you use the built-in CSS/Sass support instead\nWhen using @zeit/next-preact use this example\n instead\nWhen using @zeit/next-source-maps use the built-in production Source Map support\nWhen using webpack plugins make sure they're upgraded to the latest version, in most cases the latest version will include webpack 5 support. In some cases these upgraded webpack plugins will only support webpack 5.\nUseful Links\n\nIn case you're running into issues you can connect with the community in this help discussion\n."
  },
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/cli/next#next-telemetry-options",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/cli/next#next-lint-options",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "Conflicting Public File and Page File | Next.js",
    "url": "https://nextjs.org/docs/messages/conflicting-public-file-page",
    "html": "Conflicting Public File and Page File\nWhy This Error Occurred\n\nOne of your public files has the same path as a page file which is not supported. Since only one resource can reside at the URL both public files and page files must be unique.\n\nPossible Ways to Fix It\n\nRename either the public file or page file that is causing the conflict.\n\nExample conflict between public file and page file\n\nFolder structure\npublic/\n  hello\npages/\n  hello.js\n\nNon-conflicting public file and page file\n\nFolder structure\npublic/\n  hello.txt\npages/\n  hello.js\nUseful Links\nStatic file serving docs"
  },
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/cli/next#next-info-options",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "No Title in Document Head | Next.js",
    "url": "https://nextjs.org/docs/messages/no-title-in-document-head",
    "html": "No Title in Document Head\n\nPrevent usage of <title> with Head component from next/document.\n\nWhy This Error Occurred\n\nA <title> element was defined within the Head component imported from next/document, which should only be used for any <head> code that is common for all pages. Title tags should be defined at the page-level using next/head instead.\n\nPossible Ways to Fix It\n\nWithin a page or component, import and use next/head to define a page title:\n\npages/index.js\nimport Head from 'next/head'\n \nexport function Home() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </div>\n  )\n}\nUseful Links\nnext/head\nCustom Document"
  },
  {
    "title": "No Unwanted Polyfill.io | Next.js",
    "url": "https://nextjs.org/docs/messages/no-unwanted-polyfillio",
    "html": "No Unwanted Polyfill.io\n\nPrevent duplicate polyfills from Polyfill.io.\n\nWhy This Error Occurred\n\nYou are using polyfills from Polyfill.io and including polyfills already shipped with Next.js. This unnecessarily increases page weight which can affect loading performance.\n\nPossible Ways to Fix It\n\nRemove all duplicate polyfills. If you need to add polyfills but are not sure if Next.js already includes it, take a look at the list of supported browsers and features.\n\nUseful Links\nSupported Browsers and Features"
  },
  {
    "title": "`url` is deprecated | Next.js",
    "url": "https://nextjs.org/docs/messages/url-deprecated",
    "html": "`url` is deprecated\nWhy This Error Occurred\n\nIn versions prior to 6.x the url property got magically injected into every Page component (every page inside the pages directory).\n\nThe reason this is going away is that we want to make things very predictable and explicit. Having a magical url property coming out of nowhere doesn't aid that goal.\n\n⚠️ In some cases using React Dev Tools may trigger this warning even if you do not reference url anywhere in your code. Try temporarily disabling the extension and see if the warning persists.\n\nPossible Ways to Fix It\n\n/docs/advanced-features/codemods#url-to-withrouter\n\nSince Next 5 we provide a way to explicitly inject the Next.js router object into pages and all their descending components. The router property that is injected will hold the same values as url, like pathname, asPath, and query.\n\nHere's an example of using withRouter:\n\npages/index.js\nimport { withRouter } from 'next/router'\n \nclass Page extends React.Component {\n  render() {\n    const { router } = this.props\n    console.log(router)\n    return <div>{router.pathname}</div>\n  }\n}\n \nexport default withRouter(Page)\n\nWe provide a codemod (a code to code transformation) to automatically change the url property usages to withRouter.\n\nYou can find this codemod and instructions on how to run it here: /docs/advanced-features/codemods#url-to-withrouter"
  },
  {
    "title": "No Sync Scripts | Next.js",
    "url": "https://nextjs.org/docs/messages/no-sync-scripts",
    "html": "No Sync Scripts\n\nPrevent synchronous scripts.\n\nWhy This Error Occurred\n\nA synchronous script was used which can impact your webpage performance.\n\nPossible Ways to Fix It\nScript component (recommended)\npages/index.js\nimport Script from 'next/script'\n \nfunction Home() {\n  return (\n    <div class=\"container\">\n      <Script src=\"https://third-party-script.js\"></Script>\n      <div>Home Page</div>\n    </div>\n  )\n}\n \nexport default Home\nUse async or defer\n<script src=\"https://third-party-script.js\" async />\n<script src=\"https://third-party-script.js\" defer />\nUseful Links\nEfficiently load third-party JavaScript"
  },
  {
    "title": "No `styled-jsx` in `_document` | Next.js",
    "url": "https://nextjs.org/docs/messages/no-styled-jsx-in-document",
    "html": "No `styled-jsx` in `_document`\n\nPrevent usage of styled-jsx in pages/_document.js.\n\nWhy This Error Occurred\n\nCustom CSS like styled-jsx is not allowed in a Custom Document.\n\nPossible Ways to Fix It\n\nIf you need shared CSS for all of your pages, take a look at the Custom App file or define a custom layout.\n\nFor example, consider the following stylesheet named styles.css:\n\nstyles.css\nbody {\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\n    'Arial', sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n\nCreate a pages/_app.{js,tsx} file if not already present. Then, import the styles.css file.\n\npages/_app.js\nimport '../styles.css'\n \n// This default export is required in a new `pages/_app.js` file.\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nThese styles (styles.css) will apply to all pages and components in your application.\n\nUseful Links\nCustom Document Caveats\nLayouts\nBuilt in CSS Support\nCustom App"
  },
  {
    "title": "No Script Component in Head | Next.js",
    "url": "https://nextjs.org/docs/messages/no-script-component-in-head",
    "html": "No Script Component in Head\n\nPrevent usage of next/script in next/head component.\n\nWhy This Error Occurred\n\nThe next/script component should not be used in a next/head component.\n\nPossible Ways to Fix It\n\nMove the <Script /> component outside of <Head> instead.\n\nBefore\n\npages/index.js\nimport Script from 'next/script'\nimport Head from 'next/head'\n \nexport default function Index() {\n  return (\n    <Head>\n      <title>Next.js</title>\n      <Script src=\"/my-script.js\" />\n    </Head>\n  )\n}\n\nAfter\n\npages/index.js\nimport Script from 'next/script'\nimport Head from 'next/head'\n \nexport default function Index() {\n  return (\n    <>\n      <Head>\n        <title>Next.js</title>\n      </Head>\n      <Script src=\"/my-script.js\" />\n    </>\n  )\n}\nUseful Links\nnext/head\nnext/script"
  },
  {
    "title": "No Page Custom Font | Next.js",
    "url": "https://nextjs.org/docs/messages/no-page-custom-font",
    "html": "No Page Custom Font\n\nPrevent page-only custom fonts.\n\nWhy This Error Occurred\nThe custom font you're adding was added to a page - this only adds the font to the specific page and not the entire application.\nThe custom font you're adding was added to a separate component within pages/_document.js - this disables automatic font optimization.\nPossible Ways to Fix It\n\nCreate the file ./pages/_document.js and add the font to a custom Document:\n\npages/_document.js\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n \nclass MyDocument extends Document {\n  render() {\n    return (\n      <Html>\n        <Head>\n          <link\n            href=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"\n            rel=\"stylesheet\"\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n \nexport default MyDocument\n\nOr as a function component:\n\npages/_document.js\nimport { Html, Head, Main, NextScript } from 'next/document'\n \nexport default function Document() {\n  return (\n    <Html>\n      <Head>\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Inter&display=optional\"\n          rel=\"stylesheet\"\n        />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\nWhen Not To Use It\n\nIf you have a reason to only load a font for a particular page or don't care about font optimization, then you can disable this rule.\n\nUseful Links\nCustom Document\nFont Optimization"
  },
  {
    "title": "No img element | Next.js",
    "url": "https://nextjs.org/docs/messages/no-img-element",
    "html": "No img element\n\nPrevent usage of <img> element due to slower LCP and higher bandwidth.\n\nWhy This Error Occurred\n\nAn <img> element was used to display an image instead of <Image /> from next/image.\n\nPossible Ways to Fix It\nUse next/image to improve performance with automatic Image Optimization.\n\nNote: If deploying to a managed hosting provider, remember to check provider pricing since optimized images might be charged differently than the original images.\n\nCommon image optimization platform pricing:\n\nVercel pricing\nCloudinary pricing\nimgix pricing\n\nNote: If self-hosting, remember to install sharp\n and check if your server has enough storage to cache the optimized images.\n\npages/index.js\nimport Image from 'next/image'\n \nfunction Home() {\n  return (\n    <Image\n      src=\"https://example.com/hero.jpg\"\n      alt=\"Landscape picture\"\n      width={800}\n      height={500}\n    />\n  )\n}\n \nexport default Home\nIf you would like to use next/image features such as blur-up placeholders but disable Image Optimization, you can do so using unoptimized:\npages/index.js\nimport Image from 'next/image'\n \nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\nYou can also use the <picture> element with the nested <img> element:\npages/index.js\nfunction Home() {\n  return (\n    <picture>\n      <source srcSet=\"https://example.com/hero.avif\" type=\"image/avif\" />\n      <source srcSet=\"https://example.com/hero.webp\" type=\"image/webp\" />\n      <img\n        src=\"https://example.com/hero.jpg\"\n        alt=\"Landscape picture\"\n        width={800}\n        height={500}\n      />\n    </picture>\n  )\n}\nUseful Links\nImage Component and Image Optimization\nnext/image API Reference\nLargest Contentful Paint (LCP)"
  },
  {
    "title": "No HTML link for pages | Next.js",
    "url": "https://nextjs.org/docs/messages/no-html-link-for-pages",
    "html": "No HTML link for pages\n\nPrevent usage of <a> elements to navigate to internal Next.js pages.\n\nWhy This Error Occurred\n\nAn <a> element was used to navigate to a page route without using the next/link component, causing unnecessary full-page refreshes.\n\nThe Link component is required to enable client-side route transitions between pages and provide a single-page app experience.\n\nPossible Ways to Fix It\n\nMake sure to import the Link component and wrap anchor elements that route to different page routes.\n\nBefore:\n\npages/index.js\nfunction Home() {\n  return (\n    <div>\n      <a href=\"/about\">About Us</a>\n    </div>\n  )\n}\n\nAfter:\n\npages/index.js\nimport Link from 'next/link'\n \nfunction Home() {\n  return (\n    <div>\n      <Link href=\"/about\">About Us</Link>\n    </div>\n  )\n}\n \nexport default Home\nOptions\npagesDir\n\nThis rule can normally locate your pages directory automatically.\n\nIf you're working in a monorepo, we recommend configuring the rootDir setting in eslint-plugin-next, which pagesDir will use to locate your pages directory.\n\nIn some cases, you may also need to configure this rule directly by providing a pages directory. This can be a path or an array of paths.\n\neslint.config.json\n{\n  \"rules\": {\n    \"@next/next/no-html-link-for-pages\": [\"error\", \"packages/my-app/pages/\"]\n  }\n}\nUseful Links\nnext/link API Reference"
  },
  {
    "title": "No Head Import in Document | Next.js",
    "url": "https://nextjs.org/docs/messages/no-head-import-in-document",
    "html": "No Head Import in Document\n\nPrevent usage of next/head in pages/_document.js.\n\nWhy This Error Occurred\n\nnext/head was imported in pages/_document.js. This can cause unexpected issues in your application.\n\nPossible Ways to Fix It\n\nOnly import and use next/document within pages/_document.js to override the default Document component. If you are importing next/head to use the Head component, import it from next/document instead in order to modify <head> code across all pages:\n\npages/_document.js\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n \nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    //...\n  }\n \n  render() {\n    return (\n      <Html>\n        <Head></Head>\n      </Html>\n    )\n  }\n}\n \nexport default MyDocument\nUseful Links\nCustom Document"
  },
  {
    "title": "No Head Element | Next.js",
    "url": "https://nextjs.org/docs/messages/no-head-element",
    "html": "No Head Element\n\nPrevent usage of <head> element.\n\nWhy This Error Occurred\n\nA <head> element was used to include page-level metadata, but this can cause unexpected behavior in a Next.js application. Use Next.js' built-in next/head component instead.\n\nPossible Ways to Fix It\n\nImport and use the <Head /> component:\n\npages/index.js\nimport Head from 'next/head'\n \nfunction Index() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n    </>\n  )\n}\n \nexport default Index\nUseful Links\nnext/head"
  },
  {
    "title": "No Duplicate Head | Next.js",
    "url": "https://nextjs.org/docs/messages/no-duplicate-head",
    "html": "No Duplicate Head\n\nPrevent duplicate usage of <Head> in pages/_document.js.\n\nWhy This Error Occurred\n\nMore than a single instance of the <Head /> component was used in a single custom document. This can cause unexpected behavior in your application.\n\nPossible Ways to Fix It\n\nOnly use a single <Head /> component in your custom document in pages/_document.js.\n\npages/_document.js\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n \nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    //...\n  }\n \n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n \nexport default MyDocument\nUseful Links\nCustom Document"
  },
  {
    "title": "No Document Import in Page | Next.js",
    "url": "https://nextjs.org/docs/messages/no-document-import-in-page",
    "html": "No Document Import in Page\n\nPrevent importing next/document outside of pages/_document.js.\n\nWhy This Error Occurred\n\nnext/document was imported in a page outside of pages/_document.js (or pages/_document.tsx if you are using TypeScript). This can cause unexpected issues in your application.\n\nPossible Ways to Fix It\n\nOnly import and use next/document within pages/_document.js (or pages/_document.tsx) to override the default Document component:\n\npages/_document.js\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n \nclass MyDocument extends Document {\n  //...\n}\n \nexport default MyDocument\nUseful Links\nCustom Document"
  },
  {
    "title": "No CSS Tags | Next.js",
    "url": "https://nextjs.org/docs/messages/no-css-tags",
    "html": "No CSS Tags\n\nPrevent manual stylesheet tags.\n\nWhy This Error Occurred\n\nA link element was used to link to an external stylesheet. This can negatively affect CSS resource loading on your webpage.\n\nPossible Ways to Fix It\n\nThere are multiple ways to include styles using Next.js' built-in CSS support, including the option to use @import within the root stylesheet that is imported in pages/_app.js:\n\nstyles.css\n/* Root stylesheet */\n@import 'extra.css';\n \nbody {\n  /* ... */\n}\n\nAnother option is to use CSS Modules to import the CSS file scoped specifically to the component.\n\npages/index.js\nimport styles from './extra.module.css'\n \nexport class Home {\n  render() {\n    return (\n      <div>\n        <button type=\"button\" className={styles.active}>\n          Open\n        </button>\n      </div>\n    )\n  }\n}\n\nRefer to the Built-In CSS Support documentation to learn about all the ways to include CSS to your application."
  },
  {
    "title": "No Before Interactive Script Outside Document | Next.js",
    "url": "https://nextjs.org/docs/messages/no-before-interactive-script-outside-document",
    "html": "No Before Interactive Script Outside Document\n\nPrevent usage of next/script's beforeInteractive strategy outside of app/layout.jsx or pages/_document.js.\n\nWhy This Error Occurred\n\nYou cannot use the next/script component with the beforeInteractive strategy outside app/layout.jsx or pages/_document.js. That's because beforeInteractive strategy only works inside app/layout.jsx or pages/_document.js and is designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side).\n\nPossible Ways to Fix It\nApp Router\n\nIf you want a global script, and you are using the App Router, move the script inside app/layout.jsx.\n\napp/layout.jsx\nimport Script from 'next/script'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script\n        src=\"https://example.com/script.js\"\n        strategy=\"beforeInteractive\"\n      />\n    </html>\n  )\n}\nPages Router\n\nIf you want a global script, and you are using the Pages Router, move the script inside pages/_document.js.\n\npages/_document.js\nimport { Html, Head, Main, NextScript } from 'next/document'\nimport Script from 'next/script'\n \nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        ></Script>\n      </body>\n    </Html>\n  )\n}\nApp Router Script Optimization\nPages Router Script Optimization"
  },
  {
    "title": "No async client component | Next.js",
    "url": "https://nextjs.org/docs/messages/no-async-client-component",
    "html": "No async client component\n\nClient components cannot be async functions.\n\nWhy This Error Occurred\n\nThe error occurs when you try to define a client component as an async function. React client components do not support\n async functions. For example:\n\n'use client'\n \n// This will cause an error\nasync function ClientComponent() {\n  // ...\n}\nPossible Ways to Fix It\nConvert to a Server Component: If possible, convert your client component to a server component. This allows you to use async/await directly in your component.\nRemove the async keyword: If you need to keep it as a client component, remove the async keyword and handle data fetching differently.\nUse React hooks for data fetching: Utilize hooks like useEffect for client-side data fetching, or use third-party libraries.\nLeverage the use hook with a Context Provider: Pass promises to child components using context, then resolve them with the use hook.\nRecommended: Server-side data fetching\n\nWe recommend fetching data on the server. For example:\n\napp/page.tsx\nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\nUsing use with Context Provider\n\nAnother pattern to explore is using the React use hook with a Context Provider. This allows you to pass Promises to child components and resolve them using the use hook . Here's an example:\n\nFirst, let's create a separate file for the context provider:\n\napp/context.tsx\n'use client'\n \nimport { createContext, useContext } from 'react'\n \nexport const BlogContext = createContext<Promise<any> | null>(null)\n \nexport function BlogProvider({\n  children,\n  blogPromise,\n}: {\n  children: React.ReactNode\n  blogPromise: Promise<any>\n}) {\n  return (\n    <BlogContext.Provider value={blogPromise}>{children}</BlogContext.Provider>\n  )\n}\n \nexport function useBlogContext() {\n  let context = useContext(BlogContext)\n  if (!context) {\n    throw new Error('useBlogContext must be used within a BlogProvider')\n  }\n  return context\n}\n\nNow, let's create the Promise in a Server Component and stream it to the client:\n\napp/page.tsx\nimport { BlogProvider } from './context'\n \nexport default function Page() {\n  let blogPromise = fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n \n  return (\n    <BlogProvider blogPromise={blogPromise}>\n      <BlogPosts />\n    </BlogProvider>\n  )\n}\n\nHere is the blog posts component:\n\napp/blog-posts.tsx\n'use client'\n \nimport { use } from 'react'\nimport { useBlogContext } from './context'\n \nexport function BlogPosts() {\n  let blogPromise = useBlogContext()\n  let posts = use(blogPromise)\n \n  return <div>{posts.length} blog posts</div>\n}\n\nThis pattern allows you to start data fetching early and pass the Promise down to child components, which can then use the use hook to access the data when it's ready.\n\nClient-side data fetching\n\nIn scenarios where client fetching is needed, you can call fetch in useEffect (not recommended), or lean on popular React libraries in the community (such as SWR\n or React Query\n) for client fetching.\n\napp/page.tsx\n'use client'\n \nimport { useState, useEffect } from 'react'\n \nexport function Posts() {\n  let [posts, setPosts] = useState(null)\n \n  useEffect(() => {\n    async function fetchPosts() {\n      let res = await fetch('https://api.vercel.app/blog')\n      let data = await res.json()\n      setPosts(data)\n    }\n    fetchPosts()\n  }, [])\n \n  if (!posts) return <div>Loading...</div>\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}"
  },
  {
    "title": "No assign module variable | Next.js",
    "url": "https://nextjs.org/docs/messages/no-assign-module-variable",
    "html": "No assign module variable\n\nPrevent assignment to the module variable.\n\nWhy This Error Occurred\n\nA value is being assigned to the module variable. The module variable is already used and it is highly likely that assigning to this variable will cause errors.\n\nPossible Ways to Fix It\n\nUse a different variable name:\n\nexample.js\nlet myModule = {...}"
  },
  {
    "title": "Architecture: Supported Browsers | Next.js",
    "url": "https://nextjs.org/docs/architecture/supported-browsers",
    "html": "Supported Browsers\n\nNext.js supports modern browsers with zero configuration.\n\nChrome 64+\nEdge 79+\nFirefox 67+\nOpera 51+\nSafari 12+\nBrowserslist\n\nIf you would like to target specific browsers or features, Next.js supports Browserslist\n configuration in your package.json file. Next.js uses the following Browserslist configuration by default:\n\npackage.json\n{\n  \"browserslist\": [\n    \"chrome 64\",\n    \"edge 79\",\n    \"firefox 67\",\n    \"opera 51\",\n    \"safari 12\"\n  ]\n}\nPolyfills\n\nWe inject widely used polyfills\n, including:\n\nfetch()\n — Replacing: whatwg-fetch and unfetch.\nURL\n — Replacing: the url package (Node.js API)\n.\nObject.assign()\n — Replacing: object-assign, object.assign, and core-js/object/assign.\n\nIf any of your dependencies include these polyfills, they’ll be eliminated automatically from the production build to avoid duplication.\n\nIn addition, to reduce bundle size, Next.js will only load these polyfills for browsers that require them. The majority of the web traffic globally will not download these polyfills.\n\nCustom Polyfills\n\nIf your own code or any external npm dependencies require features not supported by your target browsers (such as IE 11), you need to add polyfills yourself.\n\nIn this case, you should add a top-level import for the specific polyfill you need in your Custom <App> or the individual component.\n\nJavaScript Language Features\n\nNext.js allows you to use the latest JavaScript features out of the box. In addition to ES6 features\n, Next.js also supports:\n\nAsync/await\n (ES2017)\nObject Rest/Spread Properties\n (ES2018)\nDynamic import()\n (ES2020)\nOptional Chaining\n (ES2020)\nNullish Coalescing\n (ES2020)\nClass Fields\n and Static Properties\n (ES2022)\nand more!\nTypeScript Features\n\nNext.js has built-in TypeScript support. Learn more here.\n\nCustomizing Babel Config (Advanced)\n\nYou can customize babel configuration. Learn more here."
  },
  {
    "title": "Using Google Analytics with Next.js (through `next/script`) | Next.js",
    "url": "https://nextjs.org/docs/messages/next-script-for-ga",
    "html": "Using Google Analytics with Next.js (through `next/script`)\n\nPrefer next/script component when using the inline script for Google Analytics.\n\nWhy This Error Occurred\n\nAn inline script was used for Google Analytics which might impact your webpage's performance. Instead, we recommend using next/script through the @next/third-parties library.\n\nPossible Ways to Fix It\nUse @next/third-parties to add Google Analytics\n\n@next/third-parties is a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application. It is available with Next.js 14 (install next@latest).\n\nThe GoogleAnalytics component can be used to include Google Analytics 4\n to your page via the Google tag (gtag.js). By default, it fetches the original scripts after hydration occurs on the page.\n\nRecommendation: If Google Tag Manager is already included in your application, you can configure Google Analytics directly using it, rather than including Google Analytics as a separate component. Refer to the documentation\n to learn more about the differences between Tag Manager and gtag.js.\n\nTo load Google Analytics for all routes, include the component directly in your root layout and pass in your measurement ID:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { GoogleAnalytics } from '@next/third-parties/google'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n\nTo load Google Analytics for a single route, include the component in your page file:\n\napp/page.js\nimport { GoogleAnalytics } from '@next/third-parties/google'\n \nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\n\nGood to know:\n\nIf you are using the Pages Router, please refer to the pages/ documentation.\n@next/third-parties also supports Google Tag Manager and other third parties.\nUsing @next/third-parties is not required. You can also use the next/script component directly. Refer to the next/script documentation to learn more.\nUseful Links\n@next/third-parties Documentation\nnext/script Documentation"
  },
  {
    "title": "Inline script id | Next.js",
    "url": "https://nextjs.org/docs/messages/inline-script-id",
    "html": "Inline script id\n\nEnforce id attribute on next/script components with inline content.\n\nWhy This Error Occurred\n\nnext/script components with inline content require an id attribute to be defined to track and optimize the script.\n\nPossible Ways to Fix It\n\nAdd an id attribute to the next/script component.\n\npages/_app.js\nimport Script from 'next/script'\n \nexport default function App({ Component, pageProps }) {\n  return (\n    <>\n      <Script id=\"my-script\">{`console.log('Hello world!');`}</Script>\n      <Component {...pageProps} />\n    </>\n  )\n}\nUseful links\nDocs for Next.js Script component"
  },
  {
    "title": "Google Font Preconnect | Next.js",
    "url": "https://nextjs.org/docs/messages/google-font-preconnect",
    "html": "Google Font Preconnect\n\nNext.js automatically adds <link rel=\"preconnect\" /> after version 12.0.1.\n\nEnsure preconnect is used with Google Fonts.\n\nWhy This Error Occurred\n\nA preconnect resource hint was not used with a request to the Google Fonts domain. Adding preconnect is recommended to initiate an early connection to the origin.\n\nPossible Ways to Fix It\n\nAdd rel=\"preconnect\" to the Google Font domain <link> tag:\n\npages/_document.js\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n\nNote: a separate link with dns-prefetch can be used as a fallback for browsers that don't support preconnect although this is not required.\n\nUseful Links\nPreconnect to required origins\nPreconnect and dns-prefetch\nNext.js Font Optimization"
  },
  {
    "title": "Community: Contribution Guide | Next.js",
    "url": "https://nextjs.org/docs/community/contribution-guide",
    "html": "Docs Contribution Guide\n\nWelcome to the Next.js Docs Contribution Guide! We're excited to have you here.\n\nThis page provides instructions on how to edit the Next.js documentation. Our goal is to ensure that everyone in the community feels empowered to contribute and improve our docs.\n\nWhy Contribute?\n\nOpen-source work is never done, and neither is documentation. Contributing to docs is a good way for beginners to get involved in open-source and for experienced developers to clarify more complex topics while sharing their knowledge with the community.\n\nBy contributing to the Next.js docs, you're helping us build a more robust learning resource for all developers. Whether you've found a typo, a confusing section, or you've realized that a particular topic is missing, your contributions are welcomed and appreciated.\n\nHow to Contribute\n\nThe docs content can be found on the Next.js repo\n. To contribute, you can edit the files directly on GitHub or clone the repo and edit the files locally.\n\nGitHub Workflow\n\nIf you're new to GitHub, we recommend reading the GitHub Open Source Guide\n to learn how to fork a repository, create a branch, and submit a pull request.\n\nGood to know: The underlying docs code lives in a private codebase that is synced to the Next.js public repo. This means that you can't preview the docs locally. However, you'll see your changes on nextjs.org\n after merging a pull request.\n\nWriting MDX\n\nThe docs are written in MDX\n, a markdown format that supports JSX syntax. This allows us to embed React components in the docs. See the GitHub Markdown Guide\n for a quick overview of markdown syntax.\n\nVSCode\nPreviewing Changes Locally\n\nVSCode has a built-in markdown previewer that you can use to see your edits locally. To enable the previewer for MDX files, you'll need to add a configuration option to your user settings.\n\nOpen the command palette (⌘ + ⇧ + P on Mac or Ctrl + Shift + P on Windows) and search from Preferences: Open User Settings (JSON).\n\nThen, add the following line to your settings.json file:\n\nsettings.json\n{\n  \"files.associations\": {\n    \"*.mdx\": \"markdown\"\n  }\n}\n\nNext, open the command palette again, and search for Markdown: Preview File or Markdown: Open Preview to the Side. This will open a preview window where you can see your formatted changes.\n\nExtensions\n\nWe also recommend the following extensions for VSCode users:\n\nMDX\n: Intellisense and syntax highlighting for MDX.\nPrettier\n: Format MDX files on save.\nReview Process\n\nOnce you've submitted your contribution, the Next.js or Developer Experience teams will review your changes, provide feedback, and merge the pull request when it's ready.\n\nPlease let us know if you have any questions or need further assistance in your PR's comments. Thank you for contributing to the Next.js docs and being a part of our community!\n\nTip: Run pnpm prettier-fix to run Prettier before submitting your PR.\n\nFile Structure\n\nThe docs use file-system routing. Each folder and files inside /docs\n represent a route segment. These segments are used to generate the URL paths, navigation, and breadcrumbs.\n\nThe file structure reflects the navigation that you see on the site, and by default, navigation items are sorted alphabetically. However, we can change the order of the items by prepending a two-digit number (00-) to the folder or file name.\n\nFor example, in the functions API Reference, the pages are sorted alphabetically because it makes it easier for developers to find a specific function:\n\n03-functions\n├── cookies.mdx\n├── draft-mode.mdx\n├── fetch.mdx\n└── ...\n\nBut, in the routing section, the files are prefixed with a two-digit number, sorted in the order developers should learn these concepts:\n\n02-routing\n├── 01-defining-routes.mdx\n├── 02-pages-and-layouts.mdx\n├── 03-linking-and-navigating.mdx\n└── ...\n\nTo quickly find a page, you can use ⌘ + P (Mac) or Ctrl + P (Windows) to open the search bar on VSCode. Then, type the slug of the page you're looking for. E.g. defining-routes\n\nWhy not use a manifest?\n\nWe considered using a manifest file (another popular way to generate the docs navigation), but we found that a manifest would quickly get out of sync with the files. File-system routing forces us to think about the structure of the docs and feels more native to Next.js.\n\nMetadata\n\nEach page has a metadata block at the top of the file separated by three dashes.\n\nRequired Fields\n\nThe following fields are required:\n\nField\tDescription\ntitle\tThe page's <h1> title, used for SEO and OG Images.\ndescription\tThe page's description, used in the <meta name=\"description\"> tag for SEO.\nrequired-fields.mdx\n---\ntitle: Page Title\ndescription: Page Description\n---\n\nIt's good practice to limit the page title to 2-3 words (e.g. Optimizing Images) and the description to 1-2 sentences (e.g. Learn how to optimize images in Next.js).\n\nOptional Fields\n\nThe following fields are optional:\n\nField\tDescription\nnav_title\tOverrides the page's title in the navigation. This is useful when the page's title is too long to fit. If not provided, the title field is used.\nsource\tPulls content into a shared page. See Shared Pages.\nrelated\tA list of related pages at the bottom of the document. These will automatically be turned into cards. See Related Links.\noptional-fields.mdx\n---\nnav_title: Nav Item Title\nsource: app/building-your-application/optimizing/images\nrelated:\n  description: See the image component API reference.\n  links:\n    - app/api-reference/components/image\n---\nApp and Pages Docs\n\nSince most of the features in the App Router and Pages Router are completely different, their docs for each are kept in separate sections (02-app and 03-pages). However, there are a few features that are shared between them.\n\nShared Pages\n\nTo avoid content duplication and risk the content becoming out of sync, we use the source field to pull content from one page into another. For example, the <Link> component behaves mostly the same in App and Pages. Instead of duplicating the content, we can pull the content from app/.../link.mdx into pages/.../link.mdx:\n\napp/.../link.mdx\n---\ntitle: <Link>\ndescription: API reference for the <Link> component.\n---\n \nThis API reference will help you understand how to use the props\nand configuration options available for the Link Component.\npages/.../link.mdx\n---\ntitle: <Link>\ndescription: API reference for the <Link> component.\nsource: app/api-reference/components/link\n---\n \n{/* DO NOT EDIT THIS PAGE. */}\n{/* The content of this page is pulled from the source above. */}\n\nWe can therefore edit the content in one place and have it reflected in both sections.\n\nShared Content\n\nIn shared pages, sometimes there might be content that is App Router or Pages Router specific. For example, the <Link> component has a shallow prop that is only available in Pages but not in App.\n\nTo make sure the content only shows in the correct router, we can wrap content blocks in an <AppOnly> or <PagesOnly> components:\n\napp/.../link.mdx\nThis content is shared between App and Pages.\n \n<PagesOnly>\n \nThis content will only be shown on the Pages docs.\n \n</PagesOnly>\n \nThis content is shared between App and Pages.\n\nYou'll likely use these components for examples and code blocks.\n\nCode Blocks\n\nCode blocks should contain a minimum working example that can be copied and pasted. This means that the code should be able to run without any additional configuration.\n\nFor example, if you're showing how to use the <Link> component, you should include the import statement and the <Link> component itself.\n\napp/page.tsx\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n\nAlways run examples locally before committing them. This will ensure that the code is up-to-date and working.\n\nLanguage and Filename\n\nCode blocks should have a header that includes the language and the filename. Add a filename prop to render a special Terminal icon that helps orientate users where to input the command. For example:\n\ncode-example.mdx\n```bash filename=\"Terminal\"\nnpx create-next-app\n```\n\nMost examples in the docs are written in tsx and jsx, and a few in bash. However, you can use any supported language, here's the full list\n.\n\nWhen writing JavaScript code blocks, we use the following language and extension combinations.\n\n\tLanguage\tExtension\nJavaScript files with JSX code\t```jsx\t.js\nJavaScript files without JSX\t```js\t.js\nTypeScript files with JSX\t```tsx\t.tsx\nTypeScript files without JSX\t```ts\t.ts\nTS and JS Switcher\n\nAdd a language switcher to toggle between TypeScript and JavaScript. Code blocks should be TypeScript first with a JavaScript version to accommodate users.\n\nCurrently, we write TS and JS examples one after the other, and link them with switcher prop:\n\ncode-example.mdx\n```tsx filename=\"app/page.tsx\" switcher\n \n```\n \n```jsx filename=\"app/page.js\" switcher\n \n```\n\nGood to know: We plan to automatically compile TypeScript snippets to JavaScript in the future. In the meantime, you can use transform.tools\n.\n\nLine Highlighting\n\nCode lines can be highlighted. This is useful when you want to draw attention to a specific part of the code. You can highlight lines by passing a number to the highlight prop.\n\nSingle Line: highlight={1}\n\napp/page.tsx\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n\nMultiple Lines: highlight={1,3}\n\napp/page.tsx\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\n\nRange of Lines: highlight={1-5}\n\napp/page.tsx\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/about\">About</Link>\n}\nIcons\n\nThe following icons are available for use in the docs:\n\nmdx-icon.mdx\n<Check size={18} />\n<Cross size={18} />\n\nOutput:\n\n \n\nWe do not use emojis in the docs.\n\nNotes\n\nFor information that is important but not critical, use notes. Notes are a good way to add information without distracting the user from the main content.\n\nnotes.mdx\n> **Good to know**: This is a single line note.\n \n> **Good to know**:\n>\n> - We also use this format for multi-line notes.\n> - There are sometimes multiple items worth knowing or keeping in mind.\n\nOutput:\n\nGood to know: This is a single line note.\n\nGood to know:\n\nWe also use this format for multi-line notes.\nThere are sometimes multiple item worths knowing or keeping in mind.\nRelated Links\n\nRelated Links guide the user's learning journey by adding links to logical next steps.\n\nLinks will be displayed in cards under the main content of the page.\nLinks will be automatically generated for pages that have child pages. For example, the Optimizing section has links to all of its child pages.\n\nCreate related links using the related field in the page's metadata.\n\nexample.mdx\n---\nrelated:\n  description: Learn how to quickly get started with your first application.\n  links:\n    - app/building-your-application/routing/defining-routes\n    - app/building-your-application/data-fetching\n    - app/api-reference/file-conventions/page\n---\nNested Fields\nField\tRequired?\tDescription\ntitle\tOptional\tThe title of the card list. Defaults to Next Steps.\ndescription\tOptional\tThe description of the card list.\nlinks\tRequired\tA list of links to other doc pages. Each list item should be a relative URL path (without a leading slash) e.g. app/api-reference/file-conventions/page\nDiagrams\n\nDiagrams are a great way to explain complex concepts. We use Figma\n to create diagrams, following Vercel's design guide.\n\nThe diagrams currently live in the /public folder in our private Next.js site. If you'd like to update or add a diagram, please open a GitHub issue\n with your ideas.\n\nCustom Components and HTML\n\nThese are the React Components available for the docs: <Image /> (next/image), <PagesOnly />, <AppOnly />, <Cross />, and <Check />. We do not allow raw HTML in the docs besides the <details> tag.\n\nIf you have ideas for new components, please open a GitHub issue\n.\n\nStyle Guide\n\nThis section contains guidelines for writing docs for those who are new to technical writing.\n\nPage Templates\n\nWhile we don't have a strict template for pages, there are page sections you'll see repeated across the docs:\n\nOverview: The first paragraph of a page should tell the user what the feature is and what it's used for. Followed by a minimum working example or its API reference.\nConvention: If the feature has a convention, it should be explained here.\nExamples: Show how the feature can be used with different use cases.\nAPI Tables: API Pages should have an overview table at the of the page with jump-to-section links (when possible).\nNext Steps (Related Links): Add links to related pages to guide the user's learning journey.\n\nFeel free to add these sections as needed.\n\nPage Types\n\nDocs pages are also split into two categories: Conceptual and Reference.\n\nConceptual pages are used to explain a concept or feature. They are usually longer and contain more information than reference pages. In the Next.js docs, conceptual pages are found in the Building Your Application section.\nReference pages are used to explain a specific API. They are usually shorter and more focused. In the Next.js docs, reference pages are found in the API Reference section.\n\nGood to know: Depending on the page you're contributing to, you may need to follow a different voice and style. For example, conceptual pages are more instructional and use the word you to address the user. Reference pages are more technical, they use more imperative words like \"create, update, accept\" and tend to omit the word you.\n\nVoice\n\nHere are some guidelines to maintain a consistent style and voice across the docs:\n\nWrite clear, concise sentences. Avoid tangents.\nIf you find yourself using a lot of commas, consider breaking the sentence into multiple sentences or use a list.\nSwap out complex words for simpler ones. For example, use instead of utilize.\nBe mindful with the word this. It can be ambiguous and confusing, don't be afraid to repeat the subject of the sentence if unclear.\nFor example, Next.js uses React instead of Next.js uses this.\nUse an active voice instead of passive. An active sentence is easier to read.\nFor example, Next.js uses React instead of React is used by Next.js. If you find yourself using words like was and by you may be using a passive voice.\nAvoid using words like easy, quick, simple, just, etc. This is subjective and can be discouraging to users.\nAvoid negative words like don't, can't, won't, etc. This can be discouraging to readers.\nFor example, \"You can use the Link component to create links between pages\" instead of \"Don't use the <a> tag to create links between pages\".\nWrite in second person (you/your). This is more personal and engaging.\nUse gender-neutral language. Use developers, users, or readers, when referring to the audience.\nIf adding code examples, ensure they are properly formatted and working.\n\nWhile these guidelines are not exhaustive, they should help you get started. If you'd like to dive deeper into technical writing, check out the Google Technical Writing Course\n.\n\nThank you for contributing to the docs and being part of the Next.js community!"
  },
  {
    "title": "Middleware Upgrade Guide | Next.js",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide",
    "html": "Middleware Upgrade Guide\n\nAs we work on improving Middleware for General Availability (GA), we've made some changes to the Middleware APIs (and how you define Middleware in your application) based on your feedback.\n\nThis upgrade guide will help you understand the changes, why they were made, and how to migrate your existing Middleware to the new API. The guide is for Next.js developers who:\n\nCurrently use the beta Next.js Middleware features\nChoose to upgrade to the next stable version of Next.js (v12.2)\n\nYou can start upgrading your Middleware usage today with the latest release (npm i next@latest).\n\nNote: These changes described in this guide are included in Next.js 12.2. You can keep your current site structure, including nested Middleware, until you move to 12.2 (or a canary build of Next.js).\n\nIf you have ESLint configured, you will need to run npm i eslint-config-next@latest --save-dev to upgrade your ESLint configuration to ensure the same version is being used as the Next.js version. You might also need to restart VSCode for the changes to take effect.\n\nUsing Next.js Middleware on Vercel\n\nIf you're using Next.js on Vercel, your existing deploys using Middleware will continue to work, and you can continue to deploy your site using Middleware. When you upgrade your site to the next stable version of Next.js (v12.2), you will need to follow this upgrade guide to update your Middleware.\n\nBreaking changes\nNo Nested Middleware\nNo Response Body\nCookies API Revamped\nNew User-Agent Helper\nNo More Page Match Data\nExecuting Middleware on Internal Next.js Requests\nNo Nested Middleware\nSummary of changes\nDefine a single Middleware file next to your pages folder\nNo need to prefix the file with an underscore\nA custom matcher can be used to define matching routes using an exported config object\nExplanation\n\nPreviously, you could create a _middleware.ts file under the pages directory at any level. Middleware execution was based on the file path where it was created.\n\nBased on customer feedback, we have replaced this API with a single root Middleware, which provides the following improvements:\n\nFaster execution with lower latency: With nested Middleware, a single request could invoke multiple Middleware functions. A single Middleware means a single function execution, which is more efficient.\nLess expensive: Middleware usage is billed per invocation. Using nested Middleware, a single request could invoke multiple Middleware functions, meaning multiple Middleware charges per request. A single Middleware means a single invocation per request and is more cost effective.\nMiddleware can conveniently filter on things besides routes: With nested Middleware, the Middleware files were located in the pages directory and Middleware was executed based on request paths. By moving to a single root Middleware, you can still execute code based on request paths, but you can now more conveniently execute Middleware based on other conditions, like cookies or the presence of a request header.\nDeterministic execution ordering: With nested Middleware, a single request could match multiple Middleware functions. For example, a request to /dashboard/users/* would invoke Middleware defined in both /dashboard/users/_middleware.ts and /dashboard/_middleware.js. However, the execution order is difficult to reason about. Moving to a single, root Middleware more explicitly defines execution order.\nSupports Next.js Layouts (RFC): Moving to a single, root Middleware helps support the new Layouts (RFC) in Next.js.\nHow to upgrade\n\nYou should declare one single Middleware file in your application, which should be located next to the pages directory and named without an _ prefix. Your Middleware file can still have either a .ts or .js extension.\n\nMiddleware will be invoked for every route in the app, and a custom matcher can be used to define matching filters. The following is an example for a Middleware that triggers for /about/* and /dashboard/:path*, the custom matcher is defined in an exported config object:\n\nmiddleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  return NextResponse.rewrite(new URL('/about-2', request.url))\n}\n \n// Supports both a single string value or an array of matchers\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n\nThe matcher config also allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:\n\nmiddleware.ts\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|favicon.ico).*)',\n  ],\n}\n\nWhile the config option is preferred since it doesn't get invoked on every request, you can also use conditional statements to only run the Middleware when it matches specific paths. One advantage of using conditionals is defining explicit ordering for when Middleware executes. The following example shows how you can merge two previously nested Middleware:\n\nmiddleware.ts\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    // This logic is only applied to /about\n  }\n \n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    // This logic is only applied to /dashboard\n  }\n}\nNo Response Body\nSummary of changes\nMiddleware can no longer produce a response body\nIf your Middleware does respond with a body, a runtime error will be thrown\nMigrate to using rewrite/redirect to pages/APIs handling a response\nExplanation\n\nTo respect the differences in client-side and server-side navigation, and to help ensure that developers do not build insecure Middleware, we are removing the ability to send response bodies in Middleware. This ensures that Middleware is only used to rewrite, redirect, or modify the incoming request (e.g. setting cookies).\n\nThe following patterns will no longer work:\n\nnew Response('a text value')\nnew Response(streamOrBuffer)\nnew Response(JSON.stringify(obj), { headers: 'application/json' })\nNextResponse.json()\nHow to upgrade\n\nFor cases where Middleware is used to respond (such as authorization), you should migrate to use rewrite/redirect to pages that show an authorization error, login forms, or to an API Route.\n\nBefore\npages/_middleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n \nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n \n  return NextResponse.json({ message: 'Auth required' }, { status: 401 })\n}\nAfter\nmiddleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n \nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n \n  const loginUrl = new URL('/login', request.url)\n  loginUrl.searchParams.set('from', request.nextUrl.pathname)\n \n  return NextResponse.redirect(loginUrl)\n}\nEdge API Routes\n\nIf you were previously using Middleware to forward headers to an external API, you can now use Edge API Routes:\n\npages/api/proxy.ts\nimport { type NextRequest } from 'next/server'\n \nexport const config = {\n  runtime: 'edge',\n}\n \nexport default async function handler(req: NextRequest) {\n  const authorization = req.cookies.get('authorization')\n  return fetch('https://backend-api.com/api/protected', {\n    method: req.method,\n    headers: {\n      authorization,\n    },\n    redirect: 'manual',\n  })\n}\nCookies API Revamped\nSummary of changes\nAdded\tRemoved\ncookies.set\tcookie\ncookies.delete\tclearCookie\ncookies.getWithOptions\tcookies\nExplanation\n\nBased on beta feedback, we are changing the Cookies API in NextRequest and NextResponse to align more to a get/set model. The Cookies API extends Map, including methods like entries\n and values\n.\n\nHow to upgrade\n\nNextResponse now has a cookies instance with:\n\ncookies.delete\ncookies.set\ncookies.getWithOptions\n\nAs well as other extended methods from Map.\n\nBefore\n// pages/_middleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  // create an instance of the class to access the public methods. This uses `next()`,\n  // you could use `redirect()` or `rewrite()` as well\n  let response = NextResponse.next()\n  // get the cookies from the request\n  let cookieFromRequest = request.cookies['my-cookie']\n  // set the `cookie`\n  response.cookie('hello', 'world')\n  // set the `cookie` with options\n  const cookieWithOptions = response.cookie('hello', 'world', {\n    path: '/',\n    maxAge: 1000 * 60 * 60 * 24 * 7,\n    httpOnly: true,\n    sameSite: 'strict',\n    domain: 'example.com',\n  })\n  // clear the `cookie`\n  response.clearCookie('hello')\n \n  return response\n}\nAfter\nmiddleware.ts\nexport function middleware() {\n  const response = new NextResponse()\n \n  // set a cookie\n  response.cookies.set('vercel', 'fast')\n \n  // set another cookie with options\n  response.cookies.set('nextjs', 'awesome', { path: '/test' })\n \n  // get all the details of a cookie\n  const { value, ...options } = response.cookies.getWithOptions('vercel')\n  console.log(value) // => 'fast'\n  console.log(options) // => { name: 'vercel', Path: '/test' }\n \n  // deleting a cookie will mark it as expired\n  response.cookies.delete('vercel')\n \n  return response\n}\nNew User-Agent Helper\nSummary of changes\nAccessing the user agent is no longer available on the request object\nWe've added a new userAgent helper to reduce Middleware size by 17kb\nExplanation\n\nTo help reduce the size of your Middleware, we have extracted the user agent from the request object and created a new helper userAgent.\n\nThe helper is imported from next/server and allows you to opt in to using the user agent. The helper gives you access to the same properties that were available from the request object.\n\nHow to upgrade\nImport the userAgent helper from next/server\nDestructure the properties you need to work with\nBefore\npages/_middleware.ts\nimport { NextRequest, NextResponse } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\nAfter\nmiddleware.ts\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\nNo More Page Match Data\nSummary of changes\nUse URLPattern\n to check if a Middleware is being invoked for a certain page match\nExplanation\n\nCurrently, Middleware estimates whether you are serving an asset of a Page based on the Next.js routes manifest (internal configuration). This value is surfaced through request.page.\n\nTo make page and asset matching more accurate, we are now using the web standard URLPattern API.\n\nHow to upgrade\n\nUse URLPattern\n to check if a Middleware is being invoked for a certain page match.\n\nBefore\npages/_middleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextRequest, NextFetchEvent } from 'next/server'\n \nexport function middleware(request: NextRequest, event: NextFetchEvent) {\n  const { params } = event.request.page\n  const { locale, slug } = params\n \n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\nAfter\nmiddleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nconst PATTERNS = [\n  [\n    new URLPattern({ pathname: '/:locale/:slug' }),\n    ({ pathname }) => pathname.groups,\n  ],\n]\n \nconst params = (url) => {\n  const input = url.split('?')[0]\n  let result = {}\n \n  for (const [pattern, handler] of PATTERNS) {\n    const patternResult = pattern.exec(input)\n    if (patternResult !== null && 'pathname' in patternResult) {\n      result = handler(patternResult)\n      break\n    }\n  }\n  return result\n}\n \nexport function middleware(request: NextRequest) {\n  const { locale, slug } = params(request.url)\n \n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\nExecuting Middleware on Internal Next.js Requests\nSummary of changes\nMiddleware will be executed for all requests, including _next\nExplanation\n\nPrior to Next.js v12.2, Middleware was not executed for _next requests.\n\nFor cases where Middleware is used for authorization, you should migrate to use rewrite/redirect to Pages that show an authorization error, login forms, or to an API Route.\n\nSee No Response Body for an example of how to migrate to use rewrite/redirect."
  },
  {
    "title": "Google Font Display | Next.js",
    "url": "https://nextjs.org/docs/messages/google-font-display",
    "html": "Google Font Display\n\nEnforce font-display behavior with Google Fonts.\n\nWhy This Error Occurred\n\nFor a Google Font, the font-display descriptor was either missing or set to auto, block, or fallback, which are not recommended.\n\nPossible Ways to Fix It\n\nFor most cases, the best font display strategy for custom fonts is optional.\n\npages/index.js\nimport Head from 'next/head'\n \nexport default function IndexPage() {\n  return (\n    <div>\n      <Head>\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Krona+One&display=optional\"\n          rel=\"stylesheet\"\n        />\n      </Head>\n    </div>\n  )\n}\n\nSpecifying display=optional minimizes the risk of invisible text or layout shift. If swapping to the custom font after it has loaded is important to you, then use display=swap instead.\n\nWhen Not To Use It\n\nIf you want to specifically display a font using an auto, block, or fallback strategy, then you can disable this rule.\n\nUseful Links\nControlling Font Performance with font-display\nGoogle Fonts API Docs\nCSS font-display property"
  },
  {
    "title": "Pages Router | Next.js",
    "url": "https://nextjs.org/docs/pages",
    "html": "Pages Router\n\nBefore Next.js 13, the Pages Router was the main way to create routes in Next.js. It used an intuitive file-system router to map each file to a route. The Pages Router is still supported in newer versions of Next.js, but we recommend migrating to the new App Router to leverage React's latest features.\n\nUse this section of the documentation for existing applications that use the Pages Router."
  },
  {
    "title": "Architecture: Turbopack | Next.js",
    "url": "https://nextjs.org/docs/architecture/turbopack",
    "html": "Turbopack\n\nTurbopack\n (beta) is an incremental bundler optimized for JavaScript and TypeScript, written in Rust, and built into Next.js.\n\nUsage\n\nTurbopack can be used in Next.js in both the pages and app directories for faster local development. To enable Turbopack, use the --turbo flag when running the Next.js development server.\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev --turbo\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\nSupported features\n\nTurbopack in Next.js requires zero-configuration for most users and can be extended for more advanced use cases. To learn more about the currently supported features for Turbopack, view the API Reference.\n\nUnsupported features\n\nTurbopack currently only supports next dev and does not support next build. We are currently working on support for builds as we move closer towards stability.\n\nThese features are currently not supported:\n\nTurbopack leverages Lightning CSS\n which doesn't support some low usage CSS Modules features\n:local and :global as standalone pseudo classes. Only the function variant is supported, for example: :global(a).\nThe @value rule which has been superseded by CSS variables.\n:import and :export ICSS rules.\nInvalid CSS comment syntax\n such as //\nCSS comments should be written as /* comment */ per the specification.\nPreprocessors such as Sass do support this alternative syntax for comments.\nwebpack() configuration in next.config.js\nTurbopack replaces Webpack, this means that webpack configuration is not supported.\nTo configure Turbopack, see the documentation.\nA subset of Webpack loaders are supported in Turbopack.\nBabel (.babelrc)\nTurbopack leverages the SWC compiler for all transpilation and optimizations. This means that Babel is not included by default.\nIf you have a .babelrc file, you might no longer need it because Next.js includes common Babel plugins as SWC transforms that can be enabled. You can read more about this in the compiler documentation.\nIf you still need to use Babel after verifying your particular use case is not covered, you can leverage Turbopack's support for custom webpack loaders to include babel-loader.\nCreating a root layout automatically in App Router.\nThis behavior is currently not supported since it changes input files, instead, an error will be shown for you manually add a root layout in the desired location.\n@next/font (legacy font support).\n@next/font is deprecated in favor of next/font. next/font is fully supported with Turbopack.\nnew Worker('file', import.meta.url).\nWe are planning to implement this in the future.\nRelay transforms\nWe are planning to implement this in the future.\nBlocking .css imports in pages/_document.tsx\nCurrently with webpack Next.js blocks importing .css files in pages/_document.tsx\nWe are planning to implement this warning in the future.\n`experimental.typedRoutes\nWe are planning to implement this in the future.\nexperimental.nextScriptWorkers\nWe are planning to implement this in the future.\nexperimental.sri.algorithm\nWe are planning to implement this in the future.\nexperimental.fallbackNodePolyfills\nWe are planning to implement this in the future.\nexperimental.esmExternals\nWe are currently not planning to support the legacy esmExternals configuration in Next.js with Turbopack.\nAMP.\nWe are currently not planning to support AMP in Next.js with Turbopack.\nYarn PnP\nWe are currently not planning to support Yarn PnP in Next.js with Turbopack.\nexperimental.urlImports\nWe are currently not planning to support experimental.urlImports in Next.js with Turbopack.\n:import and :export ICSS rules\nWe are currently not planning to support :import and :export ICSS rules in Next.js with Turbopack as Lightning CSS\n the CSS parser Turbopack uses does not support these rules.\nGenerating Trace Files\n\nTrace files allow the Next.js team to investigate and improve performance metrics and memory usage. To generate a trace file, append NEXT_TURBOPACK_TRACING=1 to the next dev --turbo command, this will generate a .next/trace.log file.\n\nWhen reporting issues related to Turbopack performance and memory usage, please include the trace file in your GitHub\n issue."
  },
  {
    "title": "Community | Next.js",
    "url": "https://nextjs.org/docs/community",
    "html": "Next.js Community\n\nWith over 5 million weekly downloads, Next.js has a large and active community of developers across the world. Here's how you can get involved in our community:\n\nContributing\n\nThere are a couple of ways you can contribute to the development of Next.js:\n\nDocumentation: Suggest improvements or even write new sections to help our users understand how to use Next.js.\nExamples\n: Help developers integrate Next.js with other tools and services by creating a new example or improving an existing one.\nCodebase\n: Learn more about the underlying architecture, contribute to bug fixes, errors, and suggest new features.\nDiscussions\n\nIf you have a question about Next.js, or want to help others, you're always welcome to join the conversation:\n\nGitHub Discussions\nDiscord\nReddit\nSocial Media\n\nFollow Next.js on Twitter\n for the latest updates, and subscribe to the Vercel YouTube channel\n for Next.js videos.\n\nCode of Conduct\n\nWe believe in creating an inclusive, welcoming community. As such, we ask all members to adhere to our Code of Conduct\n. This document outlines our expectations for participant behavior. We invite you to read it and help us maintain a safe and respectful environment."
  },
  {
    "title": "App Router | Next.js",
    "url": "https://nextjs.org/docs/app",
    "html": "App Router\n\nThe Next.js App Router introduces a new model for building applications using React's latest features such as Server Components, Streaming with Suspense, and Server Actions.\n\nGet started with the App Router by creating your first page.\n\nFrequently Asked Questions\nHow can I access the request object in a layout?\n\nYou intentionally cannot access the raw request object. However, you can access headers and cookies through server-only functions. You can also set cookies.\n\nLayouts do not rerender. They can be cached and reused to avoid unnecessary computation when navigating between pages. By restricting layouts from accessing the raw request, Next.js can prevent the execution of potentially slow or expensive user code within the layout, which could negatively impact performance.\n\nThis design also enforces consistent and predictable behavior for layouts across different pages, which simplifies development and debugging.\n\nDepending on the UI pattern you're building, Parallel Routes allow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params.\n\nHow can I access the URL on a page?\n\nBy default, pages are Server Components. You can access the route segments through the params prop and the URL search params through the searchParams prop for a given page.\n\nIf you are using Client Components, you can use usePathname, useSelectedLayoutSegment, and useSelectedLayoutSegments for more complex routes.\n\nFurther, depending on the UI pattern you're building, Parallel Routes allow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params.\n\nHow can I redirect from a Server Component?\n\nYou can use redirect to redirect from a page to a relative or absolute URL. redirect is a temporary (307) redirect, while permanentRedirect is a permanent (308) redirect. When these functions are used while streaming UI, they will insert a meta tag to emit the redirect on the client side.\n\nHow can I handle authentication with the App Router?\n\nHere are some common authentication solutions that support the App Router:\n\nNextAuth.js\nClerk\nStack Auth\nLucia\nAuth0\nStytch\nKinde\nWorkOS\nOr manually handling sessions or JWTs\nHow can I set cookies?\n\nYou can set cookies in Server Actions or Route Handlers using the cookies function.\n\nSince HTTP does not allow setting cookies after streaming starts, you cannot set cookies from a page or layout directly. You can also set cookies from Middleware.\n\nHow can I build multi-tenant apps?\n\nIf you are looking to build a single Next.js application that serves multiple tenants, we have built an example\n showing our recommended architecture.\n\nHow can I invalidate the App Router cache?\n\nThere are multiple layers of caching in Next.js, and thus, multiple ways to invalidate different parts of the cache. Learn more about caching.\n\nAre there any comprehensive, open-source applications built on the App Router?\n\nYes. You can view Next.js Commerce\n or the Platforms Starter Kit\n for two larger examples of using the App Router that are open-source.\n\nLearn More\nRouting Fundamentals\nData Fetching and Caching\nIncremental Static Regeneration\nForms and Mutations\nCaching\nRendering Fundamentals\nServer Components\nClient Components"
  },
  {
    "title": "Architecture: Next.js Compiler | Next.js",
    "url": "https://nextjs.org/docs/architecture/nextjs-compiler",
    "html": "Next.js Compiler\n\nThe Next.js Compiler, written in Rust using SWC\n, allows Next.js to transform and minify your JavaScript code for production. This replaces Babel for individual files and Terser for minifying output bundles.\n\nCompilation using the Next.js Compiler is 17x faster than Babel and enabled by default since Next.js version 12. If you have an existing Babel configuration or are using unsupported features, your application will opt-out of the Next.js Compiler and continue using Babel.\n\nWhy SWC?\n\nSWC\n is an extensible Rust-based platform for the next generation of fast developer tools.\n\nSWC can be used for compilation, minification, bundling, and more – and is designed to be extended. It's something you can call to perform code transformations (either built-in or custom). Running those transformations happens through higher-level tools like Next.js.\n\nWe chose to build on SWC for a few reasons:\n\nExtensibility: SWC can be used as a Crate inside Next.js, without having to fork the library or workaround design constraints.\nPerformance: We were able to achieve ~3x faster Fast Refresh and ~5x faster builds in Next.js by switching to SWC, with more room for optimization still in progress.\nWebAssembly: Rust's support for WASM is essential for supporting all possible platforms and taking Next.js development everywhere.\nCommunity: The Rust community and ecosystem are amazing and still growing.\nSupported Features\nStyled Components\n\nWe're working to port babel-plugin-styled-components to the Next.js Compiler.\n\nFirst, update to the latest version of Next.js: npm install next@latest. Then, update your next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n\nFor advanced use cases, you can configure individual properties for styled-components compilation.\n\nNote: ssr and displayName transforms are the main requirement for using styled-components in Next.js.\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    // see https://styled-components.com/docs/tooling#babel-plugin for more info on the options.\n    styledComponents: {\n      // Enabled by default in development, disabled in production to reduce file size,\n      // setting this will override the default for all environments.\n      displayName?: boolean,\n      // Enabled by default.\n      ssr?: boolean,\n      // Enabled by default.\n      fileName?: boolean,\n      // Empty by default.\n      topLevelImportPaths?: string[],\n      // Defaults to [\"index\"].\n      meaninglessFileNames?: string[],\n      // Enabled by default.\n      minify?: boolean,\n      // Enabled by default.\n      transpileTemplateLiterals?: boolean,\n      // Empty by default.\n      namespace?: string,\n      // Disabled by default.\n      pure?: boolean,\n      // Enabled by default.\n      cssProp?: boolean,\n    },\n  },\n}\nJest\n\nThe Next.js Compiler transpiles your tests and simplifies configuring Jest together with Next.js including:\n\nAuto mocking of .css, .module.css (and their .scss variants), and image imports\nAutomatically sets up transform using SWC\nLoading .env (and all variants) into process.env\nIgnores node_modules from test resolving and transforms\nIgnoring .next from test resolving\nLoads next.config.js for flags that enable experimental SWC transforms\n\nFirst, update to the latest version of Next.js: npm install next@latest. Then, update your jest.config.js file:\n\njest.config.js\nconst nextJest = require('next/jest')\n \n// Providing the path to your Next.js app which will enable loading next.config.js and .env files\nconst createJestConfig = nextJest({ dir: './' })\n \n// Any custom config you want to pass to Jest\nconst customJestConfig = {\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n}\n \n// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async\nmodule.exports = createJestConfig(customJestConfig)\nRelay\n\nTo enable Relay\n support:\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    relay: {\n      // This should match relay.config.js\n      src: './',\n      artifactDirectory: './__generated__',\n      language: 'typescript',\n      eagerEsModules: false,\n    },\n  },\n}\n\nGood to know: In Next.js, all JavaScript files in pages directory are considered routes. So, for relay-compiler you'll need to specify artifactDirectory configuration settings outside of the pages, otherwise relay-compiler will generate files next to the source file in the __generated__ directory, and this file will be considered a route, which will break production builds.\n\nRemove React Properties\n\nAllows to remove JSX properties. This is often used for testing. Similar to babel-plugin-react-remove-properties.\n\nTo remove properties matching the default regex ^data-test:\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    reactRemoveProperties: true,\n  },\n}\n\nTo remove custom properties:\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    // The regexes defined here are processed in Rust so the syntax is different from\n    // JavaScript `RegExp`s. See https://docs.rs/regex.\n    reactRemoveProperties: { properties: ['^data-custom$'] },\n  },\n}\nRemove Console\n\nThis transform allows for removing all console.* calls in application code (not node_modules). Similar to babel-plugin-transform-remove-console.\n\nRemove all console.* calls:\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    removeConsole: true,\n  },\n}\n\nRemove console.* output except console.error:\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    removeConsole: {\n      exclude: ['error'],\n    },\n  },\n}\nLegacy Decorators\n\nNext.js will automatically detect experimentalDecorators in jsconfig.json or tsconfig.json. Legacy decorators are commonly used with older versions of libraries like mobx.\n\nThis flag is only supported for compatibility with existing applications. We do not recommend using legacy decorators in new applications.\n\nFirst, update to the latest version of Next.js: npm install next@latest. Then, update your jsconfig.json or tsconfig.json file:\n\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true\n  }\n}\nimportSource\n\nNext.js will automatically detect jsxImportSource in jsconfig.json or tsconfig.json and apply that. This is commonly used with libraries like Theme UI\n.\n\nFirst, update to the latest version of Next.js: npm install next@latest. Then, update your jsconfig.json or tsconfig.json file:\n\n{\n  \"compilerOptions\": {\n    \"jsxImportSource\": \"theme-ui\"\n  }\n}\nEmotion\n\nWe're working to port @emotion/babel-plugin to the Next.js Compiler.\n\nFirst, update to the latest version of Next.js: npm install next@latest. Then, update your next.config.js file:\n\nnext.config.js\n \nmodule.exports = {\n  compiler: {\n    emotion: boolean | {\n      // default is true. It will be disabled when build type is production.\n      sourceMap?: boolean,\n      // default is 'dev-only'.\n      autoLabel?: 'never' | 'dev-only' | 'always',\n      // default is '[local]'.\n      // Allowed values: `[local]` `[filename]` and `[dirname]`\n      // This option only works when autoLabel is set to 'dev-only' or 'always'.\n      // It allows you to define the format of the resulting label.\n      // The format is defined via string where variable parts are enclosed in square brackets [].\n      // For example labelFormat: \"my-classname--[local]\", where [local] will be replaced with the name of the variable the result is assigned to.\n      labelFormat?: string,\n      // default is undefined.\n      // This option allows you to tell the compiler what imports it should\n      // look at to determine what it should transform so if you re-export\n      // Emotion's exports, you can still use transforms.\n      importMap?: {\n        [packageName: string]: {\n          [exportName: string]: {\n            canonicalImport?: [string, string],\n            styledBaseImport?: [string, string],\n          }\n        }\n      },\n    },\n  },\n}\nMinification\n\nNext.js' swc compiler is used for minification by default since v13. This is 7x faster than Terser.\n\nIf Terser is still needed for any reason this can be configured.\n\nnext.config.js\nmodule.exports = {\n  swcMinify: false,\n}\nModule Transpilation\n\nNext.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (node_modules). This replaces the next-transpile-modules package.\n\nnext.config.js\nmodule.exports = {\n  transpilePackages: ['@acme/ui', 'lodash-es'],\n}\nModularize Imports\n\nThis option has been superseded by optimizePackageImports in Next.js 13.5. We recommend upgrading to use the new option that does not require manual configuration of import paths.\n\nExperimental Features\nSWC Trace profiling\n\nYou can generate SWC's internal transform traces as chromium's trace event format\n.\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    swcTraceProfiling: true,\n  },\n}\n\nOnce enabled, swc will generate trace named as swc-trace-profile-${timestamp}.json under .next/. Chromium's trace viewer (chrome://tracing/, https://ui.perfetto.dev/\n), or compatible flamegraph viewer (https://www.speedscope.app/\n) can load & visualize generated traces.\n\nSWC Plugins (experimental)\n\nYou can configure swc's transform to use SWC's experimental plugin support written in wasm to customize transformation behavior.\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    swcPlugins: [\n      [\n        'plugin',\n        {\n          ...pluginOptions,\n        },\n      ],\n    ],\n  },\n}\n\nswcPlugins accepts an array of tuples for configuring plugins. A tuple for the plugin contains the path to the plugin and an object for plugin configuration. The path to the plugin can be an npm module package name or an absolute path to the .wasm binary itself.\n\nUnsupported Features\n\nWhen your application has a .babelrc file, Next.js will automatically fall back to using Babel for transforming individual files. This ensures backwards compatibility with existing applications that leverage custom Babel plugins.\n\nIf you're using a custom Babel setup, please share your configuration\n. We're working to port as many commonly used Babel transformations as possible, as well as supporting plugins in the future.\n\nVersion History\nVersion\tChanges\nv13.1.0\tModule Transpilation\n and Modularize Imports\n stable.\nv13.0.0\tSWC Minifier enabled by default.\nv12.3.0\tSWC Minifier stable\n.\nv12.2.0\tSWC Plugins experimental support added.\nv12.1.0\tAdded support for Styled Components, Jest, Relay, Remove React Properties, Legacy Decorators, Remove Console, and jsxImportSource.\nv12.0.0\tNext.js Compiler introduced\n."
  },
  {
    "title": "Architecture: Fast Refresh | Next.js",
    "url": "https://nextjs.org/docs/architecture/fast-refresh",
    "html": "Fast Refresh\n\nFast refresh is a React feature integrated into Next.js that allows you live reload the browser page while maintaining temporary client-side state when you save changes to a file. It's enabled by default in all Next.js applications on 9.4 or newer. With Fast Refresh enabled, most edits should be visible within a second.\n\nHow It Works\nIf you edit a file that only exports React component(s), Fast Refresh will update the code only for that file, and re-render your component. You can edit anything in that file, including styles, rendering logic, event handlers, or effects.\nIf you edit a file with exports that aren't React components, Fast Refresh will re-run both that file, and the other files importing it. So if both Button.js and Modal.js import theme.js, editing theme.js will update both components.\nFinally, if you edit a file that's imported by files outside of the React tree, Fast Refresh will fall back to doing a full reload. You might have a file which renders a React component but also exports a value that is imported by a non-React component. For example, maybe your component also exports a constant, and a non-React utility file imports it. In that case, consider migrating the constant to a separate file and importing it into both files. This will re-enable Fast Refresh to work. Other cases can usually be solved in a similar way.\nError Resilience\nSyntax Errors\n\nIf you make a syntax error during development, you can fix it and save the file again. The error will disappear automatically, so you won't need to reload the app. You will not lose component state.\n\nRuntime Errors\n\nIf you make a mistake that leads to a runtime error inside your component, you'll be greeted with a contextual overlay. Fixing the error will automatically dismiss the overlay, without reloading the app.\n\nComponent state will be retained if the error did not occur during rendering. If the error did occur during rendering, React will remount your application using the updated code.\n\nIf you have error boundaries\n in your app (which is a good idea for graceful failures in production), they will retry rendering on the next edit after a rendering error. This means having an error boundary can prevent you from always getting reset to the root app state. However, keep in mind that error boundaries shouldn't be too granular. They are used by React in production, and should always be designed intentionally.\n\nLimitations\n\nFast Refresh tries to preserve local React state in the component you're editing, but only if it's safe to do so. Here's a few reasons why you might see local state being reset on every edit to a file:\n\nLocal state is not preserved for class components (only function components and Hooks preserve state).\nThe file you're editing might have other exports in addition to a React component.\nSometimes, a file would export the result of calling a higher-order component like HOC(WrappedComponent). If the returned component is a class, its state will be reset.\nAnonymous arrow functions like export default () => <div />; cause Fast Refresh to not preserve local component state. For large codebases you can use our name-default-component codemod.\n\nAs more of your codebase moves to function components and Hooks, you can expect state to be preserved in more cases.\n\nTips\nFast Refresh preserves React local state in function components (and Hooks) by default.\nSometimes you might want to force the state to be reset, and a component to be remounted. For example, this can be handy if you're tweaking an animation that only happens on mount. To do this, you can add // @refresh reset anywhere in the file you're editing. This directive is local to the file, and instructs Fast Refresh to remount components defined in that file on every edit.\nYou can put console.log or debugger; into the components you edit during development.\nRemember that imports are case sensitive. Both fast and full refresh can fail, when your import doesn't match the actual filename. For example, './header' vs './Header'.\nFast Refresh and Hooks\n\nWhen possible, Fast Refresh attempts to preserve the state of your component between edits. In particular, useState and useRef preserve their previous values as long as you don't change their arguments or the order of the Hook calls.\n\nHooks with dependencies—such as useEffect, useMemo, and useCallback—will always update during Fast Refresh. Their list of dependencies will be ignored while Fast Refresh is happening.\n\nFor example, when you edit useMemo(() => x * 2, [x]) to useMemo(() => x * 10, [x]), it will re-run even though x (the dependency) has not changed. If React didn't do that, your edit wouldn't reflect on the screen!\n\nSometimes, this can lead to unexpected results. For example, even a useEffect with an empty array of dependencies would still re-run once during Fast Refresh.\n\nHowever, writing code resilient to occasional re-running of useEffect is a good practice even without Fast Refresh. It will make it easier for you to introduce new dependencies to it later on and it's enforced by React Strict Mode, which we highly recommend enabling."
  },
  {
    "title": "Architecture: Accessibility | Next.js",
    "url": "https://nextjs.org/docs/architecture/accessibility",
    "html": "Accessibility\n\nThe Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone.\n\nRoute Announcements\n\nWhen transitioning between pages rendered on the server (e.g. using the <a href> tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed.\n\nIn addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (using next/link). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default.\n\nThe Next.js route announcer looks for the page name to announce by first inspecting document.title, then the <h1> element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title.\n\nLinting\n\nNext.js provides an integrated ESLint experience out of the box, including custom rules for Next.js. By default, Next.js includes eslint-plugin-jsx-a11y to help catch accessibility issues early, including warning on:\n\naria-props\naria-proptypes\naria-unsupported-elements\nrole-has-required-aria-props\nrole-supports-aria-props\n\nFor example, this plugin helps ensure you add alt text to img tags, use correct aria-* attributes, use correct role attributes, and more.\n\nAccessibility Resources\nWebAIM WCAG checklist\nWCAG 2.2 Guidelines\nThe A11y Project\nCheck color contrast ratios\n between foreground and background elements\nUse prefers-reduced-motion\n when working with animations"
  },
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/cli/next",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "Architecture | Next.js",
    "url": "https://nextjs.org/docs/architecture",
    "html": "Architecture\n\nLearn about the Next.js architecture and how it works under the hood."
  },
  {
    "title": "API Reference: CLI | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/cli",
    "html": "CLI\n\nNext.js comes with two Command Line Interface (CLI) tools:\n\ncreate-next-app: Quickly create a new Next.js application using the default template or an example\n from a public Github repository.\nnext: Run the Next.js development server, build your application, and more."
  },
  {
    "title": "CLI: CLI | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/cli/create-next-app",
    "html": "CLI\n\nThe create-next-app CLI allow you to create a new Next.js application using the default template or an example\n from a public Github repository. It is the easiest way to get started with Next.js.\n\nBasic usage:\n\nTerminal\nnpx create-next-app@latest [project-name] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShow all available options\n-v or --version\tOutput the version number\n--no-*\tNegate default options. E.g. --no-eslint\n--ts or --typescript\tInitialize as a TypeScript project (default)\n--js or --javascript\tInitialize as a JavaScript project\n--tailwind\tInitialize with Tailwind CSS config (default)\n--eslint\tInitialize with ESLint config\n--app\tInitialize as an App Router project\n--src-dir\tInitialize inside a src/ directory\n--turbo\tEnable Turbopack by default for development\n--import-alias <alias-to-configure>\tSpecify import alias to use (default \"@/*\")\n--empty\tInitialize an empty project\n--use-npm\tExplicitly tell the CLI to bootstrap the application using npm\n--use-pnpm\tExplicitly tell the CLI to bootstrap the application using pnpm\n--use-yarn\tExplicitly tell the CLI to bootstrap the application using Yarn\n--use-bun\tExplicitly tell the CLI to bootstrap the application using Bun\n-e or --example [name] [github-url]\tAn example to bootstrap the app with\n--example-path <path-to-example>\tSpecify the path to the example separately\n--reset-preferences\tExplicitly tell the CLI to reset any stored preferences\n--skip-install\tExplicitly tell the CLI to skip installing packages\n--yes\tUse previous preferences or defaults for all options\nExamples\nWith the default template\n\nTo create a new app using the default template, run the following command in your terminal:\n\nTerminal\nnpx create-next-app@latest\n\nYou will then be asked the following prompts:\n\nTerminal\nWhat is your project named?  my-app\nWould you like to use TypeScript?  No / Yes\nWould you like to use ESLint?  No / Yes\nWould you like to use Tailwind CSS?  No / Yes\nWould you like your code inside a `src/` directory?  No / Yes\nWould you like to use App Router? (recommended)  No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)?  No / Yes\n\nOnce you've answered the prompts, a new project will be created with your chosen configuration.\n\nWith an official Next.js example\n\nTo create a new app using an official Next.js example, use the --example flag. For example:\n\nTerminal\nnpx create-next-app@latest --example [your-project-name] [example-name]\n\nYou can view a list of all available examples along with setup instructions in the Next.js repository\n.\n\nWith any public Github example\n\nTo create a new app using any public Github example, use the --example option with the Github repo's URL. For example:\n\nTerminal\nnpx create-next-app@latest --example [your-project-name] \"https://github.com/.../\""
  },
  {
    "title": "API Reference: Edge Runtime | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/edge",
    "html": "Edge Runtime\n\nThe Next.js Edge Runtime is used for Middleware and supports the following APIs:\n\nNetwork APIs\nAPI\tDescription\nBlob\n\tRepresents a blob\nfetch\n\tFetches a resource\nFetchEvent\n\tRepresents a fetch event\nFile\n\tRepresents a file\nFormData\n\tRepresents form data\nHeaders\n\tRepresents HTTP headers\nRequest\n\tRepresents an HTTP request\nResponse\n\tRepresents an HTTP response\nURLSearchParams\n\tRepresents URL search parameters\nWebSocket\n\tRepresents a websocket connection\nEncoding APIs\nAPI\tDescription\natob\n\tDecodes a base-64 encoded string\nbtoa\n\tEncodes a string in base-64\nTextDecoder\n\tDecodes a Uint8Array into a string\nTextDecoderStream\n\tChainable decoder for streams\nTextEncoder\n\tEncodes a string into a Uint8Array\nTextEncoderStream\n\tChainable encoder for streams\nStream APIs\nAPI\tDescription\nReadableStream\n\tRepresents a readable stream\nReadableStreamBYOBReader\n\tRepresents a reader of a ReadableStream\nReadableStreamDefaultReader\n\tRepresents a reader of a ReadableStream\nTransformStream\n\tRepresents a transform stream\nWritableStream\n\tRepresents a writable stream\nWritableStreamDefaultWriter\n\tRepresents a writer of a WritableStream\nCrypto APIs\nAPI\tDescription\ncrypto\n\tProvides access to the cryptographic functionality of the platform\nCryptoKey\n\tRepresents a cryptographic key\nSubtleCrypto\n\tProvides access to common cryptographic primitives, like hashing, signing, encryption or decryption\nWeb Standard APIs\nAPI\tDescription\nAbortController\n\tAllows you to abort one or more DOM requests as and when desired\nArray\n\tRepresents an array of values\nArrayBuffer\n\tRepresents a generic, fixed-length raw binary data buffer\nAtomics\n\tProvides atomic operations as static methods\nBigInt\n\tRepresents a whole number with arbitrary precision\nBigInt64Array\n\tRepresents a typed array of 64-bit signed integers\nBigUint64Array\n\tRepresents a typed array of 64-bit unsigned integers\nBoolean\n\tRepresents a logical entity and can have two values: true and false\nclearInterval\n\tCancels a timed, repeating action which was previously established by a call to setInterval()\nclearTimeout\n\tCancels a timed, repeating action which was previously established by a call to setTimeout()\nconsole\n\tProvides access to the browser's debugging console\nDataView\n\tRepresents a generic view of an ArrayBuffer\nDate\n\tRepresents a single moment in time in a platform-independent format\ndecodeURI\n\tDecodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine\ndecodeURIComponent\n\tDecodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine\nDOMException\n\tRepresents an error that occurs in the DOM\nencodeURI\n\tEncodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character\nencodeURIComponent\n\tEncodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character\nError\n\tRepresents an error when trying to execute a statement or accessing a property\nEvalError\n\tRepresents an error that occurs regarding the global function eval()\nFloat32Array\n\tRepresents a typed array of 32-bit floating point numbers\nFloat64Array\n\tRepresents a typed array of 64-bit floating point numbers\nFunction\n\tRepresents a function\nInfinity\n\tRepresents the mathematical Infinity value\nInt8Array\n\tRepresents a typed array of 8-bit signed integers\nInt16Array\n\tRepresents a typed array of 16-bit signed integers\nInt32Array\n\tRepresents a typed array of 32-bit signed integers\nIntl\n\tProvides access to internationalization and localization functionality\nisFinite\n\tDetermines whether a value is a finite number\nisNaN\n\tDetermines whether a value is NaN or not\nJSON\n\tProvides functionality to convert JavaScript values to and from the JSON format\nMap\n\tRepresents a collection of values, where each value may occur only once\nMath\n\tProvides access to mathematical functions and constants\nNumber\n\tRepresents a numeric value\nObject\n\tRepresents the object that is the base of all JavaScript objects\nparseFloat\n\tParses a string argument and returns a floating point number\nparseInt\n\tParses a string argument and returns an integer of the specified radix\nPromise\n\tRepresents the eventual completion (or failure) of an asynchronous operation, and its resulting value\nProxy\n\tRepresents an object that is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc)\nqueueMicrotask\n\tQueues a microtask to be executed\nRangeError\n\tRepresents an error when a value is not in the set or range of allowed values\nReferenceError\n\tRepresents an error when a non-existent variable is referenced\nReflect\n\tProvides methods for interceptable JavaScript operations\nRegExp\n\tRepresents a regular expression, allowing you to match combinations of characters\nSet\n\tRepresents a collection of values, where each value may occur only once\nsetInterval\n\tRepeatedly calls a function, with a fixed time delay between each call\nsetTimeout\n\tCalls a function or evaluates an expression after a specified number of milliseconds\nSharedArrayBuffer\n\tRepresents a generic, fixed-length raw binary data buffer\nString\n\tRepresents a sequence of characters\nstructuredClone\n\tCreates a deep copy of a value\nSymbol\n\tRepresents a unique and immutable data type that is used as the key of an object property\nSyntaxError\n\tRepresents an error when trying to interpret syntactically invalid code\nTypeError\n\tRepresents an error when a value is not of the expected type\nUint8Array\n\tRepresents a typed array of 8-bit unsigned integers\nUint8ClampedArray\n\tRepresents a typed array of 8-bit unsigned integers clamped to 0-255\nUint32Array\n\tRepresents a typed array of 32-bit unsigned integers\nURIError\n\tRepresents an error when a global URI handling function was used in a wrong way\nURL\n\tRepresents an object providing static methods used for creating object URLs\nURLPattern\n\tRepresents a URL pattern\nURLSearchParams\n\tRepresents a collection of key/value pairs\nWeakMap\n\tRepresents a collection of key/value pairs in which the keys are weakly referenced\nWeakSet\n\tRepresents a collection of objects in which each object may occur only once\nWebAssembly\n\tProvides access to WebAssembly\nNext.js Specific Polyfills\nAsyncLocalStorage\nEnvironment Variables\n\nYou can use process.env to access Environment Variables for both next dev and next build.\n\nUnsupported APIs\n\nThe Edge Runtime has some restrictions including:\n\nNative Node.js APIs are not supported. For example, you can't read or write to the filesystem.\nnode_modules can be used, as long as they implement ES Modules and do not use native Node.js APIs.\nCalling require directly is not allowed. Use ES Modules instead.\n\nThe following JavaScript language features are disabled, and will not work:\n\nAPI\tDescription\neval\n\tEvaluates JavaScript code represented as a string\nnew Function(evalString)\n\tCreates a new function with the code provided as an argument\nWebAssembly.compile\n\tCompiles a WebAssembly module from a buffer source\nWebAssembly.instantiate\n\tCompiles and instantiates a WebAssembly module from a buffer source\n\nIn rare cases, your code could contain (or import) some dynamic code evaluation statements which can not be reached at runtime and which can not be removed by treeshaking. You can relax the check to allow specific files with your Middleware configuration:\n\nmiddleware.ts\nexport const config = {\n  unstable_allowDynamic: [\n    // allows a single file\n    '/lib/utilities.js',\n    // use a glob to allow anything in the function-bind 3rd party module\n    '/node_modules/function-bind/**',\n  ],\n}\n\nunstable_allowDynamic is a glob\n, or an array of globs, ignoring dynamic code evaluation for specific files. The globs are relative to your application root folder.\n\nBe warned that if these statements are executed on the Edge, they will throw and cause a runtime error."
  },
  {
    "title": "next.config.js Options: webVitalsAttribution | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/webVitalsAttribution",
    "html": "webVitalsAttribution\n\nWhen debugging issues related to Web Vitals, it is often helpful if we can pinpoint the source of the problem. For example, in the case of Cumulative Layout Shift (CLS), we might want to know the first element that shifted when the single largest layout shift occurred. Or, in the case of Largest Contentful Paint (LCP), we might want to identify the element corresponding to the LCP for the page. If the LCP element is an image, knowing the URL of the image resource can help us locate the asset we need to optimize.\n\nPinpointing the biggest contributor to the Web Vitals score, aka attribution\n, allows us to obtain more in-depth information like entries for PerformanceEventTiming\n, PerformanceNavigationTiming\n and PerformanceResourceTiming\n.\n\nAttribution is disabled by default in Next.js but can be enabled per metric by specifying the following in next.config.js.\n\nnext.config.js\nexperimental: {\n  webVitalsAttribution: ['CLS', 'LCP']\n}\n\nValid attribution values are all web-vitals metrics specified in the NextWebVitalsMetric\n type."
  },
  {
    "title": "next.config.js Options: useLightningcss | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/useLightningcss",
    "html": "useLightningcss\nThis API is currently experimental and subject to change.\n\nExperimental support for using Lightning CSS\n, a fast CSS bundler and minifier, written in Rust.\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    useLightningcss: true,\n  },\n}\n \nexport default nextConfig\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    useLightningcss: true,\n  },\n}\n \nmodule.exports = nextConfig"
  },
  {
    "title": "next.config.js Options: webpack | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/webpack",
    "html": "Custom Webpack Config\n\nGood to know: changes to webpack config are not covered by semver so proceed at your own risk\n\nBefore continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case:\n\nCSS imports\nCSS modules\nSass/SCSS imports\nSass/SCSS modules\nCustomizing babel configuration\n\nSome commonly asked for features are available as plugins:\n\n@next/mdx\n@next/bundle-analyzer\n\nIn order to extend our usage of webpack, you can define a function that extends its config inside next.config.js, like so:\n\nnext.config.js\nmodule.exports = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    // Important: return the modified config\n    return config\n  },\n}\n\nThe webpack function is executed three times, twice for the server (nodejs / edge runtime) and once for the client. This allows you to distinguish between client and server configuration using the isServer property.\n\nThe second argument to the webpack function is an object with the following properties:\n\nbuildId: String - The build id, used as a unique identifier between builds\ndev: Boolean - Indicates if the compilation will be done in development\nisServer: Boolean - It's true for server-side compilation, and false for client-side compilation\nnextRuntime: String | undefined - The target runtime for server-side compilation; either \"edge\" or \"nodejs\", it's undefined for client-side compilation.\ndefaultLoaders: Object - Default loaders used internally by Next.js:\nbabel: Object - Default babel-loader configuration\n\nExample usage of defaultLoaders.babel:\n\n// Example config for adding a loader that depends on babel-loader\n// This source was taken from the @next/mdx plugin source:\n// https://github.com/vercel/next.js/tree/canary/packages/next-mdx\nmodule.exports = {\n  webpack: (config, options) => {\n    config.module.rules.push({\n      test: /\\.mdx/,\n      use: [\n        options.defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader',\n          options: pluginOptions.options,\n        },\n      ],\n    })\n \n    return config\n  },\n}\nnextRuntime\n\nNotice that isServer is true when nextRuntime is \"edge\" or \"nodejs\", nextRuntime \"edge\" is currently for middleware and Server Components in edge runtime only."
  },
  {
    "title": "next.config.js Options: urlImports | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/urlImports",
    "html": "urlImports\nThis API is currently experimental and subject to change.\n\nURL imports are an experimental feature that allows you to import modules directly from external servers (instead of from the local disk).\n\nWarning: Only use domains that you trust to download and execute on your machine. Please exercise discretion, and caution until the feature is flagged as stable.\n\nTo opt-in, add the allowed URL prefixes inside next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],\n  },\n}\n\nThen, you can import modules directly from URLs:\n\nimport { a, b, c } from 'https://example.com/assets/some/module.js'\n\nURL Imports can be used everywhere normal package imports can be used.\n\nSecurity Model\n\nThis feature is being designed with security as the top priority. To start, we added an experimental flag forcing you to explicitly allow the domains you accept URL imports from. We're working to take this further by limiting URL imports to execute in the browser sandbox using the Edge Runtime.\n\nLockfile\n\nWhen using URL imports, Next.js will create a next.lock directory containing a lockfile and fetched assets. This directory must be committed to Git, not ignored by .gitignore.\n\nWhen running next dev, Next.js will download and add all newly discovered URL Imports to your lockfile\nWhen running next build, Next.js will use only the lockfile to build the application for production\n\nTypically, no network requests are needed and any outdated lockfile will cause the build to fail. One exception is resources that respond with Cache-Control: no-cache. These resources will have a no-cache entry in the lockfile and will always be fetched from the network on each build.\n\nExamples\nSkypack\nimport confetti from 'https://cdn.skypack.dev/canvas-confetti'\nimport { useEffect } from 'react'\n \nexport default () => {\n  useEffect(() => {\n    confetti()\n  })\n  return <p>Hello</p>\n}\nStatic Image Imports\nimport Image from 'next/image'\nimport logo from 'https://example.com/assets/logo.png'\n \nexport default () => (\n  <div>\n    <Image src={logo} placeholder=\"blur\" />\n  </div>\n)\nURLs in CSS\n.className {\n  background: url('https://example.com/assets/hero.jpg');\n}\nAsset Imports\nconst logo = new URL('https://example.com/assets/file.txt', import.meta.url)\n \nconsole.log(logo.pathname)\n \n// prints \"/_next/static/media/file.a9727b5d.txt\""
  },
  {
    "title": "next.config.js Options: typescript | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/typescript",
    "html": "typescript\n\nNext.js fails your production build (next build) when TypeScript errors are present in your project.\n\nIf you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.\n\nIf disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.\n\nOpen next.config.js and enable the ignoreBuildErrors option in the typescript config:\n\nnext.config.js\nmodule.exports = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}"
  },
  {
    "title": "next.config.js Options: turbo | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/turbo",
    "html": "turbo\nThis API is currently experimental and subject to change.\n\nTurbopack can be customized to transform different files and change how modules are resolved.\n\nGood to know:\n\nThese features are experimental and will only work with next --turbo.\nTurbopack for Next.js does not require loaders nor loader configuration for built-in functionality. Turbopack has built-in support for css and compiling modern JavaScript, so there's no need for css-loader, postcss-loader, or babel-loader if you're using @babel/preset-env.\nwebpack loaders\n\nIf you need loader support beyond what's built in, many webpack loaders already work with Turbopack. There are currently some limitations:\n\nOnly a core subset of the webpack loader API is implemented. Currently, there is enough coverage for some popular loaders, and we'll expand our API support in the future.\nOnly loaders that return JavaScript code are supported. Loaders that transform files like stylesheets or images are not currently supported.\nOptions passed to webpack loaders must be plain JavaScript primitives, objects, and arrays. For example, it's not possible to pass require()d plugin modules as option values.\n\nTo configure loaders, add the names of the loaders you've installed and any options in next.config.js, mapping file extensions to a list of loaders:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      rules: {\n        '*.svg': {\n          loaders: ['@svgr/webpack'],\n          as: '*.js',\n        },\n      },\n    },\n  },\n}\n\nGood to know: Prior to Next.js version 13.4.4, experimental.turbo.rules was named experimental.turbo.loaders and only accepted file extensions like .mdx instead of *.mdx.\n\nSupported loaders\n\nThe following loaders have been tested to work with Turbopack's webpack loader implementation:\n\nbabel-loader\n@svgr/webpack\nsvg-inline-loader\nyaml-loader\nstring-replace-loader\nraw-loader\nsass-loader\nResolve aliases\n\nThrough next.config.js, Turbopack can be configured to modify module resolution through aliases, similar to webpack's resolve.alias\n configuration.\n\nTo configure resolve aliases, map imported patterns to their new destination in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveAlias: {\n        underscore: 'lodash',\n        mocha: { browser: 'mocha/browser-entry.js' },\n      },\n    },\n  },\n}\n\nThis aliases imports of the underscore package to the lodash package. In other words, import underscore from 'underscore' will load the lodash module instead of underscore.\n\nTurbopack also supports conditional aliasing through this field, similar to Node.js's conditional exports\n. At the moment only the browser condition is supported. In the case above, imports of the mocha module will be aliased to mocha/browser-entry.js when Turbopack targets browser environments.\n\nResolve extensions\n\nThrough next.config.js, Turbopack can be configured to resolve modules with custom extensions, similar to webpack's resolve.extensions\n configuration.\n\nTo configure resolve extensions, use the resolveExtensions field in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveExtensions: [\n        '.mdx',\n        '.tsx',\n        '.ts',\n        '.jsx',\n        '.js',\n        '.mjs',\n        '.json',\n      ],\n    },\n  },\n}\n\nThis overwrites the original resolve extensions with the provided list. Make sure to include the default extensions.\n\nFor more information and guidance for how to migrate your app to Turbopack from webpack, see Turbopack's documentation on webpack compatibility\n.\n\nModule ID strategy\n\nTurbopack currently supports two strategies for assigning module IDs: 'named' and 'deterministic'.\n\n'named' assigns readable module IDs based on the module's path and functionality.\n\n'deterministic' assigns small hashed numeric module IDs, which are mostly consistent between builds and therefore help with long-term caching.\n\nIf not set, Turbopack will use 'named' for development builds and 'deterministic' for production builds.\n\nTo configure the module IDs strategy, use the moduleIdStrategy field in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      moduleIdStrategy: 'deterministic',\n    },\n  },\n}"
  },
  {
    "title": "next.config.js Options: transpilePackages | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/transpilePackages",
    "html": "transpilePackages\n\nNext.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (node_modules). This replaces the next-transpile-modules package.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['package-name'],\n}\n \nmodule.exports = nextConfig\nVersion History\nVersion\tChanges\nv13.0.0\ttranspilePackages added."
  },
  {
    "title": "next.config.js Options: trailingSlash | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/trailingSlash",
    "html": "trailingSlash\n\nBy default Next.js will redirect urls with trailing slashes to their counterpart without a trailing slash. For example /about/ will redirect to /about. You can configure this behavior to act the opposite way, where urls without trailing slashes are redirected to their counterparts with trailing slashes.\n\nOpen next.config.js and add the trailingSlash config:\n\nnext.config.js\nmodule.exports = {\n  trailingSlash: true,\n}\n\nWith this option set, urls like /about will redirect to /about/.\n\nWhen used with output: \"export\" configuration, the /about page will output /about/index.html (instead of the default /about.html).\n\nVersion History\nVersion\tChanges\nv9.5.0\ttrailingSlash added."
  },
  {
    "title": "next.config.js Options: serverExternalPackages | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/serverExternalPackages",
    "html": "serverExternalPackages\n\nOpt-out specific dependencies from being included in the automatic bundling of the bundlePagesRouterDependencies option.\n\nThese pages will then use native Node.js require to resolve the dependency.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverExternalPackages: ['@acme/ui'],\n}\n \nmodule.exports = nextConfig\n\nNext.js includes a short list of popular packages\n that currently are working on compatibility and automatically opt-ed out:\n\n@appsignal/nodejs\n@aws-sdk/client-s3\n@aws-sdk/s3-presigned-post\n@blockfrost/blockfrost-js\n@highlight-run/node\n@jpg-store/lucid-cardano\n@libsql/client\n@mikro-orm/core\n@mikro-orm/knex\n@node-rs/argon2\n@node-rs/bcrypt\n@prisma/client\n@react-pdf/renderer\n@sentry/profiling-node\n@swc/core\nargon2\nautoprefixer\naws-crt\nbcrypt\nbetter-sqlite3\ncanvas\ncpu-features\ncypress\ndd-trace\neslint\nexpress\nfirebase-admin\nisolated-vm\njest\njsdom\nkeyv\nlibsql\nmdx-bundler\nmongodb\nmongoose\nnext-mdx-remote\nnext-seo\nnode-cron\nnode-pty\nnode-web-audio-api\noslo\npg\nplaywright\nplaywright-core\npostcss\nprettier\nprisma\npuppeteer-core\npuppeteer\nrimraf\nsharp\nshiki\nsqlite3\nts-node\nts-morph\ntypescript\nvscode-oniguruma\nwebpack\nwebsocket\nzeromq"
  },
  {
    "title": "next.config.js Options: Runtime Config | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/runtime-configuration",
    "html": "Runtime Config\n\nWarning:\n\nThis feature is deprecated. We recommend using environment variables instead, which also can support reading runtime values.\nYou can run code on server startup using the register function.\nThis feature does not work with Automatic Static Optimization, Output File Tracing, or React Server Components.\n\nTo add runtime configuration to your app, open next.config.js and add the publicRuntimeConfig and serverRuntimeConfig configs:\n\nnext.config.js\nmodule.exports = {\n  serverRuntimeConfig: {\n    // Will only be available on the server side\n    mySecret: 'secret',\n    secondSecret: process.env.SECOND_SECRET, // Pass through env variables\n  },\n  publicRuntimeConfig: {\n    // Will be available on both server and client\n    staticFolder: '/static',\n  },\n}\n\nPlace any server-only runtime config under serverRuntimeConfig.\n\nAnything accessible to both client and server-side code should be under publicRuntimeConfig.\n\nA page that relies on publicRuntimeConfig must use getInitialProps or getServerSideProps or your application must have a Custom App with getInitialProps to opt-out of Automatic Static Optimization. Runtime configuration won't be available to any page (or component in a page) without being server-side rendered.\n\nTo get access to the runtime configs in your app use next/config, like so:\n\nimport getConfig from 'next/config'\nimport Image from 'next/image'\n \n// Only holds serverRuntimeConfig and publicRuntimeConfig\nconst { serverRuntimeConfig, publicRuntimeConfig } = getConfig()\n// Will only be available on the server-side\nconsole.log(serverRuntimeConfig.mySecret)\n// Will be available on both server-side and client-side\nconsole.log(publicRuntimeConfig.staticFolder)\n \nfunction MyImage() {\n  return (\n    <div>\n      <Image\n        src={`${publicRuntimeConfig.staticFolder}/logo.png`}\n        alt=\"logo\"\n        layout=\"fill\"\n      />\n    </div>\n  )\n}\n \nexport default MyImage"
  },
  {
    "title": "next.config.js Options: redirects | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/redirects",
    "html": "redirects\n\nRedirects allow you to redirect an incoming request path to a different destination path.\n\nTo use redirects you can use the redirects key in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ]\n  },\n}\n\nredirects is an async function that expects an array to be returned holding objects with source, destination, and permanent properties:\n\nsource is the incoming request path pattern.\ndestination is the path you want to route to.\npermanent true or false - if true will use the 308 status code which instructs clients/search engines to cache the redirect forever, if false will use the 307 status code which is temporary and is not cached.\n\nWhy does Next.js use 307 and 308? Traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, but many browsers changed the request method of the redirect to GET, regardless of the original method. For example, if the browser made a request to POST /v1/users which returned status code 302 with location /v2/users, the subsequent request might be GET /v2/users instead of the expected POST /v2/users. Next.js uses the 307 temporary redirect, and 308 permanent redirect status codes to explicitly preserve the request method used.\n\nbasePath: false or undefined - if false the basePath won't be included when matching, can be used for external redirects only.\nlocale: false or undefined - whether the locale should not be included when matching.\nhas is an array of has objects with the type, key and value properties.\nmissing is an array of missing objects with the type, key and value properties.\n\nRedirects are checked before the filesystem which includes pages and /public files.\n\nWhen using the Pages Router, redirects are not applied to client-side routing (Link, router.push) unless Middleware is present and matches the path.\n\nWhen a redirect is applied, any query values provided in the request will be passed through to the redirect destination. For example, see the following redirect configuration:\n\n{\n  source: '/old-blog/:path*',\n  destination: '/blog/:path*',\n  permanent: false\n}\n\nWhen /old-blog/post-1?hello=world is requested, the client will be redirected to /blog/post-1?hello=world.\n\nPath Matching\n\nPath matches are allowed, for example /old-blog/:slug will match /old-blog/hello-world (no nested paths):\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/old-blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\nWildcard Path Matching\n\nTo match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\nRegex Path Matching\n\nTo match a regex path you can wrap the regex in parentheses after a parameter, for example /post/:slug(\\\\d{1,}) will match /post/123 but not /post/abc:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/post/:slug(\\\\d{1,})',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: false,\n      },\n    ]\n  },\n}\n\nThe following characters (, ), {, }, :, *, +, ? are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n        permanent: false,\n      },\n    ]\n  },\n}\nHeader, Cookie, and Query Matching\n\nTo only match a redirect when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the redirect to be applied.\n\nhas and missing items can have the following fields:\n\ntype: String - must be either header, cookie, host, or query.\nkey: String - the key from the selected type to match against.\nvalue: String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName.\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      // if the header `x-redirect-me` is present,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'header',\n            key: 'x-redirect-me',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the header `x-dont-redirect` is present,\n      // this redirect will NOT be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-do-not-redirect',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this redirect will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        permanent: false,\n        destination: '/another/:path*',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this redirect will be applied\n      {\n        source: '/',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        permanent: false,\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n    ]\n  },\n}\nRedirects with basePath support\n\nWhen leveraging basePath support with redirects each source and destination is automatically prefixed with the basePath unless you add basePath: false to the redirect:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n \n  async redirects() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n        permanent: false,\n      },\n      {\n        // does not add /docs since basePath: false is set\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n        permanent: false,\n      },\n    ]\n  },\n}\nRedirects with i18n support\n\nWhen leveraging i18n support with redirects each source and destination is automatically prefixed to handle the configured locales unless you add locale: false to the redirect. If locale: false is used you must prefix the source and destination with a locale for it to be matched correctly.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n \n  async redirects() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n        permanent: false,\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n        permanent: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n        permanent: false,\n      },\n      // it's possible to match all locales even when locale: false is set\n      {\n        source: '/:locale/page',\n        destination: '/en/newpage',\n        permanent: false,\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n        permanent: false,\n      },\n    ]\n  },\n}\n\nIn some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both. To to ensure IE11 compatibility, a Refresh header is automatically added for the 308 status code.\n\nOther Redirects\nInside API Routes and Route Handlers, you can redirect based on the incoming request.\nInside getStaticProps and getServerSideProps, you can redirect specific pages at request-time.\nVersion History\nVersion\tChanges\nv13.3.0\tmissing added.\nv10.2.0\thas added.\nv9.5.0\tredirects added."
  },
  {
    "title": "next.config.js Options: rewrites | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/rewrites",
    "html": "rewrites\n\nRewrites allow you to map an incoming request path to a different destination path.\n\nRewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast, redirects will reroute to a new page and show the URL changes.\n\nTo use rewrites you can use the rewrites key in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n      },\n    ]\n  },\n}\n\nRewrites are applied to client-side routing, a <Link href=\"/about\"> will have the rewrite applied in the above example.\n\nrewrites is an async function that expects to return either an array or an object of arrays (see below) holding objects with source and destination properties:\n\nsource: String - is the incoming request path pattern.\ndestination: String is the path you want to route to.\nbasePath: false or undefined - if false the basePath won't be included when matching, can be used for external rewrites only.\nlocale: false or undefined - whether the locale should not be included when matching.\nhas is an array of has objects with the type, key and value properties.\nmissing is an array of missing objects with the type, key and value properties.\n\nWhen the rewrites function returns an array, rewrites are applied after checking the filesystem (pages and /public files) and before dynamic routes. When the rewrites function returns an object of arrays with a specific shape, this behavior can be changed and more finely controlled, as of v10.1 of Next.js:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return {\n      beforeFiles: [\n        // These rewrites are checked after headers/redirects\n        // and before all files including _next/public files which\n        // allows overriding page files\n        {\n          source: '/some-page',\n          destination: '/somewhere-else',\n          has: [{ type: 'query', key: 'overrideMe' }],\n        },\n      ],\n      afterFiles: [\n        // These rewrites are checked after pages/public files\n        // are checked but before dynamic routes\n        {\n          source: '/non-existent',\n          destination: '/somewhere-else',\n        },\n      ],\n      fallback: [\n        // These rewrites are checked after both pages/public files\n        // and dynamic routes are checked\n        {\n          source: '/:path*',\n          destination: `https://my-old-site.com/:path*`,\n        },\n      ],\n    }\n  },\n}\n\nGood to know: rewrites in beforeFiles do not check the filesystem/dynamic routes immediately after matching a source, they continue until all beforeFiles have been checked.\n\nThe order Next.js routes are checked is:\n\nheaders are checked/applied\nredirects are checked/applied\nbeforeFiles rewrites are checked/applied\nstatic files from the public directory, _next/static files, and non-dynamic pages are checked/served\nafterFiles rewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match\nfallback rewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you use fallback: true/'blocking' in getStaticPaths, the fallback rewrites defined in your next.config.js will not be run.\nRewrite parameters\n\nWhen using parameters in a rewrite the parameters will be passed in the query by default when none of the parameters are used in the destination.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-about/:path*',\n        destination: '/about', // The :path parameter isn't used here so will be automatically passed in the query\n      },\n    ]\n  },\n}\n\nIf a parameter is used in the destination none of the parameters will be automatically passed in the query.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/docs/:path*',\n        destination: '/:path*', // The :path parameter is used here so will not be automatically passed in the query\n      },\n    ]\n  },\n}\n\nYou can still pass the parameters manually in the query if one is already used in the destination by specifying the query in the destination.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/:first/:second',\n        destination: '/:first?second=:second',\n        // Since the :first parameter is used in the destination the :second parameter\n        // will not automatically be added in the query although we can manually add it\n        // as shown above\n      },\n    ]\n  },\n}\n\nGood to know: Static pages from Automatic Static Optimization or prerendering params from rewrites will be parsed on the client after hydration and provided in the query.\n\nPath Matching\n\nPath matches are allowed, for example /blog/:slug will match /blog/hello-world (no nested paths):\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\nWildcard Path Matching\n\nTo match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\nRegex Path Matching\n\nTo match a regex path you can wrap the regex in parenthesis after a parameter, for example /blog/:slug(\\\\d{1,}) will match /blog/123 but not /blog/abc:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-blog/:post(\\\\d{1,})',\n        destination: '/blog/:post', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n\nThe following characters (, ), {, }, [, ], |, \\, ^, ., :, *, +, -, ?, $ are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n      },\n    ]\n  },\n}\nHeader, Cookie, and Query Matching\n\nTo only match a rewrite when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the rewrite to be applied.\n\nhas and missing items can have the following fields:\n\ntype: String - must be either header, cookie, host, or query.\nkey: String - the key from the selected type to match against.\nvalue: String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName.\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      // if the header `x-rewrite-me` is present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the header `x-rewrite-me` is not present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this rewrite will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        destination: '/:path*/home',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        destination: '/another-page',\n      },\n    ]\n  },\n}\nRewriting to an external URL\nExamples\n\nRewrites allow you to rewrite to an external url. This is especially useful for incrementally adopting Next.js. The following is an example rewrite for redirecting the /blog route of your main app to an external site.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog',\n        destination: 'https://example.com/blog',\n      },\n      {\n        source: '/blog/:slug',\n        destination: 'https://example.com/blog/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n\nIf you're using trailingSlash: true, you also need to insert a trailing slash in the source parameter. If the destination server is also expecting a trailing slash it should be included in the destination parameter as well.\n\nnext.config.js\nmodule.exports = {\n  trailingSlash: true,\n  async rewrites() {\n    return [\n      {\n        source: '/blog/',\n        destination: 'https://example.com/blog/',\n      },\n      {\n        source: '/blog/:path*/',\n        destination: 'https://example.com/blog/:path*/',\n      },\n    ]\n  },\n}\nIncremental adoption of Next.js\n\nYou can also have Next.js fall back to proxying to an existing website after checking all Next.js routes.\n\nThis way you don't have to change the rewrites configuration when migrating more pages to Next.js\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return {\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,\n        },\n      ],\n    }\n  },\n}\nRewrites with basePath support\n\nWhen leveraging basePath support with rewrites each source and destination is automatically prefixed with the basePath unless you add basePath: false to the rewrite:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n \n  async rewrites() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n      },\n      {\n        // does not add /docs to /without-basePath since basePath: false is set\n        // Note: this can not be used for internal rewrites e.g. `destination: '/another'`\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n      },\n    ]\n  },\n}\nRewrites with i18n support\n\nWhen leveraging i18n support with rewrites each source and destination is automatically prefixed to handle the configured locales unless you add locale: false to the rewrite. If locale: false is used you must prefix the source and destination with a locale for it to be matched correctly.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n \n  async rewrites() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n      },\n      {\n        // it's possible to match all locales even when locale: false is set\n        source: '/:locale/api-alias/:path*',\n        destination: '/api/:path*',\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n      },\n    ]\n  },\n}\nVersion History\nVersion\tChanges\nv13.3.0\tmissing added.\nv10.2.0\thas added.\nv9.5.0\tHeaders added."
  },
  {
    "title": "next.config.js Options: output | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/output",
    "html": "output\n\nDuring a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application.\n\nThis feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package's dependencies installed to run next start. Starting with Next.js 12, you can leverage Output File Tracing in the .next/ directory to only include the necessary files.\n\nFurthermore, this removes the need for the deprecated serverless target which can cause various issues and also creates unnecessary duplication.\n\nHow it Works\n\nDuring next build, Next.js will use @vercel/nft\n to statically analyze import, require, and fs usage to determine all files that a page might load.\n\nNext.js' production server is also traced for its needed files and output at .next/next-server.js.nft.json which can be leveraged in production.\n\nTo leverage the .nft.json files emitted to the .next output directory, you can read the list of files in each trace that are relative to the .nft.json file and then copy them to your deployment location.\n\nAutomatically Copying Traced Files\n\nNext.js can automatically create a standalone folder that copies only the necessary files for a production deployment including select files in node_modules.\n\nTo leverage this automatic copying you can enable it in your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  output: 'standalone',\n}\n\nThis will create a folder at .next/standalone which can then be deployed on its own without installing node_modules.\n\nAdditionally, a minimal server.js file is also output which can be used instead of next start. This minimal server does not copy the public or .next/static folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the standalone/public and standalone/.next/static folders manually, after which server.js file will serve these automatically.\n\nGood to know:\n\nnext.config.js is read during next build and serialized into the server.js output file. If the legacy serverRuntimeConfig or publicRuntimeConfig options are being used, the values will be specific to values at build time.\nIf your project needs to listen to a specific port or hostname, you can define PORT or HOSTNAME environment variables before running server.js. For example, run PORT=8080 HOSTNAME=0.0.0.0 node server.js to start the server on http://0.0.0.0:8080.\nCaveats\nWhile tracing in monorepo setups, the project directory is used for tracing by default. For next build packages/web-app, packages/web-app would be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can set outputFileTracingRoot in your next.config.js.\npackages/web-app/next.config.js\nmodule.exports = {\n  // this includes files from the monorepo base two directories up\n  outputFileTracingRoot: path.join(__dirname, '../../'),\n}\nThere are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverage outputFileTracingExcludes and outputFileTracingIncludes respectively in next.config.js. Each config accepts an object with minimatch globs\n for the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace.\nnext.config.js\nmodule.exports = {\n  outputFileTracingExcludes: {\n    '/api/hello': ['./un-necessary-folder/**/*'],\n  },\n  outputFileTracingIncludes: {\n    '/api/another': ['./necessary-folder/**/*'],\n    '/api/login/\\\\[\\\\[\\\\.\\\\.\\\\.slug\\\\]\\\\]': [\n      './node_modules/aws-crt/dist/bin/**/*',\n    ],\n  },\n}\n\nNote: The key of outputFileTracingIncludes/outputFileTracingExcludes is a glob\n, so special characters need to be escaped.\n\nCurrently, Next.js does not do anything with the emitted .nft.json files. The files must be read by your deployment platform, for example Vercel\n, to create a minimal deployment. In a future release, a new command is planned to utilize these .nft.json files.\nExperimental turbotrace\n\nTracing dependencies can be slow because it requires very complex computations and analysis. We created turbotrace in Rust as a faster and smarter alternative to the JavaScript implementation.\n\nTo enable it, you can add the following configuration to your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbotrace: {\n      // control the log level of the turbotrace, default is `error`\n      logLevel?:\n      | 'bug'\n      | 'fatal'\n      | 'error'\n      | 'warning'\n      | 'hint'\n      | 'note'\n      | 'suggestions'\n      | 'info',\n      // control if the log of turbotrace should contain the details of the analysis, default is `false`\n      logDetail?: boolean\n      // show all log messages without limit\n      // turbotrace only show 1 log message for each categories by default\n      logAll?: boolean\n      // control the context directory of the turbotrace\n      // files outside of the context directory will not be traced\n      // set the `outputFileTracingRoot` has the same effect\n      // if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used\n      contextDirectory?: string\n      // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.\n      // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')\n      processCwd?: string\n      // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.\n      memoryLimit?: number\n    },\n  },\n}"
  },
  {
    "title": "next.config.js Options: instrumentationHook | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/instrumentationHook",
    "html": "instrumentationHook\n\nThe experimental instrumentationHook option allows you to set up instrumentation via the instrumentation file in your Next.js App.\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\nVersion\tChanges\nv13.2.0\tinstrumentationHook introduced as an experimental feature"
  },
  {
    "title": "next.config.js Options: onDemandEntries | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/onDemandEntries",
    "html": "onDemandEntries\n\nNext.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development.\n\nTo change the defaults, open next.config.js and add the onDemandEntries config:\n\nnext.config.js\nmodule.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n  },\n}"
  },
  {
    "title": "next.config.js Options: pageExtensions | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/pageExtensions",
    "html": "pageExtensions\n\nYou can extend the default Page extensions (.tsx, .ts, .jsx, .js) used by Next.js. Inside next.config.js, add the pageExtensions config:\n\nnext.config.js\nmodule.exports = {\n  pageExtensions: ['mdx', 'md', 'jsx', 'js', 'tsx', 'ts'],\n}\n\nChanging these values affects all Next.js pages, including the following:\n\nmiddleware.js\ninstrumentation.js\npages/_document.js\npages/_app.js\npages/api/\n\nFor example, if you reconfigure .ts page extensions to .page.ts, you would need to rename pages like middleware.page.ts, instrumentation.page.ts, _app.page.ts.\n\nIncluding non-page files in the pages directory\n\nYou can colocate test files or other files used by components in the pages directory. Inside next.config.js, add the pageExtensions config:\n\nnext.config.js\nmodule.exports = {\n  pageExtensions: ['page.tsx', 'page.ts', 'page.jsx', 'page.js'],\n}\n\nThen, rename your pages to have a file extension that includes .page (e.g. rename MyPage.tsx to MyPage.page.tsx). Ensure you rename all Next.js pages, including the files mentioned above."
  },
  {
    "title": "next.config.js Options: poweredByHeader | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/poweredByHeader",
    "html": "poweredByHeader\n\nBy default Next.js will add the x-powered-by header. To opt-out of it, open next.config.js and disable the poweredByHeader config:\n\nnext.config.js\nmodule.exports = {\n  poweredByHeader: false,\n}"
  },
  {
    "title": "next.config.js Options: optimizePackageImports | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/optimizePackageImports",
    "html": "optimizePackageImports\n\nSome packages can export hundreds or thousands of modules, which can cause performance issues in development and production.\n\nAdding a package to experimental.optimizePackageImports will only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports.\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    optimizePackageImports: ['package-name'],\n  },\n}\n\nThe following libraries are optimized by default:\n\nlucide-react\ndate-fns\nlodash-es\nramda\nantd\nreact-bootstrap\nahooks\n@ant-design/icons\n@headlessui/react\n@headlessui-float/react\n@heroicons/react/20/solid\n@heroicons/react/24/solid\n@heroicons/react/24/outline\n@visx/visx\n@tremor/react\nrxjs\n@mui/material\n@mui/icons-material\nrecharts\nreact-use\n@material-ui/core\n@material-ui/icons\n@tabler/icons-react\nmui-core\nreact-icons/*"
  },
  {
    "title": "next.config.js Options: reactStrictMode | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/reactStrictMode",
    "html": "reactStrictMode\n\nGood to know: Since Next.js 13.4, Strict Mode is true by default with app router, so the above configuration is only necessary for pages. You can still disable Strict Mode by setting reactStrictMode: false.\n\nSuggested: We strongly suggest you enable Strict Mode in your Next.js application to better prepare your application for the future of React.\n\nReact's Strict Mode\n is a development mode only feature for highlighting potential problems in an application. It helps to identify unsafe lifecycles, legacy API usage, and a number of other features.\n\nThe Next.js runtime is Strict Mode-compliant. To opt-in to Strict Mode, configure the following option in your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  reactStrictMode: true,\n}\n\nIf you or your team are not ready to use Strict Mode in your entire application, that's OK! You can incrementally migrate on a page-by-page basis using <React.StrictMode>."
  },
  {
    "title": "next.config.js Options: productionBrowserSourceMaps | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/productionBrowserSourceMaps",
    "html": "productionBrowserSourceMaps\n\nSource Maps are enabled by default during development. During production builds, they are disabled to prevent you leaking your source on the client, unless you specifically opt-in with the configuration flag.\n\nNext.js provides a configuration flag you can use to enable browser source map generation during the production build:\n\nnext.config.js\nmodule.exports = {\n  productionBrowserSourceMaps: true,\n}\n\nWhen the productionBrowserSourceMaps option is enabled, the source maps will be output in the same directory as the JavaScript files. Next.js will automatically serve these files when requested.\n\nAdding source maps can increase next build time\nIncreases memory usage during next build"
  },
  {
    "title": "next.config.js Options: httpAgentOptions | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/httpAgentOptions",
    "html": "httpAgentOptions\n\nIn Node.js versions prior to 18, Next.js automatically polyfills fetch() with undici and enables HTTP Keep-Alive\n by default.\n\nTo disable HTTP Keep-Alive for all fetch() calls on the server-side, open next.config.js and add the httpAgentOptions config:\n\nnext.config.js\nmodule.exports = {\n  httpAgentOptions: {\n    keepAlive: false,\n  },\n}"
  },
  {
    "title": "next.config.js Options: images | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/images",
    "html": "images\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure next.config.js with the following:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n\nThis loaderFile must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:\n\nmy/image/loader.js\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nAlternatively, you can use the loader prop to pass the function to each instance of next/image.\n\nTo learn more about configuring the behavior of the built-in Image Optimization API and the Image Component, see Image Configuration Options for available options.\n\nExample Loader Configuration\nAkamai\nAWS CloudFront\nCloudinary\nCloudflare\nContentful\nFastly\nGumlet\nImageEngine\nImgix\nPixelBin\nSanity\nSirv\nSupabase\nThumbor\nAkamai\n// Docs: https://techdocs.akamai.com/ivm/reference/test-images-on-demand\nexport default function akamaiLoader({ src, width, quality }) {\n  return `https://example.com/${src}?imwidth=${width}`\n}\nAWS CloudFront\n// Docs: https://aws.amazon.com/developer/application-security-performance/articles/image-optimization\nexport default function cloudfrontLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\nCloudinary\n// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpg\nexport default function cloudinaryLoader({ src, width, quality }) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://example.com/${params.join(',')}${src}`\n}\nCloudflare\n// Docs: https://developers.cloudflare.com/images/transform-images\nexport default function cloudflareLoader({ src, width, quality }) {\n  const params = [`width=${width}`, `quality=${quality || 75}`, 'format=auto']\n  return `https://example.com/cdn-cgi/image/${params.join(',')}/${src}`\n}\nContentful\n// Docs: https://www.contentful.com/developers/docs/references/images-api/\nexport default function contentfulLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('fm', 'webp')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\nFastly\n// Docs: https://developer.fastly.com/reference/io/\nexport default function fastlyLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('auto', 'webp')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\nGumlet\n// Docs: https://docs.gumlet.com/reference/image-transform-size\nexport default function gumletLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\nImageEngine\n// Docs: https://support.imageengine.io/hc/en-us/articles/360058880672-Directives\nexport default function imageengineLoader({ src, width, quality }) {\n  const compression = 100 - (quality || 50)\n  const params = [`w_${width}`, `cmpr_${compression}`)]\n  return `https://example.com${src}?imgeng=/${params.join('/')`\n}\nImgix\n// Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300\nexport default function imgixLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('auto', params.getAll('auto').join(',') || 'format')\n  params.set('fit', params.get('fit') || 'max')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 50).toString())\n  return url.href\n}\nPixelBin\n// Doc (Resize): https://www.pixelbin.io/docs/transformations/basic/resize/#width-w\n// Doc (Optimise): https://www.pixelbin.io/docs/optimizations/quality/#image-quality-when-delivering\n// Doc (Auto Format Delivery): https://www.pixelbin.io/docs/optimizations/format/#automatic-format-selection-with-f_auto-url-parameter\nexport default function pixelBinLoader({ src, width, quality }) {\n  const name = '<your-cloud-name>'\n  const opt = `t.resize(w:${width})~t.compress(q:${quality || 75})`\n  return `https://cdn.pixelbin.io/v2/${name}/${opt}/${src}?f_auto=true`\n}\nSanity\n// Docs: https://www.sanity.io/docs/image-urls\nexport default function sanityLoader({ src, width, quality }) {\n  const prj = 'zp7mbokg'\n  const dataset = 'production'\n  const url = new URL(`https://cdn.sanity.io/images/${prj}/${dataset}${src}`)\n  url.searchParams.set('auto', 'format')\n  url.searchParams.set('fit', 'max')\n  url.searchParams.set('w', width.toString())\n  if (quality) {\n    url.searchParams.set('q', quality.toString())\n  }\n  return url.href\n}\nSirv\n// Docs: https://sirv.com/help/articles/dynamic-imaging/\nexport default function sirvLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('format', params.getAll('format').join(',') || 'optimal')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 85).toString())\n  return url.href\n}\nSupabase\n// Docs: https://supabase.com/docs/guides/storage/image-transformations#nextjs-loader\nexport default function supabaseLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\nThumbor\n// Docs: https://thumbor.readthedocs.io/en/latest/\nexport default function thumborLoader({ src, width, quality }) {\n  const params = [`${width}x0`, `filters:quality(${quality || 75})`]\n  return `https://example.com${params.join('/')}${src}`\n}"
  },
  {
    "title": "next.config.js Options: headers | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/headers",
    "html": "headers\n\nHeaders allow you to set custom HTTP headers on the response to an incoming request on a given path.\n\nTo set custom HTTP headers you can use the headers key in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/about',\n        headers: [\n          {\n            key: 'x-custom-header',\n            value: 'my custom header value',\n          },\n          {\n            key: 'x-another-custom-header',\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n\nheaders is an async function that expects an array to be returned holding objects with source and headers properties:\n\nsource is the incoming request path pattern.\nheaders is an array of response header objects, with key and value properties.\nbasePath: false or undefined - if false the basePath won't be included when matching, can be used for external rewrites only.\nlocale: false or undefined - whether the locale should not be included when matching.\nhas is an array of has objects with the type, key and value properties.\nmissing is an array of missing objects with the type, key and value properties.\n\nHeaders are checked before the filesystem which includes pages and /public files.\n\nHeader Overriding Behavior\n\nIf two headers match the same path and set the same header key, the last header key will override the first. Using the below headers, the path /hello will result in the header x-hello being world due to the last header value set being world.\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'there',\n          },\n        ],\n      },\n      {\n        source: '/hello',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\nPath Matching\n\nPath matches are allowed, for example /blog/:slug will match /blog/hello-world (no nested paths):\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\nWildcard Path Matching\n\nTo match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug*',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug*', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug*', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\nRegex Path Matching\n\nTo match a regex path you can wrap the regex in parenthesis after a parameter, for example /blog/:slug(\\\\d{1,}) will match /blog/123 but not /blog/abc:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:post(\\\\d{1,})',\n        headers: [\n          {\n            key: 'x-post',\n            value: ':post',\n          },\n        ],\n      },\n    ]\n  },\n}\n\nThe following characters (, ), {, }, :, *, +, ? are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        headers: [\n          {\n            key: 'x-header',\n            value: 'value',\n          },\n        ],\n      },\n    ]\n  },\n}\nHeader, Cookie, and Query Matching\n\nTo only apply a header when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the header to be applied.\n\nhas and missing items can have the following fields:\n\ntype: String - must be either header, cookie, host, or query.\nkey: String - the key from the selected type to match against.\nvalue: String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName.\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      // if the header `x-add-header` is present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-add-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the header `x-no-header` is not present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-no-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the source, query, and cookie are matched,\n      // the `x-authorized` header will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // header key/values since value is provided and\n            // doesn't use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-authorized',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, the `x-another-header` will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the host is `example.com`,\n      // this header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n    ]\n  },\n}\nHeaders with basePath support\n\nWhen leveraging basePath support with headers each source is automatically prefixed with the basePath unless you add basePath: false to the header:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n \n  async headers() {\n    return [\n      {\n        source: '/with-basePath', // becomes /docs/with-basePath\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        source: '/without-basePath', // is not modified since basePath: false is set\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n        basePath: false,\n      },\n    ]\n  },\n}\nHeaders with i18n support\n\nWhen leveraging i18n support with headers each source is automatically prefixed to handle the configured locales unless you add locale: false to the header. If locale: false is used you must prefix the source with a locale for it to be matched correctly.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n \n  async headers() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\nCache-Control\n\nNext.js sets the Cache-Control header of public, max-age=31536000, immutable for truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example, Static Image Imports. You cannot set Cache-Control headers in next.config.js for these assets.\n\nHowever, you can set Cache-Control headers for other responses or data.\n\nIf you need to revalidate the cache of a page that has been statically generated, you can do so by setting the revalidate prop in the page's getStaticProps function.\n\nTo cache the response from an API Route, you can use res.setHeader:\n\npages/api/hello.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \ntype ResponseData = {\n  message: string\n}\n \nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.setHeader('Cache-Control', 's-maxage=86400')\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n\nYou can also use caching headers (Cache-Control) inside getServerSideProps to cache dynamic responses. For example, using stale-while-revalidate\n.\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next'\n \n// This value is considered fresh for ten seconds (s-maxage=10).\n// If a request is repeated within the next 10 seconds, the previously\n// cached value will still be fresh. If the request is repeated before 59 seconds,\n// the cached value will be stale but still render (stale-while-revalidate=59).\n//\n// In the background, a revalidation request will be made to populate the cache\n// with a fresh value. If you refresh the page, you will see the new value.\nexport const getServerSideProps = (async (context) => {\n  context.res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=10, stale-while-revalidate=59'\n  )\n \n  return {\n    props: {},\n  }\n}) satisfies GetServerSideProps\nOptions\nCORS\n\nCross-Origin Resource Sharing (CORS)\n is a security feature that allows you to control which sites can access your resources. You can set the Access-Control-Allow-Origin header to allow a specific origin to access your API Endpoints.\n\nasync headers() {\n    return [\n      {\n        source: \"/api/:path*\",\n        headers: [\n          {\n            key: \"Access-Control-Allow-Origin\",\n            value: \"*\", // Set your origin\n          },\n          {\n            key: \"Access-Control-Allow-Methods\",\n            value: \"GET, POST, PUT, DELETE, OPTIONS\",\n          },\n          {\n            key: \"Access-Control-Allow-Headers\",\n            value: \"Content-Type, Authorization\",\n          },\n        ],\n      },\n    ];\n  },\nX-DNS-Prefetch-Control\n\nThis header\n controls DNS prefetching, allowing browsers to proactively perform domain name resolution on external links, images, CSS, JavaScript, and more. This prefetching is performed in the background, so the DNS\n is more likely to be resolved by the time the referenced items are needed. This reduces latency when the user clicks a link.\n\n{\n  key: 'X-DNS-Prefetch-Control',\n  value: 'on'\n}\nStrict-Transport-Security\n\nThis header\n informs browsers it should only be accessed using HTTPS, instead of using HTTP. Using the configuration below, all present and future subdomains will use HTTPS for a max-age of 2 years. This blocks access to pages or subdomains that can only be served over HTTP.\n\nIf you're deploying to Vercel\n, this header is not necessary as it's automatically added to all deployments unless you declare headers in your next.config.js.\n\n{\n  key: 'Strict-Transport-Security',\n  value: 'max-age=63072000; includeSubDomains; preload'\n}\nX-Frame-Options\n\nThis header\n indicates whether the site should be allowed to be displayed within an iframe. This can prevent against clickjacking attacks.\n\nThis header has been superseded by CSP's frame-ancestors option, which has better support in modern browsers (see Content Security Policy for configuration details).\n\n{\n  key: 'X-Frame-Options',\n  value: 'SAMEORIGIN'\n}\nPermissions-Policy\n\nThis header\n allows you to control which features and APIs can be used in the browser. It was previously named Feature-Policy.\n\n{\n  key: 'Permissions-Policy',\n  value: 'camera=(), microphone=(), geolocation=(), browsing-topics=()'\n}\nX-Content-Type-Options\n\nThis header\n prevents the browser from attempting to guess the type of content if the Content-Type header is not explicitly set. This can prevent XSS exploits for websites that allow users to upload and share files.\n\nFor example, a user trying to download an image, but having it treated as a different Content-Type like an executable, which could be malicious. This header also applies to downloading browser extensions. The only valid value for this header is nosniff.\n\n{\n  key: 'X-Content-Type-Options',\n  value: 'nosniff'\n}\nReferrer-Policy\n\nThis header\n controls how much information the browser includes when navigating from the current website (origin) to another.\n\n{\n  key: 'Referrer-Policy',\n  value: 'origin-when-cross-origin'\n}\nContent-Security-Policy\n\nLearn more about adding a Content Security Policy to your application.\n\nVersion History\nVersion\tChanges\nv13.3.0\tmissing added.\nv10.2.0\thas added.\nv9.5.0\tHeaders added."
  },
  {
    "title": "next.config.js Options: generateBuildId | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/generateBuildId",
    "html": "generateBuildId\n\nNext.js generates an ID during next build to identify which version of your application is being served. The same build should be used and boot up multiple containers.\n\nIf you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the generateBuildId command in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}"
  },
  {
    "title": "next.config.js Options: generateEtags | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/generateEtags",
    "html": "generateEtags\n\nNext.js will generate etags\n for every page by default. You may want to disable etag generation for HTML pages depending on your cache strategy.\n\nOpen next.config.js and disable the generateEtags option:\n\nnext.config.js\nmodule.exports = {\n  generateEtags: false,\n}"
  },
  {
    "title": "next.config.js Options: exportPathMap | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/exportPathMap",
    "html": "exportPathMap\n\nThis feature is exclusive to next export and currently deprecated in favor of getStaticPaths with pages or generateStaticParams with app.\n\nExamples\n\nexportPathMap allows you to specify a mapping of request paths to page destinations, to be used during export. Paths defined in exportPathMap will also be available when using next dev.\n\nLet's start with an example, to create a custom exportPathMap for an app with the following pages:\n\npages/index.js\npages/about.js\npages/post.js\n\nOpen next.config.js and add the following exportPathMap config:\n\nnext.config.js\nmodule.exports = {\n  exportPathMap: async function (\n    defaultPathMap,\n    { dev, dir, outDir, distDir, buildId }\n  ) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },\n    }\n  },\n}\n\nGood to know: the query field in exportPathMap cannot be used with automatically statically optimized pages or getStaticProps pages as they are rendered to HTML files at build-time and additional query information cannot be provided during next export.\n\nThe pages will then be exported as HTML files, for example, /about will become /about.html.\n\nexportPathMap is an async function that receives 2 arguments: the first one is defaultPathMap, which is the default map used by Next.js. The second argument is an object with:\n\ndev - true when exportPathMap is being called in development. false when running next export. In development exportPathMap is used to define routes.\ndir - Absolute path to the project directory\noutDir - Absolute path to the out/ directory (configurable with -o). When dev is true the value of outDir will be null.\ndistDir - Absolute path to the .next/ directory (configurable with the distDir config)\nbuildId - The generated build id\n\nThe returned object is a map of pages where the key is the pathname and the value is an object that accepts the following fields:\n\npage: String - the page inside the pages directory to render\nquery: Object - the query object passed to getInitialProps when prerendering. Defaults to {}\n\nThe exported pathname can also be a filename (for example, /readme.md), but you may need to set the Content-Type header to text/html when serving its content if it is different than .html.\n\nAdding a trailing slash\n\nIt is possible to configure Next.js to export pages as index.html files and require trailing slashes, /about becomes /about/index.html and is routable via /about/. This was the default behavior prior to Next.js 9.\n\nTo switch back and add a trailing slash, open next.config.js and enable the trailingSlash config:\n\nnext.config.js\nmodule.exports = {\n  trailingSlash: true,\n}\nCustomizing the output directory\n\nnext export will use out as the default output directory, you can customize this using the -o argument, like so:\n\nTerminal\nnext export -o outdir\n\nWarning: Using exportPathMap is deprecated and is overridden by getStaticPaths inside pages. We don't recommend using them together."
  },
  {
    "title": "next.config.js Options: eslint | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/eslint",
    "html": "eslint\n\nWhen ESLint is detected in your project, Next.js fails your production build (next build) when errors are present.\n\nIf you'd like Next.js to produce production code even when your application has ESLint errors, you can disable the built-in linting step completely. This is not recommended unless you already have ESLint configured to run in a separate part of your workflow (for example, in CI or a pre-commit hook).\n\nOpen next.config.js and enable the ignoreDuringBuilds option in the eslint config:\n\nnext.config.js\nmodule.exports = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}"
  },
  {
    "title": "next.config.js Options: env | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/env",
    "html": "env\n\nSince the release of Next.js 9.4\n we now have a more intuitive and ergonomic experience for adding environment variables. Give it a try!\n\nGood to know: environment variables specified in this way will always be included in the JavaScript bundle, prefixing the environment variable name with NEXT_PUBLIC_ only has an effect when specifying them through the environment or .env files.\n\nTo add environment variables to the JavaScript bundle, open next.config.js and add the env config:\n\nnext.config.js\nmodule.exports = {\n  env: {\n    customKey: 'my-value',\n  },\n}\n\nNow you can access process.env.customKey in your code. For example:\n\nfunction Page() {\n  return <h1>The value of customKey is: {process.env.customKey}</h1>\n}\n \nexport default Page\n\nNext.js will replace process.env.customKey with 'my-value' at build time. Trying to destructure process.env variables won't work due to the nature of webpack DefinePlugin\n.\n\nFor example, the following line:\n\nreturn <h1>The value of customKey is: {process.env.customKey}</h1>\n\nWill end up being:\n\nreturn <h1>The value of customKey is: {'my-value'}</h1>"
  },
  {
    "title": "next.config.js Options: distDir | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/distDir",
    "html": "distDir\n\nYou can specify a name to use for a custom build directory to use instead of .next.\n\nOpen next.config.js and add the distDir config:\n\nnext.config.js\nmodule.exports = {\n  distDir: 'build',\n}\n\nNow if you run next build Next.js will use build instead of the default .next folder.\n\ndistDir should not leave your project directory. For example, ../build is an invalid directory."
  },
  {
    "title": "next.config.js Options: devIndicators | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/devIndicators",
    "html": "devIndicators\n\nGood to know: This indicator was removed in Next.js version 10.0.1. We recommend upgrading to the latest version of Next.js.\n\nWhen a page qualifies for Automatic Static Optimization we show an indicator to let you know.\n\nThis is helpful since automatic static optimization can be very beneficial and knowing immediately in development if the page qualifies can be useful.\n\nIn some cases this indicator might not be useful, like when working on electron applications. To remove it open next.config.js and disable the autoPrerender config in devIndicators:\n\nnext.config.js\nmodule.exports = {\n  devIndicators: {\n    autoPrerender: false,\n  },\n}"
  },
  {
    "title": "next.config.js Options: compress | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/compress",
    "html": "compress\n\nBy default, Next.js uses gzip to compress rendered content and static files when using next start or a custom server. This is an optimization for applications that do not have compression configured. If compression is already configured in your application via a custom server, Next.js will not add compression.\n\nGood to know:\n\nWhen hosting your application on Vercel\n, compression uses brotli first, then gzip.\nYou can check if compression is enabled and which algorithm is used by looking at the Accept-Encoding\n (browser accepted options) and Content-Encoding\n (currently used) headers in the response.\nDisabling compression\n\nTo disable compression, set the compress config option to false:\n\nnext.config.js\nmodule.exports = {\n  compress: false,\n}\n\nWe do not recommend disabling compression unless you have compression configured on your server, as compression reduces bandwidth usage and improves the performance of your application.\n\nChanging the compression algorithm\n\nTo change your compression algorithm, you will need to configure your custom server and set the compress option to false in your next.config.js file.\n\nFor example, you're using nginx\n and want to switch to brotli, set the compress option to false to allow nginx to handle compression.\n\nGood to know:\n\nFor Next.js applications on Vercel, compression is handled by the Vercel's Edge Network and not Next.js. See the Vercel documentation\n for more information."
  },
  {
    "title": "next.config.js Options: crossOrigin | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/crossOrigin",
    "html": "crossOrigin\n\nUse the crossOrigin option to add a crossOrigin attribute\n in all <script> tags generated by the next/script and next/headcomponents, and define how cross-origin requests should be handled.\n\nnext.config.js\nmodule.exports = {\n  crossOrigin: 'anonymous',\n}\nOptions\n'anonymous': Adds crossOrigin=\"anonymous\"\n attribute.\n'use-credentials': Adds crossOrigin=\"use-credentials\"\n."
  },
  {
    "title": "next.config.js Options: bundlePagesRouterDependencies | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/bundlePagesRouterDependencies",
    "html": "bundlePagesRouterDependencies\n\nEnable automatic server-side dependency bundling for Pages Router applications. Matches the automatic dependency bundling in App Router.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  bundlePagesRouterDependencies: true,\n}\n \nmodule.exports = nextConfig\n\nExplicitly opt-out certain packages from being bundled using the serverExternalPackages option.\n\nVersion History\nVersion\tChanges\nv15.0.0\tMoved from experimental to stable. Renamed from bundlePagesExternals to bundlePagesRouterDependencies"
  },
  {
    "title": "next.config.js Options: basePath | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/basePath",
    "html": "basePath\n\nTo deploy a Next.js application under a sub-path of a domain you can use the basePath config option.\n\nbasePath allows you to set a path prefix for the application. For example, to use /docs instead of '' (an empty string, the default), open next.config.js and add the basePath config:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n}\n\nGood to know: This value must be set at build time and cannot be changed without re-building as the value is inlined in the client-side bundles.\n\nLinks\n\nWhen linking to other pages using next/link and next/router the basePath will be automatically applied.\n\nFor example, using /about will automatically become /docs/about when basePath is set to /docs.\n\nexport default function HomePage() {\n  return (\n    <>\n      <Link href=\"/about\">About Page</Link>\n    </>\n  )\n}\n\nOutput html:\n\n<a href=\"/docs/about\">About Page</a>\n\nThis makes sure that you don't have to change all links in your application when changing the basePath value.\n\nImages\n\nWhen using the next/image component, you will need to add the basePath in front of src.\n\nFor example, using /docs/me.png will properly serve your image when basePath is set to /docs.\n\nimport Image from 'next/image'\n \nfunction Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/docs/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n \nexport default Home"
  },
  {
    "title": "next.config.js Options: assetPrefix | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js/assetPrefix",
    "html": "assetPrefix\n\nAttention: Deploying to Vercel automatically configures a global CDN for your Next.js project. You do not need to manually setup an Asset Prefix.\n\nGood to know: Next.js 9.5+ added support for a customizable Base Path, which is better suited for hosting your application on a sub-path like /docs. We do not suggest you use a custom Asset Prefix for this use case.\n\nSet up a CDN\n\nTo set up a CDN\n, you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n\nOpen next.config.mjs and add the assetPrefix config based on the phase:\n\nnext.config.mjs\n// @ts-check\nimport { PHASE_DEVELOPMENT_SERVER } from 'next/constants'\n \nexport default (phase) => {\n  const isDev = phase === PHASE_DEVELOPMENT_SERVER\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    assetPrefix: isDev ? undefined : 'https://cdn.mydomain.com',\n  }\n  return nextConfig\n}\n\nNext.js will automatically use your asset prefix for the JavaScript and CSS files it loads from the /_next/ path (.next/static/ folder). For example, with the above configuration, the following request for a JS chunk:\n\n/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js\n\n\nWould instead become:\n\nhttps://cdn.mydomain.com/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js\n\n\nThe exact configuration for uploading your files to a given CDN will depend on your CDN of choice. The only folder you need to host on your CDN is the contents of .next/static/, which should be uploaded as _next/static/ as the above URL request indicates. Do not upload the rest of your .next/ folder, as you should not expose your server code and other configuration to the public.\n\nWhile assetPrefix covers requests to _next/static, it does not influence the following paths:\n\nFiles in the public folder; if you want to serve those assets over a CDN, you'll have to introduce the prefix yourself\n/_next/data/ requests for getServerSideProps pages. These requests will always be made against the main domain since they're not static.\n/_next/data/ requests for getStaticProps pages. These requests will always be made against the main domain to support Incremental Static Generation, even if you're not using it (for consistency)."
  },
  {
    "title": "API Reference: next.config.js Options | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/next-config-js",
    "html": "next.config.js Options\n\nNext.js can be configured through a next.config.js file in the root of your project directory (for example, by package.json) with a default export.\n\nnext.config.js\n// @ts-check\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n \nmodule.exports = nextConfig\nECMAScript Modules\n\nnext.config.js is a regular Node.js module, not a JSON file. It gets used by the Next.js server and build phases, and it's not included in the browser build.\n\nIf you need ECMAScript modules\n, you can use next.config.mjs:\n\nnext.config.mjs\n// @ts-check\n \n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  /* config options here */\n}\n \nexport default nextConfig\nConfiguration as a Function\n\nYou can also use a function:\n\nnext.config.mjs\n// @ts-check\n \nexport default (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\nAsync Configuration\n\nSince Next.js 12.1.0, you can use an async function:\n\nnext.config.js\n// @ts-check\n \nmodule.exports = async (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\nPhase\n\nphase is the current context in which the configuration is loaded. You can see the available phases\n. Phases can be imported from next/constants:\n\nnext.config.js\n// @ts-check\n \nconst { PHASE_DEVELOPMENT_SERVER } = require('next/constants')\n \nmodule.exports = (phase, { defaultConfig }) => {\n  if (phase === PHASE_DEVELOPMENT_SERVER) {\n    return {\n      /* development only config options here */\n    }\n  }\n \n  return {\n    /* config options for all phases except development here */\n  }\n}\nTypeScript\n\nThis feature is available from Next.js canary.\n\nIf you are using TypeScript in your project, you can use next.config.ts to use TypeScript in your configuration:\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n \nexport default nextConfig\n\nThe commented lines are the place where you can put the configs allowed by next.config.js, which are defined in this file\n.\n\nHowever, none of the configs are required, and it's not necessary to understand what each config does. Instead, search for the features you need to enable or modify in this section and they will show you what to do.\n\nAvoid using new JavaScript features not available in your target Node.js version. next.config.js will not be parsed by Webpack or Babel.\n\nThis page documents all the available configuration options:"
  },
  {
    "title": "Functions: userAgent | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/userAgent",
    "html": "userAgent\n\nThe userAgent helper extends the Web Request API\n with additional properties and methods to interact with the user agent object from the request.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\nisBot\n\nA boolean indicating whether the request comes from a known bot.\n\nbrowser\n\nAn object containing information about the browser used in the request.\n\nname: A string representing the browser's name, or undefined if not identifiable.\nversion: A string representing the browser's version, or undefined.\ndevice\n\nAn object containing information about the device used in the request.\n\nmodel: A string representing the model of the device, or undefined.\ntype: A string representing the type of the device, such as console, mobile, tablet, smarttv, wearable, embedded, or undefined.\nvendor: A string representing the vendor of the device, or undefined.\nengine\n\nAn object containing information about the browser's engine.\n\nname: A string representing the engine's name. Possible values include: Amaya, Blink, EdgeHTML, Flow, Gecko, Goanna, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, Trident, w3m, WebKit or undefined.\nversion: A string representing the engine's version, or undefined.\nos\n\nAn object containing information about the operating system.\n\nname: A string representing the name of the OS, or undefined.\nversion: A string representing the version of the OS, or undefined.\ncpu\n\nAn object containing information about the CPU architecture.\n\narchitecture: A string representing the architecture of the CPU. Possible values include: 68k, amd64, arm, arm64, armhf, avr, ia32, ia64, irix, irix64, mips, mips64, pa-risc, ppc, sparc, sparc64 or undefined"
  },
  {
    "title": "Functions: useRouter | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router",
    "html": "useRouter\n\nIf you want to access the router object inside any function component in your app, you can use the useRouter hook, take a look at the following example:\n\nimport { useRouter } from 'next/router'\n \nfunction ActiveLink({ children, href }) {\n  const router = useRouter()\n  const style = {\n    marginRight: 10,\n    color: router.asPath === href ? 'red' : 'black',\n  }\n \n  const handleClick = (e) => {\n    e.preventDefault()\n    router.push(href)\n  }\n \n  return (\n    <a href={href} onClick={handleClick} style={style}>\n      {children}\n    </a>\n  )\n}\n \nexport default ActiveLink\n\nuseRouter is a React Hook\n, meaning it cannot be used with classes. You can either use withRouter or wrap your class in a function component.\n\nrouter object\n\nThe following is the definition of the router object returned by both useRouter and withRouter:\n\npathname: String - The path for current route file that comes after /pages. Therefore, basePath, locale and trailing slash (trailingSlash: true) are not included.\nquery: Object - The query string parsed to an object, including dynamic route parameters. It will be an empty object during prerendering if the page doesn't use Server-side Rendering. Defaults to {}\nasPath: String - The path as shown in the browser including the search params and respecting the trailingSlash configuration. basePath and locale are not included.\nisFallback: boolean - Whether the current page is in fallback mode.\nbasePath: String - The active basePath (if enabled).\nlocale: String - The active locale (if enabled).\nlocales: String[] - All supported locales (if enabled).\ndefaultLocale: String - The current default locale (if enabled).\ndomainLocales: Array<{domain, defaultLocale, locales}> - Any configured domain locales.\nisReady: boolean - Whether the router fields are updated client-side and ready for use. Should only be used inside of useEffect methods and not for conditionally rendering on the server. See related docs for use case with automatically statically optimized pages\nisPreview: boolean - Whether the application is currently in preview mode.\n\nUsing the asPath field may lead to a mismatch between client and server if the page is rendered using server-side rendering or automatic static optimization. Avoid using asPath until the isReady field is true.\n\nThe following methods are included inside router:\n\nrouter.push\n\nHandles client-side transitions, this method is useful for cases where next/link is not enough.\n\nrouter.push(url, as, options)\nurl: UrlObject | String - The URL to navigate to (see Node.JS URL module documentation\n for UrlObject properties).\nas: UrlObject | String - Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes.\noptions - Optional object with the following configuration options:\nscroll - Optional boolean, controls scrolling to the top of the page after navigation. Defaults to true\nshallow: Update the path of the current page without rerunning getStaticProps, getServerSideProps or getInitialProps. Defaults to false\nlocale - Optional string, indicates locale of the new page\n\nYou don't need to use router.push for external URLs. window.location\n is better suited for those cases.\n\nNavigating to pages/about.js, which is a predefined route:\n\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/about')}>\n      Click me\n    </button>\n  )\n}\n\nNavigating pages/post/[pid].js, which is a dynamic route:\n\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/post/abc')}>\n      Click me\n    </button>\n  )\n}\n\nRedirecting the user to pages/login.js, useful for pages behind authentication:\n\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \n// Here you would fetch and return the user\nconst useUser = () => ({ user: null, loading: false })\n \nexport default function Page() {\n  const { user, loading } = useUser()\n  const router = useRouter()\n \n  useEffect(() => {\n    if (!(user || loading)) {\n      router.push('/login')\n    }\n  }, [user, loading])\n \n  return <p>Redirecting...</p>\n}\nResetting state after navigation\n\nWhen navigating to the same page in Next.js, the page's state will not be reset by default as React does not unmount unless the parent component has changed.\n\npages/[slug].js\nimport Link from 'next/link'\nimport { useState } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function Page(props) {\n  const router = useRouter()\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <h1>Page: {router.query.slug}</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase count</button>\n      <Link href=\"/one\">one</Link> <Link href=\"/two\">two</Link>\n    </div>\n  )\n}\n\nIn the above example, navigating between /one and /two will not reset the count . The useState is maintained between renders because the top-level React component, Page, is the same.\n\nIf you do not want this behavior, you have a couple of options:\n\nManually ensure each state is updated using useEffect. In the above example, that could look like:\n\nuseEffect(() => {\n  setCount(0)\n}, [router.query.slug])\n\nUse a React key to tell React to remount the component\n. To do this for all pages, you can use a custom app:\n\npages/_app.js\nimport { useRouter } from 'next/router'\n \nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n  return <Component key={router.asPath} {...pageProps} />\n}\nWith URL object\n\nYou can use a URL object in the same way you can use it for next/link. Works for both the url and as parameters:\n\nimport { useRouter } from 'next/router'\n \nexport default function ReadMore({ post }) {\n  const router = useRouter()\n \n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        router.push({\n          pathname: '/post/[pid]',\n          query: { pid: post.id },\n        })\n      }}\n    >\n      Click here to read more\n    </button>\n  )\n}\nrouter.replace\n\nSimilar to the replace prop in next/link, router.replace will prevent adding a new URL entry into the history stack.\n\nrouter.replace(url, as, options)\nThe API for router.replace is exactly the same as the API for router.push.\n\nTake a look at the following example:\n\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.replace('/home')}>\n      Click me\n    </button>\n  )\n}\nrouter.prefetch\n\nPrefetch pages for faster client-side transitions. This method is only useful for navigations without next/link, as next/link takes care of prefetching pages automatically.\n\nThis is a production only feature. Next.js doesn't prefetch pages in development.\n\nrouter.prefetch(url, as, options)\nurl - The URL to prefetch, including explicit routes (e.g. /dashboard) and dynamic routes (e.g. /product/[id])\nas - Optional decorator for url. Before Next.js 9.5.3 this was used to prefetch dynamic routes.\noptions - Optional object with the following allowed fields:\nlocale - allows providing a different locale from the active one. If false, url has to include the locale as the active locale won't be used.\n\nLet's say you have a login page, and after a login, you redirect the user to the dashboard. For that case, we can prefetch the dashboard to make a faster transition, like in the following example:\n\nimport { useCallback, useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function Login() {\n  const router = useRouter()\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault()\n \n    fetch('/api/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        /* Form data */\n      }),\n    }).then((res) => {\n      // Do a fast client-side transition to the already prefetched dashboard page\n      if (res.ok) router.push('/dashboard')\n    })\n  }, [])\n \n  useEffect(() => {\n    // Prefetch the dashboard page\n    router.prefetch('/dashboard')\n  }, [router])\n \n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields */}\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\nrouter.beforePopState\n\nIn some cases (for example, if using a Custom Server), you may wish to listen to popstate\n and do something before the router acts on it.\n\nrouter.beforePopState(cb)\ncb - The function to run on incoming popstate events. The function receives the state of the event as an object with the following props:\nurl: String - the route for the new state. This is usually the name of a page\nas: String - the url that will be shown in the browser\noptions: Object - Additional options sent by router.push\n\nIf cb returns false, the Next.js router will not handle popstate, and you'll be responsible for handling it in that case. See Disabling file-system routing.\n\nYou could use beforePopState to manipulate the request, or force a SSR refresh, as in the following example:\n\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  useEffect(() => {\n    router.beforePopState(({ url, as, options }) => {\n      // I only want to allow these two routes!\n      if (as !== '/' && as !== '/other') {\n        // Have SSR render bad routes as a 404.\n        window.location.href = as\n        return false\n      }\n \n      return true\n    })\n  }, [router])\n \n  return <p>Welcome to the page</p>\n}\nrouter.back\n\nNavigate back in history. Equivalent to clicking the browser’s back button. It executes window.history.back().\n\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.back()}>\n      Click here to go back\n    </button>\n  )\n}\nrouter.reload\n\nReload the current URL. Equivalent to clicking the browser’s refresh button. It executes window.location.reload().\n\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.reload()}>\n      Click here to reload\n    </button>\n  )\n}\nrouter.events\n\nYou can listen to different events happening inside the Next.js Router. Here's a list of supported events:\n\nrouteChangeStart(url, { shallow }) - Fires when a route starts to change\nrouteChangeComplete(url, { shallow }) - Fires when a route changed completely\nrouteChangeError(err, url, { shallow }) - Fires when there's an error when changing routes, or a route load is cancelled\nerr.cancelled - Indicates if the navigation was cancelled\nbeforeHistoryChange(url, { shallow }) - Fires before changing the browser's history\nhashChangeStart(url, { shallow }) - Fires when the hash will change but not the page\nhashChangeComplete(url, { shallow }) - Fires when the hash has changed but not the page\n\nGood to know: Here url is the URL shown in the browser, including the basePath.\n\nFor example, to listen to the router event routeChangeStart, open or create pages/_app.js and subscribe to the event, like so:\n\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n \n  useEffect(() => {\n    const handleRouteChange = (url, { shallow }) => {\n      console.log(\n        `App is changing to ${url} ${\n          shallow ? 'with' : 'without'\n        } shallow routing`\n      )\n    }\n \n    router.events.on('routeChangeStart', handleRouteChange)\n \n    // If the component is unmounted, unsubscribe\n    // from the event with the `off` method:\n    return () => {\n      router.events.off('routeChangeStart', handleRouteChange)\n    }\n  }, [router])\n \n  return <Component {...pageProps} />\n}\n\nWe use a Custom App (pages/_app.js) for this example to subscribe to the event because it's not unmounted on page navigations, but you can subscribe to router events on any component in your application.\n\nRouter events should be registered when a component mounts (useEffect\n or componentDidMount\n / componentWillUnmount\n) or imperatively when an event happens.\n\nIf a route load is cancelled (for example, by clicking two links rapidly in succession), routeChangeError will fire. And the passed err will contain a cancelled property set to true, as in the following example:\n\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n \n  useEffect(() => {\n    const handleRouteChangeError = (err, url) => {\n      if (err.cancelled) {\n        console.log(`Route to ${url} was cancelled!`)\n      }\n    }\n \n    router.events.on('routeChangeError', handleRouteChangeError)\n \n    // If the component is unmounted, unsubscribe\n    // from the event with the `off` method:\n    return () => {\n      router.events.off('routeChangeError', handleRouteChangeError)\n    }\n  }, [router])\n \n  return <Component {...pageProps} />\n}\nPotential ESLint errors\n\nCertain methods accessible on the router object return a Promise. If you have the ESLint rule, no-floating-promises\n enabled, consider disabling it either globally, or for the affected line.\n\nIf your application needs this rule, you should either void the promise – or use an async function, await the Promise, then void the function call. This is not applicable when the method is called from inside an onClick handler.\n\nThe affected methods are:\n\nrouter.push\nrouter.replace\nrouter.prefetch\nPotential solutions\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \n// Here you would fetch and return the user\nconst useUser = () => ({ user: null, loading: false })\n \nexport default function Page() {\n  const { user, loading } = useUser()\n  const router = useRouter()\n \n  useEffect(() => {\n    // disable the linting on the next line - This is the cleanest solution\n    // eslint-disable-next-line no-floating-promises\n    router.push('/login')\n \n    // void the Promise returned by router.push\n    if (!(user || loading)) {\n      void router.push('/login')\n    }\n    // or use an async function, await the Promise, then void the function call\n    async function handleRouteChange() {\n      if (!(user || loading)) {\n        await router.push('/login')\n      }\n    }\n    void handleRouteChange()\n  }, [user, loading])\n \n  return <p>Redirecting...</p>\n}\nwithRouter\n\nIf useRouter is not the best fit for you, withRouter can also add the same router object to any component.\n\nUsage\nimport { withRouter } from 'next/router'\n \nfunction Page({ router }) {\n  return <p>{router.pathname}</p>\n}\n \nexport default withRouter(Page)\nTypeScript\n\nTo use class components with withRouter, the component needs to accept a router prop:\n\nimport React from 'react'\nimport { withRouter, NextRouter } from 'next/router'\n \ninterface WithRouterProps {\n  router: NextRouter\n}\n \ninterface MyComponentProps extends WithRouterProps {}\n \nclass MyComponent extends React.Component<MyComponentProps> {\n  render() {\n    return <p>{this.props.router.pathname}</p>\n  }\n}\n \nexport default withRouter(MyComponent)"
  },
  {
    "title": "Functions: useReportWebVitals | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-report-web-vitals",
    "html": "useReportWebVitals\n\nThe useReportWebVitals hook allows you to report Core Web Vitals\n, and can be used in combination with your analytics service.\n\npages/_app.js\nimport { useReportWebVitals } from 'next/web-vitals'\n \nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n \n  return <Component {...pageProps} />\n}\nuseReportWebVitals\n\nThe metric object passed as the hook's argument consists of a number of properties:\n\nid: Unique identifier for the metric in the context of the current page load\nname: The name of the performance metric. Possible values include names of Web Vitals metrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.\ndelta: The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.\nentries: An array of Performance Entries\n associated with the metric. These entries provide detailed information about the performance events related to the metric.\nnavigationType: Indicates the type of navigation\n that triggered the metric collection. Possible values include \"navigate\", \"reload\", \"back_forward\", and \"prerender\".\nrating: A qualitative rating of the metric value, providing an assessment of the performance. Possible values are \"good\", \"needs-improvement\", and \"poor\". The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.\nvalue: The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from various Performance API\ns.\nWeb Vitals\n\nWeb Vitals\n are a set of useful metrics that aim to capture the user experience of a web page. The following web vitals are all included:\n\nTime to First Byte\n (TTFB)\nFirst Contentful Paint\n (FCP)\nLargest Contentful Paint\n (LCP)\nFirst Input Delay\n (FID)\nCumulative Layout Shift\n (CLS)\nInteraction to Next Paint\n (INP)\n\nYou can handle all the results of these metrics using the name property.\n\npages/_app.js\nimport { useReportWebVitals } from 'next/web-vitals'\n \nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n \n  return <Component {...pageProps} />\n}\nCustom Metrics\n\nIn addition to the core metrics listed above, there are some additional custom metrics that measure the time it takes for the page to hydrate and render:\n\nNext.js-hydration: Length of time it takes for the page to start and finish hydrating (in ms)\nNext.js-route-change-to-render: Length of time it takes for a page to start rendering after a route change (in ms)\nNext.js-render: Length of time it takes for a page to finish render after a route change (in ms)\n\nYou can handle all the results of these metrics separately:\n\npages/_app.js\nimport { useReportWebVitals } from 'next/web-vitals'\n \nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'Next.js-hydration':\n        // handle hydration results\n        break\n      case 'Next.js-route-change-to-render':\n        // handle route-change to render results\n        break\n      case 'Next.js-render':\n        // handle render results\n        break\n      default:\n        break\n    }\n  })\n \n  return <Component {...pageProps} />\n}\n\nThese metrics work in all browsers that support the User Timing API\n.\n\nUsage on Vercel\n\nVercel Speed Insights\n does not useReportWebVitals, but @vercel/speed-insights package instead. useReportWebVitals hook is useful in local development, or if you're using a different service for collecting Web Vitals.\n\nSending results to external systems\n\nYou can send results to any endpoint to measure and track real user performance on your site. For example:\n\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n \n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n\nGood to know: If you use Google Analytics\n, using the id value can allow you to construct metric distributions manually (to calculate percentiles, etc.)\n\nuseReportWebVitals(metric => {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n  window.gtag('event', metric.name, {\n    value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value), // values must be integers\n    event_label: metric.id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  });\n}\n\nRead more about sending results to Google Analytics\n."
  },
  {
    "title": "Functions: useAmp | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-amp",
    "html": "useAmp\nExamples\n\nAMP support is one of our advanced features, you can read more about AMP here.\n\nTo enable AMP, add the following config to your page:\n\npages/index.js\nexport const config = { amp: true }\n\nThe amp config accepts the following values:\n\ntrue - The page will be AMP-only\n'hybrid' - The page will have two versions, one with AMP and another one with HTML\n\nTo learn more about the amp config, read the sections below.\n\nAMP First Page\n\nTake a look at the following example:\n\npages/about.js\nexport const config = { amp: true }\n \nfunction About(props) {\n  return <h3>My AMP About Page!</h3>\n}\n \nexport default About\n\nThe page above is an AMP-only page, which means:\n\nThe page has no Next.js or React client-side runtime\nThe page is automatically optimized with AMP Optimizer\n, an optimizer that applies the same transformations as AMP caches (improves performance by up to 42%)\nThe page has a user-accessible (optimized) version of the page and a search-engine indexable (unoptimized) version of the page\nHybrid AMP Page\n\nTake a look at the following example:\n\npages/about.js\nimport { useAmp } from 'next/amp'\n \nexport const config = { amp: 'hybrid' }\n \nfunction About(props) {\n  const isAmp = useAmp()\n \n  return (\n    <div>\n      <h3>My AMP About Page!</h3>\n      {isAmp ? (\n        <amp-img\n          width=\"300\"\n          height=\"300\"\n          src=\"/my-img.jpg\"\n          alt=\"a cool image\"\n          layout=\"responsive\"\n        />\n      ) : (\n        <img width=\"300\" height=\"300\" src=\"/my-img.jpg\" alt=\"a cool image\" />\n      )}\n    </div>\n  )\n}\n \nexport default About\n\nThe page above is a hybrid AMP page, which means:\n\nThe page is rendered as traditional HTML (default) and AMP HTML (by adding ?amp=1 to the URL)\nThe AMP version of the page only has valid optimizations applied with AMP Optimizer so that it is indexable by search-engines\n\nThe page uses useAmp to differentiate between modes, it's a React Hook\n that returns true if the page is using AMP, and false otherwise."
  },
  {
    "title": "Functions: NextResponse | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/next-response",
    "html": "NextResponse\n\nNextResponse extends the Web Response API\n with additional convenience methods.\n\ncookies\n\nRead or mutate the Set-Cookie\n header of the response.\n\nset(name, value)\n\nGiven a name, set a cookie with the given value on the response.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// Set a cookie to hide the banner\nresponse.cookies.set('show-banner', 'false')\n// Response will have a `Set-Cookie:show-banner=false;path=/home` header\nreturn response\nget(name)\n\nGiven a cookie name, return the value of the cookie. If the cookie is not found, undefined is returned. If multiple cookies are found, the first one is returned.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// { name: 'show-banner', value: 'false', Path: '/home' }\nresponse.cookies.get('show-banner')\ngetAll()\n\nGiven a cookie name, return the values of the cookie. If no name is given, return all cookies on the response.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nresponse.cookies.getAll('experiments')\n// Alternatively, get all cookies for the response\nresponse.cookies.getAll()\ndelete(name)\n\nGiven a cookie name, delete the cookie from the response.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// Returns true for deleted, false is nothing is deleted\nresponse.cookies.delete('experiments')\njson()\n\nProduce a response with the given JSON body.\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\n \nexport async function GET(request: Request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\nredirect()\n\nProduce a response that redirects to a URL\n.\n\nimport { NextResponse } from 'next/server'\n \nreturn NextResponse.redirect(new URL('/new', request.url))\n\nThe URL\n can be created and modified before being used in the NextResponse.redirect() method. For example, you can use the request.nextUrl property to get the current URL, and then modify it to redirect to a different URL.\n\nimport { NextResponse } from 'next/server'\n \n// Given an incoming request...\nconst loginUrl = new URL('/login', request.url)\n// Add ?from=/incoming-url to the /login URL\nloginUrl.searchParams.set('from', request.nextUrl.pathname)\n// And redirect to the new URL\nreturn NextResponse.redirect(loginUrl)\nrewrite()\n\nProduce a response that rewrites (proxies) the given URL\n while preserving the original URL.\n\nimport { NextResponse } from 'next/server'\n \n// Incoming request: /about, browser shows /about\n// Rewritten request: /proxy, browser shows /about\nreturn NextResponse.rewrite(new URL('/proxy', request.url))\nnext()\n\nThe next() method is useful for Middleware, as it allows you to return early and continue routing.\n\nimport { NextResponse } from 'next/server'\n \nreturn NextResponse.next()\n\nYou can also forward headers when producing the response:\n\nimport { NextResponse } from 'next/server'\n \n// Given an incoming request...\nconst newHeaders = new Headers(request.headers)\n// Add a new header\nnewHeaders.set('x-version', '123')\n// And produce a response with the new headers\nreturn NextResponse.next({\n  request: {\n    // New request headers\n    headers: newHeaders,\n  },\n})"
  },
  {
    "title": "Functions: NextRequest | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/next-request",
    "html": "NextRequest\n\nNextRequest extends the Web Request API\n with additional convenience methods.\n\ncookies\n\nRead or mutate the Set-Cookie\n header of the request.\n\nset(name, value)\n\nGiven a name, set a cookie with the given value on the request.\n\n// Given incoming request /home\n// Set a cookie to hide the banner\n// request will have a `Set-Cookie:show-banner=false;path=/home` header\nrequest.cookies.set('show-banner', 'false')\nget(name)\n\nGiven a cookie name, return the value of the cookie. If the cookie is not found, undefined is returned. If multiple cookies are found, the first one is returned.\n\n// Given incoming request /home\n// { name: 'show-banner', value: 'false', Path: '/home' }\nrequest.cookies.get('show-banner')\ngetAll()\n\nGiven a cookie name, return the values of the cookie. If no name is given, return all cookies on the request.\n\n// Given incoming request /home\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nrequest.cookies.getAll('experiments')\n// Alternatively, get all cookies for the request\nrequest.cookies.getAll()\ndelete(name)\n\nGiven a cookie name, delete the cookie from the request.\n\n// Returns true for deleted, false is nothing is deleted\nrequest.cookies.delete('experiments')\nhas(name)\n\nGiven a cookie name, return true if the cookie exists on the request.\n\n// Returns true if cookie exists, false if it does not\nrequest.cookies.has('experiments')\nclear()\n\nRemove the Set-Cookie header from the request.\n\nrequest.cookies.clear()\nnextUrl\n\nExtends the native URL\n API with additional convenience methods, including Next.js specific properties.\n\n// Given a request to /home, pathname is /home\nrequest.nextUrl.pathname\n// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }\nrequest.nextUrl.searchParams\n\nThe following options are available:\n\nProperty\tType\tDescription\nbasePath\tstring\tThe base path of the URL.\nbuildId\tstring | undefined\tThe build identifier of the Next.js application. Can be customized.\ndefaultLocale\tstring | undefined\tThe default locale for internationalization.\ndomainLocale\t\t\n- defaultLocale\tstring\tThe default locale within a domain.\n- domain\tstring\tThe domain associated with a specific locale.\n- http\tboolean | undefined\tIndicates if the domain is using HTTP.\nlocales\tstring[] | undefined\tAn array of available locales.\nlocale\tstring | undefined\tThe currently active locale.\nurl\tURL\tThe URL object.\nip\n\nThe ip property is a string that contains the IP address of the request. This value can optionally be provided by your hosting platform.\n\nGood to know: On Vercel\n, this value is provided by default. On other platforms, you can use the X-Forwarded-For\n header to provide the IP address.\n\n// Provided by Vercel\nrequest.ip\n// Self-hosting\nrequest.headers.get('X-Forwarded-For')\ngeo\n\nThe geo property is an object that contains the geographic information of the request. This value can optionally be provided by your hosting platform.\n\nGood to know: On Vercel\n, this value is provided by default. On other platforms, you can use the X-Forwarded-For\n header to provide the IP address, then use a third-party service\n to lookup the geographic information.\n\n// Provided by Vercel\nrequest.geo.city\nrequest.geo.country\nrequest.geo.region\nrequest.geo.latitude\nrequest.geo.longitude\n \n// Self-hosting\nfunction getGeo(request) {\n  let ip = request.headers.get('X-Forwarded-For')\n  // Use a third-party service to lookup the geographic information\n}"
  },
  {
    "title": "Functions: getStaticProps | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-static-props",
    "html": "getStaticProps\n\nExporting a function called getStaticProps will pre-render a page at build time using the props returned from the function:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n \nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n\nYou can import modules in top-level scope for use in getStaticProps. Imports used will not be bundled for the client-side. This means you can write server-side code directly in getStaticProps, including fetching data from your database.\n\nContext parameter\n\nThe context parameter is an object containing the following keys:\n\nName\tDescription\nparams\tContains the route parameters for pages using dynamic routes. For example, if the page name is [id].js, then params will look like { id: ... }. You should use this together with getStaticPaths, which we'll explain later.\npreview\t(Deprecated for draftMode) preview is true if the page is in the Preview Mode and false otherwise.\npreviewData\t(Deprecated for draftMode) The preview data set by setPreviewData.\ndraftMode\tdraftMode is true if the page is in the Draft Mode and false otherwise.\nlocale\tContains the active locale (if enabled).\nlocales\tContains all supported locales (if enabled).\ndefaultLocale\tContains the configured default locale (if enabled).\nrevalidateReason\tProvides a reason for why the function was called. Can be one of: \"build\" (run at build time), \"stale\" (revalidate period expired, or running in development mode), \"on-demand\" (triggered via on-demand revalidation)\ngetStaticProps return values\n\nThe getStaticProps function should return an object containing either props, redirect, or notFound followed by an optional revalidate property.\n\nprops\n\nThe props object is a key-value pair, where each value is received by the page component. It should be a serializable object\n so that any props passed, could be serialized with JSON.stringify\n.\n\nexport async function getStaticProps(context) {\n  return {\n    props: { message: `Next.js is awesome` }, // will be passed to the page component as props\n  }\n}\nrevalidate\n\nThe revalidate property is the amount in seconds after which a page re-generation can occur (defaults to false or no revalidation).\n\n// This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// revalidation is enabled and a new request comes in\nexport async function getStaticProps() {\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n \n  return {\n    props: {\n      posts,\n    },\n    // Next.js will attempt to re-generate the page:\n    // - When a request comes in\n    // - At most once every 10 seconds\n    revalidate: 10, // In seconds\n  }\n}\n\nLearn more about Incremental Static Regeneration.\n\nThe cache status of a page leveraging ISR can be determined by reading the value of the x-nextjs-cache response header. The possible values are the following:\n\nMISS - the path is not in the cache (occurs at most once, on the first visit)\nSTALE - the path is in the cache but exceeded the revalidate time so it will be updated in the background\nHIT - the path is in the cache and has not exceeded the revalidate time\nnotFound\n\nThe notFound boolean allows the page to return a 404 status and 404 Page. With notFound: true, the page will return a 404 even if there was a successfully generated page before. This is meant to support use cases like user-generated content getting removed by its author. Note, notFound follows the same revalidate behavior described here.\n\nexport async function getStaticProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n \n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n \n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n\nGood to know: notFound is not needed for fallback: false mode as only paths returned from getStaticPaths will be pre-rendered.\n\nredirect\n\nThe redirect object allows redirecting to internal or external resources. It should match the shape of { destination: string, permanent: boolean }.\n\nIn some rare cases, you might need to assign a custom status code for older HTTP clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both. You can also set basePath: false similar to redirects in next.config.js.\n\nexport async function getStaticProps(context) {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n \n  if (!data) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n        // statusCode: 301\n      },\n    }\n  }\n \n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n\nIf the redirects are known at build-time, they should be added in next.config.js instead.\n\nReading files: Use process.cwd()\n\nFiles can be read directly from the filesystem in getStaticProps.\n\nIn order to do so you have to get the full path to a file.\n\nSince Next.js compiles your code into a separate directory you can't use __dirname as the path it returns will be different from the Pages Router.\n\nInstead you can use process.cwd() which gives you the directory where Next.js is being executed.\n\nimport { promises as fs } from 'fs'\nimport path from 'path'\n \n// posts will be populated at build time by getStaticProps()\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>\n          <h3>{post.filename}</h3>\n          <p>{post.content}</p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n \n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  const postsDirectory = path.join(process.cwd(), 'posts')\n  const filenames = await fs.readdir(postsDirectory)\n \n  const posts = filenames.map(async (filename) => {\n    const filePath = path.join(postsDirectory, filename)\n    const fileContents = await fs.readFile(filePath, 'utf8')\n \n    // Generally you would parse/transform the contents\n    // For example you can transform markdown to HTML here\n \n    return {\n      filename,\n      content: fileContents,\n    }\n  })\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts: await Promise.all(posts),\n    },\n  }\n}\n \nexport default Blog\nVersion History\nVersion\tChanges\nv13.4.0\tApp Router is now stable with simplified data fetching\nv12.2.0\tOn-Demand Incremental Static Regeneration is stable.\nv12.1.0\tOn-Demand Incremental Static Regeneration added (beta).\nv10.0.0\tlocale, locales, defaultLocale, and notFound options added.\nv10.0.0\tfallback: 'blocking' return option added.\nv9.5.0\tStable Incremental Static Regeneration\nv9.3.0\tgetStaticProps introduced."
  },
  {
    "title": "Functions: getStaticPaths | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-static-paths",
    "html": "getStaticPaths\n\nWhen exporting a function called getStaticPaths from a page that uses Dynamic Routes, Next.js will statically pre-render all the paths specified by getStaticPaths.\n\npages/repo/[name].tsx\nTypeScript\nJavaScript\nTypeScript\nimport type {\n  InferGetStaticPropsType,\n  GetStaticProps,\n  GetStaticPaths,\n} from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getStaticPaths = (async () => {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      }, // See the \"paths\" section below\n    ],\n    fallback: true, // false or \"blocking\"\n  }\n}) satisfies GetStaticPaths\n \nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n \nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\ngetStaticPaths return values\n\nThe getStaticPaths function should return an object with the following required properties:\n\npaths\n\nThe paths key determines which paths will be pre-rendered. For example, suppose that you have a page that uses Dynamic Routes named pages/posts/[id].js. If you export getStaticPaths from this page and return the following for paths:\n\nreturn {\n  paths: [\n    { params: { id: '1' }},\n    {\n      params: { id: '2' },\n      // with i18n configured the locale for the path can be returned as well\n      locale: \"en\",\n    },\n  ],\n  fallback: ...\n}\n\nThen, Next.js will statically generate /posts/1 and /posts/2 during next build using the page component in pages/posts/[id].js.\n\nThe value for each params object must match the parameters used in the page name:\n\nIf the page name is pages/posts/[postId]/[commentId], then params should contain postId and commentId.\nIf the page name uses catch-all routes like pages/[...slug], then params should contain slug (which is an array). If this array is ['hello', 'world'], then Next.js will statically generate the page at /hello/world.\nIf the page uses an optional catch-all route, use null, [], undefined or false to render the root-most route. For example, if you supply slug: false for pages/[[...slug]], Next.js will statically generate the page /.\n\nThe params strings are case-sensitive and ideally should be normalized to ensure the paths are generated correctly. For example, if WoRLD is returned for a param it will only match if WoRLD is the actual path visited, not world or World.\n\nSeparate of the params object a locale field can be returned when i18n is configured, which configures the locale for the path being generated.\n\nfallback: false\n\nIf fallback is false, then any paths not returned by getStaticPaths will result in a 404 page.\n\nWhen next build is run, Next.js will check if getStaticPaths returned fallback: false, it will then build only the paths returned by getStaticPaths. This option is useful if you have a small number of paths to create, or new page data is not added often. If you find that you need to add more paths, and you have fallback: false, you will need to run next build again so that the new paths can be generated.\n\nThe following example pre-renders one blog post per page called pages/posts/[id].js. The list of blog posts will be fetched from a CMS and returned by getStaticPaths. Then, for each page, it fetches the post data from a CMS using getStaticProps.\n\npages/posts/[id].js\nfunction Post({ post }) {\n  // Render post...\n}\n \n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n \n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n \n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n \n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  // Pass post data to the page via props\n  return { props: { post } }\n}\n \nexport default Post\nfallback: true\nExamples\n\nIf fallback is true, then the behavior of getStaticProps changes in the following ways:\n\nThe paths returned from getStaticPaths will be rendered to HTML at build time by getStaticProps.\nThe paths that have not been generated at build time will not result in a 404 page. Instead, Next.js will serve a “fallback” version of the page on the first request to such a path. Web crawlers, such as Google, won't be served a fallback and instead the path will behave as in fallback: 'blocking'.\nWhen a page with fallback: true is navigated to through next/link or next/router (client-side) Next.js will not serve a fallback and instead the page will behave as fallback: 'blocking'.\nIn the background, Next.js will statically generate the requested path HTML and JSON. This includes running getStaticProps.\nWhen complete, the browser receives the JSON for the generated path. This will be used to automatically render the page with the required props. From the user’s perspective, the page will be swapped from the fallback page to the full page.\nAt the same time, Next.js adds this path to the list of pre-rendered pages. Subsequent requests to the same path will serve the generated page, like other pages pre-rendered at build time.\n\nGood to know: fallback: true is not supported when using output: 'export'.\n\nWhen is fallback: true useful?\n\nfallback: true is useful if your app has a very large number of static pages that depend on data (such as a very large e-commerce site). If you want to pre-render all product pages, the builds would take a very long time.\n\nInstead, you may statically generate a small subset of pages and use fallback: true for the rest. When someone requests a page that is not generated yet, the user will see the page with a loading indicator or skeleton component.\n\nShortly after, getStaticProps finishes and the page will be rendered with the requested data. From now on, everyone who requests the same page will get the statically pre-rendered page.\n\nThis ensures that users always have a fast experience while preserving fast builds and the benefits of Static Generation.\n\nfallback: true will not update generated pages, for that take a look at Incremental Static Regeneration.\n\nfallback: 'blocking'\n\nIf fallback is 'blocking', new paths not returned by getStaticPaths will wait for the HTML to be generated, identical to SSR (hence why blocking), and then be cached for future requests so it only happens once per path.\n\ngetStaticProps will behave as follows:\n\nThe paths returned from getStaticPaths will be rendered to HTML at build time by getStaticProps.\nThe paths that have not been generated at build time will not result in a 404 page. Instead, Next.js will SSR on the first request and return the generated HTML.\nWhen complete, the browser receives the HTML for the generated path. From the user’s perspective, it will transition from \"the browser is requesting the page\" to \"the full page is loaded\". There is no flash of loading/fallback state.\nAt the same time, Next.js adds this path to the list of pre-rendered pages. Subsequent requests to the same path will serve the generated page, like other pages pre-rendered at build time.\n\nfallback: 'blocking' will not update generated pages by default. To update generated pages, use Incremental Static Regeneration in conjunction with fallback: 'blocking'.\n\nGood to know: fallback: 'blocking' is not supported when using output: 'export'.\n\nFallback pages\n\nIn the “fallback” version of a page:\n\nThe page’s props will be empty.\nUsing the router, you can detect if the fallback is being rendered, router.isFallback will be true.\n\nThe following example showcases using isFallback:\n\npages/posts/[id].js\nimport { useRouter } from 'next/router'\n \nfunction Post({ post }) {\n  const router = useRouter()\n \n  // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n  if (router.isFallback) {\n    return <div>Loading...</div>\n  }\n \n  // Render post...\n}\n \n// This function gets called at build time\nexport async function getStaticPaths() {\n  return {\n    // Only `/posts/1` and `/posts/2` are generated at build time\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n    // Enable statically generating additional pages\n    // For example: `/posts/3`\n    fallback: true,\n  }\n}\n \n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  // Pass post data to the page via props\n  return {\n    props: { post },\n    // Re-generate the post at most once per second\n    // if a request comes in\n    revalidate: 1,\n  }\n}\n \nexport default Post\nVersion History\nVersion\tChanges\nv13.4.0\tApp Router is now stable with simplified data fetching, including generateStaticParams()\nv12.2.0\tOn-Demand Incremental Static Regeneration is stable.\nv12.1.0\tOn-Demand Incremental Static Regeneration added (beta).\nv9.5.0\tStable Incremental Static Regeneration\nv9.3.0\tgetStaticPaths introduced."
  },
  {
    "title": "Functions: getInitialProps | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-initial-props",
    "html": "getInitialProps\n\nGood to know: getInitialProps is a legacy API. We recommend using getStaticProps or getServerSideProps instead.\n\ngetInitialProps is an async function that can be added to the default exported React component for the page. It will run on both the server-side and again on the client-side during page transitions. The result of the function will be forwarded to the React component as props.\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { NextPageContext } from 'next'\n \nPage.getInitialProps = async (ctx: NextPageContext) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n \nexport default function Page({ stars }: { stars: number }) {\n  return stars\n}\n\nGood to know:\n\nData returned from getInitialProps is serialized when server rendering. Ensure the returned object from getInitialProps is a plain Object, and not using Date, Map or Set.\nFor the initial page load, getInitialProps will run on the server only. getInitialProps will then also run on the client when navigating to a different route with the next/link component or by using next/router.\nIf getInitialProps is used in a custom _app.js, and the page being navigated to is using getServerSideProps, then getInitialProps will also run on the server.\nContext Object\n\ngetInitialProps receives a single argument called context, which is an object with the following properties:\n\nName\tDescription\npathname\tCurrent route, the path of the page in /pages\nquery\tQuery string of the URL, parsed as an object\nasPath\tString of the actual path (including the query) shown in the browser\nreq\tHTTP request object\n (server only)\nres\tHTTP response object\n (server only)\nerr\tError object if any error is encountered during the rendering\nCaveats\ngetInitialProps can only be used in pages/ top level files, and not in nested components. To have nested data fetching at the component level, consider exploring the App Router.\nRegardless of whether your route is static or dynamic, any data returned from getInitialProps as props will be able to be examined on the client-side in the initial HTML. This is to allow the page to be hydrated\n correctly. Make sure that you don't pass any sensitive information that shouldn't be available on the client in props."
  },
  {
    "title": "Functions: getServerSideProps | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props",
    "html": "getServerSideProps\n\nWhen exporting a function called getServerSideProps (Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by getServerSideProps. This is useful if you want to fetch data that changes often, and have the page update to show the most current data.\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n \nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n\nYou can import modules in top-level scope for use in getServerSideProps. Imports used will not be bundled for the client-side. This means you can write server-side code directly in getServerSideProps, including fetching data from your database.\n\nContext parameter\n\nThe context parameter is an object containing the following keys:\n\nName\tDescription\nparams\tIf this page uses a dynamic route, params contains the route parameters. If the page name is [id].js, then params will look like { id: ... }.\nreq\tThe HTTP IncomingMessage object\n, with an additional cookies prop, which is an object with string keys mapping to string values of cookies.\nres\tThe HTTP response object\n.\nquery\tAn object representing the query string, including dynamic route parameters.\npreview\t(Deprecated for draftMode) preview is true if the page is in the Preview Mode and false otherwise.\npreviewData\t(Deprecated for draftMode) The preview data set by setPreviewData.\ndraftMode\tdraftMode is true if the page is in the Draft Mode and false otherwise.\nresolvedUrl\tA normalized version of the request URL that strips the _next/data prefix for client transitions and includes original query values.\nlocale\tContains the active locale (if enabled).\nlocales\tContains all supported locales (if enabled).\ndefaultLocale\tContains the configured default locale (if enabled).\ngetServerSideProps return values\n\nThe getServerSideProps function should return an object with any one of the following properties:\n\nprops\n\nThe props object is a key-value pair, where each value is received by the page component. It should be a serializable object\n so that any props passed, could be serialized with JSON.stringify\n.\n\nexport async function getServerSideProps(context) {\n  return {\n    props: { message: `Next.js is awesome` }, // will be passed to the page component as props\n  }\n}\nnotFound\n\nThe notFound boolean allows the page to return a 404 status and 404 Page. With notFound: true, the page will return a 404 even if there was a successfully generated page before. This is meant to support use cases like user-generated content getting removed by its author.\n\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n \n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n \n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\nredirect\n\nThe redirect object allows redirecting to internal and external resources. It should match the shape of { destination: string, permanent: boolean }. In some rare cases, you might need to assign a custom status code for older HTTP clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both.\n\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n \n  if (!data) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n  }\n \n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\nVersion History\nVersion\tChanges\nv13.4.0\tApp Router is now stable with simplified data fetching\nv10.0.0\tlocale, locales, defaultLocale, and notFound options added.\nv9.3.0\tgetServerSideProps introduced."
  },
  {
    "title": "Components: <Link> | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link",
    "html": "<Link>\nExamples\n\n<Link> is a React component that extends the HTML <a> element to provide prefetching and client-side navigation between routes. It is the primary way to navigate between routes in Next.js.\n\nFor an example, consider a pages directory with the following files:\n\npages/index.js\npages/about.js\npages/blog/[slug].js\n\nWe can have a link to each of these pages like so:\n\nimport Link from 'next/link'\n \nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link href=\"/about\">About Us</Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">Blog Post</Link>\n      </li>\n    </ul>\n  )\n}\n \nexport default Home\nProps\n\nHere's a summary of the props available for the Link Component:\n\nProp\tExample\tType\tRequired\nhref\thref=\"/dashboard\"\tString or Object\tYes\nreplace\treplace={false}\tBoolean\t-\nscroll\tscroll={false}\tBoolean\t-\nprefetch\tprefetch={false}\tBoolean\t-\n\nGood to know: <a> tag attributes such as className or target=\"_blank\" can be added to <Link> as props and will be passed to the underlying <a> element.\n\nhref (required)\n\nThe path or URL to navigate to.\n\n<Link href=\"/dashboard\">Dashboard</Link>\n\nhref can also accept an object, for example:\n\n// Navigate to /about?name=test\n<Link\n  href={{\n    pathname: '/about',\n    query: { name: 'test' },\n  }}\n>\n  About\n</Link>\nreplace\n\nDefaults to false. When true, next/link will replace the current history state instead of adding a new URL into the browser’s history\n stack.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\nscroll\n\nDefaults to true. The default behavior of <Link> is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation. When false, next/link will not scroll to the top of the page after a navigation.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n\nGood to know:\n\nNext.js will scroll to the Page if it is not visible in the viewport upon navigation.\nprefetch\n\nPrefetching happens when a <Link /> component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the href) and data in the background to improve the performance of client-side navigations. Prefetching is only enabled in production.\n\ntrue (default): The full route and its data will be prefetched.\nfalse: Prefetching will not happen when entering the viewport, but will happen on hover. If you want to completely remove fetching on hover as well, consider using an <a> tag or incrementally adopting the App Router, which enables disabling prefetching on hover too.\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\nOther Props\nlegacyBehavior\n\nAn <a> element is no longer required as a child of <Link>. Add the legacyBehavior prop to use the legacy behavior or remove the <a> to upgrade. A codemod is available to automatically upgrade your code.\n\nGood to know: when legacyBehavior is not set to true, all anchor\n tag properties can be passed to next/link as well such as, className, onClick, etc.\n\npassHref\n\nForces Link to send the href property to its child. Defaults to false\n\nscroll\n\nScroll to the top of the page after a navigation. Defaults to true\n\nshallow\n\nUpdate the path of the current page without rerunning getStaticProps, getServerSideProps or getInitialProps. Defaults to false\n\nlocale\n\nThe active locale is automatically prepended. locale allows for providing a different locale. When false href has to include the locale as the default behavior is disabled.\n\nExamples\nLinking to Dynamic Routes\n\nFor dynamic routes, it can be handy to use template literals to create the link's path.\n\nFor example, you can generate a list of links to the dynamic route pages/blog/[slug].js\n\npages/blog/index.js\nimport Link from 'next/link'\n \nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n \nexport default Posts\nIf the child is a custom component that wraps an <a> tag\n\nIf the child of Link is a custom component that wraps an <a> tag, you must add passHref to Link. This is necessary if you’re using libraries like styled-components\n. Without this, the <a> tag will not have the href attribute, which hurts your site's accessibility and might affect SEO. If you're using ESLint, there is a built-in rule next/link-passhref to ensure correct usage of passHref.\n\nimport Link from 'next/link'\nimport styled from 'styled-components'\n \n// This creates a custom component that wraps an <a> tag\nconst RedLink = styled.a`\n  color: red;\n`\n \nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <RedLink>{name}</RedLink>\n    </Link>\n  )\n}\n \nexport default NavLink\nIf you’re using emotion\n’s JSX pragma feature (@jsx jsx), you must use passHref even if you use an <a> tag directly.\nThe component should support onClick property to trigger navigation correctly\nIf the child is a functional component\n\nIf the child of Link is a functional component, in addition to using passHref and legacyBehavior, you must wrap the component in React.forwardRef\n:\n\nimport Link from 'next/link'\n \n// `onClick`, `href`, and `ref` need to be passed to the DOM element\n// for proper handling\nconst MyButton = React.forwardRef(({ onClick, href }, ref) => {\n  return (\n    <a href={href} onClick={onClick} ref={ref}>\n      Click Me\n    </a>\n  )\n})\n \nfunction Home() {\n  return (\n    <Link href=\"/about\" passHref legacyBehavior>\n      <MyButton />\n    </Link>\n  )\n}\n \nexport default Home\nWith URL Object\n\nLink can also receive a URL object and it will automatically format it to create the URL string. Here's how to do it:\n\nimport Link from 'next/link'\n \nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link\n          href={{\n            pathname: '/about',\n            query: { name: 'test' },\n          }}\n        >\n          About us\n        </Link>\n      </li>\n      <li>\n        <Link\n          href={{\n            pathname: '/blog/[slug]',\n            query: { slug: 'my-post' },\n          }}\n        >\n          Blog Post\n        </Link>\n      </li>\n    </ul>\n  )\n}\n \nexport default Home\n\nThe above example has a link to:\n\nA predefined route: /about?name=test\nA dynamic route: /blog/my-post\n\nYou can use every property as defined in the Node.js URL module documentation\n.\n\nReplace the URL instead of push\n\nThe default behavior of the Link component is to push a new URL into the history stack. You can use the replace prop to prevent adding a new entry, as in the following example:\n\n<Link href=\"/about\" replace>\n  About us\n</Link>\nDisable scrolling to the top of the page\n\nThe default behavior of Link is to scroll to the top of the page. When there is a hash defined it will scroll to the specific id, like a normal <a> tag. To prevent scrolling to the top / hash scroll={false} can be added to Link:\n\n<Link href=\"/#hashid\" scroll={false}>\n  Disables scrolling to the top\n</Link>\nMiddleware\n\nIt's common to use Middleware for authentication or other purposes that involve rewriting the user to a different page. In order for the <Link /> component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch.\n\nFor example, if you want to serve a /dashboard route that has authenticated and visitor views, you may add something similar to the following in your Middleware to redirect the user to the correct page:\n\nmiddleware.js\nexport function middleware(req) {\n  const nextUrl = req.nextUrl\n  if (nextUrl.pathname === '/dashboard') {\n    if (req.cookies.authToken) {\n      return NextResponse.rewrite(new URL('/auth/dashboard', req.url))\n    } else {\n      return NextResponse.rewrite(new URL('/public/dashboard', req.url))\n    }\n  }\n}\n\nIn this case, you would want to use the following code in your <Link /> component:\n\nimport Link from 'next/link'\nimport useIsAuthed from './hooks/useIsAuthed'\n \nexport default function Page() {\n  const isAuthed = useIsAuthed()\n  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'\n  return (\n    <Link as=\"/dashboard\" href={path}>\n      Dashboard\n    </Link>\n  )\n}\n\nGood to know: If you're using Dynamic Routes, you'll need to adapt your as and href props. For example, if you have a Dynamic Route like /dashboard/authed/[user] that you want to present differently via middleware, you would write: <Link href={{ pathname: '/dashboard/authed/[user]', query: { user: username } }} as=\"/dashboard/[user]\">Profile</Link>.\n\nVersion History\nVersion\tChanges\nv13.0.0\tNo longer requires a child <a> tag. A codemod is provided to automatically update your codebase.\nv10.0.0\thref props pointing to a dynamic route are automatically resolved and no longer require an as prop.\nv8.0.0\tImproved prefetching performance.\nv1.0.0\tnext/link introduced."
  },
  {
    "title": "Components: <Script> | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/components/script",
    "html": "<Script>\n\nThis API reference will help you understand how to use props available for the Script Component. For features and usage, please see the Optimizing Scripts page.\n\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\nProps\n\nHere's a summary of the props available for the Script Component:\n\nProp\tExample\tType\tRequired\nsrc\tsrc=\"http://example.com/script\"\tString\tRequired unless inline script is used\nstrategy\tstrategy=\"lazyOnload\"\tString\t-\nonLoad\tonLoad={onLoadFunc}\tFunction\t-\nonReady\tonReady={onReadyFunc}\tFunction\t-\nonError\tonError={onErrorFunc}\tFunction\t-\nRequired Props\n\nThe <Script /> component requires the following properties.\n\nsrc\n\nA path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. The src property is required unless an inline script is used.\n\nOptional Props\n\nThe <Script /> component accepts a number of additional properties beyond those which are required.\n\nstrategy\n\nThe loading strategy of the script. There are four different strategies that can be used:\n\nbeforeInteractive: Load before any Next.js code and before any page hydration occurs.\nafterInteractive: (default) Load early but after some hydration on the page occurs.\nlazyOnload: Load during browser idle time.\nworker: (experimental) Load in a web worker.\nbeforeInteractive\n\nScripts that load with the beforeInteractive strategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed before any hydration occurs on the page.\n\nScripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution does not block page hydration from occurring.\n\nbeforeInteractive scripts must be placed inside the Document Component (pages/_document.js) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side).\n\nThis strategy should only be used for critical scripts that need to be fetched before any part of the page becomes interactive.\n\npages/_document.js\nimport { Html, Head, Main, NextScript } from 'next/document'\nimport Script from 'next/script'\n \nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </Html>\n  )\n}\n\nGood to know: Scripts with beforeInteractive will always be injected inside the head of the HTML document regardless of where it's placed in the component.\n\nSome examples of scripts that should be loaded as soon as possible with beforeInteractive include:\n\nBot detectors\nCookie consent managers\nafterInteractive\n\nScripts that use the afterInteractive strategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page. This is the default strategy of the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code.\n\nafterInteractive scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.\n\napp/page.js\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"afterInteractive\" />\n    </>\n  )\n}\n\nSome examples of scripts that are good candidates for afterInteractive include:\n\nTag managers\nAnalytics\nlazyOnload\n\nScripts that use the lazyOnload strategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early.\n\nlazyOnload scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.\n\napp/page.js\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"lazyOnload\" />\n    </>\n  )\n}\n\nExamples of scripts that do not need to load immediately and can be fetched with lazyOnload include:\n\nChat support plugins\nSocial media widgets\nworker\n\nWarning: The worker strategy is not yet stable and does not yet work with the app directory. Use with caution.\n\nScripts that use the worker strategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts.\n\nTo use worker as a strategy, the nextScriptWorkers flag must be enabled in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n\nworker scripts can only currently be used in the pages/ directory:\n\npages/home.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\nonLoad\n\nWarning: onLoad does not yet work with Server Components and can only be used in Client Components. Further, onLoad can't be used with beforeInteractive – consider using onReady instead.\n\nSome third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with either afterInteractive or lazyOnload as a loading strategy, you can execute code after it has loaded using the onLoad property.\n\nHere's an example of executing a lodash method only after the library has been loaded.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\nonReady\n\nWarning: onReady does not yet work with Server Components and can only be used in Client Components.\n\nSome third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script's load event when it first loads and then after every subsequent component re-mount using the onReady property.\n\nHere's an example of how to re-instantiate a Google Maps JS embed every time the component is mounted:\n\nimport { useRef } from 'react'\nimport Script from 'next/script'\n \nexport default function Page() {\n  const mapRef = useRef()\n \n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\nonError\n\nWarning: onError does not yet work with Server Components and can only be used in Client Components. onError cannot be used with the beforeInteractive loading strategy.\n\nSometimes it is helpful to catch when a script fails to load. These errors can be handled with the onError property:\n\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\nVersion History\nVersion\tChanges\nv13.0.0\tbeforeInteractive and afterInteractive is modified to support app.\nv12.2.4\tonReady prop added.\nv12.2.2\tAllow next/script with beforeInteractive to be placed in _document.\nv11.0.0\tnext/script introduced."
  },
  {
    "title": "API Reference: Functions | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/functions",
    "html": "Functions"
  },
  {
    "title": "Components: <Image> | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image",
    "html": "<Image>\nExamples\n\nGood to know: If you are using a version of Next.js prior to 13, you'll want to use the next/legacy/image documentation since the component was renamed.\n\nThis API reference will help you understand how to use props and configuration options available for the Image Component. For features and usage, please see the Image Component page.\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <Image\n      src=\"/profile.png\"\n      width={500}\n      height={500}\n      alt=\"Picture of the author\"\n    />\n  )\n}\nProps\n\nHere's a summary of the props available for the Image Component:\n\nProp\tExample\tType\tStatus\nsrc\tsrc=\"/profile.png\"\tString\tRequired\nwidth\twidth={500}\tInteger (px)\tRequired\nheight\theight={500}\tInteger (px)\tRequired\nalt\talt=\"Picture of the author\"\tString\tRequired\nloader\tloader={imageLoader}\tFunction\t-\nfill\tfill={true}\tBoolean\t-\nsizes\tsizes=\"(max-width: 768px) 100vw, 33vw\"\tString\t-\nquality\tquality={80}\tInteger (1-100)\t-\npriority\tpriority={true}\tBoolean\t-\nplaceholder\tplaceholder=\"blur\"\tString\t-\nstyle\tstyle={{objectFit: \"contain\"}}\tObject\t-\nonLoadingComplete\tonLoadingComplete={img => done())}\tFunction\tDeprecated\nonLoad\tonLoad={event => done())}\tFunction\t-\nonError\tonError(event => fail()}\tFunction\t-\nloading\tloading=\"lazy\"\tString\t-\nblurDataURL\tblurDataURL=\"data:image/jpeg...\"\tString\t-\noverrideSrc\toverrideSrc=\"/seo.png\"\tString\t-\nRequired Props\n\nThe Image Component requires the following properties: src, alt, width and height (or fill).\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <div>\n      <Image\n        src=\"/profile.png\"\n        width={500}\n        height={500}\n        alt=\"Picture of the author\"\n      />\n    </div>\n  )\n}\nsrc\n\nMust be one of the following:\n\nA statically imported image file\nA path string. This can be either an absolute external URL, or an internal path depending on the loader prop.\n\nWhen using an external URL, you must add it to remotePatterns in next.config.js.\n\nwidth\n\nThe width property represents the intrinsic image width in pixels.\n\nRequired, except for statically imported images or images with the fill property.\n\nheight\n\nThe height property represents the intrinsic image height in pixels.\n\nRequired, except for statically imported images or images with the fill property.\n\nGood to know:\n\nCombined, both width and height properties are used to determine the aspect ratio of the image which used by browsers to reserve space for the image before it loads.\nThe intrinsic size does not always mean the rendered size in the browser, which will be determined by the parent container. For example, if the parent container is smaller than the intrinsic size, the image will be scaled down to fit the container.\nYou can use the fill property when the width and height are unknown.\nalt\n\nThe alt property is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image.\n\nIt should contain text that could replace the image without changing the meaning of the page\n. It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image.\n\nIf the image is purely decorative\n or not intended for the user\n, the alt property should be an empty string (alt=\"\").\n\nLearn more\n\nOptional Props\n\nThe <Image /> component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in the Advanced Props section.\n\nloader\n\nA custom function used to resolve image URLs.\n\nA loader is a function returning a URL string for the image, given the following parameters:\n\nsrc\nwidth\nquality\n\nHere is an example of using a custom loader:\n\nimport Image from 'next/image'\n \nconst imageLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n \nexport default function Page() {\n  return (\n    <Image\n      loader={imageLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n\nAlternatively, you can use the loaderFile configuration in next.config.js to configure every instance of next/image in your application, without passing a prop.\n\nfill\nfill={true} // {true} | {false}\n\nA boolean that causes the image to fill the parent element, which is useful when the width and height are unknown.\n\nThe parent element must assign position: \"relative\", position: \"fixed\", or position: \"absolute\" style.\n\nBy default, the img element will automatically be assigned the position: \"absolute\" style.\n\nIf no styles are applied to the image, the image will stretch to fit the container. You may prefer to set object-fit: \"contain\" for an image which is letterboxed to fit the container and preserve aspect ratio.\n\nAlternatively, object-fit: \"cover\" will cause the image to fill the entire container and be cropped to preserve aspect ratio.\n\nFor more information, see also:\n\nposition\nobject-fit\nobject-position\nsizes\n\nA string, similar to a media query, that provides information about how wide the image will be at different breakpoints. The value of sizes will greatly affect performance for images using fill or which are styled to have a responsive size.\n\nThe sizes property serves two important purposes related to image performance:\n\nFirst, the value of sizes is used by the browser to determine which size of the image to download, from next/image's automatically generated srcset. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. The sizes property allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify a sizes value in an image with the fill property, a default value of 100vw (full screen width) is used.\nSecond, the sizes property changes the behavior of the automatically generated srcset value. If no sizes value is present, a small srcset is generated, suitable for a fixed-size image (1x/2x/etc). If sizes is defined, a large srcset is generated, suitable for a responsive image (640w/750w/etc). If the sizes property includes sizes such as 50vw, which represent a percentage of the viewport width, then the srcset is trimmed to not include any values which are too small to ever be necessary.\n\nFor example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:\n\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <div className=\"grid-element\">\n      <Image\n        fill\n        src=\"/example.png\"\n        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      />\n    </div>\n  )\n}\n\nThis example sizes could have a dramatic effect on performance metrics. Without the 33vw sizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, without sizes the user would download an image that's 9 times larger than necessary.\n\nLearn more about srcset and sizes:\n\nweb.dev\nmdn\nquality\nquality={75} // {number 1-100}\n\nThe quality of the optimized image, an integer between 1 and 100, where 100 is the best quality and therefore largest file size. Defaults to 75.\n\npriority\npriority={false} // {false} | {true}\n\nWhen true, the image will be considered high priority and preload\n. Lazy loading is automatically disabled for images using priority.\n\nYou should use the priority property on any image detected as the Largest Contentful Paint (LCP)\n element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes.\n\nShould only be used when the image is visible above the fold. Defaults to false.\n\nplaceholder\nplaceholder = 'empty' // \"empty\" | \"blur\" | \"data:image/...\"\n\nA placeholder to use while the image is loading. Possible values are blur, empty, or data:image/.... Defaults to empty.\n\nWhen blur, the blurDataURL property will be used as the placeholder. If src is an object from a static import and the imported image is .jpg, .png, .webp, or .avif, then blurDataURL will be automatically populated, except when the image is detected to be animated.\n\nFor dynamic images, you must provide the blurDataURL property. Solutions such as Plaiceholder\n can help with base64 generation.\n\nWhen data:image/..., the Data URL\n will be used as the placeholder while the image is loading.\n\nWhen empty, there will be no placeholder while the image is loading, only empty space.\n\nTry it out:\n\nDemo the blur placeholder\nDemo the shimmer effect with data URL placeholder prop\nDemo the color effect with blurDataURL prop\nAdvanced Props\n\nIn some cases, you may need more advanced usage. The <Image /> component optionally accepts the following advanced properties.\n\nstyle\n\nAllows passing CSS styles to the underlying image element.\n\ncomponents/ProfileImage.js\nconst imageStyle = {\n  borderRadius: '50%',\n  border: '1px solid #fff',\n}\n \nexport default function ProfileImage() {\n  return <Image src=\"...\" style={imageStyle} />\n}\n\nRemember that the required width and height props can interact with your styling. If you use styling to modify an image's width, you should also style its height to auto to preserve its intrinsic aspect ratio, or your image will be distorted.\n\nonLoadingComplete\n<Image onLoadingComplete={(img) => console.log(img.naturalWidth)} />\n\nWarning: Deprecated since Next.js 14 in favor of onLoad.\n\nA callback function that is invoked once the image is completely loaded and the placeholder has been removed.\n\nThe callback function will be called with one argument, a reference to the underlying <img> element.\n\nonLoad\n<Image onLoad={(e) => console.log(e.target.naturalWidth)} />\n\nA callback function that is invoked once the image is completely loaded and the placeholder has been removed.\n\nThe callback function will be called with one argument, the Event which has a target that references the underlying <img> element.\n\nonError\n<Image onError={(e) => console.error(e.target.id)} />\n\nA callback function that is invoked if the image fails to load.\n\nloading\n\nRecommendation: This property is only meant for advanced use cases. Switching an image to load with eager will normally hurt performance. We recommend using the priority property instead, which will eagerly preload the image.\n\nloading = 'lazy' // {lazy} | {eager}\n\nThe loading behavior of the image. Defaults to lazy.\n\nWhen lazy, defer loading the image until it reaches a calculated distance from the viewport.\n\nWhen eager, load the image immediately.\n\nLearn more about the loading attribute\n.\n\nblurDataURL\n\nA Data URL\n to be used as a placeholder image before the src image successfully loads. Only takes effect when combined with placeholder=\"blur\".\n\nMust be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or less) is recommended. Including larger images as placeholders may harm your application performance.\n\nTry it out:\n\nDemo the default blurDataURL prop\nDemo the color effect with blurDataURL prop\n\nYou can also generate a solid color Data URL\n to match the image.\n\nunoptimized\nunoptimized = {false} // {false} | {true}\n\nWhen true, the source image will be served as-is instead of changing quality, size, or format. Defaults to false.\n\nimport Image from 'next/image'\n \nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n\nSince Next.js 12.3.0, this prop can be assigned to all images by updating next.config.js with the following configuration:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\noverrideSrc\n\nWhen providing the src prop to the <Image> component, both the srcset and src attributes are generated automatically for the resulting <img>.\n\ninput.js\n<Image src=\"/me.jpg\" />\noutput.html\n<img\n  srcset=\"\n    /_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/_next/image?url=%2Fme.jpg&w=828&q=75\"\n/>\n\nIn some cases, it is not desirable to have the src attribute generated and you may wish to override it using the overrideSrc prop.\n\nFor example, when upgrading an existing website from <img> to <Image>, you may wish to maintain the same src attribute for SEO purposes such as image ranking or avoiding recrawl.\n\ninput.js\n<Image src=\"/me.jpg\" overrideSrc=\"/override.jpg\" />\noutput.html\n<img\n  srcset=\"\n    /_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/override.jpg\"\n/>\nOther Props\n\nOther properties on the <Image /> component will be passed to the underlying img element with the exception of the following:\n\nsrcSet. Use Device Sizes instead.\ndecoding. It is always \"async\".\nConfiguration Options\n\nIn addition to props, you can configure the Image Component in next.config.js. The following options are available:\n\nremotePatterns\n\nTo protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with the remotePatterns property in your next.config.js file, as shown below:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n      },\n    ],\n  },\n}\n\nGood to know: The example above will ensure the src property of next/image must start with https://example.com/account123/. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request.\n\nBelow is another example of the remotePatterns property in the next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n      },\n    ],\n  },\n}\n\nGood to know: The example above will ensure the src property of next/image must start with https://img1.example.com or https://me.avatar.example.com or any number of subdomains. Any other protocol, port, or unmatched hostname will respond with 400 Bad Request.\n\nWildcard patterns can be used for both pathname and hostname and have the following syntax:\n\n* match a single path segment or subdomain\n** match any number of path segments at the end or subdomains at the beginning\n\nThe ** syntax does not work in the middle of the pattern.\n\nGood to know: When omitting protocol, port or pathname, then the wildcard ** is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend.\n\ndomains\n\nWarning: Deprecated since Next.js 14 in favor of strict remotePatterns in order to protect your application from malicious users. Only use domains if you own all the content served from the domain.\n\nSimilar to remotePatterns, the domains configuration can be used to provide a list of allowed hostnames for external images.\n\nHowever, the domains configuration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname.\n\nBelow is an example of the domains property in the next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\nloaderFile\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure the loaderFile in your next.config.js like the following:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n\nThis must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:\n\nmy/image/loader.js\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nAlternatively, you can use the loader prop to configure each instance of next/image.\n\nExamples:\n\nCustom Image Loader Configuration\nAdvanced\n\nThe following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates.\n\ndeviceSizes\n\nIf you know the expected device widths of your users, you can specify a list of device width breakpoints using the deviceSizes property in next.config.js. These widths are used when the next/image component uses sizes prop to ensure the correct image is served for user's device.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\nimageSizes\n\nYou can specify a list of image widths using the images.imageSizes property in your next.config.js file. These widths are concatenated with the array of device sizes to form the full array of sizes used to generate image srcset\ns.\n\nThe reason there are two separate lists is that imageSizes is only used for images which provide a sizes prop, which indicates that the image is less than the full width of the screen. Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\nformats\n\nThe default Image Optimization API will automatically detect the browser's supported image formats via the request's Accept header.\n\nIf the Accept head matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image is animated), the Image Optimization API will fallback to the original image's format.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n\nYou can enable AVIF support with the following configuration.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    formats: ['image/avif', 'image/webp'],\n  },\n}\n\nGood to know:\n\nAVIF generally takes 20% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.\nIf you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward the Accept header.\nCaching Behavior\n\nThe following describes the caching algorithm for the default loader. For all other loaders, please refer to your cloud provider's documentation.\n\nImages are optimized dynamically upon request and stored in the <distDir>/cache/images directory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date.\n\nThe cache status of an image can be determined by reading the value of the x-nextjs-cache response header. The possible values are the following:\n\nMISS - the path is not in the cache (occurs at most once, on the first visit)\nSTALE - the path is in the cache but exceeded the revalidate time so it will be updated in the background\nHIT - the path is in the cache and has not exceeded the revalidate time\n\nThe expiration (or rather Max Age) is defined by either the minimumCacheTTL configuration or the upstream image Cache-Control header, whichever is larger. Specifically, the max-age value of the Cache-Control header is used. If both s-maxage and max-age are found, then s-maxage is preferred. The max-age is also passed-through to any downstream clients including CDNs and browsers.\n\nYou can configure minimumCacheTTL to increase the cache duration when the upstream image does not include Cache-Control header or the value is very low.\nYou can configure deviceSizes and imageSizes to reduce the total number of possible generated images.\nYou can configure formats to disable multiple formats in favor of a single image format.\nminimumCacheTTL\n\nYou can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use a Static Image Import which will automatically hash the file contents and cache the image forever with a Cache-Control header of immutable.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60,\n  },\n}\n\nThe expiration (or rather Max Age) of the optimized image is defined by either the minimumCacheTTL or the upstream image Cache-Control header, whichever is larger.\n\nIf you need to change the caching behavior per image, you can configure headers to set the Cache-Control header on the upstream image (e.g. /some-asset.jpg, not /_next/image itself).\n\nThere is no mechanism to invalidate the cache at this time, so its best to keep minimumCacheTTL low. Otherwise you may need to manually change the src prop or delete <distDir>/cache/images.\n\ndisableStaticImages\n\nThe default behavior allows you to import static files such as import icon from './icon.png' and then pass that to the src property.\n\nIn some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently.\n\nYou can disable static image imports inside your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\ndangerouslyAllowSVG\n\nThe default loader does not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without proper Content Security Policy (CSP) headers.\n\nTherefore, we recommended using the unoptimized prop when the src prop is known to be SVG. This happens automatically when src ends with \".svg\".\n\nHowever, if you need to serve SVG images with the default Image Optimization API, you can set dangerouslyAllowSVG inside your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n\nIn addition, it is strongly recommended to also set contentDispositionType to force the browser to download the image, as well as contentSecurityPolicy to prevent scripts embedded in the image from executing.\n\ncontentDispositionType\n\nThe default loader sets the Content-Disposition\n header to attachment for added protection since the API can serve arbitrary remote images.\n\nThe default value is attachment which forces the browser to download the image when visiting directly. This is particularly important when dangerouslyAllowSVG is true.\n\nYou can optionally configure inline to allow the browser to render the image when visiting directly, without downloading it.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    contentDispositionType: 'inline',\n  },\n}\nAnimated Images\n\nThe default loader will automatically bypass Image Optimization for animated images and serve the image as-is.\n\nAuto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use the unoptimized prop.\n\nResponsive Images\n\nThe default generated srcset contains 1x and 2x images in order to support different device pixel ratios. However, you may wish to render a responsive image that stretches with the viewport. In that case, you'll need to set sizes as well as style (or className).\n\nYou can render a responsive image using one of the following methods below.\n\nResponsive image using a static import\n\nIf the source image is not dynamic, you can statically import to create a responsive image:\n\ncomponents/author.js\nimport Image from 'next/image'\nimport me from '../photos/me.jpg'\n \nexport default function Author() {\n  return (\n    <Image\n      src={me}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n    />\n  )\n}\n\nTry it out:\n\nDemo the image responsive to viewport\nResponsive image with aspect ratio\n\nIf the source image is a dynamic or a remote url, you will also need to provide width and height to set the correct aspect ratio of the responsive image:\n\ncomponents/page.js\nimport Image from 'next/image'\n \nexport default function Page({ photoUrl }) {\n  return (\n    <Image\n      src={photoUrl}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n      width={500}\n      height={300}\n    />\n  )\n}\n\nTry it out:\n\nDemo the image responsive to viewport\nResponsive image with fill\n\nIf you don't know the aspect ratio, you will need to set the fill prop and set position: relative on the parent. Optionally, you can set object-fit style depending on the desired stretch vs crop behavior:\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page({ photoUrl }) {\n  return (\n    <div style={{ position: 'relative', width: '300px', height: '500px' }}>\n      <Image\n        src={photoUrl}\n        alt=\"Picture of the author\"\n        sizes=\"300px\"\n        fill\n        style={{\n          objectFit: 'contain',\n        }}\n      />\n    </div>\n  )\n}\n\nTry it out:\n\nDemo the fill prop\nTheme Detection CSS\n\nIf you want to display a different image for light and dark mode, you can create a new component that wraps two <Image> components and reveals the correct one based on a CSS media query.\n\ncomponents/theme-image.module.css\n.imgDark {\n  display: none;\n}\n \n@media (prefers-color-scheme: dark) {\n  .imgLight {\n    display: none;\n  }\n  .imgDark {\n    display: unset;\n  }\n}\ncomponents/theme-image.tsx\nTypeScript\nJavaScript\nTypeScript\nimport styles from './theme-image.module.css'\nimport Image, { ImageProps } from 'next/image'\n \ntype Props = Omit<ImageProps, 'src' | 'priority' | 'loading'> & {\n  srcLight: string\n  srcDark: string\n}\n \nconst ThemeImage = (props: Props) => {\n  const { srcLight, srcDark, ...rest } = props\n \n  return (\n    <>\n      <Image {...rest} src={srcLight} className={styles.imgLight} />\n      <Image {...rest} src={srcDark} className={styles.imgDark} />\n    </>\n  )\n}\n\nGood to know: The default behavior of loading=\"lazy\" ensures that only the correct image is loaded. You cannot use priority or loading=\"eager\" because that would cause both images to load. Instead, you can use fetchPriority=\"high\"\n.\n\nTry it out:\n\nDemo light/dark mode theme detection\ngetImageProps\n\nFor more advanced use cases, you can call getImageProps() to get the props that would be passed to the underlying <img> element, and instead pass to them to another component, style, canvas, etc.\n\nThis also avoid calling React useState() so it can lead to better performance, but it cannot be used with the placeholder prop because the placeholder will never be removed.\n\nTheme Detection Picture\n\nIf you want to display a different image for light and dark mode, you can use the <picture>\n element to display a different image based on the user's preferred color scheme\n.\n\napp/page.js\nimport { getImageProps } from 'next/image'\n \nexport default function Page() {\n  const common = { alt: 'Theme Example', width: 800, height: 400 }\n  const {\n    props: { srcSet: dark },\n  } = getImageProps({ ...common, src: '/dark.png' })\n  const {\n    props: { srcSet: light, ...rest },\n  } = getImageProps({ ...common, src: '/light.png' })\n \n  return (\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcSet={dark} />\n      <source media=\"(prefers-color-scheme: light)\" srcSet={light} />\n      <img {...rest} />\n    </picture>\n  )\n}\nArt Direction\n\nIf you want to display a different image for mobile and desktop, sometimes called Art Direction\n, you can provide different src, width, height, and quality props to getImageProps().\n\napp/page.js\nimport { getImageProps } from 'next/image'\n \nexport default function Home() {\n  const common = { alt: 'Art Direction Example', sizes: '100vw' }\n  const {\n    props: { srcSet: desktop },\n  } = getImageProps({\n    ...common,\n    width: 1440,\n    height: 875,\n    quality: 80,\n    src: '/desktop.jpg',\n  })\n  const {\n    props: { srcSet: mobile, ...rest },\n  } = getImageProps({\n    ...common,\n    width: 750,\n    height: 1334,\n    quality: 70,\n    src: '/mobile.jpg',\n  })\n \n  return (\n    <picture>\n      <source media=\"(min-width: 1000px)\" srcSet={desktop} />\n      <source media=\"(min-width: 500px)\" srcSet={mobile} />\n      <img {...rest} style={{ width: '100%', height: 'auto' }} />\n    </picture>\n  )\n}\nBackground CSS\n\nYou can even convert the srcSet string to the image-set()\n CSS function to optimize a background image.\n\napp/page.js\nimport { getImageProps } from 'next/image'\n \nfunction getBackgroundImage(srcSet = '') {\n  const imageSet = srcSet\n    .split(', ')\n    .map((str) => {\n      const [url, dpi] = str.split(' ')\n      return `url(\"${url}\") ${dpi}`\n    })\n    .join(', ')\n  return `image-set(${imageSet})`\n}\n \nexport default function Home() {\n  const {\n    props: { srcSet },\n  } = getImageProps({ alt: '', width: 128, height: 128, src: '/img.png' })\n  const backgroundImage = getBackgroundImage(srcSet)\n  const style = { height: '100vh', width: '100vw', backgroundImage }\n \n  return (\n    <main style={style}>\n      <h1>Hello World</h1>\n    </main>\n  )\n}\nKnown Browser Bugs\n\nThis next/image component uses browser native lazy loading\n, which may fallback to eager loading for older browsers before Safari 15.4. When using the blur-up placeholder, older browsers before Safari 12 will fallback to empty placeholder. When using styles with width/height of auto, it is possible to cause Layout Shift\n on older browsers before Safari 15 that don't preserve the aspect ratio\n. For more details, see this MDN video\n.\n\nSafari 15 - 16.3\n display a gray border while loading. Safari 16.4 fixed this issue\n. Possible solutions:\nUse CSS @supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }\nUse priority if the image is above the fold\nFirefox 67+\n displays a white background while loading. Possible solutions:\nEnable AVIF formats\nUse placeholder\nVersion History\nVersion\tChanges\nv15.0.0\tcontentDispositionType configuration default changed to attachment.\nv14.2.0\toverrideSrc prop added.\nv14.1.0\tgetImageProps() is stable.\nv14.0.0\tonLoadingComplete prop and domains config deprecated.\nv13.4.14\tplaceholder prop support for data:/image...\nv13.2.0\tcontentDispositionType configuration added.\nv13.0.6\tref prop added.\nv13.0.0\tThe next/image import was renamed to next/legacy/image. The next/future/image import was renamed to next/image. A codemod is available to safely and automatically rename your imports. <span> wrapper removed. layout, objectFit, objectPosition, lazyBoundary, lazyRoot props removed. alt is required. onLoadingComplete receives reference to img element. Built-in loader config removed.\nv12.3.0\tremotePatterns and unoptimized configuration is stable.\nv12.2.0\tExperimental remotePatterns and experimental unoptimized configuration added. layout=\"raw\" removed.\nv12.1.1\tstyle prop added. Experimental support for layout=\"raw\" added.\nv12.1.0\tdangerouslyAllowSVG and contentSecurityPolicy configuration added.\nv12.0.9\tlazyRoot prop added.\nv12.0.0\tformats configuration added.\nAVIF support added.\nWrapper <div> changed to <span>.\nv11.1.0\tonLoadingComplete and lazyBoundary props added.\nv11.0.0\tsrc prop support for static import.\nplaceholder prop added.\nblurDataURL prop added.\nv10.0.5\tloader prop added.\nv10.0.1\tlayout prop added.\nv10.0.0\tnext/image introduced."
  },
  {
    "title": "Components: <Head> | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/components/head",
    "html": "<Head>\nExamples\n\nWe expose a built-in component for appending elements to the head of the page:\n\nimport Head from 'next/head'\n \nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n \nexport default IndexPage\nAvoid duplicated tags\n\nTo avoid duplicate tags in your head you can use the key property, which will make sure the tag is only rendered once, as in the following example:\n\nimport Head from 'next/head'\n \nfunction IndexPage() {\n  return (\n    <div>\n      <Head>\n        <title>My page title</title>\n        <meta property=\"og:title\" content=\"My page title\" key=\"title\" />\n      </Head>\n      <Head>\n        <meta property=\"og:title\" content=\"My new title\" key=\"title\" />\n      </Head>\n      <p>Hello world!</p>\n    </div>\n  )\n}\n \nexport default IndexPage\n\nIn this case only the second <meta property=\"og:title\" /> is rendered. meta tags with duplicate key attributes are automatically handled.\n\nThe contents of head get cleared upon unmounting the component, so make sure each page completely defines what it needs in head, without making assumptions about what other pages added.\n\nUse minimal nesting\n\ntitle, meta or any other elements (e.g. script) need to be contained as direct children of the Head element, or wrapped into maximum one level of <React.Fragment> or arrays—otherwise the tags won't be correctly picked up on client-side navigations.\n\nUse next/script for scripts\n\nWe recommend using next/script in your component instead of manually creating a <script> in next/head.\n\nNo html or body tags\n\nYou cannot use <Head> to set attributes on <html> or <body> tags. This will result in an next-head-count is missing error. next/head can only handle tags inside the HTML <head> tag."
  },
  {
    "title": "Components: <Image> (Legacy) | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy",
    "html": "<Image> (Legacy)\nExamples\n\nStarting with Next.js 13, the next/image component was rewritten to improve both the performance and developer experience. In order to provide a backwards compatible upgrade solution, the old next/image was renamed to next/legacy/image.\n\nView the new next/image API Reference\n\nComparison\n\nCompared to next/legacy/image, the new next/image component has the following changes:\n\nRemoves <span> wrapper around <img> in favor of native computed aspect ratio\nAdds support for canonical style prop\nRemoves layout prop in favor of style or className\nRemoves objectFit prop in favor of style or className\nRemoves objectPosition prop in favor of style or className\nRemoves IntersectionObserver implementation in favor of native lazy loading\nRemoves lazyBoundary prop since there is no native equivalent\nRemoves lazyRoot prop since there is no native equivalent\nRemoves loader config in favor of loader prop\nChanged alt prop from optional to required\nChanged onLoadingComplete callback to receive reference to <img> element\nRequired Props\n\nThe <Image /> component requires the following properties.\n\nsrc\n\nMust be one of the following:\n\nA statically imported image file\nA path string. This can be either an absolute external URL, or an internal path depending on the loader prop or loader configuration.\n\nWhen using an external URL, you must add it to remotePatterns in next.config.js.\n\nwidth\n\nThe width property can represent either the rendered width or original width in pixels, depending on the layout and sizes properties.\n\nWhen using layout=\"intrinsic\" or layout=\"fixed\" the width property represents the rendered width in pixels, so it will affect how large the image appears.\n\nWhen using layout=\"responsive\", layout=\"fill\", the width property represents the original width in pixels, so it will only affect the aspect ratio.\n\nThe width property is required, except for statically imported images, or those with layout=\"fill\".\n\nheight\n\nThe height property can represent either the rendered height or original height in pixels, depending on the layout and sizes properties.\n\nWhen using layout=\"intrinsic\" or layout=\"fixed\" the height property represents the rendered height in pixels, so it will affect how large the image appears.\n\nWhen using layout=\"responsive\", layout=\"fill\", the height property represents the original height in pixels, so it will only affect the aspect ratio.\n\nThe height property is required, except for statically imported images, or those with layout=\"fill\".\n\nOptional Props\n\nThe <Image /> component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in the Advanced Props section.\n\nlayout\n\nThe layout behavior of the image as the viewport changes size.\n\nlayout\tBehavior\tsrcSet\tsizes\tHas wrapper and sizer\nintrinsic (default)\tScale down to fit width of container, up to image size\t1x, 2x (based on imageSizes)\tN/A\tyes\nfixed\tSized to width and height exactly\t1x, 2x (based on imageSizes)\tN/A\tyes\nresponsive\tScale to fit width of container\t640w, 750w, ... 2048w, 3840w (based on imageSizes and deviceSizes)\t100vw\tyes\nfill\tGrow in both X and Y axes to fill container\t640w, 750w, ... 2048w, 3840w (based on imageSizes and deviceSizes)\t100vw\tyes\nDemo the intrinsic layout (default)\nWhen intrinsic, the image will scale the dimensions down for smaller viewports, but maintain the original dimensions for larger viewports.\nDemo the fixed layout\nWhen fixed, the image dimensions will not change as the viewport changes (no responsiveness) similar to the native img element.\nDemo the responsive layout\nWhen responsive, the image will scale the dimensions down for smaller viewports and scale up for larger viewports.\nEnsure the parent element uses display: block in their stylesheet.\nDemo the fill layout\nWhen fill, the image will stretch both width and height to the dimensions of the parent element, provided the parent element is relative.\nThis is usually paired with the objectFit property.\nEnsure the parent element has position: relative in their stylesheet.\nDemo background image\nloader\n\nA custom function used to resolve URLs. Setting the loader as a prop on the Image component overrides the default loader defined in the images section of next.config.js.\n\nA loader is a function returning a URL string for the image, given the following parameters:\n\nsrc\nwidth\nquality\n\nHere is an example of using a custom loader:\n\nimport Image from 'next/legacy/image'\n \nconst myLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n \nconst MyImage = (props) => {\n  return (\n    <Image\n      loader={myLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\nsizes\n\nA string that provides information about how wide the image will be at different breakpoints. The value of sizes will greatly affect performance for images using layout=\"responsive\" or layout=\"fill\". It will be ignored for images using layout=\"intrinsic\" or layout=\"fixed\".\n\nThe sizes property serves two important purposes related to image performance:\n\nFirst, the value of sizes is used by the browser to determine which size of the image to download, from next/legacy/image's automatically-generated source set. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. The sizes property allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify a sizes value, a default value of 100vw (full screen width) is used.\n\nSecond, the sizes value is parsed and used to trim the values in the automatically-created source set. If the sizes property includes sizes such as 50vw, which represent a percentage of the viewport width, then the source set is trimmed to not include any values which are too small to ever be necessary.\n\nFor example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:\n\nimport Image from 'next/legacy/image'\nconst Example = () => (\n  <div className=\"grid-element\">\n    <Image\n      src=\"/example.png\"\n      layout=\"fill\"\n      sizes=\"(max-width: 768px) 100vw,\n              (max-width: 1200px) 50vw,\n              33vw\"\n    />\n  </div>\n)\n\nThis example sizes could have a dramatic effect on performance metrics. Without the 33vw sizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, without sizes the user would download an image that's 9 times larger than necessary.\n\nLearn more about srcset and sizes:\n\nweb.dev\nmdn\nquality\n\nThe quality of the optimized image, an integer between 1 and 100 where 100 is the best quality. Defaults to 75.\n\npriority\n\nWhen true, the image will be considered high priority and preload\n. Lazy loading is automatically disabled for images using priority.\n\nYou should use the priority property on any image detected as the Largest Contentful Paint (LCP)\n element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes.\n\nShould only be used when the image is visible above the fold. Defaults to false.\n\nplaceholder\n\nA placeholder to use while the image is loading. Possible values are blur or empty. Defaults to empty.\n\nWhen blur, the blurDataURL property will be used as the placeholder. If src is an object from a static import and the imported image is .jpg, .png, .webp, or .avif, then blurDataURL will be automatically populated.\n\nFor dynamic images, you must provide the blurDataURL property. Solutions such as Plaiceholder\n can help with base64 generation.\n\nWhen empty, there will be no placeholder while the image is loading, only empty space.\n\nTry it out:\n\nDemo the blur placeholder\nDemo the shimmer effect with blurDataURL prop\nDemo the color effect with blurDataURL prop\nAdvanced Props\n\nIn some cases, you may need more advanced usage. The <Image /> component optionally accepts the following advanced properties.\n\nstyle\n\nAllows passing CSS styles\n to the underlying image element.\n\nNote that all layout modes apply their own styles to the image element, and these automatic styles take precedence over the style prop.\n\nAlso keep in mind that the required width and height props can interact with your styling. If you use styling to modify an image's width, you must set the height=\"auto\" style as well, or your image will be distorted.\n\nobjectFit\n\nDefines how the image will fit into its parent container when using layout=\"fill\".\n\nThis value is passed to the object-fit CSS property\n for the src image.\n\nobjectPosition\n\nDefines how the image is positioned within its parent element when using layout=\"fill\".\n\nThis value is passed to the object-position CSS property\n applied to the image.\n\nonLoadingComplete\n\nA callback function that is invoked once the image is completely loaded and the placeholder has been removed.\n\nThe onLoadingComplete function accepts one parameter, an object with the following properties:\n\nnaturalWidth\nnaturalHeight\nloading\n\nAttention: This property is only meant for advanced usage. Switching an image to load with eager will normally hurt performance.\n\nWe recommend using the priority property instead, which properly loads the image eagerly for nearly all use cases.\n\nThe loading behavior of the image. Defaults to lazy.\n\nWhen lazy, defer loading the image until it reaches a calculated distance from the viewport.\n\nWhen eager, load the image immediately.\n\nLearn more\n\nblurDataURL\n\nA Data URL\n to be used as a placeholder image before the src image successfully loads. Only takes effect when combined with placeholder=\"blur\".\n\nMust be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or less) is recommended. Including larger images as placeholders may harm your application performance.\n\nTry it out:\n\nDemo the default blurDataURL prop\nDemo the shimmer effect with blurDataURL prop\nDemo the color effect with blurDataURL prop\n\nYou can also generate a solid color Data URL\n to match the image.\n\nlazyBoundary\n\nA string (with similar syntax to the margin property) that acts as the bounding box used to detect the intersection of the viewport with the image and trigger lazy loading. Defaults to \"200px\".\n\nIf the image is nested in a scrollable parent element other than the root document, you will also need to assign the lazyRoot prop.\n\nLearn more\n\nlazyRoot\n\nA React Ref\n pointing to the scrollable parent element. Defaults to null (the document viewport).\n\nThe Ref must point to a DOM element or a React component that forwards the Ref\n to the underlying DOM element.\n\nExample pointing to a DOM element\n\nimport Image from 'next/legacy/image'\nimport React from 'react'\n \nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n \n  return (\n    <div ref={lazyRoot} style={{ overflowX: 'scroll', width: '500px' }}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </div>\n  )\n}\n\nExample pointing to a React component\n\nimport Image from 'next/legacy/image'\nimport React from 'react'\n \nconst Container = React.forwardRef((props, ref) => {\n  return (\n    <div ref={ref} style={{ overflowX: 'scroll', width: '500px' }}>\n      {props.children}\n    </div>\n  )\n})\n \nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n \n  return (\n    <Container ref={lazyRoot}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </Container>\n  )\n}\n\nLearn more\n\nunoptimized\n\nWhen true, the source image will be served as-is instead of changing quality, size, or format. Defaults to false.\n\nimport Image from 'next/image'\n \nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n\nSince Next.js 12.3.0, this prop can be assigned to all images by updating next.config.js with the following configuration:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\nOther Props\n\nOther properties on the <Image /> component will be passed to the underlying img element with the exception of the following:\n\nsrcSet. Use Device Sizes instead.\nref. Use onLoadingComplete instead.\ndecoding. It is always \"async\".\nConfiguration Options\nRemote Patterns\n\nTo protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with the remotePatterns property in your next.config.js file, as shown below:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n      },\n    ],\n  },\n}\n\nGood to know: The example above will ensure the src property of next/legacy/image must start with https://example.com/account123/. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request.\n\nBelow is another example of the remotePatterns property in the next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n      },\n    ],\n  },\n}\n\nGood to know: The example above will ensure the src property of next/legacy/image must start with https://img1.example.com or https://me.avatar.example.com or any number of subdomains. Any other protocol, port, or unmatched hostname will respond with 400 Bad Request.\n\nWildcard patterns can be used for both pathname and hostname and have the following syntax:\n\n* match a single path segment or subdomain\n** match any number of path segments at the end or subdomains at the beginning\n\nThe ** syntax does not work in the middle of the pattern.\n\nGood to know: When omitting protocol, port or pathname, then the wildcard ** is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend.\n\nDomains\n\nWarning: Deprecated since Next.js 14 in favor of strict remotePatterns in order to protect your application from malicious users. Only use domains if you own all the content served from the domain.\n\nSimilar to remotePatterns, the domains configuration can be used to provide a list of allowed hostnames for external images.\n\nHowever, the domains configuration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname.\n\nBelow is an example of the domains property in the next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\nLoader Configuration\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure the loader and path prefix in your next.config.js file. This allows you to use relative URLs for the Image src and automatically generate the correct absolute URL for your provider.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    loader: 'imgix',\n    path: 'https://example.com/myaccount/',\n  },\n}\nBuilt-in Loaders\n\nThe following Image Optimization cloud providers are included:\n\nDefault: Works automatically with next dev, next start, or a custom server\nVercel\n: Works automatically when you deploy on Vercel, no configuration necessary. Learn more\nImgix\n: loader: 'imgix'\nCloudinary\n: loader: 'cloudinary'\nAkamai\n: loader: 'akamai'\nCustom: loader: 'custom' use a custom cloud provider by implementing the loader prop on the next/legacy/image component\n\nIf you need a different provider, you can use the loader prop with next/legacy/image.\n\nImages can not be optimized at build time using output: 'export', only on-demand. To use next/legacy/image with output: 'export', you will need to use a different loader than the default. Read more in the discussion.\n\nAdvanced\n\nThe following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates.\n\nDevice Sizes\n\nIf you know the expected device widths of your users, you can specify a list of device width breakpoints using the deviceSizes property in next.config.js. These widths are used when the next/legacy/image component uses layout=\"responsive\" or layout=\"fill\" to ensure the correct image is served for user's device.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\nImage Sizes\n\nYou can specify a list of image widths using the images.imageSizes property in your next.config.js file. These widths are concatenated with the array of device sizes to form the full array of sizes used to generate image srcset\ns.\n\nThe reason there are two separate lists is that imageSizes is only used for images which provide a sizes prop, which indicates that the image is less than the full width of the screen. Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\nAcceptable Formats\n\nThe default Image Optimization API will automatically detect the browser's supported image formats via the request's Accept header.\n\nIf the Accept head matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image is animated), the Image Optimization API will fallback to the original image's format.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n\nYou can enable AVIF support with the following configuration.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    formats: ['image/avif', 'image/webp'],\n  },\n}\n\nGood to know: AVIF generally takes 20% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.\n\nCaching Behavior\n\nThe following describes the caching algorithm for the default loader. For all other loaders, please refer to your cloud provider's documentation.\n\nImages are optimized dynamically upon request and stored in the <distDir>/cache/images directory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date.\n\nThe cache status of an image can be determined by reading the value of the x-nextjs-cache (x-vercel-cache when deployed on Vercel) response header. The possible values are the following:\n\nMISS - the path is not in the cache (occurs at most once, on the first visit)\nSTALE - the path is in the cache but exceeded the revalidate time so it will be updated in the background\nHIT - the path is in the cache and has not exceeded the revalidate time\n\nThe expiration (or rather Max Age) is defined by either the minimumCacheTTL configuration or the upstream image Cache-Control header, whichever is larger. Specifically, the max-age value of the Cache-Control header is used. If both s-maxage and max-age are found, then s-maxage is preferred. The max-age is also passed-through to any downstream clients including CDNs and browsers.\n\nYou can configure minimumCacheTTL to increase the cache duration when the upstream image does not include Cache-Control header or the value is very low.\nYou can configure deviceSizes and imageSizes to reduce the total number of possible generated images.\nYou can configure formats to disable multiple formats in favor of a single image format.\nMinimum Cache TTL\n\nYou can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use a Static Image Import which will automatically hash the file contents and cache the image forever with a Cache-Control header of immutable.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60,\n  },\n}\n\nThe expiration (or rather Max Age) of the optimized image is defined by either the minimumCacheTTL or the upstream image Cache-Control header, whichever is larger.\n\nIf you need to change the caching behavior per image, you can configure headers to set the Cache-Control header on the upstream image (e.g. /some-asset.jpg, not /_next/image itself).\n\nThere is no mechanism to invalidate the cache at this time, so its best to keep minimumCacheTTL low. Otherwise you may need to manually change the src prop or delete <distDir>/cache/images.\n\nDisable Static Imports\n\nThe default behavior allows you to import static files such as import icon from './icon.png' and then pass that to the src property.\n\nIn some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently.\n\nYou can disable static image imports inside your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\nDangerously Allow SVG\n\nThe default loader does not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without proper Content Security Policy (CSP) headers.\n\nTherefore, we recommended using the unoptimized prop when the src prop is known to be SVG. This happens automatically when src ends with \".svg\".\n\nHowever, if you need to serve SVG images with the default Image Optimization API, you can set dangerouslyAllowSVG inside your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n\nIn addition, it is strongly recommended to also set contentDispositionType to force the browser to download the image, as well as contentSecurityPolicy to prevent scripts embedded in the image from executing.\n\ncontentDispositionType\n\nThe default loader sets the Content-Disposition\n header to attachment for added protection since the API can serve arbitrary remote images.\n\nThe default value is attachment which forces the browser to download the image when visiting directly. This is particularly important when dangerouslyAllowSVG is true.\n\nYou can optionally configure inline to allow the browser to render the image when visiting directly, without downloading it.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    contentDispositionType: 'inline',\n  },\n}\nAnimated Images\n\nThe default loader will automatically bypass Image Optimization for animated images and serve the image as-is.\n\nAuto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use the unoptimized prop.\n\nVersion History\nVersion\tChanges\nv13.0.0\tnext/image renamed to next/legacy/image"
  },
  {
    "title": "Components: Font | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/components/font",
    "html": "Font Module\n\nThis API reference will help you understand how to use next/font/google and next/font/local. For features and usage, please see the Optimizing Fonts page.\n\nFont Function Arguments\n\nFor usage, review Google Fonts and Local Fonts.\n\nKey\tfont/google\tfont/local\tType\tRequired\nsrc\t\n\t\n\tString or Array of Objects\tYes\nweight\t\n\t\n\tString or Array\tRequired/Optional\nstyle\t\n\t\n\tString or Array\t-\nsubsets\t\n\t\n\tArray of Strings\t-\naxes\t\n\t\n\tArray of Strings\t-\ndisplay\t\n\t\n\tString\t-\npreload\t\n\t\n\tBoolean\t-\nfallback\t\n\t\n\tArray of Strings\t-\nadjustFontFallback\t\n\t\n\tBoolean or String\t-\nvariable\t\n\t\n\tString\t-\ndeclarations\t\n\t\n\tArray of Objects\t-\nsrc\n\nThe path of the font file as a string or an array of objects (with type Array<{path: string, weight?: string, style?: string}>) relative to the directory where the font loader function is called.\n\nUsed in next/font/local\n\nRequired\n\nExamples:\n\nsrc:'./fonts/my-font.woff2' where my-font.woff2 is placed in a directory named fonts inside the app directory\nsrc:[{path: './inter/Inter-Thin.ttf', weight: '100',},{path: './inter/Inter-Regular.ttf',weight: '400',},{path: './inter/Inter-Bold-Italic.ttf', weight: '700',style: 'italic',},]\nif the font loader function is called in app/page.tsx using src:'../styles/fonts/my-font.ttf', then my-font.ttf is placed in styles/fonts at the root of the project\nweight\n\nThe font weight\n with the following possibilities:\n\nA string with possible values of the weights available for the specific font or a range of values if it's a variable\n font\nAn array of weight values if the font is not a variable google font\n. It applies to next/font/google only.\n\nUsed in next/font/google and next/font/local\n\nRequired if the font being used is not variable\n\nExamples:\n\nweight: '400': A string for a single weight value - for the font Inter\n, the possible values are '100', '200', '300', '400', '500', '600', '700', '800', '900' or 'variable' where 'variable' is the default)\nweight: '100 900': A string for the range between 100 and 900 for a variable font\nweight: ['100','400','900']: An array of 3 possible values for a non variable font\nstyle\n\nThe font style\n with the following possibilities:\n\nA string value\n with default value of 'normal'\nAn array of style values if the font is not a variable google font\n. It applies to next/font/google only.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\nstyle: 'italic': A string - it can be normal or italic for next/font/google\nstyle: 'oblique': A string - it can take any value for next/font/local but is expected to come from standard font styles\nstyle: ['italic','normal']: An array of 2 values for next/font/google - the values are from normal and italic\nsubsets\n\nThe font subsets\n defined by an array of string values with the names of each subset you would like to be preloaded. Fonts specified via subsets will have a link preload tag injected into the head when the preload option is true, which is the default.\n\nUsed in next/font/google\n\nOptional\n\nExamples:\n\nsubsets: ['latin']: An array with the subset latin\n\nYou can find a list of all subsets on the Google Fonts page for your font.\n\naxes\n\nSome variable fonts have extra axes that can be included. By default, only the font weight is included to keep the file size down. The possible values of axes depend on the specific font.\n\nUsed in next/font/google\n\nOptional\n\nExamples:\n\naxes: ['slnt']: An array with value slnt for the Inter variable font which has slnt as additional axes as shown here\n. You can find the possible axes values for your font by using the filter on the Google variable fonts page\n and looking for axes other than wght\ndisplay\n\nThe font display\n with possible string values\n of 'auto', 'block', 'swap', 'fallback' or 'optional' with default value of 'swap'.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\ndisplay: 'optional': A string assigned to the optional value\npreload\n\nA boolean value that specifies whether the font should be preloaded or not. The default is true.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\npreload: false\nfallback\n\nThe fallback font to use if the font cannot be loaded. An array of strings of fallback fonts with no default.\n\nOptional\n\nUsed in next/font/google and next/font/local\n\nExamples:\n\nfallback: ['system-ui', 'arial']: An array setting the fallback fonts to system-ui or arial\nadjustFontFallback\nFor next/font/google: A boolean value that sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift\n. The default is true.\nFor next/font/local: A string or boolean false value that sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift\n. The possible values are 'Arial', 'Times New Roman' or false. The default is 'Arial'.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\nadjustFontFallback: false: for next/font/google\nadjustFontFallback: 'Times New Roman': for next/font/local\nvariable\n\nA string value to define the CSS variable name to be used if the style is applied with the CSS variable method.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\nvariable: '--my-font': The CSS variable --my-font is declared\ndeclarations\n\nAn array of font face descriptor\n key-value pairs that define the generated @font-face further.\n\nUsed in next/font/local\n\nOptional\n\nExamples:\n\ndeclarations: [{ prop: 'ascent-override', value: '90%' }]\nApplying Styles\n\nYou can apply the font styles in three ways:\n\nclassName\nstyle\nCSS Variables\nclassName\n\nReturns a read-only CSS className for the loaded font to be passed to an HTML element.\n\n<p className={inter.className}>Hello, Next.js!</p>\nstyle\n\nReturns a read-only CSS style object for the loaded font to be passed to an HTML element, including style.fontFamily to access the font family name and fallback fonts.\n\n<p style={inter.style}>Hello World</p>\nCSS Variables\n\nIf you would like to set your styles in an external style sheet and specify additional options there, use the CSS variable method.\n\nIn addition to importing the font, also import the CSS file where the CSS variable is defined and set the variable option of the font loader object as follows:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n \nconst inter = Inter({\n  variable: '--font-inter',\n})\n\nTo use the font, set the className of the parent container of the text you would like to style to the font loader's variable value and the className of the text to the styles property from the external CSS file.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n<main className={inter.variable}>\n  <p className={styles.text}>Hello World</p>\n</main>\n\nDefine the text selector class in the component.module.css CSS file as follows:\n\nstyles/component.module.css\n.text {\n  font-family: var(--font-inter);\n  font-weight: 200;\n  font-style: italic;\n}\n\nIn the example above, the text Hello World is styled using the Inter font and the generated font fallback with font-weight: 200 and font-style: italic.\n\nUsing a font definitions file\n\nEvery time you call the localFont or Google font function, that font will be hosted as one instance in your application. Therefore, if you need to use the same font in multiple places, you should load it in one place and import the related font object where you need it. This is done using a font definitions file.\n\nFor example, create a fonts.ts file in a styles folder at the root of your app directory.\n\nThen, specify your font definitions as follows:\n\nstyles/fonts.ts\nTypeScript\nJavaScript\nTypeScript\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n \n// define your variable fonts\nconst inter = Inter()\nconst lora = Lora()\n// define 2 weights of a non-variable font\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\n// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n \nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n\nYou can now use these definitions in your code as follows:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'\n \nexport default function Page() {\n  return (\n    <div>\n      <p className={inter.className}>Hello world using Inter font</p>\n      <p style={lora.style}>Hello world using Lora font</p>\n      <p className={sourceCodePro700.className}>\n        Hello world using Source_Sans_3 font with weight 700\n      </p>\n      <p className={greatVibes.className}>My title in Great Vibes font</p>\n    </div>\n  )\n}\n\nTo make it easier to access the font definitions in your code, you can define a path alias in your tsconfig.json or jsconfig.json files as follows:\n\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/fonts\": [\"./styles/fonts\"]\n    }\n  }\n}\n\nYou can now import any font definition as follows:\n\napp/about/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { greatVibes, sourceCodePro400 } from '@/fonts'\nVersion Changes\nVersion\tChanges\nv13.2.0\t@next/font renamed to next/font. Installation no longer required.\nv13.0.0\t@next/font was added."
  },
  {
    "title": "API Reference: Components | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference/components",
    "html": "Components"
  },
  {
    "title": "Pages Router: API Reference | Next.js",
    "url": "https://nextjs.org/docs/pages/api-reference",
    "html": "API Reference"
  },
  {
    "title": "Upgrading: Version 9 | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/version-9",
    "html": "Upgrading to Version 9\n\nTo upgrade to version 9, run the following command:\n\nTerminal\nnpm i next@9\nTerminal\nyarn add next@9\nTerminal\npnpm up next@9\nTerminal\nbun add next@9\n\nGood to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their corresponding versions.\n\nProduction Deployment on Vercel\n\nIf you previously configured routes in your vercel.json file for dynamic routes, these rules can be removed when leveraging Next.js 9's new Dynamic Routing feature.\n\nNext.js 9's dynamic routes are automatically configured on Vercel\n and do not require any vercel.json customization.\n\nYou can read more about Dynamic Routing here.\n\nCheck your Custom App File (pages/_app.js)\n\nIf you previously copied the Custom <App> example, you may be able to remove your getInitialProps.\n\nRemoving getInitialProps from pages/_app.js (when possible) is important to leverage new Next.js features!\n\nThe following getInitialProps does nothing and may be removed:\n\nclass MyApp extends App {\n  // Remove me, I do nothing!\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {}\n \n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n \n    return { pageProps }\n  }\n \n  render() {\n    // ... etc\n  }\n}\nBreaking Changes\n@zeit/next-typescript is no longer necessary\n\nNext.js will now ignore usage @zeit/next-typescript and warn you to remove it. Please remove this plugin from your next.config.js.\n\nRemove references to @zeit/next-typescript/babel from your custom .babelrc (if present).\n\nThe usage of fork-ts-checker-webpack-plugin\n should also be removed from your next.config.js.\n\nTypeScript Definitions are published with the next package, so you need to uninstall @types/next as they would conflict.\n\nThe following types are different:\n\nThis list was created by the community to help you upgrade, if you find other differences please send a pull-request to this list to help other users.\n\nFrom:\n\nimport { NextContext } from 'next'\nimport { NextAppContext, DefaultAppIProps } from 'next/app'\nimport { NextDocumentContext, DefaultDocumentIProps } from 'next/document'\n\nto\n\nimport { NextPageContext } from 'next'\nimport { AppContext, AppInitialProps } from 'next/app'\nimport { DocumentContext, DocumentInitialProps } from 'next/document'\nThe config key is now an export on a page\n\nYou may no longer export a custom variable named config from a page (i.e. export { config } / export const config ...). This exported variable is now used to specify page-level Next.js configuration like Opt-in AMP and API Route features.\n\nYou must rename a non-Next.js-purposed config export to something different.\n\nnext/dynamic no longer renders \"loading...\" by default while loading\n\nDynamic components will not render anything by default while loading. You can still customize this behavior by setting the loading property:\n\nimport dynamic from 'next/dynamic'\n \nconst DynamicComponentWithCustomLoading = dynamic(\n  () => import('../components/hello2'),\n  {\n    loading: () => <p>Loading</p>,\n  }\n)\nwithAmp has been removed in favor of an exported configuration object\n\nNext.js now has the concept of page-level configuration, so the withAmp higher-order component has been removed for consistency.\n\nThis change can be automatically migrated by running the following commands in the root of your Next.js project:\n\nTerminal\ncurl -L https://github.com/vercel/next-codemod/archive/master.tar.gz | tar -xz --strip=2 next-codemod-master/transforms/withamp-to-config.js npx jscodeshift -t ./withamp-to-config.js pages/**/*.js\n\nTo perform this migration by hand, or view what the codemod will produce, see below:\n\nBefore\n\nimport { withAmp } from 'next/amp'\n \nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n \nexport default withAmp(Home)\n// or\nexport default withAmp(Home, { hybrid: true })\n\nAfter\n\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n \nexport const config = {\n  amp: true,\n  // or\n  amp: 'hybrid',\n}\nnext export no longer exports pages as index.html\n\nPreviously, exporting pages/about.js would result in out/about/index.html. This behavior has been changed to result in out/about.html.\n\nYou can revert to the previous behavior by creating a next.config.js with the following content:\n\nnext.config.js\nmodule.exports = {\n  trailingSlash: true,\n}\npages/api/ is treated differently\n\nPages in pages/api/ are now considered API Routes\n. Pages in this directory will no longer contain a client-side bundle.\n\nDeprecated Features\nnext/dynamic has deprecated loading multiple modules at once\n\nThe ability to load multiple modules at once has been deprecated in next/dynamic to be closer to React's implementation (React.lazy and Suspense).\n\nUpdating code that relies on this behavior is relatively straightforward! We've provided an example of a before/after to help you migrate your application:\n\nBefore\n\nimport dynamic from 'next/dynamic'\n \nconst HelloBundle = dynamic({\n  modules: () => {\n    const components = {\n      Hello1: () => import('../components/hello1').then((m) => m.default),\n      Hello2: () => import('../components/hello2').then((m) => m.default),\n    }\n \n    return components\n  },\n  render: (props, { Hello1, Hello2 }) => (\n    <div>\n      <h1>{props.title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  ),\n})\n \nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n \nexport default DynamicBundle\n\nAfter\n\nimport dynamic from 'next/dynamic'\n \nconst Hello1 = dynamic(() => import('../components/hello1'))\nconst Hello2 = dynamic(() => import('../components/hello2'))\n \nfunction HelloBundle({ title }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  )\n}\n \nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n \nexport default DynamicBundle"
  },
  {
    "title": "Upgrading: Version 11 | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/version-11",
    "html": "Version 11\n\nTo upgrade to version 11, run the following command:\n\nTerminal\nnpm i next@11 react@17 react-dom@17\nTerminal\nyarn add next@11 react@17 react-dom@17\nTerminal\npnpm up next@11 react@17 react-dom@17\nTerminal\nbun add next@11 react@17 react-dom@17\n\nGood to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their corresponding versions.\n\nWebpack 5\n\nWebpack 5 is now the default for all Next.js applications. If you did not have a custom webpack configuration, your application is already using webpack 5. If you do have a custom webpack configuration, you can refer to the Next.js webpack 5 documentation for upgrade guidance.\n\nCleaning the distDir is now a default\n\nThe build output directory (defaults to .next) is now cleared by default except for the Next.js caches. You can refer to the cleaning distDir RFC\n for more information.\n\nIf your application was relying on this behavior previously you can disable the new default behavior by adding the cleanDistDir: false flag in next.config.js.\n\nPORT is now supported for next dev and next start\n\nNext.js 11 supports the PORT environment variable to set the port the application runs on. Using -p/--port is still recommended but if you were prohibited from using -p in any way you can now use PORT as an alternative:\n\nExample:\n\nPORT=4000 next start\n\nnext.config.js customization to import images\n\nNext.js 11 supports static image imports with next/image. This new feature relies on being able to process image imports. If you previously added the next-images or next-optimized-images packages you can either move to the new built-in support using next/image or disable the feature:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\nRemove super.componentDidCatch() from pages/_app.js\n\nThe next/app component's componentDidCatch was deprecated in Next.js 9 as it's no longer needed and has since been a no-op. In Next.js 11, it was removed.\n\nIf your pages/_app.js has a custom componentDidCatch method you can remove super.componentDidCatch as it is no longer needed.\n\nRemove Container from pages/_app.js\n\nThis export was deprecated in Next.js 9 as it's no longer needed and has since been a no-op with a warning during development. In Next.js 11 it was removed.\n\nIf your pages/_app.js imports Container from next/app you can remove Container as it was removed. Learn more in the documentation.\n\nRemove props.url usage from page components\n\nThis property was deprecated in Next.js 4 and has since shown a warning during development. With the introduction of getStaticProps / getServerSideProps these methods already disallowed the usage of props.url. In Next.js 11, it was removed completely.\n\nYou can learn more in the documentation.\n\nRemove unsized property on next/image\n\nThe unsized property on next/image was deprecated in Next.js 10.0.1. You can use layout=\"fill\" instead. In Next.js 11 unsized was removed.\n\nRemove modules property on next/dynamic\n\nThe modules and render option for next/dynamic were deprecated in Next.js 9.5. This was done in order to make the next/dynamic API closer to React.lazy. In Next.js 11, the modules and render options were removed.\n\nThis option hasn't been mentioned in the documentation since Next.js 8 so it's less likely that your application is using it.\n\nIf your application does use modules and render you can refer to the documentation.\n\nRemove Head.rewind\n\nHead.rewind has been a no-op since Next.js 9.5, in Next.js 11 it was removed. You can safely remove your usage of Head.rewind.\n\nMoment.js locales excluded by default\n\nMoment.js includes translations for a lot of locales by default. Next.js now automatically excludes these locales by default to optimize bundle size for applications using Moment.js.\n\nTo load a specific locale use this snippet:\n\nimport moment from 'moment'\nimport 'moment/locale/ja'\n \nmoment.locale('ja')\n\nYou can opt-out of this new default by adding excludeDefaultMomentLocales: false to next.config.js if you do not want the new behavior, do note it's highly recommended to not disable this new optimization as it significantly reduces the size of Moment.js.\n\nUpdate usage of router.events\n\nIn case you're accessing router.events during rendering, in Next.js 11 router.events is no longer provided during pre-rendering. Ensure you're accessing router.events in useEffect:\n\nuseEffect(() => {\n  const handleRouteChange = (url, { shallow }) => {\n    console.log(\n      `App is changing to ${url} ${\n        shallow ? 'with' : 'without'\n      } shallow routing`\n    )\n  }\n \n  router.events.on('routeChangeStart', handleRouteChange)\n \n  // If the component is unmounted, unsubscribe\n  // from the event with the `off` method:\n  return () => {\n    router.events.off('routeChangeStart', handleRouteChange)\n  }\n}, [router])\n\nIf your application uses router.router.events which was an internal property that was not public please make sure to use router.events as well.\n\nReact 16 to 17\n\nReact 17 introduced a new JSX Transform\n that brings a long-time Next.js feature to the wider React ecosystem: Not having to import React from 'react' when using JSX. When using React 17 Next.js will automatically use the new transform. This transform does not make the React variable global, which was an unintended side-effect of the previous Next.js implementation. A codemod is available to automatically fix cases where you accidentally used React without importing it.\n\nMost applications already use the latest version of React, with Next.js 11 the minimum React version has been updated to 17.0.2.\n\nTo upgrade you can run the following command:\n\nnpm install react@latest react-dom@latest\n\n\nOr using yarn:\n\nyarn add react@latest react-dom@latest\n"
  },
  {
    "title": "Upgrading: Version 10 | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/version-10",
    "html": "Version 10\n\nThere were no breaking changes between versions 9 and 10.\n\nTo upgrade to version 10, run the following command:\n\nTerminal\nnpm i next@10\nTerminal\nyarn add next@10\nTerminal\npnpm up next@10\nTerminal\nbun add next@10\n\nGood to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their corresponding versions."
  },
  {
    "title": "Upgrading: Version 12 | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/version-12",
    "html": "Version 12\n\nTo upgrade to version 12, run the following command:\n\nTerminal\nnpm i next@12 react@17 react-dom@17 eslint-config-next@12\nTerminal\nyarn add next@12 react@17 react-dom@17 eslint-config-next@12\nTerminal\npnpm up next@12 react@17 react-dom@17 eslint-config-next@12\nTerminal\nbun add next@12 react@17 react-dom@17 eslint-config-next@12\n\nGood to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their corresponding versions.\n\nUpgrading to 12.2\n\nMiddleware - If you were using Middleware prior to 12.2, please see the upgrade guide for more information.\n\nUpgrading to 12.0\n\nMinimum Node.js Version\n - The minimum Node.js version has been bumped from 12.0.0 to 12.22.0 which is the first version of Node.js with native ES Modules support.\n\nMinimum React Version\n - The minimum required React version is 17.0.2. To upgrade you can run the following command in the terminal:\n\nTerminal\nnpm install react@latest react-dom@latest\n \nyarn add react@latest react-dom@latest\n \npnpm update react@latest react-dom@latest\n \nbun add react@latest react-dom@latest\nSWC replacing Babel\n\nNext.js now uses the Rust-based compiler SWC\n to compile JavaScript/TypeScript. This new compiler is up to 17x faster than Babel when compiling individual files and up to 5x faster Fast Refresh.\n\nNext.js provides full backward compatibility with applications that have custom Babel configuration. All transformations that Next.js handles by default like styled-jsx and tree-shaking of getStaticProps / getStaticPaths / getServerSideProps have been ported to Rust.\n\nWhen an application has a custom Babel configuration, Next.js will automatically opt-out of using SWC for compiling JavaScript/Typescript and will fall back to using Babel in the same way that it was used in Next.js 11.\n\nMany of the integrations with external libraries that currently require custom Babel transformations will be ported to Rust-based SWC transforms in the near future. These include but are not limited to:\n\nStyled Components\nEmotion\nRelay\n\nIn order to prioritize transforms that will help you adopt SWC, please provide your .babelrc on this feedback thread\n.\n\nSWC replacing Terser for minification\n\nYou can opt-in to replacing Terser with SWC for minifying JavaScript up to 7x faster using a flag in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  swcMinify: true,\n}\n\nMinification using SWC is an opt-in flag to ensure it can be tested against more real-world Next.js applications before it becomes the default in Next.js 12.1. If you have feedback about minification, please leave it on this feedback thread\n.\n\nImprovements to styled-jsx CSS parsing\n\nOn top of the Rust-based compiler we've implemented a new CSS parser based on the one used for the styled-jsx Babel transform. This new parser has improved handling of CSS and now errors when invalid CSS is used that would previously slip through and cause unexpected behavior.\n\nBecause of this change invalid CSS will throw an error during development and next build. This change only affects styled-jsx usage.\n\nnext/image changed wrapping element\n\nnext/image now renders the <img> inside a <span> instead of <div>.\n\nIf your application has specific CSS targeting span such as .container span, upgrading to Next.js 12 might incorrectly match the wrapping element inside the <Image> component. You can avoid this by restricting the selector to a specific class such as .container span.item and updating the relevant component with that className, such as <span className=\"item\" />.\n\nIf your application has specific CSS targeting the next/image <div> tag, for example .container div, it may not match anymore. You can update the selector .container span, or preferably, add a new <div className=\"wrapper\"> wrapping the <Image> component and target that instead such as .container .wrapper.\n\nThe className prop is unchanged and will still be passed to the underlying <img> element.\n\nSee the documentation for more info.\n\nHMR connection now uses a WebSocket\n\nPreviously, Next.js used a server-sent events\n connection to receive HMR events. Next.js 12 now uses a WebSocket connection.\n\nIn some cases when proxying requests to the Next.js dev server, you will need to ensure the upgrade request is handled correctly. For example, in nginx you would need to add the following configuration:\n\nlocation /_next/webpack-hmr {\n    proxy_pass http://localhost:3000/_next/webpack-hmr;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n\nIf you are using Apache (2.x), you can add the following configuration to enable web sockets to the server. Review the port, host name and server names.\n\n<VirtualHost *:443>\n # ServerName yourwebsite.local\n ServerName \"${WEBSITE_SERVER_NAME}\"\n ProxyPass / http://localhost:3000/\n ProxyPassReverse / http://localhost:3000/\n # Next.js 12 uses websocket\n <Location /_next/webpack-hmr>\n    RewriteEngine On\n    RewriteCond %{QUERY_STRING} transport=websocket [NC]\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule /(.*) ws://localhost:3000/_next/webpack-hmr/$1 [P,L]\n    ProxyPass ws://localhost:3000/_next/webpack-hmr retry=0 timeout=30\n    ProxyPassReverse ws://localhost:3000/_next/webpack-hmr\n </Location>\n</VirtualHost>\n\n\nFor custom servers, such as express, you may need to use app.all to ensure the request is passed correctly, for example:\n\napp.all('/_next/webpack-hmr', (req, res) => {\n  nextjsRequestHandler(req, res)\n})\nWebpack 4 support has been removed\n\nIf you are already using webpack 5 you can skip this section.\n\nNext.js has adopted webpack 5 as the default for compilation in Next.js 11. As communicated in the webpack 5 upgrading documentation Next.js 12 removes support for webpack 4.\n\nIf your application is still using webpack 4 using the opt-out flag, you will now see an error linking to the webpack 5 upgrading documentation.\n\ntarget option deprecated\n\nIf you do not have target in next.config.js you can skip this section.\n\nThe target option has been deprecated in favor of built-in support for tracing what dependencies are needed to run a page.\n\nDuring next build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application.\n\nIf you are currently using the target option set to serverless, please read the documentation on how to leverage the new output."
  },
  {
    "title": "Upgrading: Version 13 | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/version-13",
    "html": "Version 13\nUpgrading from 12 to 13\n\nTo update to Next.js version 13, run the following command using your preferred package manager:\n\nTerminal\nnpm i next@13 react@latest react-dom@latest eslint-config-next@13\nTerminal\nyarn add next@13 react@latest react-dom@latest eslint-config-next@13\nTerminal\npnpm i next@13 react@latest react-dom@latest eslint-config-next@13\nTerminal\nbun add next@13 react@latest react-dom@latest eslint-config-next@13\n\nGood to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their latest versions.\n\nv13 Summary\nThe Supported Browsers have been changed to drop Internet Explorer and target modern browsers.\nThe minimum Node.js version has been bumped from 12.22.0 to 16.14.0, since 12.x and 14.x have reached end-of-life.\nThe minimum React version has been bumped from 17.0.2 to 18.2.0.\nThe swcMinify configuration property was changed from false to true. See Next.js Compiler for more info.\nThe next/image import was renamed to next/legacy/image. The next/future/image import was renamed to next/image. A codemod is available to safely and automatically rename your imports.\nThe next/link child can no longer be <a>. Add the legacyBehavior prop to use the legacy behavior or remove the <a> to upgrade. A codemod is available to automatically upgrade your code.\nThe target configuration property has been removed and superseded by Output File Tracing.\nMigrating shared features\n\nNext.js 13 introduces a new app directory with new features and conventions. However, upgrading to Next.js 13 does not require using the new app directory.\n\nYou can continue using pages with new features that work in both directories, such as the updated Image component, Link component, Script component, and Font optimization.\n\n<Image/> Component\n\nNext.js 12 introduced many improvements to the Image Component with a temporary import: next/future/image. These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading.\n\nStarting in Next.js 13, this new behavior is now the default for next/image.\n\nThere are two codemods to help you migrate to the new Image Component:\n\nnext-image-to-legacy-image: This codemod will safely and automatically rename next/image imports to next/legacy/image to maintain the same behavior as Next.js 12. We recommend running this codemod to quickly update to Next.js 13 automatically.\nnext-image-experimental: After running the previous codemod, you can optionally run this experimental codemod to upgrade next/legacy/image to the new next/image, which will remove unused props and add inline styles. Please note this codemod is experimental and only covers static usage (such as <Image src={img} layout=\"responsive\" />) but not dynamic usage (such as <Image {...props} />).\n\nAlternatively, you can manually update by following the migration guide and also see the legacy comparison.\n\n<Link> Component\n\nThe <Link> Component no longer requires manually adding an <a> tag as a child. This behavior was added as an experimental option in version 12.2\n and is now the default. In Next.js 13, <Link> always renders <a> and allows you to forward props to the underlying tag.\n\nFor example:\n\nimport Link from 'next/link'\n \n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n \n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n\nTo upgrade your links to Next.js 13, you can use the new-link codemod.\n\n<Script> Component\n\nThe behavior of next/script has been updated to support both pages and app. If incrementally adopting app, read the upgrade guide.\n\nFont Optimization\n\nPreviously, Next.js helped you optimize fonts by inlining font CSS. Version 13 introduces the new next/font module which gives you the ability to customize your font loading experience while still ensuring great performance and privacy.\n\nSee Optimizing Fonts to learn how to use next/font."
  },
  {
    "title": "Upgrading: From Pages to App | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/app-router-migration",
    "html": "From Pages to App\n\nThis guide will help you:\n\nUpdate your Next.js application from version 12 to version 13\nUpgrade features that work in both the pages and the app directories\nIncrementally migrate your existing application from pages to app\nUpgrading\nNode.js Version\n\nThe minimum Node.js version is now v18.17. See the Node.js documentation\n for more information.\n\nNext.js Version\n\nTo update to Next.js version 13, run the following command using your preferred package manager:\n\nTerminal\nnpm install next@latest react@latest react-dom@latest\nESLint Version\n\nIf you're using ESLint, you need to upgrade your ESLint version:\n\nTerminal\nnpm install -D eslint-config-next@latest\n\nGood to know: You may need to restart the ESLint server in VS Code for the ESLint changes to take effect. Open the Command Palette (cmd+shift+p on Mac; ctrl+shift+p on Windows) and search for ESLint: Restart ESLint Server.\n\nNext Steps\n\nAfter you've updated, see the following sections for next steps:\n\nUpgrade new features: A guide to help you upgrade to new features such as the improved Image and Link Components.\nMigrate from the pages to app directory: A step-by-step guide to help you incrementally migrate from the pages to the app directory.\nUpgrading New Features\n\nNext.js 13 introduced the new App Router with new features and conventions. The new Router is available in the app directory and co-exists with the pages directory.\n\nUpgrading to Next.js 13 does not require using the new App Router. You can continue using pages with new features that work in both directories, such as the updated Image component, Link component, Script component, and Font optimization.\n\n<Image/> Component\n\nNext.js 12 introduced new improvements to the Image Component with a temporary import: next/future/image. These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading.\n\nIn version 13, this new behavior is now the default for next/image.\n\nThere are two codemods to help you migrate to the new Image Component:\n\nnext-image-to-legacy-image codemod: Safely and automatically renames next/image imports to next/legacy/image. Existing components will maintain the same behavior.\nnext-image-experimental codemod: Dangerously adds inline styles and removes unused props. This will change the behavior of existing components to match the new defaults. To use this codemod, you need to run the next-image-to-legacy-image codemod first.\n<Link> Component\n\nThe <Link> Component no longer requires manually adding an <a> tag as a child. This behavior was added as an experimental option in version 12.2\n and is now the default. In Next.js 13, <Link> always renders <a> and allows you to forward props to the underlying tag.\n\nFor example:\n\nimport Link from 'next/link'\n \n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n \n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n\nTo upgrade your links to Next.js 13, you can use the new-link codemod.\n\n<Script> Component\n\nThe behavior of next/script has been updated to support both pages and app, but some changes need to be made to ensure a smooth migration:\n\nMove any beforeInteractive scripts you previously included in _document.js to the root layout file (app/layout.tsx).\nThe experimental worker strategy does not yet work in app and scripts denoted with this strategy will either have to be removed or modified to use a different strategy (e.g. lazyOnload).\nonLoad, onReady, and onError handlers will not work in Server Components so make sure to move them to a Client Component or remove them altogether.\nFont Optimization\n\nPreviously, Next.js helped you optimize fonts by inlining font CSS. Version 13 introduces the new next/font module which gives you the ability to customize your font loading experience while still ensuring great performance and privacy. next/font is supported in both the pages and app directories.\n\nWhile inlining CSS still works in pages, it does not work in app. You should use next/font instead.\n\nSee the Font Optimization page to learn how to use next/font.\n\nMigrating from pages to app\n\n🎥 Watch: Learn how to incrementally adopt the App Router → YouTube (16 minutes)\n.\n\nMoving to the App Router may be the first time using React features that Next.js builds on top of such as Server Components, Suspense, and more. When combined with new Next.js features such as special files and layouts, migration means new concepts, mental models, and behavioral changes to learn.\n\nWe recommend reducing the combined complexity of these updates by breaking down your migration into smaller steps. The app directory is intentionally designed to work simultaneously with the pages directory to allow for incremental page-by-page migration.\n\nThe app directory supports nested routes and layouts. Learn more.\nUse nested folders to define routes and a special page.js file to make a route segment publicly accessible. Learn more.\nSpecial file conventions are used to create UI for each route segment. The most common special files are page.js and layout.js.\nUse page.js to define UI unique to a route.\nUse layout.js to define UI that is shared across multiple routes.\n.js, .jsx, or .tsx file extensions can be used for special files.\nYou can colocate other files inside the app directory such as components, styles, tests, and more. Learn more.\nData fetching functions like getServerSideProps and getStaticProps have been replaced with a new API inside app. getStaticPaths has been replaced with generateStaticParams.\npages/_app.js and pages/_document.js have been replaced with a single app/layout.js root layout. Learn more.\npages/_error.js has been replaced with more granular error.js special files. Learn more.\npages/404.js has been replaced with the not-found.js file.\npages/api/* API Routes have been replaced with the route.js (Route Handler) special file.\nStep 1: Creating the app directory\n\nUpdate to the latest Next.js version (requires 13.4 or greater):\n\nnpm install next@latest\n\nThen, create a new app directory at the root of your project (or src/ directory).\n\nStep 2: Creating a Root Layout\n\nCreate a new app/layout.tsx file inside the app directory. This is a root layout that will apply to all routes inside app.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\nThe app directory must include a root layout.\nThe root layout must define <html>, and <body> tags since Next.js does not automatically create them\nThe root layout replaces the pages/_app.tsx and pages/_document.tsx files.\n.js, .jsx, or .tsx extensions can be used for layout files.\n\nTo manage <head> HTML elements, you can use the built-in SEO support:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\nMigrating _document.js and _app.js\n\nIf you have an existing _app or _document file, you can copy the contents (e.g. global styles) to the root layout (app/layout.tsx). Styles in app/layout.tsx will not apply to pages/*. You should keep _app/_document while migrating to prevent your pages/* routes from breaking. Once fully migrated, you can then safely delete them.\n\nIf you are using any React Context providers, they will need to be moved to a Client Component.\n\nMigrating the getLayout() pattern to Layouts (Optional)\n\nNext.js recommended adding a property to Page components to achieve per-page layouts in the pages directory. This pattern can be replaced with native support for nested layouts in the app directory.\n\nSee before and after example\nStep 3: Migrating next/head\n\nIn the pages directory, the next/head React component is used to manage <head> HTML elements such as title and meta . In the app directory, next/head is replaced with the new built-in SEO support.\n\nBefore:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Head from 'next/head'\n \nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </>\n  )\n}\n\nAfter:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'My Page Title',\n}\n \nexport default function Page() {\n  return '...'\n}\n\nSee all metadata options.\n\nStep 4: Migrating Pages\nPages in the app directory are Server Components by default. This is different from the pages directory where pages are Client Components.\nData fetching has changed in app. getServerSideProps, getStaticProps and getInitialProps have been replaced with a simpler API.\nThe app directory uses nested folders to define routes and a special page.js file to make a route segment publicly accessible.\npages Directory\tapp Directory\tRoute\nindex.js\tpage.js\t/\nabout.js\tabout/page.js\t/about\nblog/[slug].js\tblog/[slug]/page.js\t/blog/post-1\n\nWe recommend breaking down the migration of a page into two main steps:\n\nStep 1: Move the default exported Page Component into a new Client Component.\nStep 2: Import the new Client Component into a new page.js file inside the app directory.\n\nGood to know: This is the easiest migration path because it has the most comparable behavior to the pages directory.\n\nStep 1: Create a new Client Component\n\nCreate a new separate file inside the app directory (i.e. app/home-page.tsx or similar) that exports a Client Component. To define Client Components, add the 'use client' directive to the top of the file (before any imports).\nSimilar to the Pages Router, there is an optimization step to prerender Client Components to static HTML on the initial page load.\nMove the default exported page component from pages/index.js to app/home-page.tsx.\napp/home-page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \n// This is a Client Component (same as components in the `pages` directory)\n// It receives data as props, has access to state and effects, and is\n// prerendered on the server during the initial page load.\nexport default function HomePage({ recentPosts }) {\n  return (\n    <div>\n      {recentPosts.map((post) => (\n        <div key={post.id}>{post.title}</div>\n      ))}\n    </div>\n  )\n}\n\nStep 2: Create a new page\n\nCreate a new app/page.tsx file inside the app directory. This is a Server Component by default.\n\nImport the home-page.tsx Client Component into the page.\n\nIf you were fetching data in pages/index.js, move the data fetching logic directly into the Server Component using the new data fetching APIs. See the data fetching upgrade guide for more details.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// Import your Client Component\nimport HomePage from './home-page'\n \nasync function getPosts() {\n  const res = await fetch('https://...')\n  const posts = await res.json()\n  return posts\n}\n \nexport default async function Page() {\n  // Fetch data directly in a Server Component\n  const recentPosts = await getPosts()\n  // Forward fetched data to your Client Component\n  return <HomePage recentPosts={recentPosts} />\n}\n\nIf your previous page used useRouter, you'll need to update to the new routing hooks. Learn more.\n\nStart your development server and visit http://localhost:3000\n. You should see your existing index route, now served through the app directory.\n\nStep 5: Migrating Routing Hooks\n\nA new router has been added to support the new behavior in the app directory.\n\nIn app, you should use the three new hooks imported from next/navigation: useRouter(), usePathname(), and useSearchParams().\n\nThe new useRouter hook is imported from next/navigation and has different behavior to the useRouter hook in pages which is imported from next/router.\nThe useRouter hook imported from next/router is not supported in the app directory but can continue to be used in the pages directory.\nThe new useRouter does not return the pathname string. Use the separate usePathname hook instead.\nThe new useRouter does not return the query object. Search parameters and dynamic route parameters are now separate. Use the useSearchParams and useParams hooks instead.\nYou can use useSearchParams and usePathname together to listen to page changes. See the Router Events section for more details.\nThese new hooks are only supported in Client Components. They cannot be used in Server Components.\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  // ...\n}\n\nIn addition, the new useRouter hook has the following changes:\n\nisFallback has been removed because fallback has been replaced.\nThe locale, locales, defaultLocales, domainLocales values have been removed because built-in i18n Next.js features are no longer necessary in the app directory. Learn more about i18n.\nbasePath has been removed. The alternative will not be part of useRouter. It has not yet been implemented.\nasPath has been removed because the concept of as has been removed from the new router.\nisReady has been removed because it is no longer necessary. During static rendering, any component that uses the useSearchParams() hook will skip the prerendering step and instead be rendered on the client at runtime.\n\nView the useRouter() API reference.\n\nStep 6: Migrating Data Fetching Methods\n\nThe pages directory uses getServerSideProps and getStaticProps to fetch data for pages. Inside the app directory, these previous data fetching functions are replaced with a simpler API built on top of fetch() and async React Server Components.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n \n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n \n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n \n  return <div>...</div>\n}\nServer-side Rendering (getServerSideProps)\n\nIn the pages directory, getServerSideProps is used to fetch data on the server and forward props to the default exported React component in the file. The initial HTML for the page is prerendered from the server, followed by \"hydrating\" the page in the browser (making it interactive).\n\npages/dashboard.js\n// `pages` directory\n \nexport async function getServerSideProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return { props: { projects } }\n}\n \nexport default function Dashboard({ projects }) {\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nIn the App Router, we can colocate our data fetching inside our React components using Server Components. This allows us to send less JavaScript to the client, while maintaining the rendered HTML from the server.\n\nBy setting the cache option to no-store, we can indicate that the fetched data should never be cached. This is similar to getServerSideProps in the pages directory.\n\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// `app` directory\n \n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n \n  return projects\n}\n \nexport default async function Dashboard() {\n  const projects = await getProjects()\n \n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\nAccessing Request Object\n\nIn the pages directory, you can retrieve request-based data based on the Node.js HTTP API.\n\nFor example, you can retrieve the req object from getServerSideProps and use it to retrieve the request's cookies and headers.\n\npages/index.js\n// `pages` directory\n \nexport async function getServerSideProps({ req, query }) {\n  const authHeader = req.getHeaders()['authorization'];\n  const theme = req.cookies['theme'];\n \n  return { props: { ... }}\n}\n \nexport default function Page(props) {\n  return ...\n}\n\nThe app directory exposes new read-only functions to retrieve request data:\n\nheaders(): Based on the Web Headers API, and can be used inside Server Components to retrieve request headers.\ncookies(): Based on the Web Cookies API, and can be used inside Server Components to retrieve cookies.\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// `app` directory\nimport { cookies, headers } from 'next/headers'\n \nasync function getData() {\n  const authHeader = headers().get('authorization')\n \n  return '...'\n}\n \nexport default async function Page() {\n  // You can use `cookies()` or `headers()` inside Server Components\n  // directly or in your data fetching function\n  const theme = cookies().get('theme')\n  const data = await getData()\n  return '...'\n}\nStatic Site Generation (getStaticProps)\n\nIn the pages directory, the getStaticProps function is used to pre-render a page at build time. This function can be used to fetch data from an external API or directly from a database, and pass this data down to the entire page as it's being generated during the build.\n\npages/index.js\n// `pages` directory\n \nexport async function getStaticProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return { props: { projects } }\n}\n \nexport default function Index({ projects }) {\n  return projects.map((project) => <div>{project.name}</div>)\n}\n\nIn the app directory, data fetching with fetch() will default to cache: 'force-cache', which will cache the request data until manually invalidated. This is similar to getStaticProps in the pages directory.\n\napp/page.js\n// `app` directory\n \n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return projects\n}\n \nexport default async function Index() {\n  const projects = await getProjects()\n \n  return projects.map((project) => <div>{project.name}</div>)\n}\nDynamic paths (getStaticPaths)\n\nIn the pages directory, the getStaticPaths function is used to define the dynamic paths that should be pre-rendered at build time.\n\npages/posts/[id].js\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n \nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return { props: { post } }\n}\n \nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n\nIn the app directory, getStaticPaths is replaced with generateStaticParams.\n\ngenerateStaticParams behaves similarly to getStaticPaths, but has a simplified API for returning route parameters and can be used inside layouts. The return shape of generateStaticParams is an array of segments instead of an array of nested param objects or a string of resolved paths.\n\napp/posts/[id]/page.js\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n \nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return post\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params)\n \n  return <PostLayout post={post} />\n}\n\nUsing the name generateStaticParams is more appropriate than getStaticPaths for the new model in the app directory. The get prefix is replaced with a more descriptive generate, which sits better alone now that getStaticProps and getServerSideProps are no longer necessary. The Paths suffix is replaced by Params, which is more appropriate for nested routing with multiple dynamic segments.\n\nReplacing fallback\n\nIn the pages directory, the fallback property returned from getStaticPaths is used to define the behavior of a page that isn't pre-rendered at build time. This property can be set to true to show a fallback page while the page is being generated, false to show a 404 page, or blocking to generate the page at request time.\n\npages/posts/[id].js\n// `pages` directory\n \nexport async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}\n \nexport async function getStaticProps({ params }) {\n  ...\n}\n \nexport default function Post({ post }) {\n  return ...\n}\n\nIn the app directory the config.dynamicParams property controls how params outside of generateStaticParams are handled:\n\ntrue: (default) Dynamic segments not included in generateStaticParams are generated on demand.\nfalse: Dynamic segments not included in generateStaticParams will return a 404.\n\nThis replaces the fallback: true | false | 'blocking' option of getStaticPaths in the pages directory. The fallback: 'blocking' option is not included in dynamicParams because the difference between 'blocking' and true is negligible with streaming.\n\napp/posts/[id]/page.js\n// `app` directory\n \nexport const dynamicParams = true;\n \nexport async function generateStaticParams() {\n  return [...]\n}\n \nasync function getPost(params) {\n  ...\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params);\n \n  return ...\n}\n\nWith dynamicParams set to true (the default), when a route segment is requested that hasn't been generated, it will be server-rendered and cached.\n\nIncremental Static Regeneration (getStaticProps with revalidate)\n\nIn the pages directory, the getStaticProps function allows you to add a revalidate field to automatically regenerate a page after a certain amount of time.\n\npages/index.js\n// `pages` directory\n \nexport async function getStaticProps() {\n  const res = await fetch(`https://.../posts`)\n  const posts = await res.json()\n \n  return {\n    props: { posts },\n    revalidate: 60,\n  }\n}\n \nexport default function Index({ posts }) {\n  return (\n    <Layout>\n      <PostList posts={posts} />\n    </Layout>\n  )\n}\n\nIn the app directory, data fetching with fetch() can use revalidate, which will cache the request for the specified amount of seconds.\n\napp/page.js\n// `app` directory\n \nasync function getPosts() {\n  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })\n  const data = await res.json()\n \n  return data.posts\n}\n \nexport default async function PostList() {\n  const posts = await getPosts()\n \n  return posts.map((post) => <div>{post.name}</div>)\n}\nAPI Routes\n\nAPI Routes continue to work in the pages/api directory without any changes. However, they have been replaced by Route Handlers in the app directory.\n\nRoute Handlers allow you to create custom request handlers for a given route using the Web Request\n and Response\n APIs.\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET(request: Request) {}\n\nGood to know: If you previously used API routes to call an external API from the client, you can now use Server Components instead to securely fetch data. Learn more about data fetching.\n\nStep 7: Styling\n\nIn the pages directory, global stylesheets are restricted to only pages/_app.js. With the app directory, this restriction has been lifted. Global styles can be added to any layout, page, or component.\n\nCSS Modules\nTailwind CSS\nGlobal Styles\nCSS-in-JS\nExternal Stylesheets\nSass\nTailwind CSS\n\nIf you're using Tailwind CSS, you'll need to add the app directory to your tailwind.config.js file:\n\ntailwind.config.js\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n\nYou'll also need to import your global styles in your app/layout.js file:\n\napp/layout.js\nimport '../styles/globals.css'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n\nLearn more about styling with Tailwind CSS\n\nCodemods\n\nNext.js provides Codemod transformations to help upgrade your codebase when a feature is deprecated. See Codemods for more information."
  },
  {
    "title": "Upgrading: Migrating from Create React App | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/from-create-react-app",
    "html": "Migrating from Create React App\n\nThis guide will help you migrate an existing Create React App site to Next.js.\n\nWhy Switch?\n\nThere are several reasons why you might want to switch from Create React App to Next.js:\n\nSlow initial page loading time\n\nCreate React App uses purely client-side React. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:\n\nThe browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load data.\nYour application code grows with every new feature and dependency you add.\nNo automatic code splitting\n\nThe previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router.\n\nNetwork waterfalls\n\nA common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data.\n\nWhile fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls.\n\nFast and intentional loading states\n\nWith built-in support for streaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls.\n\nThis enables you to build pages that are faster to load and eliminate layout shifts\n.\n\nChoose the data fetching strategy\n\nDepending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN.\n\nMiddleware\n\nNext.js Middleware allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and internationalization.\n\nBuilt-in Optimizations\n\nImages, fonts, and third-party scripts often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you.\n\nMigration Steps\n\nOur goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts.\n\nStep 1: Install the Next.js Dependency\n\nThe first thing you need to do is to install next as a dependency:\n\nTerminal\nnpm install next@latest\nStep 2: Create the Next.js Configuration File\n\nCreate a next.config.mjs at the root of your project. This file will hold your Next.js configuration options.\n\nnext.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './build', // Changes the build output directory to `./dist`.\n}\n \nexport default nextConfig\nStep 3: Create the Root Layout\n\nA Next.js App Router application must include a root layout file, which is a React Server Component that will wrap all pages in your application. This file is defined at the top level of the app directory.\n\nThe closest equivalent to the root layout file in a CRA application is the index.html file, which contains your <html>, <head>, and <body> tags.\n\nIn this step, you'll convert your index.html file into a root layout file:\n\nCreate a new app directory in your src directory.\nCreate a new layout.tsx file inside that app directory:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return '...'\n}\n\nGood to know: .js, .jsx, or .tsx extensions can be used for Layout files.\n\nCopy the content of your index.html file into the previously created <RootLayout> component while replacing the body.div#root and body.noscript tags with <div id=\"root\">{children}</div>:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nGood to know: Next.js ignores CRA's public/manifest.json file, additional iconography (except favicon, icon, and apple-icon ), and testing configuration, but if these are requirements, Next.js also supports these options. See the Metadata API and Testing docs for more information.\n\nStep 4: Metadata\n\nNext.js already includes by default the meta charset\n and meta viewport\n tags, so you can safely remove those from your <head>:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nAny metadata files such as favicon.ico, icon.png, robots.txt are automatically added to the application <head> tag as long as you have them placed into the top level of the app directory. After moving all supported files into the app directory you can safely delete their <link> tags:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nFinally, Next.js can manage your last <head> tags with the Metadata API. Move your final metadata info into an exported metadata object:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nWith the above changes, you shifted from declaring everything in your index.html to using Next.js' convention-based approach built into the framework (Metadata API). This approach enables you to more easily improve your SEO and web shareability of your pages.\n\nStep 5: Styles\n\nLike Create React App, Next.js has built-in support for CSS Modules.\n\nIf you're using a global CSS file, import it into your app/layout.tsx file:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport '../index.css'\n \n// ...\n\nIf you're using Tailwind, you'll need to install postcss and autoprefixer:\n\nTerminal\nnpm install postcss autoprefixer\n\nThen, create a postcss.config.js file at the root of your project:\n\npostcss.config.js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\nStep 6: Create the Entrypoint Page\n\nOn Next.js you declare an entrypoint for your application by creating a page.tsx file. The closest equivalent of this file on CRA is your src/index.tsx file. In this step, you’ll set up the entry point of your application.\n\nCreate a [[...slug]] directory in your app directory.\n\nSince this guide is aiming to first set up our Next.js as an SPA (Single Page Application), you need your page entry point to catch all possible routes of your application. For that, create a new [[...slug]] directory in your app directory.\n\nThis directory is what is called an optional catch-all route segment. Next.js uses a file-system based router where directories are used to define routes. This special directory will make sure that all routes of your application will be directed to its containing page.tsx file.\n\nCreate a new page.tsx file inside the app/[[...slug]] directory with the following content:\n\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return '...' // We'll update this\n}\n\nThis file is a Server Component. When you run next build, the file is prerendered into a static asset. It does not require any dynamic code.\n\nThis file imports our global CSS and tells generateStaticParams we are only going to generate one route, the index route at /.\n\nNow, let's move the rest of our CRA application which will run client-only.\n\napp/[[...slug]]/client.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport dynamic from 'next/dynamic'\n \nconst App = dynamic(() => import('../../App'), { ssr: false })\n \nexport function ClientOnly() {\n  return <App />\n}\n\nThis file is a Client Component, defined by the 'use client' directive. Client Components are still prerendered to HTML on the server before being sent to the client.\n\nSince we want a client-only application to start, we can configure Next.js to disable prerendering from the App component down.\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nNow, update your entrypoint page to use the new component:\n\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ClientOnly } from './client'\n \nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return <ClientOnly />\n}\nStep 7: Update Static Image Imports\n\nNext.js handles static image imports slightly different from CRA. With CRA, importing an image file will return its public URL as a string:\n\nApp.tsx\nimport image from './img.png'\n \nexport default function App() {\n  return <img src={image} />\n}\n\nWith Next.js, static image imports return an object. The object can then be used directly with the Next.js <Image> component, or you can use the object's src property with your existing <img> tag.\n\nThe <Image> component has the added benefits of automatic image optimization. The <Image> component automatically sets the width and height attributes of the resulting <img> based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled to auto. When not styled to auto, the dimension will default to the <img> dimension attribute's value, which can cause the image to appear distorted.\n\nKeeping the <img> tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the <Image> component to take advantage of optimizing images by configuring a loader, or moving to the default Next.js server which has automatic image optimization.\n\nConvert absolute import paths for images imported from /public into relative imports:\n\n// Before\nimport logo from '/logo.png'\n \n// After\nimport logo from '../public/logo.png'\n\nPass the image src property instead of the whole image object to your <img> tag:\n\n// Before\n<img src={logo} />\n \n// After\n<img src={logo.src} />\n\nAlternatively, you can reference the public URL for the image asset based on the filename. For example, public/logo.png will serve the image at /logo.png for your application, which would be the src value.\n\nWarning: If you're using TypeScript, you might encounter type errors when accessing the src property. To fix them, you need to add next-env.d.ts to the include array\n of your tsconfig.json file. Next.js will automatically generate this file when you run your application on step 9.\n\nStep 8: Migrate the Environment Variables\n\nNext.js has support for .env environment variables similar to CRA.\n\nThe main difference is the prefix used to expose environment variables on the client-side. Change all environment variables with the REACT_APP_ prefix to NEXT_PUBLIC_.\n\nStep 9: Update Scripts in package.json\n\nYou should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update your scripts in your package.json with Next.js related commands, and add .next, and next-env.d.ts to your .gitignore file:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"npx serve@latest ./build\"\n  }\n}\n.gitignore\n# ...\n.next\nnext-env.d.ts\n\nNow run npm run dev, and open http://localhost:3000\n. You should see your application now running on Next.js.\n\nStep 10: Clean Up\n\nYou can now clean up your codebase from Create React App related artifacts:\n\nDelete public/index.html\nDelete src/index.tsx\nDelete src/react-app-env.d.ts\nDelete reportWebVitals setup\nUninstall CRA dependencies (react-scripts)\nBundler Compatibility\n\nCreate React App and Next.js both default to using webpack for bundling.\n\nWhen migrating your CRA application to Next.js, you might have a custom webpack configuration you're looking to migrate. Next.js supports providing a custom webpack configuration.\n\nFurther, Next.js has support for Turbopack through next dev --turbo to improve your local dev performance. Turbopack supports some webpack loaders as well for compatibility and incremental adoption.\n\nNext Steps\n\nIf everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:\n\nMigrate from React Router to the Next.js App Router to get:\nAutomatic code splitting\nStreaming Server-Rendering\nReact Server Components\nOptimize images with the <Image> component\nOptimize fonts with next/font\nOptimize third-party scripts with the <Script> component\nUpdate your ESLint configuration to support Next.js rules\n\nGood to know: Using a static export does not currently support\n using the useParams hook."
  },
  {
    "title": "Upgrading: Version 14 | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/version-14",
    "html": "Version 14\nUpgrading from 13 to 14\n\nTo update to Next.js version 14, run the following command using your preferred package manager:\n\nTerminal\nnpm i next@latest react@latest react-dom@latest eslint-config-next@latest\nTerminal\nyarn add next@latest react@latest react-dom@latest eslint-config-next@latest\nTerminal\npnpm up next react react-dom eslint-config-next --latest\nTerminal\nbun add next@latest react@latest react-dom@latest eslint-config-next@latest\n\nGood to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their latest versions.\n\nv14 Summary\nThe minimum Node.js version has been bumped from 16.14 to 18.17, since 16.x has reached end-of-life.\nThe next export command has been removed in favor of output: 'export' config. Please see the docs\n for more information.\nThe next/server import for ImageResponse was renamed to next/og. A codemod is available to safely and automatically rename your imports.\nThe @next/font package has been fully removed in favor of the built-in next/font. A codemod is available to safely and automatically rename your imports.\nThe WASM target for next-swc has been removed."
  },
  {
    "title": "Upgrading: Migrating from Vite | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading/from-vite",
    "html": "Migrating from Vite\n\nThis guide will help you migrate an existing Vite application to Next.js.\n\nWhy Switch?\n\nThere are several reasons why you might want to switch from Vite to Next.js:\n\nSlow initial page loading time\n\nIf you have built your application with the default Vite plugin for React\n, your application is a purely client-side application. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:\n\nThe browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load some data.\nYour application code grows with every new feature and extra dependency you add.\nNo automatic code splitting\n\nThe previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router.\n\nNetwork waterfalls\n\nA common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data.\n\nWhile fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls.\n\nFast and intentional loading states\n\nWith built-in support for streaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls.\n\nThis enables you to build pages that are faster to load and eliminate layout shifts\n.\n\nChoose the data fetching strategy\n\nDepending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN.\n\nMiddleware\n\nNext.js Middleware allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and internationalization.\n\nBuilt-in Optimizations\n\nImages, fonts, and third-party scripts often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you.\n\nMigration Steps\n\nOur goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts.\n\nStep 1: Install the Next.js Dependency\n\nThe first thing you need to do is to install next as a dependency:\n\nTerminal\nnpm install next@latest\nStep 2: Create the Next.js Configuration File\n\nCreate a next.config.mjs at the root of your project. This file will hold your Next.js configuration options.\n\nnext.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n}\n \nexport default nextConfig\n\nGood to know: You can use either .js or .mjs for your Next.js configuration file.\n\nStep 3: Update TypeScript Configuration\n\nIf you're using TypeScript, you need to update your tsconfig.json file with the following changes to make it compatible with Next.js. If you're not using TypeScript, you can skip this step.\n\nRemove the project reference\n to tsconfig.node.json\nAdd ./dist/types/**/*.ts and ./next-env.d.ts to the include array\nAdd ./node_modules to the exclude array\nAdd { \"name\": \"next\" } to the plugins array in compilerOptions\n: \"plugins\": [{ \"name\": \"next\" }]\nSet esModuleInterop\n to true: \"esModuleInterop\": true\nSet jsx\n to preserve: \"jsx\": \"preserve\"\nSet allowJs\n to true: \"allowJs\": true\nSet forceConsistentCasingInFileNames\n to true: \"forceConsistentCasingInFileNames\": true\nSet incremental\n to true: \"incremental\": true\n\nHere's an example of a working tsconfig.json with those changes:\n\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowJs\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"plugins\": [{ \"name\": \"next\" }]\n  },\n  \"include\": [\"./src\", \"./dist/types/**/*.ts\", \"./next-env.d.ts\"],\n  \"exclude\": [\"./node_modules\"]\n}\n\nYou can find more information about configuring TypeScript on the Next.js docs.\n\nStep 4: Create the Root Layout\n\nA Next.js App Router application must include a root layout file, which is a React Server Component that will wrap all pages in your application. This file is defined at the top level of the app directory.\n\nThe closest equivalent to the root layout file in a Vite application is the index.html file\n, which contains your <html>, <head>, and <body> tags.\n\nIn this step, you'll convert your index.html file into a root layout file:\n\nCreate a new app directory in your src directory.\nCreate a new layout.tsx file inside that app directory:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return '...'\n}\n\nGood to know: .js, .jsx, or .tsx extensions can be used for Layout files.\n\nCopy the content of your index.html file into the previously created <RootLayout> component while replacing the body.div#root and body.script tags with <div id=\"root\">{children}</div>:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\nNext.js already includes by default the meta charset\n and meta viewport\n tags, so you can safely remove those from your <head>:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\nAny metadata files such as favicon.ico, icon.png, robots.txt are automatically added to the application <head> tag as long as you have them placed into the top level of the app directory. After moving all supported files into the app directory you can safely delete their <link> tags:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\nFinally, Next.js can manage your last <head> tags with the Metadata API. Move your final metadata info into an exported metadata object:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nWith the above changes, you shifted from declaring everything in your index.html to using Next.js' convention-based approach built into the framework (Metadata API). This approach enables you to more easily improve your SEO and web shareability of your pages.\n\nStep 5: Create the Entrypoint Page\n\nOn Next.js you declare an entrypoint for your application by creating a page.tsx file. The closest equivalent of this file on Vite is your main.tsx file. In this step, you’ll set up the entrypoint of your application.\n\nCreate a [[...slug]] directory in your app directory.\n\nSince in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application), you need your page entrypoint to catch all possible routes of your application. For that, create a new [[...slug]] directory in your app directory.\n\nThis directory is what is called an optional catch-all route segment. Next.js uses a file-system based router where directories are used to define routes. This special directory will make sure that all routes of your application will be directed to its containing page.tsx file.\n\nCreate a new page.tsx file inside the app/[[...slug]] directory with the following content:\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport '../../index.css'\n \nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return '...' // We'll update this\n}\n\nGood to know: .js, .jsx, or .tsx extensions can be used for Page files.\n\nThis file is a Server Component. When you run next build, the file is prerendered into a static asset. It does not require any dynamic code.\n\nThis file imports our global CSS and tells generateStaticParams we are only going to generate one route, the index route at /.\n\nNow, let's move the rest of our Vite application which will run client-only.\n\napp/[[...slug]]/client.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport React from 'react'\nimport dynamic from 'next/dynamic'\n \nconst App = dynamic(() => import('../../App'), { ssr: false })\n \nexport function ClientOnly() {\n  return <App />\n}\n\nThis file is a Client Component, defined by the 'use client' directive. Client Components are still prerendered to HTML on the server before being sent to the client.\n\nSince we want a client-only application to start, we can configure Next.js to disable prerendering from the App component down.\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nNow, update your entrypoint page to use the new component:\n\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport '../../index.css'\nimport { ClientOnly } from './client'\n \nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return <ClientOnly />\n}\nStep 6: Update Static Image Imports\n\nNext.js handles static image imports slightly different from Vite. With Vite, importing an image file will return its public URL as a string:\n\nApp.tsx\nimport image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production\n \nexport default function App() {\n  return <img src={image} />\n}\n\nWith Next.js, static image imports return an object. The object can then be used directly with the Next.js <Image> component, or you can use the object's src property with your existing <img> tag.\n\nThe <Image> component has the added benefits of automatic image optimization. The <Image> component automatically sets the width and height attributes of the resulting <img> based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled to auto. When not styled to auto, the dimension will default to the <img> dimension attribute's value, which can cause the image to appear distorted.\n\nKeeping the <img> tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the <Image> component to take advantage of optimizing images by configuring a loader, or moving to the default Next.js server which has automatic image optimization.\n\nConvert absolute import paths for images imported from /public into relative imports:\n// Before\nimport logo from '/logo.png'\n \n// After\nimport logo from '../public/logo.png'\nPass the image src property instead of the whole image object to your <img> tag:\n// Before\n<img src={logo} />\n \n// After\n<img src={logo.src} />\n\nAlternatively, you can reference the public URL for the image asset based on the filename. For example, public/logo.png will serve the image at /logo.png for your application, which would be the src value.\n\nWarning: If you're using TypeScript, you might encounter type errors when accessing the src property. You can safely ignore those for now. They will be fixed by the end of this guide.\n\nStep 7: Migrate the Environment Variables\n\nNext.js has support for .env environment variables similar to Vite. The main difference is the prefix used to expose environment variables on the client-side.\n\nChange all environment variables with the VITE_ prefix to NEXT_PUBLIC_.\n\nVite exposes a few built-in environment variables on the special import.meta.env object which aren’t supported by Next.js. You need to update their usage as follows:\n\nimport.meta.env.MODE ⇒ process.env.NODE_ENV\nimport.meta.env.PROD ⇒ process.env.NODE_ENV === 'production'\nimport.meta.env.DEV ⇒ process.env.NODE_ENV !== 'production'\nimport.meta.env.SSR ⇒ typeof window !== 'undefined'\n\nNext.js also doesn't provide a built-in BASE_URL environment variable. However, you can still configure one, if you need it:\n\nAdd the following to your .env file:\n.env\n# ...\nNEXT_PUBLIC_BASE_PATH=\"/some-base-path\"\nSet basePath to process.env.NEXT_PUBLIC_BASE_PATH in your next.config.mjs file:\nnext.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n  basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.\n}\n \nexport default nextConfig\nUpdate import.meta.env.BASE_URL usages to process.env.NEXT_PUBLIC_BASE_PATH\nStep 8: Update Scripts in package.json\n\nYou should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update your scripts in your package.json with Next.js related commands, and add .next and next-env.d.ts to your .gitignore:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n.gitignore\n# ...\n.next\nnext-env.d.ts\ndist\n\nNow run npm run dev, and open http://localhost:3000\n. You should see your application now running on Next.js.\n\nExample: Check out this pull request\n for a working example of a Vite application migrated to Next.js.\n\nStep 9: Clean Up\n\nYou can now clean up your codebase from Vite related artifacts:\n\nDelete main.tsx\nDelete index.html\nDelete vite-env.d.ts\nDelete tsconfig.node.json\nDelete vite.config.ts\nUninstall Vite dependencies\nNext Steps\n\nIf everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:\n\nMigrate from React Router to the Next.js App Router to get:\nAutomatic code splitting\nStreaming Server-Rendering\nReact Server Components\nOptimize images with the <Image> component\nOptimize fonts with next/font\nOptimize third-party scripts with the <Script> component\nUpdate your ESLint configuration to support Next.js rules"
  },
  {
    "title": "Building Your Application: Upgrading | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/upgrading",
    "html": "Upgrading\n\nUpgrade your application to newer versions of Next.js or migrate from the Pages Router to the App Router."
  },
  {
    "title": "Deploying: Continuous Integration (CI) Build Caching | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching",
    "html": "Continuous Integration (CI) Build Caching\n\nTo improve build performance, Next.js saves a cache to .next/cache that is shared between builds.\n\nTo take advantage of this cache in Continuous Integration (CI) environments, your CI workflow will need to be configured to correctly persist the cache between builds.\n\nIf your CI is not configured to persist .next/cache between builds, you may see a No Cache Detected error.\n\nHere are some example cache configurations for common CI providers:\n\nVercel\n\nNext.js caching is automatically configured for you. There's no action required on your part. If you are using Turborepo on Vercel, learn more here\n.\n\nCircleCI\n\nEdit your save_cache step in .circleci/config.yml to include .next/cache:\n\nsteps:\n  - save_cache:\n      key: dependency-cache-{{ checksum \"yarn.lock\" }}\n      paths:\n        - ./node_modules\n        - ./.next/cache\n\nIf you do not have a save_cache key, please follow CircleCI's documentation on setting up build caching\n.\n\nTravis CI\n\nAdd or merge the following into your .travis.yml:\n\ncache:\n  directories:\n    - $HOME/.cache/yarn\n    - node_modules\n    - .next/cache\nGitLab CI\n\nAdd or merge the following into your .gitlab-ci.yml:\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - node_modules/\n    - .next/cache/\nNetlify CI\n\nUse Netlify Plugins\n with @netlify/plugin-nextjs\n.\n\nAWS CodeBuild\n\nAdd (or merge in) the following to your buildspec.yml:\n\ncache:\n  paths:\n    - 'node_modules/**/*' # Cache `node_modules` for faster `yarn` or `npm i`\n    - '.next/cache/**/*' # Cache Next.js for faster application rebuilds\nGitHub Actions\n\nUsing GitHub's actions/cache\n, add the following step in your workflow file:\n\nuses: actions/cache@v4\nwith:\n  # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node\n  path: |\n    ~/.npm\n    ${{ github.workspace }}/.next/cache\n  # Generate a new cache whenever packages or source files change.\n  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}\n  # If source files changed but packages didn't, rebuild from a prior cache.\n  restore-keys: |\n    ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-\nBitbucket Pipelines\n\nAdd or merge the following into your bitbucket-pipelines.yml at the top level (same level as pipelines):\n\ndefinitions:\n  caches:\n    nextcache: .next/cache\n\nThen reference it in the caches section of your pipeline's step:\n\n- step:\n    name: your_step_name\n    caches:\n      - node\n      - nextcache\nHeroku\n\nUsing Heroku's custom cache\n, add a cacheDirectories array in your top-level package.json:\n\n\"cacheDirectories\": [\".next/cache\"]\nAzure Pipelines\n\nUsing Azure Pipelines' Cache task\n, add the following task to your pipeline yaml file somewhere prior to the task that executes next build:\n\n- task: Cache@2\n  displayName: 'Cache .next/cache'\n  inputs:\n    key: next | $(Agent.OS) | yarn.lock\n    path: '$(System.DefaultWorkingDirectory)/.next/cache'\nJenkins (Pipeline)\n\nUsing Jenkins' Job Cacher\n plugin, add the following build step to your Jenkinsfile where you would normally run next build or npm install:\n\nstage(\"Restore npm packages\") {\n    steps {\n        // Writes lock-file to cache based on the GIT_COMMIT hash\n        writeFile file: \"next-lock.cache\", text: \"$GIT_COMMIT\"\n \n        cache(caches: [\n            arbitraryFileCache(\n                path: \"node_modules\",\n                includes: \"**/*\",\n                cacheValidityDecidingFile: \"package-lock.json\"\n            )\n        ]) {\n            sh \"npm install\"\n        }\n    }\n}\nstage(\"Build\") {\n    steps {\n        // Writes lock-file to cache based on the GIT_COMMIT hash\n        writeFile file: \"next-lock.cache\", text: \"$GIT_COMMIT\"\n \n        cache(caches: [\n            arbitraryFileCache(\n                path: \".next/cache\",\n                includes: \"**/*\",\n                cacheValidityDecidingFile: \"next-lock.cache\"\n            )\n        ]) {\n            // aka `next build`\n            sh \"npm run build\"\n        }\n    }\n}"
  },
  {
    "title": "Deploying: Static Exports | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/deploying/static-exports",
    "html": "Static Exports\n\nNext.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server.\n\nWhen running next build, Next.js generates an HTML file per route. By breaking a strict SPA into individual HTML files, Next.js can avoid loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads.\n\nSince Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets.\n\nConfiguration\n\nTo enable a static export, change the output mode inside next.config.js:\n\nnext.config.js\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n \n  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`\n  // trailingSlash: true,\n \n  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`\n  // skipTrailingSlashRedirect: true,\n \n  // Optional: Change the output directory `out` -> `dist`\n  // distDir: 'dist',\n}\n \nmodule.exports = nextConfig\n\nAfter running next build, Next.js will produce an out folder which contains the HTML/CSS/JS assets for your application.\n\nYou can utilize getStaticProps and getStaticPaths to generate an HTML file for each page in your pages directory (or more for dynamic routes).\n\nSupported Features\n\nThe majority of core Next.js features needed to build a static site are supported, including:\n\nDynamic Routes when using getStaticPaths\nPrefetching with next/link\nPreloading JavaScript\nDynamic Imports\nAny styling options (e.g. CSS Modules, styled-jsx)\nClient-side data fetching\ngetStaticProps\ngetStaticPaths\nImage Optimization\n\nImage Optimization through next/image can be used with a static export by defining a custom image loader in next.config.js. For example, you can optimize images with a service like Cloudinary:\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  images: {\n    loader: 'custom',\n    loaderFile: './my-loader.ts',\n  },\n}\n \nmodule.exports = nextConfig\n\nThis custom loader will define how to fetch images from a remote source. For example, the following loader will construct the URL for Cloudinary:\n\nmy-loader.ts\nTypeScript\nJavaScript\nTypeScript\nexport default function cloudinaryLoader({\n  src,\n  width,\n  quality,\n}: {\n  src: string\n  width: number\n  quality?: number\n}) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://res.cloudinary.com/demo/image/upload/${params.join(\n    ','\n  )}${src}`\n}\n\nYou can then use next/image in your application, defining relative paths to the image in Cloudinary:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Image from 'next/image'\n \nexport default function Page() {\n  return <Image alt=\"turtles\" src=\"/turtles.jpg\" width={300} height={300} />\n}\nUnsupported Features\n\nFeatures that require a Node.js server, or dynamic logic that cannot be computed during the build process, are not supported:\n\nInternationalized Routing\nAPI Routes\nRewrites\nRedirects\nHeaders\nMiddleware\nIncremental Static Regeneration\nImage Optimization with the default loader\nDraft Mode\ngetStaticPaths with fallback: true\ngetStaticPaths with fallback: 'blocking'\ngetServerSideProps\nDeploying\n\nWith a static export, Next.js can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets.\n\nWhen running next build, Next.js generates the static export into the out folder. For example, let's say you have the following routes:\n\n/\n/blog/[id]\n\nAfter running next build, Next.js will generate the following files:\n\n/out/index.html\n/out/404.html\n/out/blog/post-1.html\n/out/blog/post-2.html\n\nIf you are using a static host like Nginx, you can configure rewrites from incoming requests to the correct files:\n\nnginx.conf\nserver {\n  listen 80;\n  server_name acme.com;\n \n  root /var/www/out;\n \n  location / {\n      try_files $uri $uri.html $uri/ =404;\n  }\n \n  # This is necessary when `trailingSlash: false`.\n  # You can omit this when `trailingSlash: true`.\n  location /blog/ {\n      rewrite ^/blog/(.*)$ /blog/$1.html break;\n  }\n \n  error_page 404 /404.html;\n  location = /404.html {\n      internal;\n  }\n}\nVersion History\nVersion\tChanges\nv14.0.0\tnext export has been removed in favor of \"output\": \"export\"\nv13.4.0\tApp Router (Stable) adds enhanced static export support, including using React Server Components and Route Handlers.\nv13.3.0\tnext export is deprecated and replaced with \"output\": \"export\""
  },
  {
    "title": "Deploying: Multi-Zones | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/deploying/multi-zones",
    "html": "Multi-Zones\nExamples\nWith Zones\n\nMulti-Zones are an approach to micro-frontends that separate a large application on a domain into smaller Next.js applications that each serve a set of paths. This is useful when there are collections of pages unrelated to the other pages in the application. By moving those pages to a separate zone (i.e., a separate application), you can reduce the size of each application which improves build times and removes code that is only necessary for one of the zones.\n\nFor example, let's say you have the following set of pages that you would like to split up:\n\n/blog/* for all blog posts\n/dashboard/* for all pages when the user is logged-in to the dashboard\n/* for the rest of your website not covered by other zones\n\nWith Multi-Zones support, you can create three applications that all are served on the same domain and look the same to the user, but you can develop and deploy each of the applications independently.\n\nNavigating between pages in the same zone will perform soft navigations, a navigation that does not require reloading the page. For example, in this diagram, navigating from / to /products will be a soft navigation.\n\nNavigating from a page in one zone to a page in another zone, such as from / to /dashboard, will perform a hard navigation, unloading the resources of the current page and loading the resources of the new page. Pages that are frequently visited together should live in the same zone to avoid hard navigations.\n\nHow to define a zone\n\nThere are no special APIs to define a new zone. A zone is a normal Next.js application where you also configure a basePath to avoid conflicts with pages and static files in other zones.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  basePath: '/blog',\n}\n\nThe default application that will handle all paths not sent to a more specific zone does not need a basePath.\n\nNext.js assets, such as JavaScript and CSS, will also be prefixed with basePath to make sure that they don't conflict with assets from other zones. These assets will be served under /basePath/_next/... for each of the zones.\n\nIf the zone serves pages that don't share a common path prefix, such as /home and /blog, then you can also set assetPrefix to ensure that all Next.js assets are served under a unique path prefix for the zone without adding a path prefix to the rest of the routes in your application.\n\nHow to route requests to the right zone\n\nWith the Multi Zones set-up, you need to route the paths to the correct zone since they are served by different applications. You can use any HTTP proxy to do this, but one of the Next.js applications can also be used to route requests for the entire domain.\n\nTo route to the correct zone using a Next.js application, you can use rewrites. For each path served by a different zone, you would add a rewrite rule to send that path to the domain of the other zone. For example:\n\nnext.config.js\nasync rewrites() {\n    return [\n        {\n            source: '/blog',\n            destination: `${process.env.BLOG_DOMAIN}/blog`,\n        },\n        {\n            source: '/blog/:path+',\n            destination: `${process.env.BLOG_DOMAIN}/blog/:path+`,\n        }\n    ];\n}\n\ndestination should be a URL that is served by the zone, including scheme and domain. This should point to the zone's production domain, but it can also be used to route requests to localhost in local development.\n\nGood to know: URL paths should be unique to a zone. For example, two zones trying to serve /blog would create a routing conflict.\n\nLinking between zones\n\nLinks to paths in a different zone should use an a tag instead of the Next.js <Link> component. This is because Next.js will try to prefetch and soft navigate to any relative path in <Link> component, which will not work across zones.\n\nSharing code\n\nThe Next.js applications that make up the different zones can live in any repository. However, it is often convenient to put these zones in a monorepo\n to more easily share code. For zones that live in different repositories, code can also be shared using public or private NPM packages.\n\nSince the pages in different zones may be released at different times, feature flags can be useful for enabling or disabling features in unison across the different zones.\n\nFor Next.js on Vercel\n applications, you can use a monorepo\n to deploy all affected zones with a single git push."
  },
  {
    "title": "Deploying: Production Checklist | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/deploying/production-checklist",
    "html": "Production Checklist\n\nBefore taking your Next.js application to production, there are some optimizations and patterns you should consider implementing for the best user experience, performance, and security.\n\nThis page provides best practices that you can use as a reference when building your application, before going to production, and after deployment - as well as the automatic Next.js optimizations you should be aware of.\n\nAutomatic optimizations\n\nThese Next.js optimizations are enabled by default and require no configuration:\n\nCode-splitting: Next.js automatically code-splits your application code by pages. This means only the code needed for the current page is loaded on navigation. You may also consider lazy loading third-party libraries, where appropriate.\nPrefetching: When a link to a new route enters the user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. You can opt out of prefetching, where appropriate.\nAutomatic Static Optimization: Next.js automatically determines that a page is static (can be pre-rendered) if it has no blocking data requirements. Optimized pages can be cached, and served to the end-user from multiple CDN locations. You may opt into Server-side Rendering, where appropriate.\n\nThese defaults aim to improve your application's performance, and reduce the cost and amount of data transferred on each network request.\n\nDuring development\n\nWhile building your application, we recommend using the following features to ensure the best performance and user experience:\n\nRouting and rendering\n<Link> component: Use the <Link> component for client-side navigation and prefetching.\nCustom Errors: Gracefully handle 500 and 404 errors\nData fetching and caching\nAPI Routes: Use Route Handlers to access your backend resources, and prevent sensitive secrets from being exposed to the client.\nData Caching: Verify whether your data requests are being cached or not, and opt into caching, where appropriate. Ensure requests that don't use getStaticProps are cached where appropriate.\nIncremental Static Regeneration: Use Incremental Static Regeneration to update static pages after they've been built, without rebuilding your entire site.\nStatic Images: Use the public directory to automatically cache your application's static assets, e.g. images.\nUI and accessibility\nFont Module: Optimize fonts by using the Font Module, which automatically hosts your font files with other static assets, removes external network requests, and reduces layout shift\n.\n<Image> Component: Optimize images by using the Image Component, which automatically optimizes images, prevents layout shift, and serves them in modern formats like WebP or AVIF.\n<Script> Component: Optimize third-party scripts by using the Script Component, which automatically defers scripts and prevents them from blocking the main thread.\nESLint: Use the built-in eslint-plugin-jsx-a11y plugin to catch accessibility issues early.\nSecurity\nEnvironment Variables: Ensure your .env.* files are added to .gitignore and only public variables are prefixed with NEXT_PUBLIC_.\nContent Security Policy: Consider adding a Content Security Policy to protect your application against various security threats such as cross-site scripting, clickjacking, and other code injection attacks.\nMetadata and SEO\n<Head> Component: Use the next/head component to add page titles, descriptions, and more.\nType safety\nTypeScript and TS Plugin: Use TypeScript and the TypeScript plugin for better type-safety, and to help you catch errors early.\nBefore going to production\n\nBefore going to production, you can run next build to build your application locally and catch any build errors, then run next start to measure the performance of your application in a production-like environment.\n\nCore Web Vitals\nLighthouse\n: Run lighthouse in incognito to gain a better understanding of how your users will experience your site, and to identify areas for improvement. This is a simulated test and should be paired with looking at field data (such as Core Web Vitals).\nAnalyzing bundles\n\nUse the @next/bundle-analyzer plugin to analyze the size of your JavaScript bundles and identify large modules and dependencies that might be impacting your application's performance.\n\nAdditionally, the following tools can help you understand the impact of adding new dependencies to your application:\n\nImport Cost\nPackage Phobia\nBundle Phobia\nbundlejs\nAfter deployment\n\nDepending on where you deploy your application, you might have access to additional tools and integrations to help you monitor and improve your application's performance.\n\nFor Vercel deployments, we recommend the following:\n\nAnalytics\n: A built-in analytics dashboard to help you understand your application's traffic, including the number of unique visitors, page views, and more.\nSpeed Insights\n: Real-world performance insights based on visitor data, offering a practical view of how your website is performing in the field.\nLogging\n: Runtime and Activity logs to help you debug issues and monitor your application in production. Alternatively, see the integrations page\n for a list of third-party tools and services.\n\nGood to know:\n\nTo get a comprehensive understanding of the best practices for production deployments on Vercel, including detailed strategies for improving website performance, refer to the Vercel Production Checklist\n.\n\nFollowing these recommendations will help you build a faster, more reliable, and secure application for your users."
  },
  {
    "title": "Building Your Application: Deploying | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/deploying",
    "html": "Deploying\n\nCongratulations, it's time to ship to production.\n\nYou can deploy managed Next.js with Vercel, or self-host on a Node.js server, Docker image, or even static HTML files. When deploying using next start, all Next.js features are supported.\n\nProduction Builds\n\nRunning next build generates an optimized version of your application for production. HTML, CSS, and JavaScript files are created based on your pages. JavaScript is compiled and browser bundles are minified using the Next.js Compiler to help achieve the best performance and support all modern browsers.\n\nNext.js produces a standard deployment output used by managed and self-hosted Next.js. This ensures all features are supported across both methods of deployment. In the next major version, we will be transforming this output into our Build Output API specification\n.\n\nManaged Next.js with Vercel\n\nVercel\n, the creators and maintainers of Next.js, provide managed infrastructure and a developer experience platform for your Next.js applications.\n\nDeploying to Vercel is zero-configuration and provides additional enhancements for scalability, availability, and performance globally. However, all Next.js features are still supported when self-hosted.\n\nLearn more about Next.js on Vercel\n or deploy a template for free\n to try it out.\n\nSelf-Hosting\n\nYou can self-host Next.js in three different ways:\n\nA Node.js server\nA Docker container\nA static export\nNode.js Server\n\nNext.js can be deployed to any hosting provider that supports Node.js. Ensure your package.json has the \"build\" and \"start\" scripts:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n\nThen, run npm run build to build your application. Finally, run npm run start to start the Node.js server. This server supports all Next.js features.\n\nDocker Image\n\nNext.js can be deployed to any hosting provider that supports Docker\n containers. You can use this approach when deploying to container orchestrators such as Kubernetes\n or when running inside a container in any cloud provider.\n\nInstall Docker\n on your machine\nClone our example\n (or the multi-environment example\n)\nBuild your container: docker build -t nextjs-docker .\nRun your container: docker run -p 3000:3000 nextjs-docker\n\nNext.js through Docker supports all Next.js features.\n\nStatic HTML Export\n\nNext.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server.\n\nSince Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. This includes tools like AWS S3, Nginx, or Apache.\n\nRunning as a static export does not support Next.js features that require a server. Learn more.\n\nGood to know:\n\nServer Components are supported with static exports.\nFeatures\nImage Optimization\n\nImage Optimization through next/image works self-hosted with zero configuration when deploying using next start. If you would prefer to have a separate service to optimize images, you can configure an image loader.\n\nImage Optimization can be used with a static export by defining a custom image loader in next.config.js. Note that images are optimized at runtime, not during the build.\n\nGood to know:\n\nOn glibc-based Linux systems, Image Optimization may require additional configuration\n to prevent excessive memory usage.\nLearn more about the caching behavior of optimized images and how to configure the TTL.\nYou can also disable Image Optimization and still retain other benefits of using next/image if you prefer. For example, if you are optimizing images yourself separately.\nMiddleware\n\nMiddleware works self-hosted with zero configuration when deploying using next start. Since it requires access to the incoming request, it is not supported when using a static export.\n\nMiddleware uses a runtime that is a subset of all available Node.js APIs to help ensure low latency, since it may run in front of every route or asset in your application. This runtime does not require running “at the edge” and works in a single-region server. Additional configuration and infrastructure are required to run Middleware in multiple regions.\n\nIf you are looking to add logic (or use an external package) that requires all Node.js APIs, you might be able to move this logic to a layout as a Server Component. For example, checking headers and redirecting. You can also use headers, cookies, or query parameters to redirect or rewrite through next.config.js. If that does not work, you can also use a custom server.\n\nEnvironment Variables\n\nNext.js can support both build time and runtime environment variables.\n\nBy default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed with NEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle during next build.\n\nTo read runtime environment variables, we recommend using getServerSideProps or incrementally adopting the App Router. With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values.\n\nimport { unstable_noStore as noStore } from 'next/cache';\n \nexport default function Component() {\n  noStore();\n  // cookies(), headers(), and other dynamic functions\n  // will also opt into dynamic rendering, making\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  ...\n}\n\nGood to know:\n\nYou can run code on server startup using the register function.\nWe do not recommend using the runtimeConfig option, as this does not work with the standalone output mode. Instead, we recommend incrementally adopting the App Router.\nCaching and ISR\n\nNext.js can cache responses, generated static pages, build outputs, and other static assets like images, fonts, and scripts.\n\nCaching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. By default, this cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router.\n\nYou can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application.\n\nAutomatic Caching\nNext.js sets the Cache-Control header of public, max-age=31536000, immutable to truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example, Static Image Imports. You can configure the TTL for images.\nIncremental Static Regeneration (ISR) sets the Cache-Control header of s-maxage: <revalidate in getStaticProps>, stale-while-revalidate. This revalidation time is defined in your getStaticProps function in seconds. If you set revalidate: false, it will default to a one-year cache duration.\nDynamically rendered pages set a Cache-Control header of private, no-cache, no-store, max-age=0, must-revalidate to prevent user-specific data from being cached. This applies to both the App Router and Pages Router. This also includes Draft Mode.\nStatic Assets\n\nIf you want to host static assets on a different domain or CDN, you can use the assetPrefix configuration in next.config.js. Next.js will use this asset prefix when retrieving JavaScript or CSS files. Separating your assets to a different domain does come with the downside of extra time spent on DNS and TLS resolution.\n\nLearn more about assetPrefix.\n\nConfiguring Caching\n\nBy default, generated cache assets will be stored in memory (defaults to 50mb) and on disk. If you are hosting Next.js using a container orchestration platform like Kubernetes, each pod will have a copy of the cache. To prevent stale data from being shown since the cache is not shared between pods by default, you can configure the Next.js cache to provide a cache handler and disable in-memory caching.\n\nTo configure the ISR/Data Cache location when self-hosting, you can configure a custom handler in your next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n\nThen, create cache-handler.js in the root of your project, for example:\n\ncache-handler.js\nconst cache = new Map()\n \nmodule.exports = class CacheHandler {\n  constructor(options) {\n    this.options = options\n  }\n \n  async get(key) {\n    // This could be stored anywhere, like durable storage\n    return cache.get(key)\n  }\n \n  async set(key, data, ctx) {\n    // This could be stored anywhere, like durable storage\n    cache.set(key, {\n      value: data,\n      lastModified: Date.now(),\n      tags: ctx.tags,\n    })\n  }\n \n  async revalidateTag(tag) {\n    // Iterate over all entries in the cache\n    for (let [key, value] of cache) {\n      // If the value's tags include the specified tag, delete this entry\n      if (value.tags.includes(tag)) {\n        cache.delete(key)\n      }\n    }\n  }\n}\n\nUsing a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application. For instance, you can save the cached values anywhere, like Redis\n or AWS S3.\n\nGood to know:\n\nrevalidatePath is a convenience layer on top of cache tags. Calling revalidatePath will call the revalidateTag function with a special default tag for the provided page.\nBuild Cache\n\nNext.js generates an ID during next build to identify which version of your application is being served. The same build should be used and boot up multiple containers.\n\nIf you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the generateBuildId command in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\nVersion Skew\n\nNext.js will automatically mitigate most instances of version skew\n and automatically reload the application to retrieve new assets when detected. For example, if there is a mismatch in the deploymentId, transitions between pages will perform a hard navigation versus using a prefetched value.\n\nWhen the application is reloaded, there may be a loss of application state if it's not designed to persist between page navigations. For example, using URL state or local storage would persist state after a page refresh. However, component state like useState would be lost in such navigations.\n\nVercel provides additional skew protection\n for Next.js applications to ensure assets and functions from the previous version are still available to older clients, even after the new version is deployed.\n\nYou can manually configure the deploymentId property in your next.config.js file to ensure each request uses either ?dpl query string or x-deployment-id header.\n\nManual Graceful Shutdowns\n\nWhen self-hosting, you might want to run code when the server shuts down on SIGTERM or SIGINT signals.\n\nYou can set the env variable NEXT_MANUAL_SIG_HANDLE to true and then register a handler for that signal inside your _document.js file. You will need to register the environment variable directly in the package.json script, and not in the .env file.\n\nGood to know: Manual signal handling is not available in next dev.\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"NEXT_MANUAL_SIG_HANDLE=true next start\"\n  }\n}\npages/_document.js\nif (process.env.NEXT_MANUAL_SIG_HANDLE) {\n  process.on('SIGTERM', () => {\n    console.log('Received SIGTERM: cleaning up')\n    process.exit(0)\n  })\n  process.on('SIGINT', () => {\n    console.log('Received SIGINT: cleaning up')\n    process.exit(0)\n  })\n}"
  },
  {
    "title": "Building Your Application: Authentication | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/authentication",
    "html": "Authentication\n\nUnderstanding authentication is crucial for protecting your application's data. This page will guide you through what React and Next.js features to use to implement auth.\n\nBefore starting, it helps to break down the process into three concepts:\n\nAuthentication: Verifies if the user is who they say they are. It requires the user to prove their identity with something they have, such as a username and password.\nSession Management: Tracks the user's auth state across requests.\nAuthorization: Decides what routes and data the user can access.\n\nThis diagram shows the authentication flow using React and Next.js features:\n\nThe examples on this page walk through basic username and password auth for educational purposes. While you can implement a custom auth solution, for increased security and simplicity, we recommend using an authentication library. These offer built-in solutions for authentication, session management, and authorization, as well as additional features such as social logins, multi-factor authentication, and role-based access control. You can find a list in the Auth Libraries section.\n\nAuthentication\n\nHere are the steps to implement a sign-up and/or login form:\n\nThe user submits their credentials through a form.\nThe form sends a request that is handled by an API route.\nUpon successful verification, the process is completed, indicating the user's successful authentication.\nIf verification is unsuccessful, an error message is shown.\n\nConsider a login form where users can input their credentials:\n\npages/login.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { FormEvent } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function LoginPage() {\n  const router = useRouter()\n \n  async function handleSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n \n    const formData = new FormData(event.currentTarget)\n    const email = formData.get('email')\n    const password = formData.get('password')\n \n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    })\n \n    if (response.ok) {\n      router.push('/profile')\n    } else {\n      // Handle errors\n    }\n  }\n \n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n\nThe form above has two input fields for capturing the user's email and password. On submission, it triggers a function that sends a POST request to an API route (/api/auth/login).\n\nYou can then call your Authentication Provider's API in the API route to handle authentication:\n\npages/api/auth/login.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { signIn } from '@/auth'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const { email, password } = req.body\n    await signIn('credentials', { email, password })\n \n    res.status(200).json({ success: true })\n  } catch (error) {\n    if (error.type === 'CredentialsSignin') {\n      res.status(401).json({ error: 'Invalid credentials.' })\n    } else {\n      res.status(500).json({ error: 'Something went wrong.' })\n    }\n  }\n}\nSession Management\n\nSession management ensures that the user's authenticated state is preserved across requests. It involves creating, storing, refreshing, and deleting sessions or tokens.\n\nThere are two types of sessions:\n\nStateless: Session data (or a token) is stored in the browser's cookies. The cookie is sent with each request, allowing the session to be verified on the server. This method is simpler, but can be less secure if not implemented correctly.\nDatabase: Session data is stored in a database, with the user's browser only receiving the encrypted session ID. This method is more secure, but can be complex and use more server resources.\n\nGood to know: While you can use either method, or both, we recommend using session management library such as iron-session\n or Jose\n.\n\nStateless Sessions\nSetting and deleting cookies\n\nYou can use API Routes to set the session as a cookie on the server:\n\npages/api/login.ts\nTypeScript\nJavaScript\nTypeScript\nimport { serialize } from 'cookie'\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { encrypt } from '@/app/lib/session'\n \nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const sessionData = req.body\n  const encryptedSessionData = encrypt(sessionData)\n \n  const cookie = serialize('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  res.setHeader('Set-Cookie', cookie)\n  res.status(200).json({ message: 'Successfully set cookie!' })\n}\nDatabase Sessions\n\nTo create and manage database sessions, you'll need to follow these steps:\n\nCreate a table in your database to store session and data (or check if your Auth Library handles this).\nImplement functionality to insert, update, and delete sessions\nEncrypt the session ID before storing it in the user's browser, and ensure the database and cookie stay in sync (this is optional, but recommended for optimistic auth checks in Middleware).\n\nCreating a Session on the Server:\n\npages/api/create-session.ts\nTypeScript\nJavaScript\nTypeScript\nimport db from '../../lib/db'\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const user = req.body\n    const sessionId = generateSessionId()\n    await db.insertSession({\n      sessionId,\n      userId: user.id,\n      createdAt: new Date(),\n    })\n \n    res.status(200).json({ sessionId })\n  } catch (error) {\n    res.status(500).json({ error: 'Internal Server Error' })\n  }\n}\nAuthorization\n\nOnce a user is authenticated and a session is created, you can implement authorization to control what the user can access and do within your application.\n\nThere are two main types of authorization checks:\n\nOptimistic: Checks if the user is authorized to access a route or perform an action using the session data stored in the cookie. These checks are useful for quick operations, such as showing/hiding UI elements or redirecting users based on permissions or roles.\nSecure: Checks if the user is authorized to access a route or perform an action using the session data stored in the database. These checks are more secure and are used for operations that require access to sensitive data or actions.\n\nFor both cases, we recommend:\n\nCreating a Data Access Layer to centralize your authorization logic\nUsing Data Transfer Objects (DTO) to only return the necessary data\nOptionally use Middleware to perform optimistic checks.\nOptimistic checks with Middleware (Optional)\n\nThere are some cases where you may want to use Middleware and redirect users based on permissions:\n\nTo perform optimistic checks. Since Middleware runs on every route, it's a good way to centralize redirect logic and pre-filter unauthorized users.\nTo protect static routes that share data between users (e.g. content behind a paywall).\n\nHowever, since Middleware runs on every route, including prefetched routes, it's important to only read the session from the cookie (optimistic checks), and avoid database checks to prevent performance issues.\n\nFor example:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse } from 'next/server'\nimport { decrypt } from '@/app/lib/session'\nimport { cookies } from 'next/headers'\n \n// 1. Specify protected and public routes\nconst protectedRoutes = ['/dashboard']\nconst publicRoutes = ['/login', '/signup', '/']\n \nexport default async function middleware(req: NextRequest) {\n  // 2. Check if the current route is protected or public\n  const path = req.nextUrl.pathname\n  const isProtectedRoute = protectedRoutes.includes(path)\n  const isPublicRoute = publicRoutes.includes(path)\n \n  // 3. Decrypt the session from the cookie\n  const cookie = cookies().get('session')?.value\n  const session = await decrypt(cookie)\n \n  // 5. Redirect to /login if the user is not authenticated\n  if (isProtectedRoute && !session?.userId) {\n    return NextResponse.redirect(new URL('/login', req.nextUrl))\n  }\n \n  // 6. Redirect to /dashboard if the user is authenticated\n  if (\n    isPublicRoute &&\n    session?.userId &&\n    !req.nextUrl.pathname.startsWith('/dashboard')\n  ) {\n    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))\n  }\n \n  return NextResponse.next()\n}\n \n// Routes Middleware should not run on\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n\nWhile Middleware can be useful for initial checks, it should not be your only line of defense in protecting your data. The majority of security checks should be performed as close as possible to your data source, see Data Access Layer for more information.\n\nTips:\n\nIn Middleware, you can also read cookies using req.cookies.get('session').value.\nMiddleware uses the Edge Runtime, check if your Auth library and session management library are compatible.\nYou can use the matcher property in the Middleware to specify which routes Middleware should run on. Although, for auth, it's recommended Middleware runs on all routes.\nCreating a Data Access Layer (DAL)\nProtecting API Routes\n\nAPI Routes in Next.js are essential for handling server-side logic and data management. It's crucial to secure these routes to ensure that only authorized users can access specific functionalities. This typically involves verifying the user's authentication status and their role-based permissions.\n\nHere's an example of securing an API Route:\n\npages/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const session = await getSession(req)\n \n  // Check if the user is authenticated\n  if (!session) {\n    res.status(401).json({\n      error: 'User is not authenticated',\n    })\n    return\n  }\n \n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    res.status(401).json({\n      error: 'Unauthorized access: User does not have admin privileges.',\n    })\n    return\n  }\n \n  // Proceed with the route for authorized users\n  // ... implementation of the API Route\n}\n\nThis example demonstrates an API Route with a two-tier security check for authentication and authorization. It first checks for an active session, and then verifies if the logged-in user is an 'admin'. This approach ensures secure access, limited to authenticated and authorized users, maintaining robust security for request processing.\n\nResources\n\nNow that you've learned about authentication in Next.js, here are Next.js-compatible libraries and resources to help you implement secure authentication and session management:\n\nAuth Libraries\nAuth0\nClerk\nKinde\nLucia\nNextAuth.js\nStack Auth\nSupabase\nStytch\nWorkOS\nSession Management Libraries\nIron Session\nJose\nFurther Reading\n\nTo continue learning about authentication and security, check out the following resources:\n\nHow to think about security in Next.js\nUnderstanding XSS Attacks\nUnderstanding CSRF Attacks\nThe Copenhagen Book"
  },
  {
    "title": "Testing: Playwright | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/testing/playwright",
    "html": "Setting up Playwright with Next.js\n\nPlaywright is a testing framework that lets you automate Chromium, Firefox, and WebKit with a single API. You can use it to write End-to-End (E2E) testing. This guide will show you how to set up Playwright with Next.js and write your first tests.\n\nQuickstart\n\nThe fastest way to get started is to use create-next-app with the with-playwright example\n. This will create a Next.js project complete with Playwright configured.\n\nTerminal\nnpx create-next-app@latest --example with-playwright with-playwright-app\nManual setup\n\nTo install Playwright, run the following command:\n\nTerminal\nnpm init playwright\n# or\nyarn create playwright\n# or\npnpm create playwright\n\nThis will take you through a series of prompts to setup and configure Playwright for your project, including adding a playwright.config.ts file. Please refer to the Playwright installation guide\n for the step-by-step guide.\n\nCreating your first Playwright E2E test\n\nCreate two new Next.js pages:\n\npages/index.ts\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\npages/about.ts\nimport Link from 'next/link'\n \nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n\nThen, add a test to verify that your navigation is working correctly:\n\ntests/example.spec.ts\nimport { test, expect } from '@playwright/test'\n \ntest('should navigate to the about page', async ({ page }) => {\n  // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)\n  await page.goto('http://localhost:3000/')\n  // Find an element with the text 'About' and click on it\n  await page.click('text=About')\n  // The new URL should be \"/about\" (baseURL is used there)\n  await expect(page).toHaveURL('http://localhost:3000/about')\n  // The new page should contain an h1 with \"About\"\n  await expect(page.locator('h1')).toContainText('About')\n})\n\nGood to know:\n\nYou can use page.goto(\"/\") instead of page.goto(\"http://localhost:3000/\"), if you add \"baseURL\": \"http://localhost:3000\"\n to the playwright.config.ts configuration file\n.\n\nRunning your Playwright tests\n\nPlaywright will simulate a user navigating your application using three browsers: Chromium, Firefox and Webkit, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.\n\nRun npm run build and npm run start, then run npx playwright test in another terminal window to run the Playwright tests.\n\nGood to know: Alternatively, you can use the webServer\n feature to let Playwright start the development server and wait until it's fully available.\n\nRunning Playwright on Continuous Integration (CI)\n\nPlaywright will by default run your tests in the headless mode\n. To install all the Playwright dependencies, run npx playwright install-deps.\n\nYou can learn more about Playwright and Continuous Integration from these resources:\n\nNext.js with Playwright example\nPlaywright on your CI provider\nPlaywright Discord"
  },
  {
    "title": "Testing: Cypress | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/testing/cypress",
    "html": "Setting up Cypress with Next.js\n\nCypress\n is a test runner used for End-to-End (E2E) and Component Testing. This page will show you how to set up Cypress with Next.js and write your first tests.\n\nWarning:\n\nFor component testing, Cypress currently does not support Next.js version 14\n and async Server Components. These issues are being tracked. For now, component testing works with Next.js version 13, and we recommend E2E testing for async Server Components.\nCypress versions below 13.6.3 do not support TypeScript version 5\n with moduleResolution:\"bundler\". However, this issue has been resolved in Cypress version 13.6.3 and later. cypress v13.6.3\nManual setup\n\nTo manually set up Cypress, install cypress as a dev dependency:\n\nTerminal\nnpm install -D cypress\n# or\nyarn add -D cypress\n# or\npnpm install -D cypress\n\nAdd the Cypress open command to the package.json scripts field:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"cypress:open\": \"cypress open\"\n  }\n}\n\nRun Cypress for the first time to open the Cypress testing suite:\n\nTerminal\nnpm run cypress:open\n\nYou can choose to configure E2E Testing and/or Component Testing. Selecting any of these options will automatically create a cypress.config.js file and a cypress folder in your project.\n\nCreating your first Cypress E2E test\n\nEnsure your cypress.config.js file has the following configuration:\n\ncypress.config.ts\nimport { defineConfig } from 'cypress'\n \nexport default defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\ncypress.config.js\nconst { defineConfig } = require('cypress')\n \nmodule.exports = defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n\nThen, create two new Next.js files:\n\npages/index.js\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\npages/about.js\nimport Link from 'next/link'\n \nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n\nAdd a test to check your navigation is working correctly:\n\ncypress/e2e/app.cy.js\ndescribe('Navigation', () => {\n  it('should navigate to the about page', () => {\n    // Start from the index page\n    cy.visit('http://localhost:3000/')\n \n    // Find a link with an href attribute containing \"about\" and click it\n    cy.get('a[href*=\"about\"]').click()\n \n    // The new url should include \"/about\"\n    cy.url().should('include', '/about')\n \n    // The new page should contain an h1 with \"About\"\n    cy.get('h1').contains('About')\n  })\n})\nRunning E2E Tests\n\nCypress will simulate a user navigating your application, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.\n\nRun npm run build && npm run start to build your Next.js application, then run npm run cypress:open in another terminal window to start Cypress and run your E2E testing suite.\n\nGood to know:\n\nYou can use cy.visit(\"/\") instead of cy.visit(\"http://localhost:3000/\") by adding baseUrl: 'http://localhost:3000' to the cypress.config.js configuration file.\nAlternatively, you can install the start-server-and-test package to run the Next.js production server in conjunction with Cypress. After installation, add \"test\": \"start-server-and-test start http://localhost:3000 cypress\" to your package.json scripts field. Remember to rebuild your application after new changes.\nCreating your first Cypress component test\n\nComponent tests build and mount a specific component without having to bundle your whole application or start a server.\n\nSelect Component Testing in the Cypress app, then select Next.js as your front-end framework. A cypress/component folder will be created in your project, and a cypress.config.js file will be updated to enable component testing.\n\nEnsure your cypress.config.js file has the following configuration:\n\ncypress.config.ts\nimport { defineConfig } from 'cypress'\n \nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\ncypress.config.js\nconst { defineConfig } = require('cypress')\n \nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\n\nAssuming the same components from the previous section, add a test to validate a component is rendering the expected output:\n\ncypress/component/about.cy.js\nimport AboutPage from '../../pages/about'\n \ndescribe('<AboutPage />', () => {\n  it('should render and display expected content', () => {\n    // Mount the React component for the About page\n    cy.mount(<AboutPage />)\n \n    // The new page should contain an h1 with \"About page\"\n    cy.get('h1').contains('About')\n \n    // Validate that a link with the expected URL is present\n    // *Following* the link is better suited to an E2E test\n    cy.get('a[href=\"/\"]').should('be.visible')\n  })\n})\n\nGood to know:\n\nCypress currently doesn't support component testing for async Server Components. We recommend using E2E testing.\nSince component tests do not require a Next.js server, features like <Image /> that rely on a server being available may not function out-of-the-box.\nRunning Component Tests\n\nRun npm run cypress:open in your terminal to start Cypress and run your component testing suite.\n\nContinuous Integration (CI)\n\nIn addition to interactive testing, you can also run Cypress headlessly using the cypress run command, which is better suited for CI environments:\n\npackage.json\n{\n  \"scripts\": {\n    //...\n    \"e2e\": \"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\",\n    \"e2e:headless\": \"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\",\n    \"component\": \"cypress open --component\",\n    \"component:headless\": \"cypress run --component\"\n  }\n}\n\nYou can learn more about Cypress and Continuous Integration from these resources:\n\nNext.js with Cypress example\nCypress Continuous Integration Docs\nCypress GitHub Actions Guide\nOfficial Cypress GitHub Action\nCypress Discord"
  },
  {
    "title": "Testing: Jest | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/testing/jest",
    "html": "Setting up Jest with Next.js\n\nJest and React Testing Library are frequently used together for Unit Testing and Snapshot Testing. This guide will show you how to set up Jest with Next.js and write your first tests.\n\nGood to know: Since async Server Components are new to the React ecosystem, Jest currently does not support them. While you can still run unit tests for synchronous Server and Client Components, we recommend using an E2E tests for async components.\n\nQuickstart\n\nYou can use create-next-app with the Next.js with-jest\n example to quickly get started:\n\nTerminal\nnpx create-next-app@latest --example with-jest with-jest-app\nManual setup\n\nSince the release of Next.js 12\n, Next.js now has built-in configuration for Jest.\n\nTo set up Jest, install jest and the following packages as dev dependencies:\n\nTerminal\nnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom\n# or\nyarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom\n# or\npnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom\n\nGenerate a basic Jest configuration file by running the following command:\n\nTerminal\nnpm init jest@latest\n# or\nyarn create jest@latest\n# or\npnpm create jest@latest\n\nThis will take you through a series of prompts to setup Jest for your project, including automatically creating a jest.config.ts|js file.\n\nUpdate your config file to use next/jest. This transformer has all the necessary configuration options for Jest to work with Next.js:\n\njest.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { Config } from 'jest'\nimport nextJest from 'next/jest.js'\n \nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n \n// Add any custom config to be passed to Jest\nconst config: Config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n \n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nexport default createJestConfig(config)\n\nUnder the hood, next/jest is automatically configuring Jest for you, including:\n\nSetting up transform using the Next.js Compiler\nAuto mocking stylesheets (.css, .module.css, and their scss variants), image imports and next/font\nLoading .env (and all variants) into process.env\nIgnoring node_modules from test resolving and transforms\nIgnoring .next from test resolving\nLoading next.config.js for flags that enable SWC transforms\n\nGood to know: To test environment variables directly, load them manually in a separate setup script or in your jest.config.ts file. For more information, please see Test Environment Variables.\n\nSetting up Jest (with Babel)\n\nIf you opt out of the Next.js Compiler and use Babel instead, you will need to manually configure Jest and install babel-jest and identity-obj-proxy in addition to the packages above.\n\nHere are the recommended options to configure Jest for Next.js:\n\njest.config.js\nmodule.exports = {\n  collectCoverage: true,\n  // on node 14.x coverage provider v8 offers good speed and more or less good report\n  coverageProvider: 'v8',\n  collectCoverageFrom: [\n    '**/*.{js,jsx,ts,tsx}',\n    '!**/*.d.ts',\n    '!**/node_modules/**',\n    '!<rootDir>/out/**',\n    '!<rootDir>/.next/**',\n    '!<rootDir>/*.config.js',\n    '!<rootDir>/coverage/**',\n  ],\n  moduleNameMapper: {\n    // Handle CSS imports (with CSS modules)\n    // https://jestjs.io/docs/webpack#mocking-css-modules\n    '^.+\\\\.module\\\\.(css|sass|scss)$': 'identity-obj-proxy',\n \n    // Handle CSS imports (without CSS modules)\n    '^.+\\\\.(css|sass|scss)$': '<rootDir>/__mocks__/styleMock.js',\n \n    // Handle image imports\n    // https://jestjs.io/docs/webpack#handling-static-assets\n    '^.+\\\\.(png|jpg|jpeg|gif|webp|avif|ico|bmp|svg)$/i': `<rootDir>/__mocks__/fileMock.js`,\n \n    // Handle module aliases\n    '^@/components/(.*)$': '<rootDir>/components/$1',\n \n    // Handle @next/font\n    '@next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Handle next/font\n    'next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Disable server-only\n    'server-only': `<rootDir>/__mocks__/empty.js`,\n  },\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],\n  testEnvironment: 'jsdom',\n  transform: {\n    // Use babel-jest to transpile tests with the next/babel preset\n    // https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object\n    '^.+\\\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],\n  },\n  transformIgnorePatterns: [\n    '/node_modules/',\n    '^.+\\\\.module\\\\.(css|sass|scss)$',\n  ],\n}\n\nYou can learn more about each configuration option in the Jest docs\n. We also recommend reviewing next/jest configuration\n to see how Next.js configures Jest.\n\nHandling stylesheets and image imports\n\nStylesheets and images aren't used in the tests but importing them may cause errors, so they will need to be mocked.\n\nCreate the mock files referenced in the configuration above - fileMock.js and styleMock.js - inside a __mocks__ directory:\n\n__mocks__/fileMock.js\nmodule.exports = 'test-file-stub'\n__mocks__/styleMock.js\nmodule.exports = {}\n\nFor more information on handling static assets, please refer to the Jest Docs\n.\n\nHandling Fonts\n\nTo handle fonts, create the nextFontMock.js file inside the __mocks__ directory, and add the following configuration:\n\n__mocks__/nextFontMock.js\nmodule.exports = new Proxy(\n  {},\n  {\n    get: function getter() {\n      return () => ({\n        className: 'className',\n        variable: 'variable',\n        style: { fontFamily: 'fontFamily' },\n      })\n    },\n  }\n)\nOptional: Handling Absolute Imports and Module Path Aliases\n\nIf your project is using Module Path Aliases, you will need to configure Jest to resolve the imports by matching the paths option in the jsconfig.json file with the moduleNameMapper option in the jest.config.js file. For example:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\njest.config.js\nmoduleNameMapper: {\n  // ...\n  '^@/components/(.*)$': '<rootDir>/components/$1',\n}\nOptional: Extend Jest with custom matchers\n\n@testing-library/jest-dom includes a set of convenient custom matchers\n such as .toBeInTheDocument() making it easier to write tests. You can import the custom matchers for every test by adding the following option to the Jest configuration file:\n\njest.config.ts\nTypeScript\nJavaScript\nTypeScript\nsetupFilesAfterEnv: ['<rootDir>/jest.setup.ts']\n\nThen, inside jest.setup.ts, add the following import:\n\njest.setup.ts\nTypeScript\nJavaScript\nTypeScript\nimport '@testing-library/jest-dom'\n\nGood to know:extend-expect was removed in v6.0\n, so if you are using @testing-library/jest-dom before version 6, you will need to import @testing-library/jest-dom/extend-expect instead.\n\nIf you need to add more setup options before each test, you can add them to the jest.setup.js file above.\n\nAdd a test script to package.json:\n\nFinally, add a Jest test script to your package.json file:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  }\n}\n\njest --watch will re-run tests when a file is changed. For more Jest CLI options, please refer to the Jest Docs\n.\n\nCreating your first test:\n\nYour project is now ready to run tests. Create a folder called __tests__ in your project's root directory.\n\nFor example, we can add a test to check if the <Home /> component successfully renders a heading:\n\nexport default function Home() {\n  return <h1>Home</h1>\n}\n__tests__/index.test.js\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Home from '../pages/index'\n \ndescribe('Home', () => {\n  it('renders a heading', () => {\n    render(<Home />)\n \n    const heading = screen.getByRole('heading', { level: 1 })\n \n    expect(heading).toBeInTheDocument()\n  })\n})\n\nOptionally, add a snapshot test\n to keep track of any unexpected changes in your component:\n\n__tests__/snapshot.js\nimport { render } from '@testing-library/react'\nimport Home from '../pages/index'\n \nit('renders homepage unchanged', () => {\n  const { container } = render(<Home />)\n  expect(container).toMatchSnapshot()\n})\n\nGood to know: Test files should not be included inside the Pages Router because any files inside the Pages Router are considered routes.\n\nRunning your tests\n\nThen, run the following command to run your tests:\n\nTerminal\nnpm run test\n# or\nyarn test\n# or\npnpm test\nAdditional Resources\n\nFor further reading, you may find these resources helpful:\n\nNext.js with Jest example\nJest Docs\nReact Testing Library Docs\nTesting Playground\n - use good testing practices to match elements."
  },
  {
    "title": "Configuring: Error Handling | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/error-handling",
    "html": "Error Handling\n\nThis documentation explains how you can handle development, server-side, and client-side errors.\n\nHandling Errors in Development\n\nWhen there is a runtime error during the development phase of your Next.js application, you will encounter an overlay. It is a modal that covers the webpage. It is only visible when the development server runs using next dev via pnpm dev, npm run dev, yarn dev, or bun dev and will not be shown in production. Fixing the error will automatically dismiss the overlay.\n\nHere is an example of an overlay:\n\nHandling Server Errors\n\nNext.js provides a static 500 page by default to handle server-side errors that occur in your application. You can also customize this page by creating a pages/500.js file.\n\nHaving a 500 page in your application does not show specific errors to the app user.\n\nYou can also use 404 page to handle specific runtime error like file not found.\n\nHandling Client Errors\n\nReact Error Boundaries\n is a graceful way to handle a JavaScript error on the client so that the other parts of the application continue working. In addition to preventing the page from crashing, it allows you to provide a custom fallback component and even log error information.\n\nTo use Error Boundaries for your Next.js application, you must create a class component ErrorBoundary and wrap the Component prop in the pages/_app.js file. This component will be responsible to:\n\nRender a fallback UI after an error is thrown\nProvide a way to reset the Application's state\nLog error information\n\nYou can create an ErrorBoundary class component by extending React.Component. For example:\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n \n    // Define a state variable to track whether is an error or not\n    this.state = { hasError: false }\n  }\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI\n \n    return { hasError: true }\n  }\n  componentDidCatch(error, errorInfo) {\n    // You can use your own error logging service here\n    console.log({ error, errorInfo })\n  }\n  render() {\n    // Check if the error is thrown\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div>\n          <h2>Oops, there is an error!</h2>\n          <button\n            type=\"button\"\n            onClick={() => this.setState({ hasError: false })}\n          >\n            Try again?\n          </button>\n        </div>\n      )\n    }\n \n    // Return children components in case of no error\n \n    return this.props.children\n  }\n}\n \nexport default ErrorBoundary\n\nThe ErrorBoundary component keeps track of an hasError state. The value of this state variable is a boolean. When the value of hasError is true, then the ErrorBoundary component will render a fallback UI. Otherwise, it will render the children components.\n\nAfter creating an ErrorBoundary component, import it in the pages/_app.js file to wrap the Component prop in your Next.js application.\n\n// Import the ErrorBoundary component\nimport ErrorBoundary from '../components/ErrorBoundary'\n \nfunction MyApp({ Component, pageProps }) {\n  return (\n    // Wrap the Component prop with ErrorBoundary component\n    <ErrorBoundary>\n      <Component {...pageProps} />\n    </ErrorBoundary>\n  )\n}\n \nexport default MyApp\n\nYou can learn more about Error Boundaries\n in React's documentation.\n\nReporting Errors\n\nTo monitor client errors, use a service like Sentry\n, Bugsnag or Datadog."
  },
  {
    "title": "Configuring: Content Security Policy | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/content-security-policy",
    "html": "Content Security Policy\n\nContent Security Policy (CSP)\n is important to guard your Next.js application against various security threats such as cross-site scripting (XSS), clickjacking, and other code injection attacks.\n\nBy using CSP, developers can specify which origins are permissible for content sources, scripts, stylesheets, images, fonts, objects, media (audio, video), iframes, and more.\n\nExamples\nNonces\n\nA nonce\n is a unique, random string of characters created for a one-time use. It is used in conjunction with CSP to selectively allow certain inline scripts or styles to execute, bypassing strict CSP directives.\n\nWhy use a nonce?\n\nEven though CSPs are designed to block malicious scripts, there are legitimate scenarios where inline scripts are necessary. In such cases, nonces offer a way to allow these scripts to execute if they have the correct nonce.\n\nAdding a nonce with Middleware\n\nMiddleware enables you to add headers and generate nonces before the page renders.\n\nEvery time a page is viewed, a fresh nonce should be generated. This means that you must use dynamic rendering to add nonces.\n\nFor example:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n \n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n \n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n \n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n \n  return response\n}\n\nBy default, Middleware runs on all requests. You can filter Middleware to run on specific paths using a matcher.\n\nWe recommend ignoring matching prefetches (from next/link) and static assets that don't need the CSP header.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\nReading the nonce\n\nYou can now read the nonce from a Server Component using headers:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n \nexport default function Page() {\n  const nonce = headers().get('x-nonce')\n \n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\nWithout Nonces\n\nFor applications that do not require nonces, you can set the CSP header directly in your next.config.js file:\n\nnext.config.js\nconst cspHeader = `\n    default-src 'self';\n    script-src 'self' 'unsafe-eval' 'unsafe-inline';\n    style-src 'self' 'unsafe-inline';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n \nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Content-Security-Policy',\n            value: cspHeader.replace(/\\n/g, ''),\n          },\n        ],\n      },\n    ]\n  },\n}\nVersion History\n\nWe recommend using v13.4.20+ of Next.js to properly handle and apply nonces."
  },
  {
    "title": "Configuring: Debugging | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/debugging",
    "html": "Debugging\n\nThis documentation explains how you can debug your Next.js frontend and backend code with full source maps support using either the VS Code debugger\n or Chrome DevTools\n.\n\nAny debugger that can attach to Node.js can also be used to debug a Next.js application. You can find more details in the Node.js Debugging Guide\n.\n\nDebugging with VS Code\n\nCreate a file named .vscode/launch.json at the root of your project with the following content:\n\nlaunch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Next.js: debug server-side\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\"\n    },\n    {\n      \"name\": \"Next.js: debug full stack\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/node_modules/.bin/next\",\n      \"runtimeArgs\": [\"--inspect\"],\n      \"skipFiles\": [\"<node_internals>/**\"],\n      \"serverReadyAction\": {\n        \"action\": \"debugWithEdge\",\n        \"killOnServerStop\": true,\n        \"pattern\": \"- Local:.+(https?://.+)\",\n        \"uriFormat\": \"%s\",\n        \"webRoot\": \"${workspaceFolder}\"\n      }\n    }\n  ]\n}\n\nnpm run dev can be replaced with yarn dev if you're using Yarn or pnpm dev if you're using pnpm.\n\nIf you're changing the port number your application starts on, replace the 3000 in http://localhost:3000 with the port you're using instead.\n\nIf you're running Next.js from a directory other than root (for example, if you're using Turborepo) then you need to add cwd to the server-side and full stack debugging tasks. For example, \"cwd\": \"${workspaceFolder}/apps/web\".\n\nNow go to the Debug panel (Ctrl+Shift+D on Windows/Linux, ⇧+⌘+D on macOS), select a launch configuration, then press F5 or select Debug: Start Debugging from the Command Palette to start your debugging session.\n\nUsing the Debugger in Jetbrains WebStorm\n\nClick the drop down menu listing the runtime configuration, and click Edit Configurations.... Create a Javascript Debug debug configuration with http://localhost:3000 as the URL. Customize to your liking (e.g. Browser for debugging, store as project file), and click OK. Run this debug configuration, and the selected browser should automatically open. At this point, you should have 2 applications in debug mode: the NextJS node application, and the client/ browser application.\n\nDebugging with Chrome DevTools\nClient-side code\n\nStart your development server as usual by running next dev, npm run dev, or yarn dev. Once the server starts, open http://localhost:3000 (or your alternate URL) in Chrome. Next, open Chrome's Developer Tools (Ctrl+Shift+J on Windows/Linux, ⌥+⌘+I on macOS), then go to the Sources tab.\n\nNow, any time your client-side code reaches a debugger\n statement, code execution will pause and that file will appear in the debug area. You can also press Ctrl+P on Windows/Linux or ⌘+P on macOS to search for a file and set breakpoints manually. Note that when searching here, your source files will have paths starting with webpack://_N_E/./.\n\nServer-side code\n\nTo debug server-side Next.js code with Chrome DevTools, you need to pass the --inspect\n flag to the underlying Node.js process:\n\nTerminal\nNODE_OPTIONS='--inspect' next dev\n\nIf you're using npm run dev or yarn dev then you should update the dev script on your package.json:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n\nLaunching the Next.js dev server with the --inspect flag will look something like this:\n\nTerminal\nDebugger listening on ws://127.0.0.1:9229/0cf90313-350d-4466-a748-cd60f4e47c95\nFor help, see: https://nodejs.org/en/docs/inspector\nready - started server on 0.0.0.0:3000, url: http://localhost:3000\n\nBe aware that running NODE_OPTIONS='--inspect' npm run dev or NODE_OPTIONS='--inspect' yarn dev won't work. This would try to start multiple debuggers on the same port: one for the npm/yarn process and one for Next.js. You would then get an error like Starting inspector on 127.0.0.1:9229 failed: address already in use in your console.\n\nOnce the server starts, open a new tab in Chrome and visit chrome://inspect, where you should see your Next.js application inside the Remote Target section. Click inspect under your application to open a separate DevTools window, then go to the Sources tab.\n\nDebugging server-side code here works much like debugging client-side code with Chrome DevTools, except that when you search for files here with Ctrl+P or ⌘+P, your source files will have paths starting with webpack://{application-name}/./ (where {application-name} will be replaced with the name of your application according to your package.json file).\n\nDebugging on Windows\n\nWindows users may run into an issue when using NODE_OPTIONS='--inspect' as that syntax is not supported on Windows platforms. To get around this, install the cross-env\n package as a development dependency (-D with npm and yarn) and replace the dev script with the following.\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n\ncross-env will set the NODE_OPTIONS environment variable regardless of which platform you are on (including Mac, Linux, and Windows) and allow you to debug consistently across devices and operating systems.\n\nGood to know: Ensure Windows Defender is disabled on your machine. This external service will check every file read, which has been reported to greatly increase Fast Refresh time with next dev. This is a known issue, not related to Next.js, but it does affect Next.js development.\n\nMore information\n\nTo learn more about how to use a JavaScript debugger, take a look at the following documentation:\n\nNode.js debugging in VS Code: Breakpoints\nChrome DevTools: Debug JavaScript"
  },
  {
    "title": "Building Your Application: Testing | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/testing",
    "html": "Testing\n\nIn React and Next.js, there are a few different types of tests you can write, each with its own purpose and use cases. This page provides an overview of types and commonly used tools you can use to test your application.\n\nTypes of tests\nUnit testing involves testing individual units (or blocks of code) in isolation. In React, a unit can be a single function, hook, or component.\nComponent testing is a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.\nIntegration testing involves testing how multiple units work together. This can be a combination of components, hooks, and functions.\nEnd-to-End (E2E) Testing involves testing user flows in an environment that simulates real user scenarios, like the browser. This means testing specific tasks (e.g. signup flow) in a production-like environment.\nSnapshot testing involves capturing the rendered output of a component and saving it to a snapshot file. When tests run, the current rendered output of the component is compared against the saved snapshot. Changes in the snapshot are used to indicate unexpected changes in behavior.\nGuides\n\nSee the guides below to learn how to set up Next.js with these commonly used testing tools:"
  },
  {
    "title": "Testing: Vitest | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/testing/vitest",
    "html": "Setting up Vitest with Next.js\n\nVite and React Testing Library are frequently used together for Unit Testing. This guide will show you how to setup Vitest with Next.js and write your first tests.\n\nGood to know: Since async Server Components are new to the React ecosystem, Vitest currently does not support them. While you can still run unit tests for synchronous Server and Client Components, we recommend using an E2E tests for async components.\n\nQuickstart\n\nYou can use create-next-app with the Next.js with-vitest\n example to quickly get started:\n\nTerminal\nnpx create-next-app@latest --example with-vitest with-vitest-app\nManual Setup\n\nTo manually set up Vitest, install vitest and the following packages as dev dependencies:\n\nTerminal\nnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n# or\nyarn add -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n# or\npnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n# or\nbun add -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n\nCreate a vitest.config.ts|js file in the root of your project, and add the following options:\n\nvitest.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\n \nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n\nFor more information on configuring Vitest, please refer to the Vitest Configuration\n docs.\n\nThen, add a test script to your package.json:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"vitest\"\n  }\n}\n\nWhen you run npm run test, Vitest will watch for changes in your project by default.\n\nCreating your first Vitest Unit Test\n\nCheck that everything is working by creating a test to check if the <Page /> component successfully renders a heading:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n__tests__/index.test.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../pages/index'\n \ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\nRunning your tests\n\nThen, run the following command to run your tests:\n\nTerminal\nnpm run test\n# or\nyarn test\n# or\npnpm test\n# or\nbun test\nAdditional Resources\n\nYou may find these resources helpful:\n\nNext.js with Vitest example\nVitest Docs\nReact Testing Library Docs"
  },
  {
    "title": "Configuring: Preview Mode | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/preview-mode",
    "html": "Preview Mode\n\nNote: This feature is superseded by Draft Mode.\n\nExamples\n\nIn the Pages documentation and the Data Fetching documentation, we talked about how to pre-render a page at build time (Static Generation) using getStaticProps and getStaticPaths.\n\nStatic Generation is useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want to preview the draft immediately on your page. You’d want Next.js to render these pages at request time instead of build time and fetch the draft content instead of the published content. You’d want Next.js to bypass Static Generation only for this specific case.\n\nNext.js has a feature called Preview Mode which solves this problem. Here are instructions on how to use it.\n\nStep 1: Create and access a preview API route\n\nTake a look at the API Routes documentation first if you’re not familiar with Next.js API Routes.\n\nFirst, create a preview API route. It can have any name - e.g. pages/api/preview.js (or .ts if using TypeScript).\n\nIn this API route, you need to call setPreviewData on the response object. The argument for setPreviewData should be an object, and this can be used by getStaticProps (more on this later). For now, we’ll use {}.\n\nexport default function handler(req, res) {\n  // ...\n  res.setPreviewData({})\n  // ...\n}\n\nres.setPreviewData sets some cookies on the browser which turns on the preview mode. Any requests to Next.js containing these cookies will be considered as the preview mode, and the behavior for statically generated pages will change (more on this later).\n\nYou can test this manually by creating an API route like below and accessing it from your browser manually:\n\npages/api/preview.js\n// simple example for testing it manually from your browser.\nexport default function handler(req, res) {\n  res.setPreviewData({})\n  res.end('Preview mode enabled')\n}\n\nIf you open your browser’s developer tools and visit /api/preview, you’ll notice that the __prerender_bypass and __next_preview_data cookies will be set on this request.\n\nSecurely accessing it from your Headless CMS\n\nIn practice, you’d want to call this API route securely from your headless CMS. The specific steps will vary depending on which headless CMS you’re using, but here are some common steps you could take.\n\nThese steps assume that the headless CMS you’re using supports setting custom preview URLs. If it doesn’t, you can still use this method to secure your preview URLs, but you’ll need to construct and access the preview URL manually.\n\nFirst, you should create a secret token string using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don’t have access to your CMS from accessing preview URLs.\n\nSecond, if your headless CMS supports setting custom preview URLs, specify the following as the preview URL. This assumes that your preview API route is located at pages/api/preview.js.\n\nTerminal\nhttps://<your-site>/api/preview?secret=<token>&slug=<path>\n<your-site> should be your deployment domain.\n<token> should be replaced with the secret token you generated.\n<path> should be the path for the page that you want to preview. If you want to preview /posts/foo, then you should use &slug=/posts/foo.\n\nYour headless CMS might allow you to include a variable in the preview URL so that <path> can be set dynamically based on the CMS’s data like so: &slug=/posts/{entry.fields.slug}\n\nFinally, in the preview API route:\n\nCheck that the secret matches and that the slug parameter exists (if not, the request should fail).\nCall res.setPreviewData.\nThen redirect the browser to the path specified by slug. (The following example uses a 307 redirect\n).\nexport default async (req, res) => {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n \n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(req.query.slug)\n \n  // If the slug doesn't exist prevent preview mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n \n  // Enable Preview Mode by setting the cookies\n  res.setPreviewData({})\n \n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.redirect(post.slug)\n}\n\nIf it succeeds, then the browser will be redirected to the path you want to preview with the preview mode cookies being set.\n\nStep 2: Update getStaticProps\n\nThe next step is to update getStaticProps to support the preview mode.\n\nIf you request a page which has getStaticProps with the preview mode cookies set (via res.setPreviewData), then getStaticProps will be called at request time (instead of at build time).\n\nFurthermore, it will be called with a context object where:\n\ncontext.preview will be true.\ncontext.previewData will be the same as the argument used for setPreviewData.\nexport async function getStaticProps(context) {\n  // If you request this page with the preview mode cookies set:\n  //\n  // - context.preview will be true\n  // - context.previewData will be the same as\n  //   the argument used for `setPreviewData`.\n}\n\nWe used res.setPreviewData({}) in the preview API route, so context.previewData will be {}. You can use this to pass session information from the preview API route to getStaticProps if necessary.\n\nIf you’re also using getStaticPaths, then context.params will also be available.\n\nFetch preview data\n\nYou can update getStaticProps to fetch different data based on context.preview and/or context.previewData.\n\nFor example, your headless CMS might have a different API endpoint for draft posts. If so, you can use context.preview to modify the API endpoint URL like below:\n\nexport async function getStaticProps(context) {\n  // If context.preview is true, append \"/preview\" to the API endpoint\n  // to request draft data instead of published data. This will vary\n  // based on which headless CMS you're using.\n  const res = await fetch(`https://.../${context.preview ? 'preview' : ''}`)\n  // ...\n}\n\nThat’s it! If you access the preview API route (with secret and slug) from your headless CMS or manually, you should now be able to see the preview content. And if you update your draft without publishing, you should be able to preview the draft.\n\nSet this as the preview URL on your headless CMS or access manually, and you should be able to see the preview.\n\nTerminal\nhttps://<your-site>/api/preview?secret=<token>&slug=<path>\nMore Details\n\nGood to know: during rendering next/router exposes an isPreview flag, see the router object docs for more info.\n\nSpecify the Preview Mode duration\n\nsetPreviewData takes an optional second parameter which should be an options object. It accepts the following keys:\n\nmaxAge: Specifies the number (in seconds) for the preview session to last for.\npath: Specifies the path the cookie should be applied under. Defaults to / enabling preview mode for all paths.\nsetPreviewData(data, {\n  maxAge: 60 * 60, // The preview mode cookies expire in 1 hour\n  path: '/about', // The preview mode cookies apply to paths with /about\n})\nClear the Preview Mode cookies\n\nBy default, no expiration date is set for Preview Mode cookies, so the preview session ends when the browser is closed.\n\nTo clear the Preview Mode cookies manually, create an API route that calls clearPreviewData():\n\npages/api/clear-preview-mode-cookies.js\nexport default function handler(req, res) {\n  res.clearPreviewData({})\n}\n\nThen, send a request to /api/clear-preview-mode-cookies to invoke the API Route. If calling this route using next/link, you must pass prefetch={false} to prevent calling clearPreviewData during link prefetching.\n\nIf a path was specified in the setPreviewData call, you must pass the same path to clearPreviewData:\n\npages/api/clear-preview-mode-cookies.js\nexport default function handler(req, res) {\n  const { path } = req.query\n \n  res.clearPreviewData({ path })\n}\npreviewData size limits\n\nYou can pass an object to setPreviewData and have it be available in getStaticProps. However, because the data will be stored in a cookie, there’s a size limitation. Currently, preview data is limited to 2KB.\n\nWorks with getServerSideProps\n\nThe preview mode works on getServerSideProps as well. It will also be available on the context object containing preview and previewData.\n\nGood to know: You shouldn't set the Cache-Control header when using Preview Mode because it cannot be bypassed. Instead, we recommend using ISR.\n\nWorks with API Routes\n\nAPI Routes will have access to preview and previewData under the request object. For example:\n\nexport default function myApiRoute(req, res) {\n  const isPreview = req.preview\n  const previewData = req.previewData\n  // ...\n}\nUnique per next build\n\nBoth the bypass cookie value and the private key for encrypting the previewData change when next build is completed. This ensures that the bypass cookie can’t be guessed.\n\nGood to know: To test Preview Mode locally over HTTP your browser will need to allow third-party cookies and local storage access."
  },
  {
    "title": "Configuring: Draft Mode | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode",
    "html": "Draft Mode\n\nIn the Pages documentation and the Data Fetching documentation, we talked about how to pre-render a page at build time (Static Generation) using getStaticProps and getStaticPaths.\n\nStatic Generation is useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want to view the draft immediately on your page. You’d want Next.js to render these pages at request time instead of build time and fetch the draft content instead of the published content. You’d want Next.js to bypass Static Generation only for this specific case.\n\nNext.js has a feature called Draft Mode which solves this problem. Here are instructions on how to use it.\n\nStep 1: Create and access the API route\n\nTake a look at the API Routes documentation first if you’re not familiar with Next.js API Routes.\n\nFirst, create the API route. It can have any name - e.g. pages/api/draft.ts\n\nIn this API route, you need to call setDraftMode on the response object.\n\nexport default function handler(req, res) {\n  // ...\n  res.setDraftMode({ enable: true })\n  // ...\n}\n\nThis will set a cookie to enable draft mode. Subsequent requests containing this cookie will trigger Draft Mode changing the behavior for statically generated pages (more on this later).\n\nYou can test this manually by creating an API route like below and accessing it from your browser manually:\n\npages/api/draft.ts\n// simple example for testing it manually from your browser.\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: true })\n  res.end('Draft mode is enabled')\n}\n\nIf you open your browser’s developer tools and visit /api/draft, you’ll notice a Set-Cookie response header with a cookie named __prerender_bypass.\n\nSecurely accessing it from your Headless CMS\n\nIn practice, you’d want to call this API route securely from your headless CMS. The specific steps will vary depending on which headless CMS you’re using, but here are some common steps you could take.\n\nThese steps assume that the headless CMS you’re using supports setting custom draft URLs. If it doesn’t, you can still use this method to secure your draft URLs, but you’ll need to construct and access the draft URL manually.\n\nFirst, you should create a secret token string using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don’t have access to your CMS from accessing draft URLs.\n\nSecond, if your headless CMS supports setting custom draft URLs, specify the following as the draft URL. This assumes that your draft API route is located at pages/api/draft.ts.\n\nTerminal\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n<your-site> should be your deployment domain.\n<token> should be replaced with the secret token you generated.\n<path> should be the path for the page that you want to view. If you want to view /posts/foo, then you should use &slug=/posts/foo.\n\nYour headless CMS might allow you to include a variable in the draft URL so that <path> can be set dynamically based on the CMS’s data like so: &slug=/posts/{entry.fields.slug}\n\nFinally, in the draft API route:\n\nCheck that the secret matches and that the slug parameter exists (if not, the request should fail).\nCall res.setDraftMode.\nThen redirect the browser to the path specified by slug. (The following example uses a 307 redirect\n).\nexport default async (req, res) => {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n \n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(req.query.slug)\n \n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n \n  // Enable Draft Mode by setting the cookie\n  res.setDraftMode({ enable: true })\n \n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.redirect(post.slug)\n}\n\nIf it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie.\n\nStep 2: Update getStaticProps\n\nThe next step is to update getStaticProps to support draft mode.\n\nIf you request a page which has getStaticProps with the cookie set (via res.setDraftMode), then getStaticProps will be called at request time (instead of at build time).\n\nFurthermore, it will be called with a context object where context.draftMode will be true.\n\nexport async function getStaticProps(context) {\n  if (context.draftMode) {\n    // dynamic data\n  }\n}\n\nWe used res.setDraftMode in the draft API route, so context.draftMode will be true.\n\nIf you’re also using getStaticPaths, then context.params will also be available.\n\nFetch draft data\n\nYou can update getStaticProps to fetch different data based on context.draftMode.\n\nFor example, your headless CMS might have a different API endpoint for draft posts. If so, you can modify the API endpoint URL like below:\n\nexport async function getStaticProps(context) {\n  const url = context.draftMode\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n  const res = await fetch(url)\n  // ...\n}\n\nThat’s it! If you access the draft API route (with secret and slug) from your headless CMS or manually, you should now be able to see the draft content. And if you update your draft without publishing, you should be able to view the draft.\n\nSet this as the draft URL on your headless CMS or access manually, and you should be able to see the draft.\n\nTerminal\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\nMore Details\nClear the Draft Mode cookie\n\nBy default, the Draft Mode session ends when the browser is closed.\n\nTo clear the Draft Mode cookie manually, create an API route that calls setDraftMode({ enable: false }):\n\npages/api/disable-draft.ts\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: false })\n}\n\nThen, send a request to /api/disable-draft to invoke the API Route. If calling this route using next/link, you must pass prefetch={false} to prevent accidentally deleting the cookie on prefetch.\n\nWorks with getServerSideProps\n\nDraft Mode works with getServerSideProps, and is available as a draftMode key in the context object.\n\nGood to know: You shouldn't set the Cache-Control header when using Draft Mode because it cannot be bypassed. Instead, we recommend using ISR.\n\nWorks with API Routes\n\nAPI Routes will have access to draftMode on the request object. For example:\n\nexport default function myApiRoute(req, res) {\n  if (req.draftMode) {\n    // get draft data\n  }\n}\nUnique per next build\n\nA new bypass cookie value will be generated each time you run next build.\n\nThis ensures that the bypass cookie can’t be guessed.\n\nGood to know: To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access."
  },
  {
    "title": "Configuring: PostCSS | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/post-css",
    "html": "PostCSS\nExamples\nTailwind CSS Example\nDefault Behavior\n\nNext.js compiles CSS for its built-in CSS support using PostCSS.\n\nOut of the box, with no configuration, Next.js compiles CSS with the following transformations:\n\nAutoprefixer\n automatically adds vendor prefixes to CSS rules (back to IE11).\nCross-browser Flexbox bugs\n are corrected to behave like the spec\n.\nNew CSS features are automatically compiled for Internet Explorer 11 compatibility:\nall Property\nBreak Properties\nfont-variant Property\nGap Properties\nMedia Query Ranges\n\nBy default, CSS Grid\n and Custom Properties\n (CSS variables) are not compiled for IE11 support.\n\nTo compile CSS Grid Layout\n for IE11, you can place the following comment at the top of your CSS file:\n\n/* autoprefixer grid: autoplace */\n\nYou can also enable IE11 support for CSS Grid Layout\n in your entire project by configuring autoprefixer with the configuration shown below (collapsed). See \"Customizing Plugins\" below for more information.\n\nClick to view the configuration to enable CSS Grid Layout\n\nCSS variables are not compiled because it is not possible to safely do so\n. If you must use variables, consider using something like Sass variables\n which are compiled away by Sass\n.\n\nCustomizing Target Browsers\n\nNext.js allows you to configure the target browsers (for Autoprefixer\n and compiled css features) through Browserslist\n.\n\nTo customize browserslist, create a browserslist key in your package.json like so:\n\npackage.json\n{\n  \"browserslist\": [\">0.3%\", \"not dead\", \"not op_mini all\"]\n}\n\nYou can use the browsersl.ist\n tool to visualize what browsers you are targeting.\n\nCSS Modules\n\nNo configuration is needed to support CSS Modules. To enable CSS Modules for a file, rename the file to have the extension .module.css.\n\nYou can learn more about Next.js' CSS Module support here.\n\nCustomizing Plugins\n\nWarning: When you define a custom PostCSS configuration file, Next.js completely disables the default behavior. Be sure to manually configure all the features you need compiled, including Autoprefixer\n. You also need to install any plugins included in your custom configuration manually, i.e. npm install postcss-flexbugs-fixes postcss-preset-env.\n\nTo customize the PostCSS configuration, create a postcss.config.json file in the root of your project.\n\nThis is the default configuration used by Next.js:\n\npostcss.config.json\n{\n  \"plugins\": [\n    \"postcss-flexbugs-fixes\",\n    [\n      \"postcss-preset-env\",\n      {\n        \"autoprefixer\": {\n          \"flexbox\": \"no-2009\"\n        },\n        \"stage\": 3,\n        \"features\": {\n          \"custom-properties\": false\n        }\n      }\n    ]\n  ]\n}\n\nGood to know: Next.js also allows the file to be named .postcssrc.json, or, to be read from the postcss key in package.json.\n\nIt is also possible to configure PostCSS with a postcss.config.js file, which is useful when you want to conditionally include plugins based on environment:\n\npostcss.config.js\nmodule.exports = {\n  plugins:\n    process.env.NODE_ENV === 'production'\n      ? [\n          'postcss-flexbugs-fixes',\n          [\n            'postcss-preset-env',\n            {\n              autoprefixer: {\n                flexbox: 'no-2009',\n              },\n              stage: 3,\n              features: {\n                'custom-properties': false,\n              },\n            },\n          ],\n        ]\n      : [\n          // No transformations in development\n        ],\n}\n\nGood to know: Next.js also allows the file to be named .postcssrc.js.\n\nDo not use require() to import the PostCSS Plugins. Plugins must be provided as strings.\n\nGood to know: If your postcss.config.js needs to support other non-Next.js tools in the same project, you must use the interoperable object-based format instead:\n\nmodule.exports = {\n  plugins: {\n    'postcss-flexbugs-fixes': {},\n    'postcss-preset-env': {\n      autoprefixer: {\n        flexbox: 'no-2009',\n      },\n      stage: 3,\n      features: {\n        'custom-properties': false,\n      },\n    },\n  },\n}"
  },
  {
    "title": "Configuring: Babel | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/babel",
    "html": "Babel\nExamples\n\nNext.js includes the next/babel preset to your app, which includes everything needed to compile React applications and server-side code. But if you want to extend the default Babel configs, it's also possible.\n\nAdding Presets and Plugins\n\nTo start, you only need to define a .babelrc file (or babel.config.js) in the root directory of your project. If such a file is found, it will be considered as the source of truth, and therefore it needs to define what Next.js needs as well, which is the next/babel preset.\n\nHere's an example .babelrc file:\n\n.babelrc\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": []\n}\n\nYou can take a look at this file\n to learn about the presets included by next/babel.\n\nTo add presets/plugins without configuring them, you can do it this way:\n\n.babelrc\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": [\"@babel/plugin-proposal-do-expressions\"]\n}\nCustomizing Presets and Plugins\n\nTo add presets/plugins with custom configuration, do it on the next/babel preset like so:\n\n.babelrc\n{\n  \"presets\": [\n    [\n      \"next/babel\",\n      {\n        \"preset-env\": {},\n        \"transform-runtime\": {},\n        \"styled-jsx\": {},\n        \"class-properties\": {}\n      }\n    ]\n  ],\n  \"plugins\": []\n}\n\nTo learn more about the available options for each config, visit babel's documentation\n site.\n\nGood to know:\n\nNext.js uses the current Node.js version\n for server-side compilations.\nThe modules option on \"preset-env\" should be kept to false, otherwise webpack code splitting is turned off."
  },
  {
    "title": "Configuring: Custom Server | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/custom-server",
    "html": "Custom Server\n\nNext.js includes its own server with next start by default. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this approach. However, it's available if you need to eject.\n\nGood to know:\n\nBefore deciding to use a custom server, keep in mind that it should only be used when the integrated router of Next.js can't meet your app requirements. A custom server will remove important performance optimizations, like Automatic Static Optimization.\nA custom server cannot be deployed on Vercel\n.\nWhen using standalone output mode, it does not trace custom server files. This mode outputs a separate minimal server.js file, instead. These cannot be used together.\n\nTake a look at the following example\n of a custom server:\n\nserver.ts\nTypeScript\nJavaScript\nTypeScript\nimport { createServer } from 'http'\nimport { parse } from 'url'\nimport next from 'next'\n \nconst port = parseInt(process.env.PORT || '3000', 10)\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n \napp.prepare().then(() => {\n  createServer((req, res) => {\n    const parsedUrl = parse(req.url!, true)\n    handle(req, res, parsedUrl)\n  }).listen(port)\n \n  console.log(\n    `> Server listening at http://localhost:${port} as ${\n      dev ? 'development' : process.env.NODE_ENV\n    }`\n  )\n})\n\nserver.js does not run through the Next.js Compiler or bundling process. Make sure the syntax and source code this file requires are compatible with the current Node.js version you are using. View an example\n.\n\nTo run the custom server, you'll need to update the scripts in package.json like so:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n\nAlternatively, you can set up nodemon (example\n). The custom server uses the following import to connect the server with the Next.js application:\n\nimport next from 'next'\n \nconst app = next({})\n\nThe above next import is a function that receives an object with the following options:\n\nOption\tType\tDescription\nconf\tObject\tThe same object you would use in next.config.js. Defaults to {}\ncustomServer\tBoolean\t(Optional) Set to false when the server was created by Next.js\ndev\tBoolean\t(Optional) Whether or not to launch Next.js in dev mode. Defaults to false\ndir\tString\t(Optional) Location of the Next.js project. Defaults to '.'\nquiet\tBoolean\t(Optional) Hide error messages containing server information. Defaults to false\nhostname\tString\t(Optional) The hostname the server is running behind\nport\tNumber\t(Optional) The port the server is running behind\nhttpServer\tnode:http#Server\t(Optional) The HTTP Server that Next.js is running behind\n\nThe returned app can then be used to let Next.js handle requests as required.\n\nDisabling file-system routing\n\nBy default, Next will serve each file in the pages folder under a pathname matching the filename. If your project uses a custom server, this behavior may result in the same content being served from multiple paths, which can present problems with SEO and UX.\n\nTo disable this behavior and prevent routing based on files in pages, open next.config.js and disable the useFileSystemPublicRoutes config:\n\nnext.config.js\nmodule.exports = {\n  useFileSystemPublicRoutes: false,\n}\n\nNote that useFileSystemPublicRoutes disables filename routes from SSR; client-side routing may still access those paths. When using this option, you should guard against navigation to routes you do not want programmatically.\n\nYou may also wish to configure the client-side router to disallow client-side redirects to filename routes; for that refer to router.beforePopState."
  },
  {
    "title": "Configuring: MDX | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/mdx",
    "html": "Markdown and MDX\n\nMarkdown\n is a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs.\n\nYou write...\n\nI **love** using [Next.js](https://nextjs.org/)\n\nOutput:\n\n<p>I <strong>love</strong> using <a href=\"https://nextjs.org/\">Next.js</a></p>\n\nMDX\n is a superset of markdown that lets you write JSX\n directly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content.\n\nNext.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router).\n\nGood to know: View the Portfolio Starter Kit\n template for a complete working example.\n\nInstall dependencies\n\nThe @next/mdx package, and related packages, are used to configure Next.js so it can process markdown and MDX. It sources data from local files, allowing you to create pages with a .md or .mdx extension, directly in your /pages or /app directory.\n\nInstall these packages to render MDX with Next.js:\n\nTerminal\nnpm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx\nConfigure next.config.mjs\n\nUpdate the next.config.mjs file at your project's root to configure it to use MDX:\n\nnext.config.mjs\nimport createMDX from '@next/mdx'\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions` to include markdown and MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n \nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n})\n \n// Merge MDX config with Next.js config\nexport default withMDX(nextConfig)\n\nThis allows .md and .mdx files to act as pages, routes, or imports in your application.\n\nAdd an mdx-components.tsx file\n\nCreate an mdx-components.tsx (or .js) file in the root of your project to define global MDX Components. For example, at the same level as pages or app, or inside src if applicable.\n\nmdx-components.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { MDXComponents } from 'mdx/types'\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n\nGood to know:\n\nmdx-components.tsx is required to use @next/mdx with App Router and will not work without it.\nLearn more about the mdx-components.tsx file convention.\nLearn how to use custom styles and components.\nRendering MDX\n\nYou can render MDX using Next.js's file based routing or by importing MDX files into other pages.\n\nUsing file based routing\n\nWhen using file based routing, you can use MDX pages like any other page.\n\nCreate a new MDX page within the /pages directory:\n\n  my-project\n  |── mdx-components.(tsx/js)\n  ├── pages\n  │   └── mdx-page.(mdx/md)\n  └── package.json\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\nimport { MyComponent } from 'my-component'\n \n# Welcome to my MDX page!\n \nThis is some **bold** and _italics_ text.\n \nThis is a list in markdown:\n \n- One\n- Two\n- Three\n \nCheckout my React component:\n \n<MyComponent />\n\nNavigating to the /mdx-page route should display your rendered MDX page.\n\nUsing imports\n\nCreate a new page within the /pages directory and an MDX file wherever you'd like:\n\n  my-project\n  ├── pages\n  │   └── mdx-page.(tsx/js)\n  ├── markdown\n  │   └── welcome.(mdx/md)\n  |── mdx-components.(tsx/js)\n  └── package.json\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\nImport the MDX file inside the page to display the content:\n\npages/mdx-page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Welcome from '@/markdown/welcome.mdx'\n \nexport default function Page() {\n  return <Welcome />\n}\n\nNavigating to the /mdx-page route should display your rendered MDX page.\n\nUsing custom styles and components\n\nMarkdown, when rendered, maps to native HTML elements. For example, writing the following markdown:\n\n## This is a heading\n \nThis is a list in markdown:\n \n- One\n- Two\n- Three\n\nGenerates the following HTML:\n\n<h2>This is a heading</h2>\n \n<p>This is a list in markdown:</p>\n \n<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>\n\nTo style your markdown, you can provide custom components that map to the generated HTML elements. Styles and components can be implemented globally, locally, and with shared layouts.\n\nGlobal styles and components\n\nAdding styles and components in mdx-components.tsx will affect all MDX files in your application.\n\nmdx-components.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { MDXComponents } from 'mdx/types'\nimport Image, { ImageProps } from 'next/image'\n \n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => (\n      <h1 style={{ color: 'red', fontSize: '48px' }}>{children}</h1>\n    ),\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...(props as ImageProps)}\n      />\n    ),\n    ...components,\n  }\n}\nLocal styles and components\n\nYou can apply local styles and components to specific pages by passing them into imported MDX components. These will merge with and override global styles and components.\n\npages/mdx-page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Welcome from '@/markdown/welcome.mdx'\n \nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n \nconst overrideComponents = {\n  h1: CustomH1,\n}\n \nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\nShared layouts\n\nTo share a layout around MDX pages, create a layout component:\n\ncomponents/mdx-layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n\nThen, import the layout component into the MDX page, wrap the MDX content in the layout, and export it:\n\nimport MdxLayout from '../components/mdx-layout'\n \n# Welcome to my MDX page!\n \nexport default function MDXPage({ children }) {\n  return <MdxLayout>{children}</MdxLayout>\n \n}\nUsing Tailwind typography plugin\n\nIf you are using Tailwind\n to style your application, using the @tailwindcss/typography plugin\n will allow you to reuse your Tailwind configuration and styles in your markdown files.\n\nThe plugin adds a set of prose classes that can be used to add typographic styles to content blocks that come from sources, like markdown.\n\nInstall Tailwind typography\n and use with shared layouts to add the prose you want.\n\nTo share a layout around MDX pages, create a layout component:\n\ncomponents/mdx-layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n\nThen, import the layout component into the MDX page, wrap the MDX content in the layout, and export it:\n\nimport MdxLayout from '../components/mdx-layout'\n \n# Welcome to my MDX page!\n \nexport default function MDXPage({ children }) {\n  return <MdxLayout>{children}</MdxLayout>\n \n}\nFrontmatter\n\nFrontmatter is a YAML like key/value pairing that can be used to store data about a page. @next/mdx does not support frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:\n\nremark-frontmatter\nremark-mdx-frontmatter\ngray-matter\n\n@next/mdx does allow you to use exports like any other JavaScript component:\n\nMetadata can now be referenced outside of the MDX file:\n\npages/blog.tsx\nTypeScript\nJavaScript\nTypeScript\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n \nexport default function Page() {\n  console.log('metadata: ', metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n\nA common use case for this is when you want to iterate over a collection of MDX and extract data. For example, creating a blog index page from all blog posts. You can use packages like Node's fs module\n or globby\n to read a directory of posts and extract the metadata.\n\nGood to know:\n\nUsing fs, globby, etc. can only be used server-side.\nView the Portfolio Starter Kit\n template for a complete working example.\nRemark and Rehype Plugins\n\nYou can optionally provide remark and rehype plugins to transform the MDX content.\n\nFor example, you can use remark-gfm to support GitHub Flavored Markdown.\n\nSince the remark and rehype ecosystem is ESM only, you'll need to use next.config.mjs as the configuration file.\n\nnext.config.mjs\nimport remarkGfm from 'remark-gfm'\nimport createMDX from '@next/mdx'\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions`` to include MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n \nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n  options: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [],\n  },\n})\n \n// Wrap MDX and Next.js config with each other\nexport default withMDX(nextConfig)\nRemote MDX\n\nIf your MDX files or content lives somewhere else, you can fetch it dynamically on the server. This is useful for content stored in a separate local folder, CMS, database, or anywhere else. A popular community package for this use is next-mdx-remote\n.\n\nGood to know: Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE).\n\nThe following example uses next-mdx-remote:\n\npages/mdx-page-remote.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { serialize } from 'next-mdx-remote/serialize'\nimport { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote'\n \ninterface Props {\n  mdxSource: MDXRemoteSerializeResult\n}\n \nexport default function RemoteMdxPage({ mdxSource }: Props) {\n  return <MDXRemote {...mdxSource} />\n}\n \nexport async function getStaticProps() {\n  // MDX text - can be from a local file, database, CMS, fetch, anywhere...\n  const res = await fetch('https:...')\n  const mdxText = await res.text()\n  const mdxSource = await serialize(mdxText)\n  return { props: { mdxSource } }\n}\n\nNavigating to the /mdx-page-remote route should display your rendered MDX.\n\nDeep Dive: How do you transform markdown into HTML?\n\nReact does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished with remark and rehype.\n\nremark is an ecosystem of tools around markdown. rehype is the same, but for HTML. For example, the following code snippet transforms markdown into HTML:\n\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n \nmain()\n \nasync function main() {\n  const file = await unified()\n    .use(remarkParse) // Convert into markdown AST\n    .use(remarkRehype) // Transform to HTML AST\n    .use(rehypeSanitize) // Sanitize HTML input\n    .use(rehypeStringify) // Convert AST into serialized HTML\n    .process('Hello, Next.js!')\n \n  console.log(String(file)) // <p>Hello, Next.js!</p>\n}\n\nThe remark and rehype ecosystem contains plugins for syntax highlighting\n, linking headings\n, generating a table of contents\n, and more.\n\nWhen using @next/mdx as shown above, you do not need to use remark or rehype directly, as it is handled for you. We're describing it here for a deeper understanding of what the @next/mdx package is doing underneath.\n\nUsing the Rust-based MDX compiler (experimental)\n\nNext.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configure next.config.js when you pass it to withMDX:\n\nnext.config.js\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: true,\n  },\n})\n\nmdxRs also accepts an object to configure how to transform mdx files.\n\nnext.config.js\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: {\n      jsxRuntime?: string            // Custom jsx runtime\n      jsxImportSource?: string       // Custom jsx import source,\n      mdxType?: 'gfm' | 'commonmark' // Configure what kind of mdx syntax will be used to parse & transform\n    },\n  },\n})\n\nGood to know:\n\nThis option is required when processing markdown and MDX while using Turbopack (next dev --turbo).\n\nHelpful Links\nMDX\n@next/mdx\nremark\nrehype\nMarkdoc"
  },
  {
    "title": "Configuring: AMP | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/amp",
    "html": "AMP\nExamples\n\nWith Next.js you can turn any React page into an AMP page, with minimal config, and without leaving React.\n\nYou can read more about AMP in the official amp.dev\n site.\n\nEnabling AMP\n\nTo enable AMP support for a page, and to learn more about the different AMP configs, read the API documentation for next/amp.\n\nCaveats\nOnly CSS-in-JS is supported. CSS Modules aren't supported by AMP pages at the moment. You can contribute CSS Modules support to Next.js\n.\nAdding AMP Components\n\nThe AMP community provides many components\n to make AMP pages more interactive. Next.js will automatically import all components used on a page and there is no need to manually import AMP component scripts:\n\nexport const config = { amp: true }\n \nfunction MyAmpPage() {\n  const date = new Date()\n \n  return (\n    <div>\n      <p>Some time: {date.toJSON()}</p>\n      <amp-timeago\n        width=\"0\"\n        height=\"15\"\n        datetime={date.toJSON()}\n        layout=\"responsive\"\n      >\n        .\n      </amp-timeago>\n    </div>\n  )\n}\n \nexport default MyAmpPage\n\nThe above example uses the amp-timeago\n component.\n\nBy default, the latest version of a component is always imported. If you want to customize the version, you can use next/head, as in the following example:\n\nimport Head from 'next/head'\n \nexport const config = { amp: true }\n \nfunction MyAmpPage() {\n  const date = new Date()\n \n  return (\n    <div>\n      <Head>\n        <script\n          async\n          key=\"amp-timeago\"\n          custom-element=\"amp-timeago\"\n          src=\"https://cdn.ampproject.org/v0/amp-timeago-0.1.js\"\n        />\n      </Head>\n \n      <p>Some time: {date.toJSON()}</p>\n      <amp-timeago\n        width=\"0\"\n        height=\"15\"\n        datetime={date.toJSON()}\n        layout=\"responsive\"\n      >\n        .\n      </amp-timeago>\n    </div>\n  )\n}\n \nexport default MyAmpPage\nAMP Validation\n\nAMP pages are automatically validated with amphtml-validator\n during development. Errors and warnings will appear in the terminal where you started Next.js.\n\nPages are also validated during Static HTML export and any warnings / errors will be printed to the terminal. Any AMP errors will cause the export to exit with status code 1 because the export is not valid AMP.\n\nCustom Validators\n\nYou can set up custom AMP validator in next.config.js as shown below:\n\nmodule.exports = {\n  amp: {\n    validator: './custom_validator.js',\n  },\n}\nSkip AMP Validation\n\nTo turn off AMP validation add the following code to next.config.js\n\nexperimental: {\n  amp: {\n    skipValidation: true\n  }\n}\nAMP in Static HTML Export\n\nWhen using Static HTML export statically prerender pages, Next.js will detect if the page supports AMP and change the exporting behavior based on that.\n\nFor example, the hybrid AMP page pages/about.js would output:\n\nout/about.html - HTML page with client-side React runtime\nout/about.amp.html - AMP page\n\nAnd if pages/about.js is an AMP-only page, then it would output:\n\nout/about.html - Optimized AMP page\n\nNext.js will automatically insert a link to the AMP version of your page in the HTML version, so you don't have to, like so:\n\n<link rel=\"amphtml\" href=\"/about.amp.html\" />\n\nAnd the AMP version of your page will include a link to the HTML page:\n\n<link rel=\"canonical\" href=\"/about\" />\n\nWhen trailingSlash is enabled the exported pages for pages/about.js would be:\n\nout/about/index.html - HTML page\nout/about.amp/index.html - AMP page\nTypeScript\n\nAMP currently doesn't have built-in types for TypeScript, but it's in their roadmap (#13791\n).\n\nAs a workaround you can manually create a file called amp.d.ts inside your project and add these custom types\n."
  },
  {
    "title": "Configuring: src Directory | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/src-directory",
    "html": "src Directory\n\nAs an alternative to having the special Next.js app or pages directories in the root of your project, Next.js also supports the common pattern of placing application code under the src directory.\n\nThis separates application code from project configuration files which mostly live in the root of a project, which is preferred by some individuals and teams.\n\nTo use the src directory, move the app Router folder or pages Router folder to src/app or src/pages respectively.\n\nGood to know:\n\nThe /public directory should remain in the root of your project.\nConfig files like package.json, next.config.js and tsconfig.json should remain in the root of your project.\n.env.* files should remain in the root of your project.\nsrc/app or src/pages will be ignored if app or pages are present in the root directory.\nIf you're using src, you'll probably also move other application folders such as /components or /lib.\nIf you're using Middleware, ensure it is placed inside the src directory.\nIf you're using Tailwind CSS, you'll need to add the /src prefix to the tailwind.config.js file in the content section\n.\nIf you are using TypeScript paths for imports such as @/*, you should update the paths object in tsconfig.json to include src/."
  },
  {
    "title": "Configuring: Environment Variables | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables",
    "html": "Environment Variables\nExamples\n\nNext.js comes with built-in support for environment variables, which allows you to do the following:\n\nUse .env to load environment variables\nBundle environment variables for the browser by prefixing with NEXT_PUBLIC_\nLoading Environment Variables\n\nNext.js has built-in support for loading environment variables from .env* files into process.env.\n\n.env\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n\nThis loads process.env.DB_HOST, process.env.DB_USER, and process.env.DB_PASS into the Node.js environment automatically allowing you to use them in Next.js data fetching methods and API routes.\n\nFor example, using getStaticProps:\n\npages/index.js\nexport async function getStaticProps() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\nLoading Environment Variables with @next/env\n\nIf you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the @next/env package.\n\nThis package is used internally by Next.js to load environment variables from .env* files.\n\nTo use it, install the package and use the loadEnvConfig function to load the environment variables:\n\nnpm install @next/env\nenvConfig.ts\nTypeScript\nJavaScript\nTypeScript\nimport { loadEnvConfig } from '@next/env'\n \nconst projectDir = process.cwd()\nloadEnvConfig(projectDir)\n\nThen, you can import the configuration where needed. For example:\n\norm.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport './envConfig.ts'\n \nexport default defineConfig({\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL!,\n  },\n})\nReferencing Other Variables\n\nNext.js will automatically expand variables that use $ to reference other variables e.g. $VARIABLE inside of your .env* files. This allows you to reference other secrets. For example:\n\n.env\nTWITTER_USER=nextjs\nTWITTER_URL=https://x.com/$TWITTER_USER\n\nIn the above example, process.env.TWITTER_URL would be set to https://x.com/nextjs.\n\nGood to know: If you need to use variable with a $ in the actual value, it needs to be escaped e.g. \\$.\n\nBundling Environment Variables for the Browser\n\nNon-NEXT_PUBLIC_ environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a different environment).\n\nIn order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at build time, into the js bundle that is delivered to the client, replacing all references to process.env.[variable] with a hard-coded value. To tell it to do this, you just have to prefix the variable with NEXT_PUBLIC_. For example:\n\nTerminal\nNEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n\nThis will tell Next.js to replace all references to process.env.NEXT_PUBLIC_ANALYTICS_ID in the Node.js environment with the value from the environment in which you run next build, allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser.\n\nNote: After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, all NEXT_PUBLIC_ variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization).\n\npages/index.js\nimport setupAnalyticsService from '../lib/my-analytics-service'\n \n// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.\n// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n \nfunction HomePage() {\n  return <h1>Hello World</h1>\n}\n \nexport default HomePage\n\nNote that dynamic lookups will not be inlined, such as:\n\n// This will NOT be inlined, because it uses a variable\nconst varName = 'NEXT_PUBLIC_ANALYTICS_ID'\nsetupAnalyticsService(process.env[varName])\n \n// This will NOT be inlined, because it uses a variable\nconst env = process.env\nsetupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)\nRuntime Environment Variables\n\nNext.js can support both build time and runtime environment variables.\n\nBy default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed with NEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle during next build.\n\nTo read runtime environment variables, we recommend using getServerSideProps or incrementally adopting the App Router. With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values.\n\nimport { unstable_noStore as noStore } from 'next/cache'\n \nexport default function Component() {\n  noStore()\n  // cookies(), headers(), and other dynamic functions\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n\nGood to know:\n\nYou can run code on server startup using the register function.\nWe do not recommend using the runtimeConfig option, as this does not work with the standalone output mode. Instead, we recommend incrementally adopting the App Router.\nDefault Environment Variables\n\nTypically, only .env* file is needed. However, sometimes you might want to add some defaults for the development (next dev) or production (next start) environment.\n\nNext.js allows you to set defaults in .env (all environments), .env.development (development environment), and .env.production (production environment).\n\nGood to know: .env, .env.development, and .env.production files should be included in your repository as they define defaults. All .env files are excluded in .gitignore by default, allowing you to opt-into committing these values to your repository.\n\nEnvironment Variables on Vercel\n\nWhen deploying your Next.js application to Vercel\n, Environment Variables can be configured in the Project Settings\n.\n\nAll types of Environment Variables should be configured there. Even Environment Variables used in Development – which can be downloaded onto your local device\n afterwards.\n\nIf you've configured Development Environment Variables\n you can pull them into a .env.local for usage on your local machine using the following command:\n\nTerminal\nvercel env pull\n\nGood to know: When deploying your Next.js application to Vercel\n, your environment variables in .env* files will not be made available to Edge Runtime, unless their name are prefixed with NEXT_PUBLIC_. We strongly recommend managing your environment variables in Project Settings\n instead, from where all environment variables are available.\n\nTest Environment Variables\n\nApart from development and production environments, there is a 3rd option available: test. In the same way you can set defaults for development or production environments, you can do the same with a .env.test file for the testing environment (though this one is not as common as the previous two). Next.js will not load environment variables from .env.development or .env.production in the testing environment.\n\nThis one is useful when running tests with tools like jest or cypress where you need to set specific environment vars only for testing purposes. Test default values will be loaded if NODE_ENV is set to test, though you usually don't need to do this manually as testing tools will address it for you.\n\nThere is a small difference between test environment, and both development and production that you need to bear in mind: .env.local won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your .env.local (which is intended to override the default set).\n\nGood to know: similar to Default Environment Variables, .env.test file should be included in your repository, but .env.test.local shouldn't, as .env*.local are intended to be ignored through .gitignore.\n\nWhile running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the loadEnvConfig function from the @next/env package.\n\n// The below can be used in a Jest global setup file or similar for your testing set-up\nimport { loadEnvConfig } from '@next/env'\n \nexport default async () => {\n  const projectDir = process.cwd()\n  loadEnvConfig(projectDir)\n}\nEnvironment Variable Load Order\n\nEnvironment variables are looked up in the following places, in order, stopping once the variable is found.\n\nprocess.env\n.env.$(NODE_ENV).local\n.env.local (Not checked when NODE_ENV is test.)\n.env.$(NODE_ENV)\n.env\n\nFor example, if NODE_ENV is development and you define a variable in both .env.development.local and .env, the value in .env.development.local will be used.\n\nGood to know: The allowed values for NODE_ENV are production, development and test.\n\nGood to know\nIf you are using a /src directory, .env.* files should remain in the root of your project.\nIf the environment variable NODE_ENV is unassigned, Next.js automatically assigns development when running the next dev command, or production for all other commands.\nVersion History\nVersion\tChanges\nv9.4.0\tSupport .env and NEXT_PUBLIC_ introduced."
  },
  {
    "title": "Configuring: Absolute Imports and Module Path Aliases | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/absolute-imports-and-module-aliases",
    "html": "Absolute Imports and Module Path Aliases\nExamples\n\nNext.js has in-built support for the \"paths\" and \"baseUrl\" options of tsconfig.json and jsconfig.json files.\n\nThese options allow you to alias project directories to absolute paths, making it easier to import modules. For example:\n\n// before\nimport { Button } from '../../../components/button'\n \n// after\nimport { Button } from '@/components/button'\n\nGood to know: create-next-app will prompt to configure these options for you.\n\nAbsolute Imports\n\nThe baseUrl configuration option allows you to import directly from the root of the project.\n\nAn example of this configuration:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  }\n}\ncomponents/button.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Button() {\n  return <button>Click me</button>\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Button from 'components/button'\n \nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\nModule Aliases\n\nIn addition to configuring the baseUrl path, you can use the \"paths\" option to \"alias\" module paths.\n\nFor example, the following configuration maps @/components/* to components/*:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\ncomponents/button.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Button() {\n  return <button>Click me</button>\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Button from '@/components/button'\n \nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n\nEach of the \"paths\" are relative to the baseUrl location. For example:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Button from '@/components/button'\nimport '@/styles/styles.css'\nimport Helper from 'utils/helper'\n \nexport default function HomePage() {\n  return (\n    <Helper>\n      <h1>Hello World</h1>\n      <Button />\n    </Helper>\n  )\n}"
  },
  {
    "title": "Configuring: ESLint | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/eslint",
    "html": "ESLint\n\nNext.js provides an integrated ESLint\n experience out of the box. Add next lint as a script to package.json:\n\npackage.json\n{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n\nThen run npm run lint or yarn lint:\n\nTerminal\nyarn lint\n\nIf you don't already have ESLint configured in your application, you will be guided through the installation and configuration process.\n\nTerminal\nyarn lint\n\nYou'll see a prompt like this:\n\n? How would you like to configure ESLint?\n\n❯ Strict (recommended)\nBase\nCancel\n\nOne of the following three options can be selected:\n\nStrict: Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time.\n\n.eslintrc.json\n{\n  \"extends\": \"next/core-web-vitals\"\n}\n\nBase: Includes Next.js' base ESLint configuration.\n\n.eslintrc.json\n{\n  \"extends\": \"next\"\n}\n\nCancel: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration.\n\nIf either of the two configuration options are selected, Next.js will automatically install eslint and eslint-config-next as dependencies in your application and create an .eslintrc.json file in the root of your project that includes your selected configuration.\n\nYou can now run next lint every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build (next build). Errors will fail the build, while warnings will not.\n\nIf you do not want ESLint to run during next build, refer to the documentation for Ignoring ESLint.\n\nWe recommend using an appropriate integration\n to view warnings and errors directly in your code editor during development.\n\nESLint Config\n\nThe default configuration (eslint-config-next) includes everything you need to have an optimal out-of-the-box linting experience in Next.js. If you do not have ESLint already configured in your application, we recommend using next lint to set up ESLint along with this configuration.\n\nIf you would like to use eslint-config-next along with other ESLint configurations, refer to the Additional Configurations section to learn how to do so without causing any conflicts.\n\nRecommended rule-sets from the following ESLint plugins are all used within eslint-config-next:\n\neslint-plugin-react\neslint-plugin-react-hooks\neslint-plugin-next\n\nThis will take precedence over the configuration from next.config.js.\n\nESLint Plugin\n\nNext.js provides an ESLint plugin, eslint-plugin-next\n, already bundled within the base configuration that makes it possible to catch common issues and problems in a Next.js application. The full set of rules is as follows:\n\n Enabled in the recommended configuration\n\n\tRule\tDescription\n\n\t@next/next/google-font-display\tEnforce font-display behavior with Google Fonts.\n\n\t@next/next/google-font-preconnect\tEnsure preconnect is used with Google Fonts.\n\n\t@next/next/inline-script-id\tEnforce id attribute on next/script components with inline content.\n\n\t@next/next/next-script-for-ga\tPrefer next/script component when using the inline script for Google Analytics.\n\n\t@next/next/no-assign-module-variable\tPrevent assignment to the module variable.\n\n\t@next/next/no-async-client-component\tPrevent client components from being async functions.\n\n\t@next/next/no-before-interactive-script-outside-document\tPrevent usage of next/script's beforeInteractive strategy outside of pages/_document.js.\n\n\t@next/next/no-css-tags\tPrevent manual stylesheet tags.\n\n\t@next/next/no-document-import-in-page\tPrevent importing next/document outside of pages/_document.js.\n\n\t@next/next/no-duplicate-head\tPrevent duplicate usage of <Head> in pages/_document.js.\n\n\t@next/next/no-head-element\tPrevent usage of <head> element.\n\n\t@next/next/no-head-import-in-document\tPrevent usage of next/head in pages/_document.js.\n\n\t@next/next/no-html-link-for-pages\tPrevent usage of <a> elements to navigate to internal Next.js pages.\n\n\t@next/next/no-img-element\tPrevent usage of <img> element due to slower LCP and higher bandwidth.\n\n\t@next/next/no-page-custom-font\tPrevent page-only custom fonts.\n\n\t@next/next/no-script-component-in-head\tPrevent usage of next/script in next/head component.\n\n\t@next/next/no-styled-jsx-in-document\tPrevent usage of styled-jsx in pages/_document.js.\n\n\t@next/next/no-sync-scripts\tPrevent synchronous scripts.\n\n\t@next/next/no-title-in-document-head\tPrevent usage of <title> with Head component from next/document.\n\n\t@next/next/no-typos\tPrevent common typos in Next.js's data fetching functions\n\n\t@next/next/no-unwanted-polyfillio\tPrevent duplicate polyfills from Polyfill.io.\n\nIf you already have ESLint configured in your application, we recommend extending from this plugin directly instead of including eslint-config-next unless a few conditions are met. Refer to the Recommended Plugin Ruleset to learn more.\n\nCustom Settings\nrootDir\n\nIf you're using eslint-plugin-next in a project where Next.js isn't installed in your root directory (such as a monorepo), you can tell eslint-plugin-next where to find your Next.js application using the settings property in your .eslintrc:\n\n.eslintrc.json\n{\n  \"extends\": \"next\",\n  \"settings\": {\n    \"next\": {\n      \"rootDir\": \"packages/my-app/\"\n    }\n  }\n}\n\nrootDir can be a path (relative or absolute), a glob (i.e. \"packages/*/\"), or an array of paths and/or globs.\n\nLinting Custom Directories and Files\n\nBy default, Next.js will run ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. However, you can specify which directories using the dirs option in the eslint config in next.config.js for production builds:\n\nnext.config.js\nmodule.exports = {\n  eslint: {\n    dirs: ['pages', 'utils'], // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)\n  },\n}\n\nSimilarly, the --dir and --file flags can be used for next lint to lint specific directories and files:\n\nTerminal\nnext lint --dir pages --dir utils --file bar.js\nCaching\n\nTo improve performance, information of files processed by ESLint are cached by default. This is stored in .next/cache or in your defined build directory. If you include any ESLint rules that depend on more than the contents of a single source file and need to disable the cache, use the --no-cache flag with next lint.\n\nTerminal\nnext lint --no-cache\nDisabling Rules\n\nIf you would like to modify or disable any rules provided by the supported plugins (react, react-hooks, next), you can directly change them using the rules property in your .eslintrc:\n\n.eslintrc.json\n{\n  \"extends\": \"next\",\n  \"rules\": {\n    \"react/no-unescaped-entities\": \"off\",\n    \"@next/next/no-page-custom-font\": \"off\"\n  }\n}\nCore Web Vitals\n\nThe next/core-web-vitals rule set is enabled when next lint is run for the first time and the strict option is selected.\n\n.eslintrc.json\n{\n  \"extends\": \"next/core-web-vitals\"\n}\n\nnext/core-web-vitals updates eslint-plugin-next to error on a number of rules that are warnings by default if they affect Core Web Vitals\n.\n\nThe next/core-web-vitals entry point is automatically included for new applications built with Create Next App.\n\nTypeScript\n\nIn addition to the Next.js ESLint rules, create-next-app --typescript will also add TypeScript-specific lint rules with next/typescript to your config:\n\n.eslintrc.json\n{\n  \"extends\": [\"next/core-web-vitals\", \"next/typescript\"]\n}\n\nThose rules are based on plugin:@typescript-eslint/recommended\n. See typescript-eslint > Configs\n for more details.\n\nUsage With Other Tools\nPrettier\n\nESLint also contains code formatting rules, which can conflict with your existing Prettier\n setup. We recommend including eslint-config-prettier\n in your ESLint config to make ESLint and Prettier work together.\n\nFirst, install the dependency:\n\nTerminal\nnpm install --save-dev eslint-config-prettier\n \nyarn add --dev eslint-config-prettier\n \npnpm add --save-dev eslint-config-prettier\n \nbun add --dev eslint-config-prettier\n\nThen, add prettier to your existing ESLint config:\n\n.eslintrc.json\n{\n  \"extends\": [\"next\", \"prettier\"]\n}\nlint-staged\n\nIf you would like to use next lint with lint-staged\n to run the linter on staged git files, you'll have to add the following to the .lintstagedrc.js file in the root of your project in order to specify usage of the --file flag.\n\n.lintstagedrc.js\nconst path = require('path')\n \nconst buildEslintCommand = (filenames) =>\n  `next lint --fix --file ${filenames\n    .map((f) => path.relative(process.cwd(), f))\n    .join(' --file ')}`\n \nmodule.exports = {\n  '*.{js,jsx,ts,tsx}': [buildEslintCommand],\n}\nMigrating Existing Config\nRecommended Plugin Ruleset\n\nIf you already have ESLint configured in your application and any of the following conditions are true:\n\nYou have one or more of the following plugins already installed (either separately or through a different config such as airbnb or react-app):\nreact\nreact-hooks\njsx-a11y\nimport\nYou've defined specific parserOptions that are different from how Babel is configured within Next.js (this is not recommended unless you have customized your Babel configuration)\nYou have eslint-plugin-import installed with Node.js and/or TypeScript resolvers\n defined to handle imports\n\nThen we recommend either removing these settings if you prefer how these properties have been configured within eslint-config-next\n or extending directly from the Next.js ESLint plugin instead:\n\nmodule.exports = {\n  extends: [\n    //...\n    'plugin:@next/next/recommended',\n  ],\n}\n\nThe plugin can be installed normally in your project without needing to run next lint:\n\nTerminal\nnpm install --save-dev @next/eslint-plugin-next\n \nyarn add --dev @next/eslint-plugin-next\n \npnpm add --save-dev @next/eslint-plugin-next\n \nbun add --dev @next/eslint-plugin-next\n\nThis eliminates the risk of collisions or errors that can occur due to importing the same plugin or parser across multiple configurations.\n\nAdditional Configurations\n\nIf you already use a separate ESLint configuration and want to include eslint-config-next, ensure that it is extended last after other configurations. For example:\n\n.eslintrc.json\n{\n  \"extends\": [\"eslint:recommended\", \"next\"]\n}\n\nThe next configuration already handles setting default values for the parser, plugins and settings properties. There is no need to manually re-declare any of these properties unless you need a different configuration for your use case.\n\nIf you include any other shareable configurations, you will need to make sure that these properties are not overwritten or modified. Otherwise, we recommend removing any configurations that share behavior with the next configuration or extending directly from the Next.js ESLint plugin as mentioned above."
  },
  {
    "title": "Configuring: TypeScript | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/typescript",
    "html": "TypeScript\n\nNext.js provides a TypeScript-first development experience for building your React application.\n\nIt comes with built-in TypeScript support for automatically installing the necessary packages and configuring the proper settings.\n\nNew Projects\n\ncreate-next-app now ships with TypeScript by default.\n\nTerminal\nnpx create-next-app@latest\nExisting Projects\n\nAdd TypeScript to your project by renaming a file to .ts / .tsx. Run next dev and next build to automatically install the necessary dependencies and add a tsconfig.json file with the recommended config options.\n\nIf you already had a jsconfig.json file, copy the paths compiler option from the old jsconfig.json into the new tsconfig.json file, and delete the old jsconfig.json file.\n\nWe also recommend you to use next.config.ts over next.config.js for better type inference.\n\nMinimum TypeScript Version\n\nIt is highly recommended to be on at least v4.5.2 of TypeScript to get syntax features such as type modifiers on import names\n and performance improvements\n.\n\nType checking in Next.js Configuration\nType checking next.config.js\n\nWhen using the next.config.js file, you can add some type checking in your IDE using JSDoc as below:\n\nnext.config.js\n// @ts-check\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n \nmodule.exports = nextConfig\nType checking next.config.ts\n\nYou can use TypeScript and import types in your Next.js configuration by using next.config.ts.\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n \nexport default nextConfig\n\nGood to know: You can import Native ESM modules in next.config.ts without any additional configuration. Supports importing extensions like .cjs, .cts, .mjs, and .mts.\n\nStatic Generation and Server-side Rendering\n\nFor getStaticProps, getStaticPaths, and getServerSideProps, you can use the GetStaticProps, GetStaticPaths, and GetServerSideProps types respectively:\n\npages/blog/[slug].tsx\nimport type { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next'\n \nexport const getStaticProps = (async (context) => {\n  // ...\n}) satisfies GetStaticProps\n \nexport const getStaticPaths = (async () => {\n  // ...\n}) satisfies GetStaticPaths\n \nexport const getServerSideProps = (async (context) => {\n  // ...\n}) satisfies GetServerSideProps\n\nGood to know: satisfies was added to TypeScript in 4.9\n. We recommend upgrading to the latest version of TypeScript.\n\nAPI Routes\n\nThe following is an example of how to use the built-in types for API routes:\n\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ name: 'John Doe' })\n}\n\nYou can also type the response data:\n\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \ntype Data = {\n  name: string\n}\n \nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  res.status(200).json({ name: 'John Doe' })\n}\nCustom App\n\nIf you have a custom App, you can use the built-in type AppProps and change file name to ./pages/_app.tsx like so:\n\nimport type { AppProps } from 'next/app'\n \nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\nPath aliases and baseUrl\n\nNext.js automatically supports the tsconfig.json \"paths\" and \"baseUrl\" options.\n\nYou can learn more about this feature on the Module Path aliases documentation.\n\nIncremental type checking\n\nSince v10.2.1 Next.js supports incremental type checking\n when enabled in your tsconfig.json, this can help speed up type checking in larger applications.\n\nIgnoring TypeScript Errors\n\nNext.js fails your production build (next build) when TypeScript errors are present in your project.\n\nIf you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.\n\nIf disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.\n\nOpen next.config.ts and enable the ignoreBuildErrors option in the typescript config:\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n \nexport default nextConfig\nCustom Type Declarations\n\nWhen you need to declare custom types, you might be tempted to modify next-env.d.ts. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call it new-types.d.ts, and reference it in your tsconfig.json:\n\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n    //...truncated...\n  },\n  \"include\": [\n    \"new-types.d.ts\",\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\nVersion Changes\nVersion\tChanges\nv15.0.0\tnext.config.ts support added for TypeScript projects.\nv13.2.0\tStatically typed links are available in beta.\nv12.0.0\tSWC is now used by default to compile TypeScript and TSX for faster builds.\nv10.2.1\tIncremental type checking\n support added when enabled in your tsconfig.json."
  },
  {
    "title": "Building Your Application: Configuring | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring",
    "html": "Configuring\n\nNext.js allows you to customize your project to meet specific requirements. This includes integrations with TypeScript, ESlint, and more, as well as internal configuration options such as Absolute Imports and Environment Variables."
  },
  {
    "title": "Optimizing: Third Party Libraries | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/third-party-libraries",
    "html": "Third Party Libraries\n\n@next/third-parties is a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application.\n\nAll third-party integrations provided by @next/third-parties have been optimized for performance and ease of use.\n\nGetting Started\n\nTo get started, install the @next/third-parties library:\n\nTerminal\nnpm install @next/third-parties@latest next@latest\n\n@next/third-parties is currently an experimental library under active development. We recommend installing it with the latest or canary flags while we work on adding more third-party integrations.\n\nGoogle Third-Parties\n\nAll supported third-party libraries from Google can be imported from @next/third-parties/google.\n\nGoogle Tag Manager\n\nThe GoogleTagManager component can be used to instantiate a Google Tag Manager\n container to your page. By default, it fetches the original inline script after hydration occurs on the page.\n\nTo load Google Tag Manager for all routes, include the component directly in your custom _app and pass in your GTM container ID:\n\npages/_app.js\nimport { GoogleTagManager } from '@next/third-parties/google'\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n    </>\n  )\n}\n\nTo load Google Tag Manager for a single route, include the component in your page file:\n\npages/index.js\nimport { GoogleTagManager } from '@next/third-parties/google'\n \nexport default function Page() {\n  return <GoogleTagManager gtmId=\"GTM-XYZ\" />\n}\nSending Events\n\nThe sendGTMEvent function can be used to track user interactions on your page by sending events using the dataLayer object. For this function to work, the <GoogleTagManager /> component must be included in either a parent layout, page, or component, or directly in the same file.\n\npages/index.js\nimport { sendGTMEvent } from '@next/third-parties/google'\n \nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGTMEvent('event', 'buttonClicked', { value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n\nRefer to the Tag Manager developer documentation\n to learn about the different variables and events that can be passed into the function.\n\nOptions\n\nOptions to pass to the Google Tag Manager. For a full list of options, read the Google Tag Manager docs\n.\n\nName\tType\tDescription\ngtmId\tRequired\tYour GTM container ID. Usually starts with GTM-.\ndataLayer\tOptional\tData layer object to instantiate the container with.\ndataLayerName\tOptional\tName of the data layer. Defaults to dataLayer.\nauth\tOptional\tValue of authentication parameter (gtm_auth) for environment snippets.\npreview\tOptional\tValue of preview parameter (gtm_preview) for environment snippets.\nGoogle Analytics\n\nThe GoogleAnalytics component can be used to include Google Analytics 4\n to your page via the Google tag (gtag.js). By default, it fetches the original scripts after hydration occurs on the page.\n\nRecommendation: If Google Tag Manager is already included in your application, you can configure Google Analytics directly using it, rather than including Google Analytics as a separate component. Refer to the documentation\n to learn more about the differences between Tag Manager and gtag.js.\n\nTo load Google Analytics for all routes, include the component directly in your custom _app and pass in your measurement ID:\n\npages/_app.js\nimport { GoogleAnalytics } from '@next/third-parties/google'\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </>\n  )\n}\n\nTo load Google Analytics for a single route, include the component in your page file:\n\npages/index.js\nimport { GoogleAnalytics } from '@next/third-parties/google'\n \nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\nSending Events\n\nThe sendGAEvent function can be used to measure user interactions on your page by sending events using the dataLayer object. For this function to work, the <GoogleAnalytics /> component must be included in either a parent layout, page, or component, or directly in the same file.\n\npages/index.js\nimport { sendGAEvent } from '@next/third-parties/google'\n \nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n\nRefer to the Google Analytics developer documentation\n to learn more about event parameters.\n\nTracking Pageviews\n\nGoogle Analytics automatically tracks pageviews when the browser history state changes. This means that client-side navigations between Next.js routes will send pageview data without any configuration.\n\nTo ensure that client-side navigations are being measured correctly, verify that the “Enhanced Measurement”\n property is enabled in your Admin panel and the “Page changes based on browser history events” checkbox is selected.\n\nNote: If you decide to manually send pageview events, make sure to disable the default pageview measurement to avoid having duplicate data. Refer to the Google Analytics developer documentation\n to learn more.\n\nOptions\n\nOptions to pass to the <GoogleAnalytics> component.\n\nName\tType\tDescription\ngaId\tRequired\tYour measurement ID\n. Usually starts with G-.\ndataLayerName\tOptional\tName of the data layer. Defaults to dataLayer.\nGoogle Maps Embed\n\nThe GoogleMapsEmbed component can be used to add a Google Maps Embed\n to your page. By default, it uses the loading attribute to lazy-load the embed below the fold.\n\npages/index.js\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n \nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\nOptions\n\nOptions to pass to the Google Maps Embed. For a full list of options, read the Google Map Embed docs\n.\n\nName\tType\tDescription\napiKey\tRequired\tYour api key.\nmode\tRequired\tMap mode\n\nheight\tOptional\tHeight of the embed. Defaults to auto.\nwidth\tOptional\tWidth of the embed. Defaults to auto.\nstyle\tOptional\tPass styles to the iframe.\nallowfullscreen\tOptional\tProperty to allow certain map parts to go full screen.\nloading\tOptional\tDefaults to lazy. Consider changing if you know your embed will be above the fold.\nq\tOptional\tDefines map marker location. This may be required depending on the map mode.\ncenter\tOptional\tDefines the center of the map view.\nzoom\tOptional\tSets initial zoom level of the map.\nmaptype\tOptional\tDefines type of map tiles to load.\nlanguage\tOptional\tDefines the language to use for UI elements and for the display of labels on map tiles.\nregion\tOptional\tDefines the appropriate borders and labels to display, based on geo-political sensitivities.\nYouTube Embed\n\nThe YouTubeEmbed component can be used to load and display a YouTube embed. This component loads faster by using lite-youtube-embed\n under the hood.\n\npages/index.js\nimport { YouTubeEmbed } from '@next/third-parties/google'\n \nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />\n}\nOptions\nName\tType\tDescription\nvideoid\tRequired\tYouTube video id.\nwidth\tOptional\tWidth of the video container. Defaults to auto\nheight\tOptional\tHeight of the video container. Defaults to auto\nplaylabel\tOptional\tA visually hidden label for the play button for accessibility.\nparams\tOptional\tThe video player params defined here\n.\nParams are passed as a query param string.\nEg: params=\"controls=0&start=10&end=30\"\nstyle\tOptional\tUsed to apply styles to the video container."
  },
  {
    "title": "Optimizing: Lazy Loading | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/lazy-loading",
    "html": "Lazy Loading\n\nLazy loading\n in Next.js helps improve the initial loading performance of an application by decreasing the amount of JavaScript needed to render a route.\n\nIt allows you to defer loading of Client Components and imported libraries, and only include them in the client bundle when they're needed. For example, you might want to defer loading a modal until a user clicks to open it.\n\nThere are two ways you can implement lazy loading in Next.js:\n\nUsing Dynamic Imports with next/dynamic\nUsing React.lazy()\n with Suspense\n\nBy default, Server Components are automatically code split\n, and you can use streaming to progressively send pieces of UI from the server to the client. Lazy loading applies to Client Components.\n\nnext/dynamic\n\nnext/dynamic is a composite of React.lazy()\n and Suspense\n. It behaves the same way in the app and pages directories to allow for incremental migration.\n\nExamples\n\nBy using next/dynamic, the header component will not be included in the page's initial JavaScript bundle. The page will render the Suspense fallback first, followed by the Header component when the Suspense boundary is resolved.\n\nimport dynamic from 'next/dynamic'\n \nconst DynamicHeader = dynamic(() => import('../components/header'), {\n  loading: () => <p>Loading...</p>,\n})\n \nexport default function Home() {\n  return <DynamicHeader />\n}\n\nGood to know: In import('path/to/component'), the path must be explicitly written. It can't be a template string nor a variable. Furthermore the import() has to be inside the dynamic() call for Next.js to be able to match webpack bundles / module ids to the specific dynamic() call and preload them before rendering. dynamic() can't be used inside of React rendering as it needs to be marked in the top level of the module for preloading to work, similar to React.lazy.\n\nWith named exports\n\nTo dynamically import a named export, you can return it from the Promise\n returned by import()\n:\n\ncomponents/hello.js\nexport function Hello() {\n  return <p>Hello!</p>\n}\n \n// pages/index.js\nimport dynamic from 'next/dynamic'\n \nconst DynamicComponent = dynamic(() =>\n  import('../components/hello').then((mod) => mod.Hello)\n)\nWith no SSR\n\nTo dynamically load a component on the client side, you can use the ssr option to disable server-rendering. This is useful if an external dependency or component relies on browser APIs like window.\n\nimport dynamic from 'next/dynamic'\n \nconst DynamicHeader = dynamic(() => import('../components/header'), {\n  ssr: false,\n})\nWith external libraries\n\nThis example uses the external library fuse.js for fuzzy search. The module is only loaded in the browser after the user types in the search input.\n\nimport { useState } from 'react'\n \nconst names = ['Tim', 'Joe', 'Bel', 'Lee']\n \nexport default function Page() {\n  const [results, setResults] = useState()\n \n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={async (e) => {\n          const { value } = e.currentTarget\n          // Dynamically load fuse.js\n          const Fuse = (await import('fuse.js')).default\n          const fuse = new Fuse(names)\n \n          setResults(fuse.search(value))\n        }}\n      />\n      <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n    </div>\n  )\n}"
  },
  {
    "title": "Optimizing: OpenTelemetry | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/open-telemetry",
    "html": "OpenTelemetry\n\nGood to know: This feature is experimental, you need to explicitly opt-in by providing experimental.instrumentationHook = true; in your next.config.js.\n\nObservability is crucial for understanding and optimizing the behavior and performance of your Next.js app.\n\nAs applications become more complex, it becomes increasingly difficult to identify and diagnose issues that may arise. By leveraging observability tools, such as logging and metrics, developers can gain insights into their application's behavior and identify areas for optimization. With observability, developers can proactively address issues before they become major problems and provide a better user experience. Therefore, it is highly recommended to use observability in your Next.js applications to improve performance, optimize resources, and enhance user experience.\n\nWe recommend using OpenTelemetry for instrumenting your apps. It's a platform-agnostic way to instrument apps that allows you to change your observability provider without changing your code. Read Official OpenTelemetry docs\n for more information about OpenTelemetry and how it works.\n\nThis documentation uses terms like Span, Trace or Exporter throughout this doc, all of which can be found in the OpenTelemetry Observability Primer\n.\n\nNext.js supports OpenTelemetry instrumentation out of the box, which means that we already instrumented Next.js itself. When you enable OpenTelemetry we will automatically wrap all your code like getStaticProps in spans with helpful attributes.\n\nGetting Started\n\nOpenTelemetry is extensible but setting it up properly can be quite verbose. That's why we prepared a package @vercel/otel that helps you get started quickly.\n\nUsing @vercel/otel\n\nTo get started, install the following packages:\n\nTerminal\nnpm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation\n\nNext, create a custom instrumentation.ts (or .js) file in the root directory of the project (or inside src folder if using one):\n\nyour-project/instrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { registerOTel } from '@vercel/otel'\n \nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n\nSee the @vercel/otel documentation\n for additional configuration options.\n\nGood to know:\n\nThe instrumentation file should be in the root of your project and not inside the app or pages directory. If you're using the src folder, then place the file inside src alongside pages and app.\nIf you use the pageExtensions config option to add a suffix, you will also need to update the instrumentation filename to match.\nWe have created a basic with-opentelemetry\n example that you can use.\nManual OpenTelemetry configuration\n\nThe @vercel/otel package provides many configuration options and should serve most of common use cases. But if it doesn't suit your needs, you can configure OpenTelemetry manually.\n\nFirstly you need to install OpenTelemetry packages:\n\nTerminal\nnpm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http\n\nNow you can initialize NodeSDK in your instrumentation.ts. Unlike @vercel/otel, NodeSDK is not compatible with edge runtime, so you need to make sure that you are importing them only when process.env.NEXT_RUNTIME === 'nodejs'. We recommend creating a new file instrumentation.node.ts which you conditionally import only when using node:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.ts')\n  }\n}\ninstrumentation.node.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\n \nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n\nDoing this is equivalent to using @vercel/otel, but it's possible to modify and extend some features that are not exposed by the @vercel/otel. If edge runtime support is necessary, you will have to use @vercel/otel.\n\nTesting your instrumentation\n\nYou need an OpenTelemetry collector with a compatible backend to test OpenTelemetry traces locally. We recommend using our OpenTelemetry dev environment\n.\n\nIf everything works well you should be able to see the root server span labeled as GET /requested/pathname. All other spans from that particular trace will be nested under it.\n\nNext.js traces more spans than are emitted by default. To see more spans, you must set NEXT_OTEL_VERBOSE=1.\n\nDeployment\nUsing OpenTelemetry Collector\n\nWhen you are deploying with OpenTelemetry Collector, you can use @vercel/otel. It will work both on Vercel and when self-hosted.\n\nDeploying on Vercel\n\nWe made sure that OpenTelemetry works out of the box on Vercel.\n\nFollow Vercel documentation\n to connect your project to an observability provider.\n\nSelf-hosting\n\nDeploying to other platforms is also straightforward. You will need to spin up your own OpenTelemetry Collector to receive and process the telemetry data from your Next.js app.\n\nTo do this, follow the OpenTelemetry Collector Getting Started guide\n, which will walk you through setting up the collector and configuring it to receive data from your Next.js app.\n\nOnce you have your collector up and running, you can deploy your Next.js app to your chosen platform following their respective deployment guides.\n\nCustom Exporters\n\nOpenTelemetry Collector is not necessary. You can use a custom OpenTelemetry exporter with @vercel/otel or manual OpenTelemetry configuration.\n\nCustom Spans\n\nYou can add a custom span with OpenTelemetry APIs\n.\n\nTerminal\nnpm install @opentelemetry/api\n\nThe following example demonstrates a function that fetches GitHub stars and adds a custom fetchGithubStars span to track the fetch request's result:\n\nimport { trace } from '@opentelemetry/api'\n \nexport async function fetchGithubStars() {\n  return await trace\n    .getTracer('nextjs-example')\n    .startActiveSpan('fetchGithubStars', async (span) => {\n      try {\n        return await getValue()\n      } finally {\n        span.end()\n      }\n    })\n}\n\nThe register function will execute before your code runs in a new environment. You can start creating new spans, and they should be correctly added to the exported trace.\n\nDefault Spans in Next.js\n\nNext.js automatically instruments several spans for you to provide useful insights into your application's performance.\n\nAttributes on spans follow OpenTelemetry semantic conventions\n. We also add some custom attributes under the next namespace:\n\nnext.span_name - duplicates span name\nnext.span_type - each span type has a unique identifier\nnext.route - The route pattern of the request (e.g., /[param]/user).\nnext.rsc (true/false) - Whether the request is an RSC request, such as prefetch.\nnext.page\nThis is an internal value used by an app router.\nYou can think about it as a route to a special file (like page.ts, layout.ts, loading.ts and others)\nIt can be used as a unique identifier only when paired with next.route because /layout can be used to identify both /(groupA)/layout.ts and /(groupB)/layout.ts\n[http.method] [next.route]\nnext.span_type: BaseServer.handleRequest\n\nThis span represents the root span for each incoming request to your Next.js application. It tracks the HTTP method, route, target, and status code of the request.\n\nAttributes:\n\nCommon HTTP attributes\nhttp.method\nhttp.status_code\nServer HTTP attributes\nhttp.route\nhttp.target\nnext.span_name\nnext.span_type\nnext.route\nrender route (app) [next.route]\nnext.span_type: AppRender.getBodyResult.\n\nThis span represents the process of rendering a route in the app router.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\nfetch [http.method] [http.url]\nnext.span_type: AppRender.fetch\n\nThis span represents the fetch request executed in your code.\n\nAttributes:\n\nCommon HTTP attributes\nhttp.method\nClient HTTP attributes\nhttp.url\nnet.peer.name\nnet.peer.port (only if specified)\nnext.span_name\nnext.span_type\n\nThis span can be turned off by setting NEXT_OTEL_FETCH_DISABLED=1 in your environment. This is useful when you want to use a custom fetch instrumentation library.\n\nexecuting api route (app) [next.route]\nnext.span_type: AppRouteRouteHandlers.runHandler.\n\nThis span represents the execution of an API route handler in the app router.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\ngetServerSideProps [next.route]\nnext.span_type: Render.getServerSideProps.\n\nThis span represents the execution of getServerSideProps for a specific route.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\ngetStaticProps [next.route]\nnext.span_type: Render.getStaticProps.\n\nThis span represents the execution of getStaticProps for a specific route.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\nrender route (pages) [next.route]\nnext.span_type: Render.renderDocument.\n\nThis span represents the process of rendering the document for a specific route.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\ngenerateMetadata [next.page]\nnext.span_type: ResolveMetadata.generateMetadata.\n\nThis span represents the process of generating metadata for a specific page (a single route can have multiple of these spans).\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.page\nresolve page components\nnext.span_type: NextNodeServer.findPageComponents.\n\nThis span represents the process of resolving page components for a specific page.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\nresolve segment modules\nnext.span_type: NextNodeServer.getLayoutOrPageModule.\n\nThis span represents loading of code modules for a layout or a page.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.segment\nstart response\nnext.span_type: NextNodeServer.startResponse.\n\nThis zero-length span represents the time when the first byte has been sent in the response."
  },
  {
    "title": "Optimizing: Instrumentation | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/instrumentation",
    "html": "Instrumentation\n\nInstrumentation is the process of using code to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production.\n\nConvention\n\nTo set up instrumentation, create instrumentation.ts|js file in the root directory of your project (or inside the src folder if using one).\n\nThen, export a register function in the file. This function will be called once when a new Next.js server instance is initiated.\n\nFor example, to use Next.js with OpenTelemetry\n and @vercel/otel\n:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { registerOTel } from '@vercel/otel'\n \nexport function register() {\n  registerOTel('next-app')\n}\n\nSee the Next.js with OpenTelemetry example\n for a complete implementation.\n\nGood to know:\n\nThis feature is experimental. To use it, you must explicitly opt in by defining experimental.instrumentationHook = true; in your next.config.js.\nThe instrumentation file should be in the root of your project and not inside the app or pages directory. If you're using the src folder, then place the file inside src alongside pages and app.\nIf you use the pageExtensions config option to add a suffix, you will also need to update the instrumentation filename to match.\nExamples\nImporting files with side effects\n\nSometimes, it may be useful to import a file in your code because of the side effects it will cause. For example, you might import a file that defines a set of global variables, but never explicitly use the imported file in your code. You would still have access to the global variables the package has declared.\n\nWe recommend importing files using JavaScript import syntax within your register function. The following example demonstrates a basic usage of import in a register function:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function register() {\n  await import('package-with-side-effect')\n}\n\nGood to know:\n\nWe recommend importing the file from within the register function, rather than at the top of the file. By doing this, you can colocate all of your side effects in one place in your code, and avoid any unintended consequences from importing globally at the top of the file.\n\nImporting runtime-specific code\n\nNext.js calls register in all environments, so it's important to conditionally import any code that doesn't support specific runtimes (e.g. Edge or Node.js). You can use the NEXT_RUNTIME environment variable to get the current environment:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n \n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}"
  },
  {
    "title": "Optimizing: Static Assets | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/static-assets",
    "html": "Static Assets\n\nNext.js can serve static files, like images, under a folder called public in the root directory. Files inside public can then be referenced by your code starting from the base URL (/).\n\nFor example, the file public/avatars/me.png can be viewed by visiting the /avatars/me.png path. The code to display that image might look like:\n\navatar.js\nimport Image from 'next/image'\n \nexport function Avatar({ id, alt }) {\n  return <Image src={`/avatars/${id}.png`} alt={alt} width=\"64\" height=\"64\" />\n}\n \nexport function AvatarOfMe() {\n  return <Avatar id=\"me\" alt=\"A portrait of me\" />\n}\nCaching\n\nNext.js cannot safely cache assets in the public folder because they may change. The default caching headers applied are:\n\nCache-Control: public, max-age=0\nRobots, Favicons, and others\n\nThe folder is also useful for robots.txt, favicon.ico, Google Site Verification, and any other static files (including .html). But make sure to not have a static file with the same name as a file in the pages/ directory, as this will result in an error. Read more.\n\nGood to know:\n\nThe directory must be named public. The name cannot be changed and it's the only directory used to serve static assets.\nOnly assets that are in the public directory at build time will be served by Next.js. Files added at request time won't be available. We recommend using a third-party service like Vercel Blob\n for persistent file storage."
  },
  {
    "title": "Optimizing: Analytics | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics",
    "html": "Analytics\n\nNext.js has built-in support for measuring and reporting performance metrics. You can either use the useReportWebVitals hook to manage reporting yourself, or alternatively, Vercel provides a managed service\n to automatically collect and visualize metrics for you.\n\nBuild Your Own\npages/_app.js\nimport { useReportWebVitals } from 'next/web-vitals'\n \nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n \n  return <Component {...pageProps} />\n}\n\nView the API Reference for more information.\n\nWeb Vitals\n\nWeb Vitals\n are a set of useful metrics that aim to capture the user experience of a web page. The following web vitals are all included:\n\nTime to First Byte\n (TTFB)\nFirst Contentful Paint\n (FCP)\nLargest Contentful Paint\n (LCP)\nFirst Input Delay\n (FID)\nCumulative Layout Shift\n (CLS)\nInteraction to Next Paint\n (INP)\n\nYou can handle all the results of these metrics using the name property.\n\npages/_app.js\nimport { useReportWebVitals } from 'next/web-vitals'\n \nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n \n  return <Component {...pageProps} />\n}\nCustom Metrics\n\nIn addition to the core metrics listed above, there are some additional custom metrics that measure the time it takes for the page to hydrate and render:\n\nNext.js-hydration: Length of time it takes for the page to start and finish hydrating (in ms)\nNext.js-route-change-to-render: Length of time it takes for a page to start rendering after a route change (in ms)\nNext.js-render: Length of time it takes for a page to finish render after a route change (in ms)\n\nYou can handle all the results of these metrics separately:\n\nexport function reportWebVitals(metric) {\n  switch (metric.name) {\n    case 'Next.js-hydration':\n      // handle hydration results\n      break\n    case 'Next.js-route-change-to-render':\n      // handle route-change to render results\n      break\n    case 'Next.js-render':\n      // handle render results\n      break\n    default:\n      break\n  }\n}\n\nThese metrics work in all browsers that support the User Timing API\n.\n\nSending results to external systems\n\nYou can send results to any endpoint to measure and track real user performance on your site. For example:\n\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n \n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n\nGood to know: If you use Google Analytics\n, using the id value can allow you to construct metric distributions manually (to calculate percentiles, etc.)\n\nuseReportWebVitals((metric) => {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n  window.gtag('event', metric.name, {\n    value: Math.round(\n      metric.name === 'CLS' ? metric.value * 1000 : metric.value\n    ), // values must be integers\n    event_label: metric.id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  })\n})\n\nRead more about sending results to Google Analytics\n."
  },
  {
    "title": "Optimizing: Bundling | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/package-bundling",
    "html": "Optimizing Bundling\n\nBundling external packages can significantly improve the performance of your application. By default, packages imported into your application are not bundled. This can impact performance or might not work if external packages are not pre-bundled, for example, if imported from a monorepo or node_modules. This page will guide you through how to analyze and configure package bundling.\n\nAnalyzing JavaScript bundles\n\n@next/bundle-analyzer\n is a plugin for Next.js that helps you manage the size of your application bundles. It generates a visual report of the size of each package and their dependencies. You can use the information to remove large dependencies, split, or lazy-load your code.\n\nInstallation\n\nInstall the plugin by running the following command:\n\nnpm i @next/bundle-analyzer\n# or\nyarn add @next/bundle-analyzer\n# or\npnpm add @next/bundle-analyzer\n\nThen, add the bundle analyzer's settings to your next.config.js.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {}\n \nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n \nmodule.exports = withBundleAnalyzer(nextConfig)\nGenerating a report\n\nRun the following command to analyze your bundles:\n\nANALYZE=true npm run build\n# or\nANALYZE=true yarn build\n# or\nANALYZE=true pnpm build\n\nThe report will open three new tabs in your browser, which you can inspect. Periodically evaluating your application's bundles can help you maintain application performance over time.\n\nOptimizing package imports\n\nSome packages, such as icon libraries, can export hundreds of modules, which can cause performance issues in development and production.\n\nYou can optimize how these packages are imported by adding the optimizePackageImports option to your next.config.js. This option will only load the modules you actually use, while still giving you the convenience of writing import statements with many named exports.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    optimizePackageImports: ['icon-library'],\n  },\n}\n \nmodule.exports = nextConfig\n\nNext.js also optimizes some libraries automatically, thus they do not need to be included in the optimizePackageImports list. See the full list\n.\n\nBundling specific packages\n\nTo bundle specific packages, you can use the transpilePackages option in your next.config.js. This option is useful for bundling external packages that are not pre-bundled, for example, in a monorepo or imported from node_modules.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['package-name'],\n}\n \nmodule.exports = nextConfig\nBundling all packages\n\nTo automatically bundle all packages (default behavior in the App Router), you can use the bundlePagesRouterDependencies option in your next.config.js.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  bundlePagesRouterDependencies: true,\n}\n \nmodule.exports = nextConfig\nOpting specific packages out of bundling\n\nIf you have the bundlePagesRouterDependencies option enabled, you can opt specific packages out of automatic bundling using the serverExternalPackages option in your next.config.js:\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Automatically bundle external packages in the Pages Router:\n  bundlePagesRouterDependencies: true,\n  // Opt specific packages out of bundling for both App and Pages Router:\n  serverExternalPackages: ['package-name'],\n}\n \nmodule.exports = nextConfig"
  },
  {
    "title": "Optimizing: Scripts | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/scripts",
    "html": "Script Optimization\nApplication Scripts\n\nTo load a third-party script for all routes, import next/script and include the script directly in your custom _app:\n\npages/_app.js\nimport Script from 'next/script'\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n\nThis script will load and execute when any route in your application is accessed. Next.js will ensure the script will only load once, even if a user navigates between multiple pages.\n\nRecommendation: We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance.\n\nStrategy\n\nAlthough the default behavior of next/script allows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using the strategy property:\n\nbeforeInteractive: Load the script before any Next.js code and before any page hydration occurs.\nafterInteractive: (default) Load the script early but after some hydration on the page occurs.\nlazyOnload: Load the script later during browser idle time.\nworker: (experimental) Load the script in a web worker.\n\nRefer to the next/script API reference documentation to learn more about each strategy and their use cases.\n\nOffloading Scripts To A Web Worker (experimental)\n\nWarning: The worker strategy is not yet stable and does not yet work with the app directory. Use with caution.\n\nScripts that use the worker strategy are offloaded and executed in a web worker with Partytown\n. This can improve the performance of your site by dedicating the main thread to the rest of your application code.\n\nThis strategy is still experimental and can only be used if the nextScriptWorkers flag is enabled in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n\nThen, run next (normally npm run dev or yarn dev) and Next.js will guide you through the installation of the required packages to finish the setup:\n\nTerminal\nnpm run dev\n\nYou'll see instructions like these: Please install Partytown by running npm install @builder.io/partytown\n\nOnce setup is complete, defining strategy=\"worker\" will automatically instantiate Partytown in your application and offload the script to a web worker.\n\npages/home.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n\nThere are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown's tradeoffs\n documentation for more information.\n\nUsing custom Partytown configuration\n\nAlthough the worker strategy does not require any additional configuration to work, Partytown supports the use of a config object to modify some of its settings, including enabling debug mode and forwarding events and triggers.\n\nIf you would like to add additional configuration options, you can include it within the <Head /> component used in a custom _document.js:\n\n_pages/document.jsx\nimport { Html, Head, Main, NextScript } from 'next/document'\n \nexport default function Document() {\n  return (\n    <Html>\n      <Head>\n        <script\n          data-partytown-config\n          dangerouslySetInnerHTML={{\n            __html: `\n              partytown = {\n                lib: \"/_next/static/~partytown/\",\n                debug: true\n              };\n            `,\n          }}\n        />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n\nIn order to modify Partytown's configuration, the following conditions must be met:\n\nThe data-partytown-config attribute must be used in order to overwrite the default configuration used by Next.js\nUnless you decide to save Partytown's library files in a separate directory, the lib: \"/_next/static/~partytown/\" property and value must be included in the configuration object in order to let Partytown know where Next.js stores the necessary static files.\n\nNote: If you are using an asset prefix and would like to modify Partytown's default configuration, you must include it as part of the lib path.\n\nTake a look at Partytown's configuration options\n to see the full list of other properties that can be added.\n\nInline Scripts\n\nInline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:\n\n<Script id=\"show-banner\">\n  {`document.getElementById('banner').classList.remove('hidden')`}\n</Script>\n\nOr by using the dangerouslySetInnerHTML property:\n\n<Script\n  id=\"show-banner\"\n  dangerouslySetInnerHTML={{\n    __html: `document.getElementById('banner').classList.remove('hidden')`,\n  }}\n/>\n\nWarning: An id property must be assigned for inline scripts in order for Next.js to track and optimize the script.\n\nExecuting Additional Code\n\nEvent handlers can be used with the Script component to execute additional code after a certain event occurs:\n\nonLoad: Execute code after the script has finished loading.\nonReady: Execute code after the script has finished loading and every time the component is mounted.\nonError: Execute code if the script fails to load.\n\nThese handlers will only work when next/script is imported and used inside of a Client Component where \"use client\" is defined as the first line of code:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n\nRefer to the next/script API reference to learn more about each event handler and view examples.\n\nAdditional Attributes\n\nThere are many DOM attributes that can be assigned to a <script> element that are not used by the Script component, like nonce\n or custom data attributes\n. Including any additional attributes will automatically forward it to the final, optimized <script> element that is included in the HTML.\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}"
  },
  {
    "title": "Optimizing: Fonts | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/fonts",
    "html": "Font Optimization\n\nnext/font will automatically optimize your fonts (including custom fonts) and remove external network requests for improved privacy and performance.\n\n🎥 Watch: Learn more about using next/font → YouTube (6 minutes)\n.\n\nnext/font includes built-in automatic self-hosting for any font file. This means you can optimally load web fonts with zero layout shift, thanks to the underlying CSS size-adjust property used.\n\nThis new font system also allows you to conveniently use all Google Fonts with performance and privacy in mind. CSS and font files are downloaded at build time and self-hosted with the rest of your static assets. No requests are sent to Google by the browser.\n\nGoogle Fonts\n\nAutomatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment. No requests are sent to Google by the browser.\n\nGet started by importing the font you would like to use from next/font/google as a function. We recommend using variable fonts\n for the best performance and flexibility.\n\nTo use the font in all your pages, add it to _app.js file under /pages as shown below:\n\npages/_app.js\nimport { Inter } from 'next/font/google'\n \n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({ subsets: ['latin'] })\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={inter.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n\nIf you can't use a variable font, you will need to specify a weight:\n\npages/_app.js\nimport { Roboto } from 'next/font/google'\n \nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n})\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={roboto.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n\nYou can specify multiple weights and/or styles by using an array:\n\napp/layout.js\nconst roboto = Roboto({\n  weight: ['400', '700'],\n  style: ['normal', 'italic'],\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nGood to know: Use an underscore (_) for font names with multiple words. E.g. Roboto Mono should be imported as Roboto_Mono.\n\nApply the font in <head>\n\nYou can also use the font without a wrapper and className by injecting it inside the <head> as follows:\n\npages/_app.js\nimport { Inter } from 'next/font/google'\n \nconst inter = Inter({ subsets: ['latin'] })\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <style jsx global>{`\n        html {\n          font-family: ${inter.style.fontFamily};\n        }\n      `}</style>\n      <Component {...pageProps} />\n    </>\n  )\n}\nSingle page usage\n\nTo use the font on a single page, add it to the specific page as shown below:\n\npages/index.js\nimport { Inter } from 'next/font/google'\n \nconst inter = Inter({ subsets: ['latin'] })\n \nexport default function Home() {\n  return (\n    <div className={inter.className}>\n      <p>Hello World</p>\n    </div>\n  )\n}\nSpecifying a subset\n\nGoogle Fonts are automatically subset\n. This reduces the size of the font file and improves performance. You'll need to define which of these subsets you want to preload. Failing to specify any subsets while preload is true will result in a warning.\n\nThis can be done by adding it to the function call:\n\npages/_app.js\nconst inter = Inter({ subsets: ['latin'] })\n\nView the Font API Reference for more information.\n\nUsing Multiple Fonts\n\nYou can import and use multiple fonts in your application. There are two approaches you can take.\n\nThe first approach is to create a utility function that exports a font, imports it, and applies its className where needed. This ensures the font is preloaded only when it's rendered:\n\napp/fonts.ts\nTypeScript\nJavaScript\nTypeScript\nimport { Inter, Roboto_Mono } from 'next/font/google'\n \nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n \nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nIn the example above, Inter will be applied globally, and Roboto Mono can be imported and applied as needed.\n\nAlternatively, you can create a CSS variable and use it with your preferred CSS solution:\n\napp/global.css\nhtml {\n  font-family: var(--font-inter);\n}\n \nh1 {\n  font-family: var(--font-roboto-mono);\n}\n\nIn the example above, Inter will be applied globally, and any <h1> tags will be styled with Roboto Mono.\n\nRecommendation: Use multiple fonts conservatively since each new font is an additional resource the client has to download.\n\nLocal Fonts\n\nImport next/font/local and specify the src of your local font file. We recommend using variable fonts\n for the best performance and flexibility.\n\npages/_app.js\nimport localFont from 'next/font/local'\n \n// Font files can be colocated inside of `pages`\nconst myFont = localFont({ src: './my-font.woff2' })\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={myFont.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n\nIf you want to use multiple files for a single font family, src can be an array:\n\nconst roboto = localFont({\n  src: [\n    {\n      path: './Roboto-Regular.woff2',\n      weight: '400',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-Italic.woff2',\n      weight: '400',\n      style: 'italic',\n    },\n    {\n      path: './Roboto-Bold.woff2',\n      weight: '700',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-BoldItalic.woff2',\n      weight: '700',\n      style: 'italic',\n    },\n  ],\n})\n\nView the Font API Reference for more information.\n\nWith Tailwind CSS\n\nnext/font can be used with Tailwind CSS\n through a CSS variable.\n\nIn the example below, we use the font Inter from next/font/google (you can use any font from Google or Local Fonts). Load your font with the variable option to define your CSS variable name and assign it to inter. Then, use inter.variable to add the CSS variable to your HTML document.\n\npages/_app.js\nimport { Inter } from 'next/font/google'\n \nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n})\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={`${inter.variable} font-sans`}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n\nFinally, add the CSS variable to your Tailwind CSS config:\n\ntailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n    './app/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-inter)'],\n        mono: ['var(--font-roboto-mono)'],\n      },\n    },\n  },\n  plugins: [],\n}\n\nYou can now use the font-sans and font-mono utility classes to apply the font to your elements.\n\nPreloading\n\nWhen a font function is called on a page of your site, it is not globally available and preloaded on all routes. Rather, the font is only preloaded on the related route/s based on the type of file where it is used:\n\nif it's a unique page, it is preloaded on the unique route for that page\nif it's in the custom App, it is preloaded on all the routes of the site under /pages\nReusing fonts\n\nEvery time you call the localFont or Google font function, that font is hosted as one instance in your application. Therefore, if you load the same font function in multiple files, multiple instances of the same font are hosted. In this situation, it is recommended to do the following:\n\nCall the font loader function in one shared file\nExport it as a constant\nImport the constant in each file where you would like to use this font"
  },
  {
    "title": "Styling: Sass | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/styling/sass",
    "html": "Sass\n\nNext.js has built-in support for integrating with Sass after the package is installed using both the .scss and .sass extensions. You can use component-level Sass via CSS Modules and the .module.scssor .module.sass extension.\n\nFirst, install sass\n:\n\nTerminal\nnpm install --save-dev sass\n\nGood to know:\n\nSass supports two different syntaxes\n, each with their own extension. The .scss extension requires you use the SCSS syntax\n, while the .sass extension requires you use the Indented Syntax (\"Sass\")\n.\n\nIf you're not sure which to choose, start with the .scss extension which is a superset of CSS, and doesn't require you learn the Indented Syntax (\"Sass\").\n\nCustomizing Sass Options\n\nIf you want to configure the Sass compiler, use sassOptions in next.config.js.\n\nnext.config.js\nconst path = require('path')\n \nmodule.exports = {\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n}\nSass Variables\n\nNext.js supports Sass variables exported from CSS Module files.\n\nFor example, using the exported primaryColor Sass variable:\n\napp/variables.module.scss\n$primary-color: #64ff00;\n \n:export {\n  primaryColor: $primary-color;\n}\npages/_app.js\nimport variables from '../styles/variables.module.scss'\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout color={variables.primaryColor}>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}"
  },
  {
    "title": "Optimizing: Images | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/images",
    "html": "Image Optimization\nExamples\n\nAccording to Web Almanac\n, images account for a huge portion of the typical website’s page weight\n and can have a sizable impact on your website's LCP performance\n.\n\nThe Next.js Image component extends the HTML <img> element with features for automatic image optimization:\n\nSize Optimization: Automatically serve correctly sized images for each device, using modern image formats like WebP and AVIF.\nVisual Stability: Prevent layout shift automatically when images are loading.\nFaster Page Loads: Images are only loaded when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.\nAsset Flexibility: On-demand image resizing, even for images stored on remote servers\n\n🎥 Watch: Learn more about how to use next/image → YouTube (9 minutes)\n.\n\nUsage\nimport Image from 'next/image'\n\nYou can then define the src for your image (either local or remote).\n\nLocal Images\n\nTo use a local image, import your .jpg, .png, or .webp image files.\n\nNext.js will automatically determine the intrisic width and height of your image based on the imported file. These values are used to determine the image ratio and prevent Cumulative Layout Shift\n while your image is loading.\n\npages/index.js\nimport Image from 'next/image'\nimport profilePic from '../public/me.png'\n \nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n\nWarning: Dynamic await import() or require() are not supported. The import must be static so it can be analyzed at build time.\n\nRemote Images\n\nTo use a remote image, the src property should be a URL string.\n\nSince Next.js does not have access to remote files during the build process, you'll need to provide the width, height and optional blurDataURL props manually.\n\nThe width and height attributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. The width and height do not determine the rendered size of the image file. Learn more about Image Sizing.\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <Image\n      src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n\nTo safely allow optimizing images, define a list of supported URL patterns in next.config.js. Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 's3.amazonaws.com',\n        port: '',\n        pathname: '/my-bucket/**',\n      },\n    ],\n  },\n}\n\nLearn more about remotePatterns configuration. If you want to use relative URLs for the image src, use a loader.\n\nDomains\n\nSometimes you may want to optimize a remote image, but still use the built-in Next.js Image Optimization API. To do this, leave the loader at its default setting and enter an absolute URL for the Image src prop.\n\nTo protect your application from malicious users, you must define a list of remote hostnames you intend to use with the next/image component.\n\nLearn more about remotePatterns configuration.\n\nLoaders\n\nNote that in the example earlier, a partial URL (\"/me.png\") is provided for a local image. This is possible because of the loader architecture.\n\nA loader is a function that generates the URLs for your image. It modifies the provided src, and generates multiple URLs to request the image at different sizes. These multiple URLs are used in the automatic srcset\n generation, so that visitors to your site will be served an image that is the right size for their viewport.\n\nThe default loader for Next.js applications uses the built-in Image Optimization API, which optimizes images from anywhere on the web, and then serves them directly from the Next.js web server. If you would like to serve your images directly from a CDN or image server, you can write your own loader function with a few lines of JavaScript.\n\nYou can define a loader per-image with the loader prop, or at the application level with the loaderFile configuration.\n\nPriority\n\nYou should add the priority property to the image that will be the Largest Contentful Paint (LCP) element\n for each page. Doing so allows Next.js to specially prioritize the image for loading (e.g. through preload tags or priority hints), leading to a meaningful boost in LCP.\n\nThe LCP element is typically the largest image or text block visible within the viewport of the page. When you run next dev, you'll see a console warning if the LCP element is an <Image> without the priority property.\n\nOnce you've identified the LCP image, you can add the property like this:\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n        priority\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n\nSee more about priority in the next/image component documentation.\n\nImage Sizing\n\nOne of the ways that images most commonly hurt performance is through layout shift, where the image pushes other elements around on the page as it loads in. This performance problem is so annoying to users that it has its own Core Web Vital, called Cumulative Layout Shift\n. The way to avoid image-based layout shifts is to always size your images\n. This allows the browser to reserve precisely enough space for the image before it loads.\n\nBecause next/image is designed to guarantee good performance results, it cannot be used in a way that will contribute to layout shift, and must be sized in one of three ways:\n\nAutomatically, using a static import\nManually, by including a width and height property used to determine the image's aspect ratio.\nImplicitly, by using fill which causes the image to expand to fill its parent element.\n\nWhat if I don't know the size of my images?\n\nIf you are accessing images from a source without knowledge of the images' sizes, there are several things you can do:\n\nUse fill\n\nThe fill prop allows your image to be sized by its parent element. Consider using CSS to give the image's parent element space on the page along sizes prop to match any media query break points. You can also use object-fit\n with fill, contain, or cover, and object-position\n to define how the image should occupy that space.\n\nNormalize your images\n\nIf you're serving images from a source that you control, consider modifying your image pipeline to normalize the images to a specific size.\n\nModify your API calls\n\nIf your application is retrieving image URLs using an API call (such as to a CMS), you may be able to modify the API call to return the image dimensions along with the URL.\n\nIf none of the suggested methods works for sizing your images, the next/image component is designed to work well on a page alongside standard <img> elements.\n\nStyling\n\nStyling the Image component is similar to styling a normal <img> element, but there are a few guidelines to keep in mind:\n\nUse className or style, not styled-jsx.\nIn most cases, we recommend using the className prop. This can be an imported CSS Module, a global stylesheet, etc.\nYou can also use the style prop to assign inline styles.\nYou cannot use styled-jsx because it's scoped to the current component (unless you mark the style as global).\nWhen using fill, the parent element must have position: relative\nThis is necessary for the proper rendering of the image element in that layout mode.\nWhen using fill, the parent element must have display: block\nThis is the default for <div> elements but should be specified otherwise.\nExamples\nResponsive\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n \nexport default function Responsive() {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <Image\n        alt=\"Mountains\"\n        // Importing an image will\n        // automatically set the width and height\n        src={mountains}\n        sizes=\"100vw\"\n        // Make the image display full width\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      />\n    </div>\n  )\n}\nFill Container\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n \nexport default function Fill() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridGap: '8px',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',\n      }}\n    >\n      <div style={{ position: 'relative', height: '400px' }}>\n        <Image\n          alt=\"Mountains\"\n          src={mountains}\n          fill\n          sizes=\"(min-width: 808px) 50vw, 100vw\"\n          style={{\n            objectFit: 'cover', // cover, contain, none\n          }}\n        />\n      </div>\n      {/* And more images in the grid... */}\n    </div>\n  )\n}\nBackground Image\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n \nexport default function Background() {\n  return (\n    <Image\n      alt=\"Mountains\"\n      src={mountains}\n      placeholder=\"blur\"\n      quality={100}\n      fill\n      sizes=\"100vw\"\n      style={{\n        objectFit: 'cover',\n      }}\n    />\n  )\n}\n\nFor examples of the Image component used with the various styles, see the Image Component Demo\n.\n\nOther Properties\n\nView all properties available to the next/image component.\n\nConfiguration\n\nThe next/image component and Next.js Image Optimization API can be configured in the next.config.js file. These configurations allow you to enable remote images, define custom image breakpoints, change caching behavior and more.\n\nRead the full image configuration documentation for more information."
  },
  {
    "title": "Building Your Application: Optimizing | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing",
    "html": "Optimizations\n\nNext.js comes with a variety of built-in optimizations designed to improve your application's speed and Core Web Vitals\n. This guide will cover the optimizations you can leverage to enhance your user experience.\n\nBuilt-in Components\n\nBuilt-in components abstract away the complexity of implementing common UI optimizations. These components are:\n\nImages: Built on the native <img> element. The Image Component optimizes images for performance by lazy loading and automatically resizing images based on device size.\nLink: Built on the native <a> tags. The Link Component prefetches pages in the background, for faster and smoother page transitions.\nScripts: Built on the native <script> tags. The Script Component gives you control over loading and execution of third-party scripts.\nMetadata\n\nMetadata helps search engines understand your content better (which can result in better SEO), and allows you to customize how your content is presented on social media, helping you create a more engaging and consistent user experience across various platforms.\n\nThe Head Component in Next.js allows you to modify the <head> of a page. Learn more in the Head Component documentation.\n\nStatic Assets\n\nNext.js /public folder can be used to serve static assets like images, fonts, and other files. Files inside /public can also be cached by CDN providers so that they are delivered efficiently.\n\nAnalytics and Monitoring\n\nFor large applications, Next.js integrates with popular analytics and monitoring tools to help you understand how your application is performing. Learn more in the Analytics, OpenTelemetry, and Instrumentation guides."
  },
  {
    "title": "Styling: Tailwind CSS | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/styling/tailwind-css",
    "html": "Tailwind CSS\nExamples\nWith Tailwind CSS\n\nTailwind CSS\n is a utility-first CSS framework that works exceptionally well with Next.js.\n\nInstalling Tailwind\n\nInstall the Tailwind CSS packages and run the init command to generate both the tailwind.config.js and postcss.config.js files:\n\nTerminal\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\nConfiguring Tailwind\n\nInside your Tailwind configuration file, add paths to the files that will use Tailwind class names:\n\ntailwind.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { Config } from 'tailwindcss'\n \nconst config: Config = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // Note the addition of the `app` directory.\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n \n    // Or if using `src` directory:\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\nexport default config\n\nYou do not need to modify postcss.config.js.\n\nImporting Styles\n\nAdd the Tailwind CSS directives\n that Tailwind will use to inject its generated styles to a Global Stylesheet in your application, for example:\n\nstyles/globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nInside the custom app file (pages/_app.js), import the globals.css stylesheet to apply the styles to every route in your application.\n\npages/_app.tsx\nTypeScript\nJavaScript\nTypeScript\n// These styles apply to every route in the application\nimport '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n \nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\nUsing Classes\n\nAfter installing Tailwind CSS and adding the global styles, you can use Tailwind's utility classes in your application.\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\nUsage with Turbopack\n\nAs of Next.js 13.1, Tailwind CSS and PostCSS are supported with Turbopack\n."
  },
  {
    "title": "Styling: CSS-in-JS | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/styling/css-in-js",
    "html": "CSS-in-JS\nExamples\n\nIt's possible to use any existing CSS-in-JS solution. The simplest one is inline styles:\n\nfunction HiThere() {\n  return <p style={{ color: 'red' }}>hi there</p>\n}\n \nexport default HiThere\n\nWe bundle styled-jsx\n to provide support for isolated scoped CSS. The aim is to support \"shadow CSS\" similar to Web Components, which unfortunately do not support server-rendering and are JS-only\n.\n\nSee the above examples for other popular CSS-in-JS solutions (like Styled Components).\n\nA component using styled-jsx looks like this:\n\nfunction HelloWorld() {\n  return (\n    <div>\n      Hello world\n      <p>scoped!</p>\n      <style jsx>{`\n        p {\n          color: blue;\n        }\n        div {\n          background: red;\n        }\n        @media (max-width: 600px) {\n          div {\n            background: blue;\n          }\n        }\n      `}</style>\n      <style global jsx>{`\n        body {\n          background: black;\n        }\n      `}</style>\n    </div>\n  )\n}\n \nexport default HelloWorld\n\nPlease see the styled-jsx documentation\n for more examples.\n\nDisabling JavaScript\n\nYes, if you disable JavaScript the CSS will still be loaded in the production build (next start). During development, we require JavaScript to be enabled to provide the best developer experience with Fast Refresh\n."
  },
  {
    "title": "Styling: CSS Modules | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/styling/css-modules",
    "html": "CSS Modules\nExamples\nBasic CSS Example\n\nNext.js supports multiple ways of handling CSS, including:\n\nCSS Modules\nGlobal Styles\nExternal Stylesheets\nCSS Modules\n\nNext.js has built-in support for CSS Modules using the .module.css extension.\n\nCSS Modules locally scope CSS by automatically creating a unique class name. This allows you to use the same class name in different files without worrying about collisions. This behavior makes CSS Modules the ideal way to include component-level CSS.\n\nExample\n\nFor example, consider a reusable Button component in the components/ folder:\n\nFirst, create components/Button.module.css with the following content:\n\nButton.module.css\n/*\nYou do not need to worry about .error {} colliding with any other `.css` or\n`.module.css` files!\n*/\n.error {\n  color: white;\n  background-color: red;\n}\n\nThen, create components/Button.js, importing and using the above CSS file:\n\ncomponents/Button.js\nimport styles from './Button.module.css'\n \nexport function Button() {\n  return (\n    <button\n      type=\"button\"\n      // Note how the \"error\" class is accessed as a property on the imported\n      // `styles` object.\n      className={styles.error}\n    >\n      Destroy\n    </button>\n  )\n}\n\nCSS Modules are only enabled for files with the .module.css and .module.sass extensions.\n\nIn production, all CSS Module files will be automatically concatenated into many minified and code-split .css files. These .css files represent hot execution paths in your application, ensuring the minimal amount of CSS is loaded for your application to paint.\n\nGlobal Styles\n\nTo add a stylesheet to your application, import the CSS file within pages/_app.js.\n\nFor example, consider the following stylesheet named styles.css:\n\nstyles.css\nbody {\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\n    'Arial', sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n\nCreate a pages/_app.js file if not already present. Then, import\n the styles.css file.\n\npages/_app.js\nimport '../styles.css'\n \n// This default export is required in a new `pages/_app.js` file.\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nThese styles (styles.css) will apply to all pages and components in your application. Due to the global nature of stylesheets, and to avoid conflicts, you may only import them inside pages/_app.js.\n\nIn development, expressing stylesheets this way allows your styles to be hot reloaded as you edit them—meaning you can keep application state.\n\nIn production, all CSS files will be automatically concatenated into a single minified .css file. The order that the CSS is concatenated will match the order the CSS is imported into the _app.js file. Pay special attention to imported JS modules that include their own CSS; the JS module's CSS will be concatenated following the same ordering rules as imported CSS files. For example:\n\nimport '../styles.css'\n// The CSS in ErrorBoundary depends on the global CSS in styles.css,\n// so we import it after styles.css.\nimport ErrorBoundary from '../components/ErrorBoundary'\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <ErrorBoundary>\n      <Component {...pageProps} />\n    </ErrorBoundary>\n  )\n}\nExternal Stylesheets\n\nNext.js allows you to import CSS files from a JavaScript file. This is possible because Next.js extends the concept of import\n beyond JavaScript.\n\nImport styles from node_modules\n\nSince Next.js 9.5.4, importing a CSS file from node_modules is permitted anywhere in your application.\n\nFor global stylesheets, like bootstrap or nprogress, you should import the file inside pages/_app.js. For example:\n\npages/_app.js\nimport 'bootstrap/dist/css/bootstrap.css'\n \nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nFor importing CSS required by a third-party component, you can do so in your component. For example:\n\ncomponents/example-dialog.js\nimport { useState } from 'react'\nimport { Dialog } from '@reach/dialog'\nimport VisuallyHidden from '@reach/visually-hidden'\nimport '@reach/dialog/styles.css'\n \nfunction ExampleDialog(props) {\n  const [showDialog, setShowDialog] = useState(false)\n  const open = () => setShowDialog(true)\n  const close = () => setShowDialog(false)\n \n  return (\n    <div>\n      <button onClick={open}>Open Dialog</button>\n      <Dialog isOpen={showDialog} onDismiss={close}>\n        <button className=\"close-button\" onClick={close}>\n          <VisuallyHidden>Close</VisuallyHidden>\n          <span aria-hidden>×</span>\n        </button>\n        <p>Hello there. I am a dialog</p>\n      </Dialog>\n    </div>\n  )\n}\nAdditional Features\n\nNext.js includes additional features to improve the authoring experience of adding styles:\n\nWhen running locally with next dev, local stylesheets (either global or CSS modules) will take advantage of Fast Refresh to instantly reflect changes as edits are saved.\nWhen building for production with next build, CSS files will be bundled into fewer minified .css files to reduce the number of network requests needed to retrieve styles.\nIf you disable JavaScript, styles will still be loaded in the production build (next start). However, JavaScript is still required for next dev to enable Fast Refresh."
  },
  {
    "title": "Building Your Application: Styling | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/styling",
    "html": "Styling\n\nNext.js supports different ways of styling your application, including:\n\nCSS Modules: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.\nGlobal CSS: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.\nTailwind CSS: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.\nSass: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.\nCSS-in-JS: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling.\n\nLearn more about each approach by exploring their respective documentation:"
  },
  {
    "title": "Data Fetching: getServerSideProps | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props",
    "html": "getServerSideProps\n\ngetServerSideProps is a Next.js function that can be used to fetch data and render the contents of a page at request time.\n\nExample\n\nYou can use getServerSideProps by exporting it from a Page Component. The example below shows how you can fetch data from a 3rd party API in getServerSideProps, and pass the data to the page as props:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n \nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\nWhen should I use getServerSideProps?\n\nYou should use getServerSideProps if you need to render a page that relies on personalized user data, or information that can only be known at request time. For example, authorization headers or a geolocation.\n\nIf you do not need to fetch the data at request time, or would prefer to cache the data and pre-rendered HTML, we recommend using getStaticProps.\n\nBehavior\ngetServerSideProps runs on the server.\ngetServerSideProps can only be exported from a page.\ngetServerSideProps returns JSON.\nWhen a user visits a page, getServerSideProps will be used to fetch data at request time, and the data is used to render the initial HTML of the page.\nprops passed to the page component can be viewed on the client as part of the initial HTML. This is to allow the page to be hydrated\n correctly. Make sure that you don't pass any sensitive information that shouldn't be available on the client in props.\nWhen a user visits the page through next/link or next/router, Next.js sends an API request to the server, which runs getServerSideProps.\nYou do not have to call a Next.js API Route to fetch data when using getServerSideProps since the function runs on the server. Instead, you can call a CMS, database, or other third-party APIs directly from inside getServerSideProps.\n\nGood to know:\n\nSee getServerSideProps API reference for parameters and props that can be used with getServerSideProps.\nYou can use the next-code-elimination tool\n to verify what Next.js eliminates from the client-side bundle.\nError Handling\n\nIf an error is thrown inside getServerSideProps, it will show the pages/500.js file. Check out the documentation for 500 page to learn more on how to create it. During development, this file will not be used and the development error overlay will be shown instead.\n\nEdge Cases\nCaching with Server-Side Rendering (SSR)\n\nYou can use caching headers (Cache-Control) inside getServerSideProps to cache dynamic responses. For example, using stale-while-revalidate\n.\n\n// This value is considered fresh for ten seconds (s-maxage=10).\n// If a request is repeated within the next 10 seconds, the previously\n// cached value will still be fresh. If the request is repeated before 59 seconds,\n// the cached value will be stale but still render (stale-while-revalidate=59).\n//\n// In the background, a revalidation request will be made to populate the cache\n// with a fresh value. If you refresh the page, you will see the new value.\nexport async function getServerSideProps({ req, res }) {\n  res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=10, stale-while-revalidate=59'\n  )\n \n  return {\n    props: {},\n  }\n}\n\nHowever, before reaching for cache-control, we recommend seeing if getStaticProps with ISR is a better fit for your use case."
  },
  {
    "title": "Data Fetching: Incremental Static Regeneration (ISR) | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/incremental-static-regeneration",
    "html": "Incremental Static Regeneration (ISR)\nExamples\n\nIncremental Static Regeneration (ISR) enables you to:\n\nUpdate static content without rebuilding the entire site\nReduce server load by serving prerendered, static pages for most requests\nEnsure proper cache-control headers are automatically added to pages\nHandle large amounts of content pages without long next build times\n\nHere's a minimal example:\n\npages/blog/[id].tsx\nTypeScript\nJavaScript\nTypeScript\nimport { GetStaticPaths, GetStaticProps } from 'next'\n \ninterface Post {\n  id: string\n  title: string\n  content: string\n}\n \ninterface Props {\n  post: Post\n}\n \nexport const getStaticPaths: GetStaticPaths = async () => {\n  let posts = await fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n  let paths = posts.map((post: Post) => ({\n    params: { id: post.id },\n  }))\n \n  // We'll prerender only these paths at build time.\n  // { fallback: 'blocking' } will server-render pages\n  // on-demand if the path doesn't exist.\n  return { paths, fallback: false }\n}\n \nexport const getStaticProps: GetStaticProps<Props> = async ({ params }) => {\n  let post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(\n    (res) => res.json()\n  )\n \n  return {\n    props: { post },\n    // Next.js will invalidate the cache when a\n    // request comes in, at most once every 60 seconds.\n    revalidate: 60,\n  }\n}\n \nexport default function Page({ post }: Props) {\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </main>\n  )\n}\n\nHere's how this example works:\n\nDuring next build, all known blog posts are generated (there are 25 in this example)\nAll requests made to these pages (e.g. /blog/1) are cached and instantaneous\nAfter 60 seconds has passed, the next request will still show the cached (stale) page\nThe cache is invalidated and a new version of the page begins generating in the background\nOnce generated successfully, Next.js will display and cache the updated page\nIf /blog/26 is requested, Next.js will generated and cached this page on-demand\nReference\nFunctions\ngetStaticProps\nres.revalidate\nExamples\nOn-demand validation with res.revalidate()\n\nFor a more precise method of revalidation, use res.revalidate to generate a new page on-demand from an API Router.\n\nFor example, this API Route can be called at /api/revalidate?secret=<token> to revalidate a given blog post. Create a secret token only known by your Next.js app. This secret will be used to prevent unauthorized access to the revalidation API Route.\n\npages/api/revalidate.ts\nimport { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  // Check for secret to confirm this is a valid request\n  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n \n  try {\n    // This should be the actual path not a rewritten path\n    // e.g. for \"/posts/[id]\" this should be \"/posts/1\"\n    await res.revalidate('/posts/1')\n    return res.json({ revalidated: true })\n  } catch (err) {\n    // If there was an error, Next.js will continue\n    // to show the last successfully generated page\n    return res.status(500).send('Error revalidating')\n  }\n}\n\nIf you are using on-demand revalidation, you do not need to specify a revalidate time inside of getStaticProps. Next.js will use the default value of false (no revalidation) and only revalidate the page on-demand when res.revalidate() is called.\n\nHandling uncaught exceptions\n\nIf there is an error inside getStaticProps when handling background regeneration, or you manually throw an error, the last successfully generated page will continue to show. On the next subsequent request, Next.js will retry calling getStaticProps.\n\nCustomizing the cache location\n\nCaching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. When deploying to Vercel\n, the ISR cache is automatically persisted to durable storage.\n\nWhen self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router.\n\nYou can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application. Learn more.\n\nTroubleshooting\nDebugging cached data in local development\n\nIf you are using the fetch API, you can add additional logging to understand which requests are cached or uncached. Learn more about the logging option.\n\nnext.config.js\nmodule.exports = {\n  logging: {\n    fetches: {\n      fullUrl: true,\n    },\n  },\n}\nVerifying correct production behavior\n\nTo verify your pages are cached and revalidated correctly in production, you can test locally by running next build and then next start to run the production Next.js server.\n\nThis will allow you to test ISR behavior as it would work in a production environment. For further debugging, add the following environment variable to your .env file:\n\n.env\nNEXT_PRIVATE_DEBUG_CACHE=1\n\nThis will make the Next.js server console log ISR cache hits and misses. You can inspect the output to see which pages are generated during next build, as well as how pages are updated as paths are accessed on-demand.\n\nCaveats\nISR is only supported when using the Node.js runtime (default).\nISR is not supported when creating a Static Export.\nIf you have multiple fetch requests in a statically rendered route, and each has a different revalidate frequency, the lowest time will be used for all requests.\nMiddleware won't be executed for on-demand ISR requests, meaning any path rewrites or logic in Middleware will not be applied. Ensure you are revalidating the exact path. For example, /post/1 instead of a rewritten /post-1.\nVersion history\nVersion\tChanges\nv14.1.0\tCustom cacheHandler is stable.\nv13.0.0\tApp Router is introduced.\nv12.2.0\tPages Router: On-Demand ISR is stable\nv12.0.0\tPages Router: Bot-aware ISR fallback added.\nv9.5.0\tPages Router: Stable ISR introduced."
  },
  {
    "title": "Data Fetching: Client-side Fetching | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/client-side",
    "html": "Client-side Fetching\n\nClient-side data fetching is useful when your page doesn't require SEO indexing, when you don't need to pre-render your data, or when the content of your pages needs to update frequently. Unlike the server-side rendering APIs, you can use client-side data fetching at the component level.\n\nIf done at the page level, the data is fetched at runtime, and the content of the page is updated as the data changes. When used at the component level, the data is fetched at the time of the component mount, and the content of the component is updated as the data changes.\n\nIt's important to note that using client-side data fetching can affect the performance of your application and the load speed of your pages. This is because the data fetching is done at the time of the component or pages mount, and the data is not cached.\n\nClient-side data fetching with useEffect\n\nThe following example shows how you can fetch data on the client side using the useEffect hook.\n\nimport { useState, useEffect } from 'react'\n \nfunction Profile() {\n  const [data, setData] = useState(null)\n  const [isLoading, setLoading] = useState(true)\n \n  useEffect(() => {\n    fetch('/api/profile-data')\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data)\n        setLoading(false)\n      })\n  }, [])\n \n  if (isLoading) return <p>Loading...</p>\n  if (!data) return <p>No profile data</p>\n \n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.bio}</p>\n    </div>\n  )\n}\nClient-side data fetching with SWR\n\nThe team behind Next.js has created a React hook library for data fetching called SWR\n. It is highly recommended if you are fetching data on the client-side. It handles caching, revalidation, focus tracking, refetching on intervals, and more.\n\nUsing the same example as above, we can now use SWR to fetch the profile data. SWR will automatically cache the data for us and will revalidate the data if it becomes stale.\n\nFor more information on using SWR, check out the SWR docs\n.\n\nimport useSWR from 'swr'\n \nconst fetcher = (...args) => fetch(...args).then((res) => res.json())\n \nfunction Profile() {\n  const { data, error } = useSWR('/api/profile-data', fetcher)\n \n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n \n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>{data.bio}</p>\n    </div>\n  )\n}"
  },
  {
    "title": "Data Fetching: Forms and Mutations | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/forms-and-mutations",
    "html": "Forms and Mutations\n\nForms enable you to create and update data in web applications. Next.js provides a powerful way to handle form submissions and data mutations using API Routes.\n\nGood to know:\n\nWe will soon recommend incrementally adopting the App Router and using Server Actions for handling form submissions and data mutations. Server Actions allow you to define asynchronous server functions that can be called directly from your components, without needing to manually create an API Route.\nAPI Routes do not specify CORS headers\n, meaning they are same-origin only by default.\nSince API Routes run on the server, we're able to use sensitive values (like API keys) through Environment Variables without exposing them to the client. This is critical for the security of your application.\nExamples\nServer-only form\n\nWith the Pages Router, you need to manually create API endpoints to handle securely mutating data on the server.\n\npages/api/submit.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const data = req.body\n  const id = await createItem(data)\n  res.status(200).json({ id })\n}\n\nThen, call the API Route from the client with an event handler:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { FormEvent } from 'react'\n \nexport default function Page() {\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n \n    const formData = new FormData(event.currentTarget)\n    const response = await fetch('/api/submit', {\n      method: 'POST',\n      body: formData,\n    })\n \n    // Handle response if necessary\n    const data = await response.json()\n    // ...\n  }\n \n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\nForm validation\n\nWe recommend using HTML validation like required and type=\"email\" for basic client-side form validation.\n\nFor more advanced server-side validation, you can use a schema validation library like zod\n to validate the form fields before mutating the data:\n\npages/api/submit.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { z } from 'zod'\n \nconst schema = z.object({\n  // ...\n})\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const parsed = schema.parse(req.body)\n  // ...\n}\nError handling\n\nYou can use React state to show an error message when a form submission fails:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport React, { useState, FormEvent } from 'react'\n \nexport default function Page() {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n \n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setIsLoading(true)\n    setError(null) // Clear previous errors when a new request starts\n \n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n \n      if (!response.ok) {\n        throw new Error('Failed to submit the data. Please try again.')\n      }\n \n      // Handle response if necessary\n      const data = await response.json()\n      // ...\n    } catch (error) {\n      // Capture the error message to display to the user\n      setError(error.message)\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n \n  return (\n    <div>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" name=\"name\" />\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Submit'}\n        </button>\n      </form>\n    </div>\n  )\n}\nDisplaying loading state\n\nYou can use React state to show a loading state when a form is submitting on the server:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport React, { useState, FormEvent } from 'react'\n \nexport default function Page() {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n \n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setIsLoading(true) // Set loading to true when the request starts\n \n    try {\n      const formData = new FormData(event.currentTarget)\n      const response = await fetch('/api/submit', {\n        method: 'POST',\n        body: formData,\n      })\n \n      // Handle response if necessary\n      const data = await response.json()\n      // ...\n    } catch (error) {\n      // Handle error if necessary\n      console.error(error)\n    } finally {\n      setIsLoading(false) // Set loading to false when the request completes\n    }\n  }\n \n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Loading...' : 'Submit'}\n      </button>\n    </form>\n  )\n}\nRedirecting\n\nIf you would like to redirect the user to a different route after a mutation, you can redirect to any absolute or relative URL:\n\npages/api/submit.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const id = await addPost()\n  res.redirect(307, `/post/${id}`)\n}\nSetting cookies\n\nYou can set cookies inside an API Route using the setHeader method on the response:\n\npages/api/cookie.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')\n  res.status(200).send('Cookie has been set.')\n}\nReading cookies\n\nYou can read cookies inside an API Route using the cookies request helper:\n\npages/api/cookie.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const auth = req.cookies.authorization\n  // ...\n}\nDeleting cookies\n\nYou can delete cookies inside an API Route using the setHeader method on the response:\n\npages/api/cookie.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')\n  res.status(200).send('Cookie has been deleted.')\n}"
  },
  {
    "title": "Rendering: Edge and Node.js Runtimes | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/edge-and-nodejs-runtimes",
    "html": "Edge and Node.js Runtimes\n\nNext.js has two server runtimes you can use in your application:\n\nThe Node.js Runtime (default) which has access to all Node.js APIs and compatible packages from the ecosystem.\nThe Edge Runtime which contains a more limited set of APIs.\nUse Cases\nThe Node.js runtime is used for rendering your application.\nThe Edge runtime is used for Middleware (routing rules like redirects, rewrites, and setting headers).\nCaveats\nThe Edge runtime does not support all Node.js APIs. Some packages will not work. Learn more about the unsupported APIs in the Edge Runtime.\nThe Edge runtime does not support Incremental Static Regeneration (ISR).\nBoth runtimes can support streaming depending on your deployment infrastructure."
  },
  {
    "title": "Data Fetching: getStaticPaths | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-paths",
    "html": "getStaticPaths\n\nIf a page has Dynamic Routes and uses getStaticProps, it needs to define a list of paths to be statically generated.\n\nWhen you export a function called getStaticPaths (Static Site Generation) from a page that uses dynamic routes, Next.js will statically pre-render all the paths specified by getStaticPaths.\n\npages/repo/[name].tsx\nTypeScript\nJavaScript\nTypeScript\nimport type {\n  InferGetStaticPropsType,\n  GetStaticProps,\n  GetStaticPaths,\n} from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getStaticPaths = (async () => {\n  return {\n    paths: [\n      {\n        params: {\n          name: 'next.js',\n        },\n      }, // See the \"paths\" section below\n    ],\n    fallback: true, // false or \"blocking\"\n  }\n}) satisfies GetStaticPaths\n \nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n \nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n\nThe getStaticPaths API reference covers all parameters and props that can be used with getStaticPaths.\n\nWhen should I use getStaticPaths?\n\nYou should use getStaticPaths if you’re statically pre-rendering pages that use dynamic routes and:\n\nThe data comes from a headless CMS\nThe data comes from a database\nThe data comes from the filesystem\nThe data can be publicly cached (not user-specific)\nThe page must be pre-rendered (for SEO) and be very fast — getStaticProps generates HTML and JSON files, both of which can be cached by a CDN for performance\nWhen does getStaticPaths run\n\ngetStaticPaths will only run during build in production, it will not be called during runtime. You can validate code written inside getStaticPaths is removed from the client-side bundle with this tool\n.\n\nHow does getStaticProps run with regards to getStaticPaths\ngetStaticProps runs during next build for any paths returned during build\ngetStaticProps runs in the background when using fallback: true\ngetStaticProps is called before initial render when using fallback: blocking\nWhere can I use getStaticPaths\ngetStaticPaths must be used with getStaticProps\nYou cannot use getStaticPaths with getServerSideProps\nYou can export getStaticPaths from a Dynamic Route that also uses getStaticProps\nYou cannot export getStaticPaths from non-page file (e.g. your components folder)\nYou must export getStaticPaths as a standalone function, and not a property of the page component\nRuns on every request in development\n\nIn development (next dev), getStaticPaths will be called on every request.\n\nGenerating paths on-demand\n\ngetStaticPaths allows you to control which pages are generated during the build instead of on-demand with fallback. Generating more pages during a build will cause slower builds.\n\nYou can defer generating all pages on-demand by returning an empty array for paths. This can be especially helpful when deploying your Next.js application to multiple environments. For example, you can have faster builds by generating all pages on-demand for previews (but not production builds). This is helpful for sites with hundreds/thousands of static pages.\n\npages/posts/[id].js\nexport async function getStaticPaths() {\n  // When this is true (in preview environments) don't\n  // prerender any static pages\n  // (faster builds, but slower initial page load)\n  if (process.env.SKIP_BUILD_STATIC_GENERATION) {\n    return {\n      paths: [],\n      fallback: 'blocking',\n    }\n  }\n \n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n \n  // Get the paths we want to prerender based on posts\n  // In production environments, prerender all pages\n  // (slower builds, but faster initial page load)\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n \n  // { fallback: false } means other routes should 404\n  return { paths, fallback: false }\n}"
  },
  {
    "title": "Rendering: Client-side Rendering (CSR) | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering",
    "html": "Client-side Rendering (CSR)\n\nIn Client-Side Rendering (CSR) with React, the browser downloads a minimal HTML page and the JavaScript needed for the page. The JavaScript is then used to update the DOM and render the page. When the application is first loaded, the user may notice a slight delay before they can see the full page, this is because the page isn't fully rendered until all the JavaScript is downloaded, parsed, and executed.\n\nAfter the page has been loaded for the first time, navigating to other pages on the same website is typically faster, as only necessary data needs to be fetched, and JavaScript can re-render parts of the page without requiring a full page refresh.\n\nIn Next.js, there are two ways you can implement client-side rendering:\n\nUsing React's useEffect() hook inside your pages instead of the server-side rendering methods (getStaticProps and getServerSideProps).\nUsing a data fetching library like SWR\n or TanStack Query\n to fetch data on the client (recommended).\n\nHere's an example of using useEffect() inside a Next.js page:\n\npages/index.js\nimport React, { useState, useEffect } from 'react'\n \nexport function Page() {\n  const [data, setData] = useState(null)\n \n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('https://api.example.com/data')\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      const result = await response.json()\n      setData(result)\n    }\n \n    fetchData().catch((e) => {\n      // handle the error as needed\n      console.error('An error occurred while fetching the data: ', e)\n    })\n  }, [])\n \n  return <p>{data ? `Your data: ${data}` : 'Loading...'}</p>\n}\n\nIn the example above, the component starts by rendering Loading.... Then, once the data is fetched, it re-renders and displays the data.\n\nAlthough fetching data in a useEffect is a pattern you may see in older React Applications, we recommend using a data-fetching library for better performance, caching, optimistic updates, and more. Here's a minimum example using SWR\n to fetch data on the client:\n\npages/index.js\nimport useSWR from 'swr'\n \nexport function Page() {\n  const { data, error, isLoading } = useSWR(\n    'https://api.example.com/data',\n    fetcher\n  )\n \n  if (error) return <p>Failed to load.</p>\n  if (isLoading) return <p>Loading...</p>\n \n  return <p>Your Data: {data}</p>\n}\n\nGood to know:\n\nKeep in mind that CSR can impact SEO. Some search engine crawlers might not execute JavaScript and therefore only see the initial empty or loading state of your application. It can also lead to performance issues for users with slower internet connections or devices, as they need to wait for all the JavaScript to load and run before they can see the full page. Next.js promotes a hybrid approach that allows you to use a combination of server-side rendering, static site generation, and client-side rendering, depending on the needs of each page in your application. In the App Router, you can also use Loading UI with Suspense to show a loading indicator while the page is being rendered."
  },
  {
    "title": "Building Your Application: Data Fetching | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching",
    "html": "Data Fetching\n\nData fetching in Next.js allows you to render your content in different ways, depending on your application's use case. These include pre-rendering with Server-side Rendering or Static Generation, and updating or creating content at runtime with Incremental Static Regeneration.\n\nExamples\nWordPress Example\n(Demo\n)\nBlog Starter using markdown files\n (Demo\n)\nDatoCMS Example\n (Demo\n)\nTakeShape Example\n (Demo\n)\nSanity Example\n (Demo\n)\nPrismic Example\n (Demo\n)\nContentful Example\n (Demo\n)\nStrapi Example\n (Demo\n)\nPrepr Example\n (Demo\n)\nAgility CMS Example\n (Demo\n)\nCosmic Example\n (Demo\n)\nButterCMS Example\n (Demo\n)\nStoryblok Example\n (Demo\n)\nGraphCMS Example\n (Demo\n)\nKontent Example\n (Demo\n)\nStatic Tweet Demo\nEnterspeed Example\n (Demo\n)"
  },
  {
    "title": "Data Fetching: getStaticProps | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props",
    "html": "getStaticProps\n\nIf you export a function called getStaticProps (Static Site Generation) from a page, Next.js will pre-render this page at build time using the props returned by getStaticProps.\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n \nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n\nNote that irrespective of rendering type, any props will be passed to the page component and can be viewed on the client-side in the initial HTML. This is to allow the page to be hydrated\n correctly. Make sure that you don't pass any sensitive information that shouldn't be available on the client in props.\n\nThe getStaticProps API reference covers all parameters and props that can be used with getStaticProps.\n\nWhen should I use getStaticProps?\n\nYou should use getStaticProps if:\n\nThe data required to render the page is available at build time ahead of a user’s request\nThe data comes from a headless CMS\nThe page must be pre-rendered (for SEO) and be very fast — getStaticProps generates HTML and JSON files, both of which can be cached by a CDN for performance\nThe data can be publicly cached (not user-specific). This condition can be bypassed in certain specific situation by using a Middleware to rewrite the path.\nWhen does getStaticProps run\n\ngetStaticProps always runs on the server and never on the client. You can validate code written inside getStaticProps is removed from the client-side bundle with this tool\n.\n\ngetStaticProps always runs during next build\ngetStaticProps runs in the background when using fallback: true\ngetStaticProps is called before initial render when using fallback: blocking\ngetStaticProps runs in the background when using revalidate\ngetStaticProps runs on-demand in the background when using revalidate()\n\nWhen combined with Incremental Static Regeneration, getStaticProps will run in the background while the stale page is being revalidated, and the fresh page served to the browser.\n\ngetStaticProps does not have access to the incoming request (such as query parameters or HTTP headers) as it generates static HTML. If you need access to the request for your page, consider using Middleware in addition to getStaticProps.\n\nUsing getStaticProps to fetch data from a CMS\n\nThe following example shows how you can fetch a list of blog posts from a CMS.\n\npages/blog.tsx\nTypeScript\nJavaScript\nTypeScript\n// posts will be populated at build time by getStaticProps()\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n \n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n \n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n\nThe getStaticProps API reference covers all parameters and props that can be used with getStaticProps.\n\nWrite server-side code directly\n\nAs getStaticProps runs only on the server-side, it will never run on the client-side. It won’t even be included in the JS bundle for the browser, so you can write direct database queries without them being sent to browsers.\n\nThis means that instead of fetching an API route from getStaticProps (that itself fetches data from an external source), you can write the server-side code directly in getStaticProps.\n\nTake the following example. An API route is used to fetch some data from a CMS. That API route is then called directly from getStaticProps. This produces an additional call, reducing performance. Instead, the logic for fetching the data from the CMS can be shared by using a lib/ directory. Then it can be shared with getStaticProps.\n\nlib/load-posts.js\n// The following function is shared\n// with getStaticProps and API routes\n// from a `lib/` directory\nexport async function loadPosts() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts/')\n  const data = await res.json()\n \n  return data\n}\npages/blog.js\n// pages/blog.js\nimport { loadPosts } from '../lib/load-posts'\n \n// This function runs only on the server side\nexport async function getStaticProps() {\n  // Instead of fetching your `/api` route you can call the same\n  // function directly in `getStaticProps`\n  const posts = await loadPosts()\n \n  // Props returned will be passed to the page component\n  return { props: { posts } }\n}\n\nAlternatively, if you are not using API routes to fetch data, then the fetch()\n API can be used directly in getStaticProps to fetch data.\n\nTo verify what Next.js eliminates from the client-side bundle, you can use the next-code-elimination tool\n.\n\nStatically generates both HTML and JSON\n\nWhen a page with getStaticProps is pre-rendered at build time, in addition to the page HTML file, Next.js generates a JSON file holding the result of running getStaticProps.\n\nThis JSON file will be used in client-side routing through next/link or next/router. When you navigate to a page that’s pre-rendered using getStaticProps, Next.js fetches this JSON file (pre-computed at build time) and uses it as the props for the page component. This means that client-side page transitions will not call getStaticProps as only the exported JSON is used.\n\nWhen using Incremental Static Generation, getStaticProps will be executed in the background to generate the JSON needed for client-side navigation. You may see this in the form of multiple requests being made for the same page, however, this is intended and has no impact on end-user performance.\n\nWhere can I use getStaticProps\n\ngetStaticProps can only be exported from a page. You cannot export it from non-page files, _app, _document, or _error.\n\nOne of the reasons for this restriction is that React needs to have all the required data before the page is rendered.\n\nAlso, you must use export getStaticProps as a standalone function — it will not work if you add getStaticProps as a property of the page component.\n\nGood to know: if you have created a custom app, ensure you are passing the pageProps to the page component as shown in the linked document, otherwise the props will be empty.\n\nRuns on every request in development\n\nIn development (next dev), getStaticProps will be called on every request.\n\nPreview Mode\n\nYou can temporarily bypass static generation and render the page at request time instead of build time using Preview Mode. For example, you might be using a headless CMS and want to preview drafts before they're published."
  },
  {
    "title": "Rendering: Static Site Generation (SSG) | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/static-site-generation",
    "html": "Static Site Generation (SSG)\nExamples\n\nIf a page uses Static Generation, the page HTML is generated at build time. That means in production, the page HTML is generated when you run next build. This HTML will then be reused on each request. It can be cached by a CDN.\n\nIn Next.js, you can statically generate pages with or without data. Let's take a look at each case.\n\nStatic Generation without data\n\nBy default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:\n\nfunction About() {\n  return <div>About</div>\n}\n \nexport default About\n\nNote that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time.\n\nStatic Generation with data\n\nSome pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use these functions that Next.js provides:\n\nYour page content depends on external data: Use getStaticProps.\nYour page paths depend on external data: Use getStaticPaths (usually in addition to getStaticProps).\nScenario 1: Your page content depends on external data\n\nExample: Your blog page might need to fetch the list of blog posts from a CMS (content management system).\n\n// TODO: Need to fetch `posts` (by calling some API endpoint)\n//       before this page can be pre-rendered.\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nTo fetch this data on pre-render, Next.js allows you to export an async function called getStaticProps from the same file. This function gets called at build time and lets you pass fetched data to the page's props on pre-render.\n\nexport default function Blog({ posts }) {\n  // Render posts...\n}\n \n// This function gets called at build time\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n \n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n\nTo learn more about how getStaticProps works, check out the Data Fetching documentation.\n\nScenario 2: Your page paths depend on external data\n\nNext.js allows you to create pages with dynamic routes. For example, you can create a file called pages/posts/[id].js to show a single blog post based on id. This will allow you to show a blog post with id: 1 when you access posts/1.\n\nTo learn more about dynamic routing, check the Dynamic Routing documentation.\n\nHowever, which id you want to pre-render at build time might depend on external data.\n\nExample: suppose that you've only added one blog post (with id: 1) to the database. In this case, you'd only want to pre-render posts/1 at build time.\n\nLater, you might add the second post with id: 2. Then you'd want to pre-render posts/2 as well.\n\nSo your page paths that are pre-rendered depend on external data. To handle this, Next.js lets you export an async function called getStaticPaths from a dynamic page (pages/posts/[id].js in this case). This function gets called at build time and lets you specify which paths you want to pre-render.\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n \n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n \n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nAlso in pages/posts/[id].js, you need to export getStaticProps so that you can fetch the data about the post with this id and use it to pre-render the page:\n\nexport default function Post({ post }) {\n  // Render post...\n}\n \nexport async function getStaticPaths() {\n  // ...\n}\n \n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nTo learn more about how getStaticPaths works, check out the Data Fetching documentation.\n\nWhen should I use Static Generation?\n\nWe recommend using Static Generation (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\nMarketing pages\nBlog posts and portfolios\nE-commerce product listings\nHelp and documentation\n\nYou should ask yourself: \"Can I pre-render this page ahead of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is not a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn cases like this, you can do one of the following:\n\nUse Static Generation with Client-side data fetching: You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the Data Fetching documentation.\nUse Server-Side Rendering: Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below."
  },
  {
    "title": "Rendering: Automatic Static Optimization | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/automatic-static-optimization",
    "html": "Automatic Static Optimization\n\nNext.js automatically determines that a page is static (can be prerendered) if it has no blocking data requirements. This determination is made by the absence of getServerSideProps and getInitialProps in the page.\n\nThis feature allows Next.js to emit hybrid applications that contain both server-rendered and statically generated pages.\n\nStatically generated pages are still reactive: Next.js will hydrate your application client-side to give it full interactivity.\n\nOne of the main benefits of this feature is that optimized pages require no server-side computation, and can be instantly streamed to the end-user from multiple CDN locations. The result is an ultra fast loading experience for your users.\n\nHow it works\n\nIf getServerSideProps or getInitialProps is present in a page, Next.js will switch to render the page on-demand, per-request (meaning Server-Side Rendering).\n\nIf the above is not the case, Next.js will statically optimize your page automatically by prerendering the page to static HTML.\n\nDuring prerendering, the router's query object will be empty since we do not have query information to provide during this phase. After hydration, Next.js will trigger an update to your application to provide the route parameters in the query object.\n\nThe cases where the query will be updated after hydration triggering another render are:\n\nThe page is a dynamic-route.\nThe page has query values in the URL.\nRewrites are configured in your next.config.js since these can have parameters that may need to be parsed and provided in the query.\n\nTo be able to distinguish if the query is fully updated and ready for use, you can leverage the isReady field on next/router.\n\nGood to know: Parameters added with dynamic routes to a page that's using getStaticProps will always be available inside the query object.\n\nnext build will emit .html files for statically optimized pages. For example, the result for the page pages/about.js would be:\n\nTerminal\n.next/server/pages/about.html\n\nAnd if you add getServerSideProps to the page, it will then be JavaScript, like so:\n\nTerminal\n.next/server/pages/about.js\nCaveats\nIf you have a custom App with getInitialProps then this optimization will be turned off in pages without Static Generation.\nIf you have a custom Document with getInitialProps be sure you check if ctx.req is defined before assuming the page is server-side rendered. ctx.req will be undefined for pages that are prerendered.\nAvoid using the asPath value on next/router in the rendering tree until the router's isReady field is true. Statically optimized pages only know asPath on the client and not the server, so using it as a prop may lead to mismatch errors. The active-class-name example\n demonstrates one way to use asPath as a prop."
  },
  {
    "title": "Rendering: Server-side Rendering (SSR) | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/server-side-rendering",
    "html": "Server-side Rendering (SSR)\n\nAlso referred to as \"SSR\" or \"Dynamic Rendering\".\n\nIf a page uses Server-side Rendering, the page HTML is generated on each request.\n\nTo use Server-side Rendering for a page, you need to export an async function called getServerSideProps. This function will be called by the server on every request.\n\nFor example, suppose that your page needs to pre-render frequently updated data (fetched from an external API). You can write getServerSideProps which fetches this data and passes it to Page like below:\n\nexport default function Page({ data }) {\n  // Render data...\n}\n \n// This gets called on every request\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n \n  // Pass data to the page via props\n  return { props: { data } }\n}\n\nAs you can see, getServerSideProps is similar to getStaticProps, but the difference is that getServerSideProps is run on every request instead of on build time.\n\nTo learn more about how getServerSideProps works, check out our Data Fetching documentation."
  },
  {
    "title": "Routing: Middleware | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/middleware",
    "html": "Middleware\n\nMiddleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.\n\nMiddleware runs before cached content and routes are matched. See Matching Paths for more details.\n\nUse Cases\n\nIntegrating Middleware into your application can lead to significant improvements in performance, security, and user experience. Some common scenarios where Middleware is particularly effective include:\n\nAuthentication and Authorization: Ensure user identity and check session cookies before granting access to specific pages or API routes.\nServer-Side Redirects: Redirect users at the server level based on certain conditions (e.g., locale, user role).\nPath Rewriting: Support A/B testing, feature rollouts, or legacy paths by dynamically rewriting paths to API routes or pages based on request properties.\nBot Detection: Protect your resources by detecting and blocking bot traffic.\nLogging and Analytics: Capture and analyze request data for insights before processing by the page or API.\nFeature Flagging: Enable or disable features dynamically for seamless feature rollouts or testing.\n\nRecognizing situations where middleware may not be the optimal approach is just as crucial. Here are some scenarios to be mindful of:\n\nComplex Data Fetching and Manipulation: Middleware is not designed for direct data fetching or manipulation, this should be done within Route Handlers or server-side utilities instead.\nHeavy Computational Tasks: Middleware should be lightweight and respond quickly or it can cause delays in page load. Heavy computational tasks or long-running processes should be done within dedicated Route Handlers.\nExtensive Session Management: While Middleware can manage basic session tasks, extensive session management should be managed by dedicated authentication services or within Route Handlers.\nDirect Database Operations: Performing direct database operations within Middleware is not recommended. Database interactions should done within Route Handlers or server-side utilities.\nConvention\n\nUse the file middleware.ts (or .js) in the root of your project to define Middleware. For example, at the same level as pages or app, or inside src if applicable.\n\nNote: While only one middleware.ts file is supported per project, you can still organize your middleware logic modularly. Break out middleware functionalities into separate .ts or .js files and import them into your main middleware.ts file. This allows for cleaner management of route-specific middleware, aggregated in the middleware.ts for centralized control. By enforcing a single middleware file, it simplifies configuration, prevents potential conflicts, and optimizes performance by avoiding multiple middleware layers.\n\nExample\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n \n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\nMatching Paths\n\nMiddleware will be invoked for every route in your project. Given this, it's crucial to use matchers to precisely target or exclude specific routes. The following is the execution order:\n\nheaders from next.config.js\nredirects from next.config.js\nMiddleware (rewrites, redirects, etc.)\nbeforeFiles (rewrites) from next.config.js\nFilesystem routes (public/, _next/static/, pages/, app/, etc.)\nafterFiles (rewrites) from next.config.js\nDynamic Routes (/blog/[slug])\nfallback (rewrites) from next.config.js\n\nThere are two ways to define which paths Middleware will run on:\n\nCustom matcher config\nConditional statements\nMatcher\n\nmatcher allows you to filter Middleware to run on specific paths.\n\nmiddleware.js\nexport const config = {\n  matcher: '/about/:path*',\n}\n\nYou can match a single path or multiple paths with an array syntax:\n\nmiddleware.js\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n\nThe matcher config allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:\n\nmiddleware.js\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n  ],\n}\n\nYou can also bypass Middleware for certain requests by using the missing or has arrays, or a combination of both:\n\nmiddleware.js\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n \n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      has: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n \n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      has: [{ type: 'header', key: 'x-present' }],\n      missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],\n    },\n  ],\n}\n\nGood to know: The matcher values need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored.\n\nConfigured matchers:\n\nMUST start with /\nCan include named parameters: /about/:path matches /about/a and /about/b but not /about/a/c\nCan have modifiers on named parameters (starting with :): /about/:path* matches /about/a/b/c because * is zero or more. ? is zero or one and + one or more\nCan use regular expression enclosed in parenthesis: /about/(.*) is the same as /about/:path*\n\nRead more details on path-to-regexp\n documentation.\n\nGood to know: For backward compatibility, Next.js always considers /public as /public/index. Therefore, a matcher of /public/:path will match.\n\nConditional Statements\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n \n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\nNextResponse\n\nThe NextResponse API allows you to:\n\nredirect the incoming request to a different URL\nrewrite the response by displaying a given URL\nSet request headers for API Routes, getServerSideProps, and rewrite destinations\nSet response cookies\nSet response headers\n\nTo produce a response from Middleware, you can:\n\nrewrite to a route (Page or Edge API Route) that produces a response\nreturn a NextResponse directly. See Producing a Response\nUsing Cookies\n\nCookies are regular headers. On a Request, they are stored in the Cookie header. On a Response they are in the Set-Cookie header. Next.js provides a convenient way to access and manipulate these cookies through the cookies extension on NextRequest and NextResponse.\n\nFor incoming requests, cookies comes with the following methods: get, getAll, set, and delete cookies. You can check for the existence of a cookie with has or remove all cookies with clear.\nFor outgoing responses, cookies have the following methods get, getAll, set, and delete.\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  // Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request\n  // Getting cookies from the request using the `RequestCookies` API\n  let cookie = request.cookies.get('nextjs')\n  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }\n  const allCookies = request.cookies.getAll()\n  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]\n \n  request.cookies.has('nextjs') // => true\n  request.cookies.delete('nextjs')\n  request.cookies.has('nextjs') // => false\n \n  // Setting cookies on the response using the `ResponseCookies` API\n  const response = NextResponse.next()\n  response.cookies.set('vercel', 'fast')\n  response.cookies.set({\n    name: 'vercel',\n    value: 'fast',\n    path: '/',\n  })\n  cookie = response.cookies.get('vercel')\n  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }\n  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.\n \n  return response\n}\nSetting Headers\n\nYou can set request and response headers using the NextResponse API (setting request headers is available since Next.js v13.0.0).\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  // Clone the request headers and set a new header `x-hello-from-middleware1`\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-hello-from-middleware1', 'hello')\n \n  // You can also set request headers in NextResponse.next\n  const response = NextResponse.next({\n    request: {\n      // New request headers\n      headers: requestHeaders,\n    },\n  })\n \n  // Set a new response header `x-hello-from-middleware2`\n  response.headers.set('x-hello-from-middleware2', 'hello')\n  return response\n}\n\nGood to know: Avoid setting large headers as it might cause 431 Request Header Fields Too Large\n error depending on your backend web server configuration.\n\nCORS\n\nYou can set CORS headers in Middleware to allow cross-origin requests, including simple\n and preflighted\n requests.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse } from 'next/server'\n \nconst allowedOrigins = ['https://acme.com', 'https://my-app.org']\n \nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n \nexport function middleware(request: NextRequest) {\n  // Check the origin from the request\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n \n  // Handle preflighted requests\n  const isPreflight = request.method === 'OPTIONS'\n \n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n \n  // Handle simple requests\n  const response = NextResponse.next()\n \n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n \n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n \n  return response\n}\n \nexport const config = {\n  matcher: '/api/:path*',\n}\nProducing a Response\n\nYou can respond from Middleware directly by returning a Response or NextResponse instance. (This is available since Next.js v13.1.0\n)\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextRequest } from 'next/server'\nimport { isAuthenticated } from '@lib/auth'\n \n// Limit the middleware to paths starting with `/api/`\nexport const config = {\n  matcher: '/api/:function*',\n}\n \nexport function middleware(request: NextRequest) {\n  // Call our authentication function to check the request\n  if (!isAuthenticated(request)) {\n    // Respond with JSON indicating an error message\n    return Response.json(\n      { success: false, message: 'authentication failed' },\n      { status: 401 }\n    )\n  }\n}\nwaitUntil and NextFetchEvent\n\nThe NextFetchEvent object extends the native FetchEvent\n object, and includes the waitUntil()\n method.\n\nThe waitUntil() method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background.\n\nmiddleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextFetchEvent, NextRequest } from 'next/server'\n \nexport function middleware(req: NextRequest, event: NextFetchEvent) {\n  event.waitUntil(\n    fetch('https://my-analytics-platform.com', {\n      method: 'POST',\n      body: JSON.stringify({ pathname: req.nextUrl.pathname }),\n    })\n  )\n \n  return NextResponse.next()\n}\nAdvanced Middleware Flags\n\nIn v13.1 of Next.js two additional flags were introduced for middleware, skipMiddlewareUrlNormalize and skipTrailingSlashRedirect to handle advanced use cases.\n\nskipTrailingSlashRedirect disables Next.js redirects for adding or removing trailing slashes. This allows custom handling inside middleware to maintain the trailing slash for some paths but not others, which can make incremental migrations easier.\n\nnext.config.js\nmodule.exports = {\n  skipTrailingSlashRedirect: true,\n}\nmiddleware.js\nconst legacyPrefixes = ['/docs', '/blog']\n \nexport default async function middleware(req) {\n  const { pathname } = req.nextUrl\n \n  if (legacyPrefixes.some((prefix) => pathname.startsWith(prefix))) {\n    return NextResponse.next()\n  }\n \n  // apply trailing slash handling\n  if (\n    !pathname.endsWith('/') &&\n    !pathname.match(/((?!\\.well-known(?:\\/.*)?)(?:[^/]+\\/)*[^/]+\\.\\w+)/)\n  ) {\n    return NextResponse.redirect(\n      new URL(`${req.nextUrl.pathname}/`, req.nextUrl)\n    )\n  }\n}\n\nskipMiddlewareUrlNormalize allows for disabling the URL normalization in Next.js to make handling direct visits and client-transitions the same. In some advanced cases, this option provides full control by using the original URL.\n\nnext.config.js\nmodule.exports = {\n  skipMiddlewareUrlNormalize: true,\n}\nmiddleware.js\nexport default async function middleware(req) {\n  const { pathname } = req.nextUrl\n \n  // GET /_next/data/build-id/hello.json\n \n  console.log(pathname)\n  // with the flag this now /_next/data/build-id/hello.json\n  // without the flag this would be normalized to /hello\n}\nRuntime\n\nMiddleware currently only supports the Edge runtime. The Node.js runtime can not be used.\n\nVersion History\nVersion\tChanges\nv13.1.0\tAdvanced Middleware flags added\nv13.0.0\tMiddleware can modify request headers, response headers, and send responses\nv12.2.0\tMiddleware is stable, please see the upgrade guide\nv12.0.9\tEnforce absolute URLs in Edge Runtime (PR\n)\nv12.0.0\tMiddleware (Beta) added"
  },
  {
    "title": "Building Your Application: Rendering | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering",
    "html": "Rendering\n\nBy default, Next.js pre-renders every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO.\n\nEach generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive (this process is called hydration\n in React).\n\nPre-rendering\n\nNext.js has two forms of pre-rendering: Static Generation and Server-side Rendering. The difference is in when it generates the HTML for a page.\n\nStatic Generation: The HTML is generated at build time and will be reused on each request.\nServer-side Rendering: The HTML is generated on each request.\n\nImportantly, Next.js lets you choose which pre-rendering form you'd like to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n\nWe recommend using Static Generation over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance. However, in some cases, Server-side Rendering might be the only option.\n\nYou can also use client-side data fetching along with Static Generation or Server-side Rendering. That means some parts of a page can be rendered entirely by clientside JavaScript. To learn more, take a look at the Data Fetching documentation."
  },
  {
    "title": "Routing: Internationalization | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization",
    "html": "Internationalization (i18n) Routing\nExamples\n\nNext.js has built-in support for internationalized (i18n\n) routing since v10.0.0. You can provide a list of locales, the default locale, and domain-specific locales and Next.js will automatically handle the routing.\n\nThe i18n routing support is currently meant to complement existing i18n library solutions like react-intl\n, react-i18next\n, lingui\n, rosetta\n, next-intl\n, next-translate\n, next-multilingual\n, tolgee\n, paraglide-next\n and others by streamlining the routes and locale parsing.\n\nGetting started\n\nTo get started, add the i18n config to your next.config.js file.\n\nLocales are UTS Locale Identifiers\n, a standardized format for defining locales.\n\nGenerally a Locale Identifier is made up of a language, region, and script separated by a dash: language-region-script. The region and script are optional. An example:\n\nen-US - English as spoken in the United States\nnl-NL - Dutch as spoken in the Netherlands\nnl - Dutch, no specific region\n\nIf user locale is nl-BE and it is not listed in your configuration, they will be redirected to nl if available, or to the default locale otherwise. If you don't plan to support all regions of a country, it is therefore a good practice to include country locales that will act as fallbacks.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    // These are all the locales you want to support in\n    // your application\n    locales: ['en-US', 'fr', 'nl-NL'],\n    // This is the default locale you want to be used when visiting\n    // a non-locale prefixed path e.g. `/hello`\n    defaultLocale: 'en-US',\n    // This is a list of locale domains and the default locale they\n    // should handle (these are only required when setting up domain routing)\n    // Note: subdomains must be included in the domain value to be matched e.g. \"fr.example.com\".\n    domains: [\n      {\n        domain: 'example.com',\n        defaultLocale: 'en-US',\n      },\n      {\n        domain: 'example.nl',\n        defaultLocale: 'nl-NL',\n      },\n      {\n        domain: 'example.fr',\n        defaultLocale: 'fr',\n        // an optional http field can also be used to test\n        // locale domains locally with http instead of https\n        http: true,\n      },\n    ],\n  },\n}\nLocale Strategies\n\nThere are two locale handling strategies: Sub-path Routing and Domain Routing.\n\nSub-path Routing\n\nSub-path Routing puts the locale in the url path.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en-US', 'fr', 'nl-NL'],\n    defaultLocale: 'en-US',\n  },\n}\n\nWith the above configuration en-US, fr, and nl-NL will be available to be routed to, and en-US is the default locale. If you have a pages/blog.js the following urls would be available:\n\n/blog\n/fr/blog\n/nl-nl/blog\n\nThe default locale does not have a prefix.\n\nDomain Routing\n\nBy using domain routing you can configure locales to be served from different domains:\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en-US', 'fr', 'nl-NL', 'nl-BE'],\n    defaultLocale: 'en-US',\n \n    domains: [\n      {\n        // Note: subdomains must be included in the domain value to be matched\n        // e.g. www.example.com should be used if that is the expected hostname\n        domain: 'example.com',\n        defaultLocale: 'en-US',\n      },\n      {\n        domain: 'example.fr',\n        defaultLocale: 'fr',\n      },\n      {\n        domain: 'example.nl',\n        defaultLocale: 'nl-NL',\n        // specify other locales that should be redirected\n        // to this domain\n        locales: ['nl-BE'],\n      },\n    ],\n  },\n}\n\nFor example if you have pages/blog.js the following urls will be available:\n\nexample.com/blog\nwww.example.com/blog\nexample.fr/blog\nexample.nl/blog\nexample.nl/nl-BE/blog\nAutomatic Locale Detection\n\nWhen a user visits the application root (generally /), Next.js will try to automatically detect which locale the user prefers based on the Accept-Language\n header and the current domain.\n\nIf a locale other than the default locale is detected, the user will be redirected to either:\n\nWhen using Sub-path Routing: The locale prefixed path\nWhen using Domain Routing: The domain with that locale specified as the default\n\nWhen using Domain Routing, if a user with the Accept-Language header fr;q=0.9 visits example.com, they will be redirected to example.fr since that domain handles the fr locale by default.\n\nWhen using Sub-path Routing, the user would be redirected to /fr.\n\nPrefixing the Default Locale\n\nWith Next.js 12 and Middleware, we can add a prefix to the default locale with a workaround\n.\n\nFor example, here's a next.config.js file with support for a few languages. Note the \"default\" locale has been added intentionally.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['default', 'en', 'de', 'fr'],\n    defaultLocale: 'default',\n    localeDetection: false,\n  },\n  trailingSlash: true,\n}\n\nNext, we can use Middleware to add custom routing rules:\n\nmiddleware.ts\nimport { NextRequest, NextResponse } from 'next/server'\n \nconst PUBLIC_FILE = /\\.(.*)$/\n \nexport async function middleware(req: NextRequest) {\n  if (\n    req.nextUrl.pathname.startsWith('/_next') ||\n    req.nextUrl.pathname.includes('/api/') ||\n    PUBLIC_FILE.test(req.nextUrl.pathname)\n  ) {\n    return\n  }\n \n  if (req.nextUrl.locale === 'default') {\n    const locale = req.cookies.get('NEXT_LOCALE')?.value || 'en'\n \n    return NextResponse.redirect(\n      new URL(`/${locale}${req.nextUrl.pathname}${req.nextUrl.search}`, req.url)\n    )\n  }\n}\n\nThis Middleware skips adding the default prefix to API Routes and public files like fonts or images. If a request is made to the default locale, we redirect to our prefix /en.\n\nDisabling Automatic Locale Detection\n\nThe automatic locale detection can be disabled with:\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    localeDetection: false,\n  },\n}\n\nWhen localeDetection is set to false Next.js will no longer automatically redirect based on the user's preferred locale and will only provide locale information detected from either the locale based domain or locale path as described above.\n\nAccessing the locale information\n\nYou can access the locale information via the Next.js router. For example, using the useRouter() hook the following properties are available:\n\nlocale contains the currently active locale.\nlocales contains all configured locales.\ndefaultLocale contains the configured default locale.\n\nWhen pre-rendering pages with getStaticProps or getServerSideProps, the locale information is provided in the context provided to the function.\n\nWhen leveraging getStaticPaths, the configured locales are provided in the context parameter of the function under locales and the configured defaultLocale under defaultLocale.\n\nTransition between locales\n\nYou can use next/link or next/router to transition between locales.\n\nFor next/link, a locale prop can be provided to transition to a different locale from the currently active one. If no locale prop is provided, the currently active locale is used during client-transitions. For example:\n\nimport Link from 'next/link'\n \nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/another\" locale=\"fr\">\n      To /fr/another\n    </Link>\n  )\n}\n\nWhen using the next/router methods directly, you can specify the locale that should be used via the transition options. For example:\n\nimport { useRouter } from 'next/router'\n \nexport default function IndexPage(props) {\n  const router = useRouter()\n \n  return (\n    <div\n      onClick={() => {\n        router.push('/another', '/another', { locale: 'fr' })\n      }}\n    >\n      to /fr/another\n    </div>\n  )\n}\n\nNote that to handle switching only the locale while preserving all routing information such as dynamic route query values or hidden href query values, you can provide the href parameter as an object:\n\nimport { useRouter } from 'next/router'\nconst router = useRouter()\nconst { pathname, asPath, query } = router\n// change just the locale and maintain all other route information including href's query\nrouter.push({ pathname, query }, asPath, { locale: nextLocale })\n\nSee here for more information on the object structure for router.push.\n\nIf you have a href that already includes the locale you can opt-out of automatically handling the locale prefixing:\n\nimport Link from 'next/link'\n \nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/fr/another\" locale={false}>\n      To /fr/another\n    </Link>\n  )\n}\nLeveraging the NEXT_LOCALE cookie\n\nNext.js allows setting a NEXT_LOCALE=the-locale cookie, which takes priority over the accept-language header. This cookie can be set using a language switcher and then when a user comes back to the site it will leverage the locale specified in the cookie when redirecting from / to the correct locale location.\n\nFor example, if a user prefers the locale fr in their accept-language header but a NEXT_LOCALE=en cookie is set the en locale when visiting / the user will be redirected to the en locale location until the cookie is removed or expired.\n\nSearch Engine Optimization\n\nSince Next.js knows what language the user is visiting it will automatically add the lang attribute to the <html> tag.\n\nNext.js doesn't know about variants of a page so it's up to you to add the hreflang meta tags using next/head. You can learn more about hreflang in the Google Webmasters documentation\n.\n\nHow does this work with Static Generation?\n\nNote that Internationalized Routing does not integrate with output: 'export' as it does not leverage the Next.js routing layer. Hybrid Next.js applications that do not use output: 'export' are fully supported.\n\nDynamic Routes and getStaticProps Pages\n\nFor pages using getStaticProps with Dynamic Routes, all locale variants of the page desired to be prerendered need to be returned from getStaticPaths. Along with the params object returned for paths, you can also return a locale field specifying which locale you want to render. For example:\n\npages/blog/[slug].js\nexport const getStaticPaths = ({ locales }) => {\n  return {\n    paths: [\n      // if no `locale` is provided only the defaultLocale will be generated\n      { params: { slug: 'post-1' }, locale: 'en-US' },\n      { params: { slug: 'post-1' }, locale: 'fr' },\n    ],\n    fallback: true,\n  }\n}\n\nFor Automatically Statically Optimized and non-dynamic getStaticProps pages, a version of the page will be generated for each locale. This is important to consider because it can increase build times depending on how many locales are configured inside getStaticProps.\n\nFor example, if you have 50 locales configured with 10 non-dynamic pages using getStaticProps, this means getStaticProps will be called 500 times. 50 versions of the 10 pages will be generated during each build.\n\nTo decrease the build time of dynamic pages with getStaticProps, use a fallback mode. This allows you to return only the most popular paths and locales from getStaticPaths for prerendering during the build. Then, Next.js will build the remaining pages at runtime as they are requested.\n\nAutomatically Statically Optimized Pages\n\nFor pages that are automatically statically optimized, a version of the page will be generated for each locale.\n\nNon-dynamic getStaticProps Pages\n\nFor non-dynamic getStaticProps pages, a version is generated for each locale like above. getStaticProps is called with each locale that is being rendered. If you would like to opt-out of a certain locale from being pre-rendered, you can return notFound: true from getStaticProps and this variant of the page will not be generated.\n\nexport async function getStaticProps({ locale }) {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch(`https://.../posts?locale=${locale}`)\n  const posts = await res.json()\n \n  if (posts.length === 0) {\n    return {\n      notFound: true,\n    }\n  }\n \n  // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\nLimits for the i18n config\nlocales: 100 total locales\ndomains: 100 total locale domain items\n\nGood to know: These limits have been added initially to prevent potential performance issues at build time. You can workaround these limits with custom routing using Middleware in Next.js 12."
  },
  {
    "title": "Routing: Custom Errors | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error",
    "html": "Custom Errors\n404 Page\n\nA 404 page may be accessed very often. Server-rendering an error page for every visit increases the load of the Next.js server. This can result in increased costs and slow experiences.\n\nTo avoid the above pitfalls, Next.js provides a static 404 page by default without having to add any additional files.\n\nCustomizing The 404 Page\n\nTo create a custom 404 page you can create a pages/404.js file. This file is statically generated at build time.\n\npages/404.js\nexport default function Custom404() {\n  return <h1>404 - Page Not Found</h1>\n}\n\nGood to know: You can use getStaticProps inside this page if you need to fetch data at build time.\n\n500 Page\n\nServer-rendering an error page for every visit adds complexity to responding to errors. To help users get responses to errors as fast as possible, Next.js provides a static 500 page by default without having to add any additional files.\n\nCustomizing The 500 Page\n\nTo customize the 500 page you can create a pages/500.js file. This file is statically generated at build time.\n\npages/500.js\nexport default function Custom500() {\n  return <h1>500 - Server-side error occurred</h1>\n}\n\nGood to know: You can use getStaticProps inside this page if you need to fetch data at build time.\n\nMore Advanced Error Page Customizing\n\n500 errors are handled both client-side and server-side by the Error component. If you wish to override it, define the file pages/_error.js and add the following code:\n\nfunction Error({ statusCode }) {\n  return (\n    <p>\n      {statusCode\n        ? `An error ${statusCode} occurred on server`\n        : 'An error occurred on client'}\n    </p>\n  )\n}\n \nError.getInitialProps = ({ res, err }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n \nexport default Error\n\npages/_error.js is only used in production. In development you’ll get an error with the call stack to know where the error originated from.\n\nReusing the built-in error page\n\nIf you want to render the built-in error page you can by importing the Error component:\n\nimport Error from 'next/error'\n \nexport async function getServerSideProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const errorCode = res.ok ? false : res.status\n  const json = await res.json()\n \n  return {\n    props: { errorCode, stars: json.stargazers_count },\n  }\n}\n \nexport default function Page({ errorCode, stars }) {\n  if (errorCode) {\n    return <Error statusCode={errorCode} />\n  }\n \n  return <div>Next stars: {stars}</div>\n}\n\nThe Error component also takes title as a property if you want to pass in a text message along with a statusCode.\n\nIf you have a custom Error component be sure to import that one instead. next/error exports the default component used by Next.js.\n\nCaveats\nError does not currently support Next.js Data Fetching methods like getStaticProps or getServerSideProps.\n_error, like _app, is a reserved pathname. _error is used to define the customized layouts and behaviors of the error pages. /_error will render 404 when accessed directly via routing or rendering in a custom server."
  },
  {
    "title": "Routing: Custom App | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-app",
    "html": "Custom App\n\nNext.js uses the App component to initialize pages. You can override it and control the page initialization and:\n\nCreate a shared layout between page changes\nInject additional data into pages\nAdd global CSS\nUsage\n\nTo override the default App, create the file pages/_app as shown below:\n\npages/_app.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { AppProps } from 'next/app'\n \nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n\nThe Component prop is the active page, so whenever you navigate between routes, Component will change to the new page. Therefore, any props you send to Component will be received by the page.\n\npageProps is an object with the initial props that were preloaded for your page by one of our data fetching methods, otherwise it's an empty object.\n\nGood to know:\n\nIf your app is running and you added a custom App, you'll need to restart the development server. Only required if pages/_app.js didn't exist before.\nApp does not support Next.js Data Fetching methods like getStaticProps or getServerSideProps.\ngetInitialProps with App\n\nUsing getInitialProps in App will disable Automatic Static Optimization for pages without getStaticProps.\n\nWe do not recommend using this pattern. Instead, consider incrementally adopting the App Router, which allows you to more easily fetch data for pages and layouts.\n\npages/_app.tsx\nTypeScript\nJavaScript\nTypeScript\nimport App, { AppContext, AppInitialProps, AppProps } from 'next/app'\n \ntype AppOwnProps = { example: string }\n \nexport default function MyApp({\n  Component,\n  pageProps,\n  example,\n}: AppProps & AppOwnProps) {\n  return (\n    <>\n      <p>Data: {example}</p>\n      <Component {...pageProps} />\n    </>\n  )\n}\n \nMyApp.getInitialProps = async (\n  context: AppContext\n): Promise<AppOwnProps & AppInitialProps> => {\n  const ctx = await App.getInitialProps(context)\n \n  return { ...ctx, example: 'data' }\n}"
  },
  {
    "title": "Routing: API Routes | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/api-routes",
    "html": "API Routes\nExamples\n\nGood to know: If you are using the App Router, you can use Server Components or Route Handlers instead of API Routes.\n\nAPI routes provide a solution to build a public API with Next.js.\n\nAny file inside the folder pages/api is mapped to /api/* and will be treated as an API endpoint instead of a page. They are server-side only bundles and won't increase your client-side bundle size.\n\nFor example, the following API route returns a JSON response with a status code of 200:\n\npages/api/hello.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \ntype ResponseData = {\n  message: string\n}\n \nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n\nGood to know:\n\nAPI Routes do not specify CORS headers\n, meaning they are same-origin only by default. You can customize such behavior by wrapping the request handler with the CORS request helpers\n.\nAPI Routes can't be used with static exports. However, Route Handlers in the App Router can.\nAPI Routes will be affected by pageExtensions configuration in next.config.js.\nParameters\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  // ...\n}\nreq: An instance of http.IncomingMessage\nres: An instance of http.ServerResponse\nHTTP Methods\n\nTo handle different HTTP methods in an API route, you can use req.method in your request handler, like so:\n\npages/api/hello.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    // Process a POST request\n  } else {\n    // Handle any other HTTP method\n  }\n}\nRequest Helpers\n\nAPI Routes provide built-in request helpers which parse the incoming request (req):\n\nreq.cookies - An object containing the cookies sent by the request. Defaults to {}\nreq.query - An object containing the query string\n. Defaults to {}\nreq.body - An object containing the body parsed by content-type, or null if no body was sent\nCustom config\n\nEvery API Route can export a config object to change the default configuration, which is the following:\n\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '1mb',\n    },\n  },\n  // Specifies the maximum allowed duration for this function to execute (in seconds)\n  maxDuration: 5,\n}\n\nbodyParser is automatically enabled. If you want to consume the body as a Stream or with raw-body\n, you can set this to false.\n\nOne use case for disabling the automatic bodyParsing is to allow you to verify the raw body of a webhook request, for example from GitHub\n.\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n}\n\nbodyParser.sizeLimit is the maximum size allowed for the parsed body, in any format supported by bytes\n, like so:\n\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '500kb',\n    },\n  },\n}\n\nexternalResolver is an explicit flag that tells the server that this route is being handled by an external resolver like express or connect. Enabling this option disables warnings for unresolved requests.\n\nexport const config = {\n  api: {\n    externalResolver: true,\n  },\n}\n\nresponseLimit is automatically enabled, warning when an API Routes' response body is over 4MB.\n\nIf you are not using Next.js in a serverless environment, and understand the performance implications of not using a CDN or dedicated media host, you can set this limit to false.\n\nexport const config = {\n  api: {\n    responseLimit: false,\n  },\n}\n\nresponseLimit can also take the number of bytes or any string format supported by bytes, for example 1000, '500kb' or '3mb'. This value will be the maximum response size before a warning is displayed. Default is 4MB. (see above)\n\nexport const config = {\n  api: {\n    responseLimit: '8mb',\n  },\n}\nResponse Helpers\n\nThe Server Response object\n, (often abbreviated as res) includes a set of Express.js-like helper methods to improve the developer experience and increase the speed of creating new API endpoints.\n\nThe included helpers are:\n\nres.status(code) - A function to set the status code. code must be a valid HTTP status code\nres.json(body) - Sends a JSON response. body must be a serializable object\nres.send(body) - Sends the HTTP response. body can be a string, an object or a Buffer\nres.redirect([status,] path) - Redirects to a specified path or URL. status must be a valid HTTP status code\n. If not specified, status defaults to \"307\" \"Temporary redirect\".\nres.revalidate(urlPath) - Revalidate a page on demand using getStaticProps. urlPath must be a string.\nSetting the status code of a response\n\nWhen sending a response back to the client, you can set the status code of the response.\n\nThe following example sets the status code of the response to 200 (OK) and returns a message property with the value of Hello from Next.js! as a JSON response:\n\npages/api/hello.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \ntype ResponseData = {\n  message: string\n}\n \nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\nSending a JSON response\n\nWhen sending a response back to the client you can send a JSON response, this must be a serializable object\n. In a real world application you might want to let the client know the status of the request depending on the result of the requested endpoint.\n\nThe following example sends a JSON response with the status code 200 (OK) and the result of the async operation. It's contained in a try catch block to handle any errors that may occur, with the appropriate status code and error message caught and sent back to the client:\n\npages/api/hello.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).json({ result })\n  } catch (err) {\n    res.status(500).json({ error: 'failed to load data' })\n  }\n}\nSending a HTTP response\n\nSending an HTTP response works the same way as when sending a JSON response. The only difference is that the response body can be a string, an object or a Buffer.\n\nThe following example sends a HTTP response with the status code 200 (OK) and the result of the async operation.\n\npages/api/hello.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const result = await someAsyncOperation()\n    res.status(200).send({ result })\n  } catch (err) {\n    res.status(500).send({ error: 'failed to fetch data' })\n  }\n}\nRedirects to a specified path or URL\n\nTaking a form as an example, you may want to redirect your client to a specified path or URL once they have submitted the form.\n\nThe following example redirects the client to the / path if the form is successfully submitted:\n\npages/api/hello.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { name, message } = req.body\n \n  try {\n    await handleFormInputAsync({ name, message })\n    res.redirect(307, '/')\n  } catch (err) {\n    res.status(500).send({ error: 'Failed to fetch data' })\n  }\n}\nAdding TypeScript types\n\nYou can make your API Routes more type-safe by importing the NextApiRequest and NextApiResponse types from next, in addition to those, you can also type your response data:\n\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \ntype ResponseData = {\n  message: string\n}\n \nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n\nGood to know: The body of NextApiRequest is any because the client may include any payload. You should validate the type/shape of the body at runtime before using it.\n\nDynamic API Routes\n\nAPI Routes support dynamic routes, and follow the same file naming rules used for pages/.\n\npages/api/post/[pid].ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { pid } = req.query\n  res.end(`Post: ${pid}`)\n}\n\nNow, a request to /api/post/abc will respond with the text: Post: abc.\n\nCatch all API routes\n\nAPI Routes can be extended to catch all paths by adding three dots (...) inside the brackets. For example:\n\npages/api/post/[...slug].js matches /api/post/a, but also /api/post/a/b, /api/post/a/b/c and so on.\n\nGood to know: You can use names other than slug, such as: [...param]\n\nMatched parameters will be sent as a query parameter (slug in the example) to the page, and it will always be an array, so, the path /api/post/a will have the following query object:\n\n{ \"slug\": [\"a\"] }\n\nAnd in the case of /api/post/a/b, and any other matching path, new parameters will be added to the array, like so:\n\n{ \"slug\": [\"a\", \"b\"] }\n\nFor example:\n\npages/api/post/[...slug].ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\n \nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { slug } = req.query\n  res.end(`Post: ${slug.join(', ')}`)\n}\n\nNow, a request to /api/post/a/b/c will respond with the text: Post: a, b, c.\n\nOptional catch all API routes\n\nCatch all routes can be made optional by including the parameter in double brackets ([[...slug]]).\n\nFor example, pages/api/post/[[...slug]].js will match /api/post, /api/post/a, /api/post/a/b, and so on.\n\nThe main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (/api/post in the example above).\n\nThe query objects are as follows:\n\n{ } // GET `/api/post` (empty object)\n{ \"slug\": [\"a\"] } // `GET /api/post/a` (single-element array)\n{ \"slug\": [\"a\", \"b\"] } // `GET /api/post/a/b` (multi-element array)\nCaveats\nPredefined API routes take precedence over dynamic API routes, and dynamic API routes over catch all API routes. Take a look at the following examples:\npages/api/post/create.js - Will match /api/post/create\npages/api/post/[pid].js - Will match /api/post/1, /api/post/abc, etc. But not /api/post/create\npages/api/post/[...slug].js - Will match /api/post/1/2, /api/post/a/b/c, etc. But not /api/post/create, /api/post/abc\nEdge API Routes\n\nIf you would like to use API Routes with the Edge Runtime, we recommend incrementally adopting the App Router and using Route Handlers instead.\n\nThe Route Handlers function signature is isomorphic, meaning you can use the same function for both Edge and Node.js runtimes."
  },
  {
    "title": "Routing: Custom Document | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-document",
    "html": "Custom Document\n\nA custom Document can update the <html> and <body> tags used to render a Page.\n\nTo override the default Document, create the file pages/_document as shown below:\n\npages/_document.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Html, Head, Main, NextScript } from 'next/document'\n \nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n\nGood to know:\n\n_document is only rendered on the server, so event handlers like onClick cannot be used in this file.\n<Html>, <Head />, <Main /> and <NextScript /> are required for the page to be properly rendered.\nCaveats\nThe <Head /> component used in _document is not the same as next/head. The <Head /> component used here should only be used for any <head> code that is common for all pages. For all other cases, such as <title> tags, we recommend using next/head in your pages or components.\nReact components outside of <Main /> will not be initialized by the browser. Do not add application logic here or custom CSS (like styled-jsx). If you need shared components in all your pages (like a menu or a toolbar), read Layouts instead.\nDocument currently does not support Next.js Data Fetching methods like getStaticProps or getServerSideProps.\nCustomizing renderPage\n\nCustomizing renderPage is advanced and only needed for libraries like CSS-in-JS to support server-side rendering. This is not needed for built-in styled-jsx support.\n\nWe do not recommend using this pattern. Instead, consider incrementally adopting the App Router, which allows you to more easily fetch data for pages and layouts.\n\npages/_document.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Document, {\n  Html,\n  Head,\n  Main,\n  NextScript,\n  DocumentContext,\n  DocumentInitialProps,\n} from 'next/document'\n \nclass MyDocument extends Document {\n  static async getInitialProps(\n    ctx: DocumentContext\n  ): Promise<DocumentInitialProps> {\n    const originalRenderPage = ctx.renderPage\n \n    // Run the React rendering logic synchronously\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // Useful for wrapping the whole react tree\n        enhanceApp: (App) => App,\n        // Useful for wrapping in a per-page basis\n        enhanceComponent: (Component) => Component,\n      })\n \n    // Run the parent `getInitialProps`, it now includes the custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n \n    return initialProps\n  }\n \n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n \nexport default MyDocument\n\nGood to know:\n\ngetInitialProps in _document is not called during client-side transitions.\nThe ctx object for _document is equivalent to the one received in getInitialProps, with the addition of renderPage."
  },
  {
    "title": "Routing: Pages and Layouts | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts",
    "html": "Pages and Layouts\n\nThe Pages Router has a file-system based router built on the concept of pages.\n\nWhen a file is added to the pages directory, it's automatically available as a route.\n\nIn Next.js, a page is a React Component\n exported from a .js, .jsx, .ts, or .tsx file in the pages directory. Each page is associated with a route based on its file name.\n\nExample: If you create pages/about.js that exports a React component like below, it will be accessible at /about.\n\nexport default function About() {\n  return <div>About</div>\n}\nIndex routes\n\nThe router will automatically route files named index to the root of the directory.\n\npages/index.js → /\npages/blog/index.js → /blog\nNested routes\n\nThe router supports nested files. If you create a nested folder structure, files will automatically be routed in the same way still.\n\npages/blog/first-post.js → /blog/first-post\npages/dashboard/settings/username.js → /dashboard/settings/username\nPages with Dynamic Routes\n\nNext.js supports pages with dynamic routes. For example, if you create a file called pages/posts/[id].js, then it will be accessible at posts/1, posts/2, etc.\n\nTo learn more about dynamic routing, check the Dynamic Routing documentation.\n\nLayout Pattern\n\nThe React model allows us to deconstruct a page into a series of components. Many of these components are often reused between pages. For example, you might have the same navigation bar and footer on every page.\n\ncomponents/layout.js\nimport Navbar from './navbar'\nimport Footer from './footer'\n \nexport default function Layout({ children }) {\n  return (\n    <>\n      <Navbar />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\nExamples\nSingle Shared Layout with Custom App\n\nIf you only have one layout for your entire application, you can create a Custom App and wrap your application with the layout. Since the <Layout /> component is re-used when changing pages, its component state will be preserved (e.g. input values).\n\npages/_app.js\nimport Layout from '../components/layout'\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\nPer-Page Layouts\n\nIf you need multiple layouts, you can add a property getLayout to your page, allowing you to return a React component for the layout. This allows you to define the layout on a per-page basis. Since we're returning a function, we can have complex nested layouts if desired.\n\npages/index.js\n \nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\n \nexport default function Page() {\n  return (\n    /** Your content */\n  )\n}\n \nPage.getLayout = function getLayout(page) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\npages/_app.js\nexport default function MyApp({ Component, pageProps }) {\n  // Use the layout defined at the page level, if available\n  const getLayout = Component.getLayout ?? ((page) => page)\n \n  return getLayout(<Component {...pageProps} />)\n}\n\nWhen navigating between pages, we want to persist page state (input values, scroll position, etc.) for a Single-Page Application (SPA) experience.\n\nThis layout pattern enables state persistence because the React component tree is maintained between page transitions. With the component tree, React can understand which elements have changed to preserve state.\n\nGood to know: This process is called reconciliation\n, which is how React understands which elements have changed.\n\nWith TypeScript\n\nWhen using TypeScript, you must first create a new type for your pages which includes a getLayout function. Then, you must create a new type for your AppProps which overrides the Component property to use the previously created type.\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { ReactElement } from 'react'\nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\nimport type { NextPageWithLayout } from './_app'\n \nconst Page: NextPageWithLayout = () => {\n  return <p>hello world</p>\n}\n \nPage.getLayout = function getLayout(page: ReactElement) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\n \nexport default Page\npages/_app.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { ReactElement, ReactNode } from 'react'\nimport type { NextPage } from 'next'\nimport type { AppProps } from 'next/app'\n \nexport type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {\n  getLayout?: (page: ReactElement) => ReactNode\n}\n \ntype AppPropsWithLayout = AppProps & {\n  Component: NextPageWithLayout\n}\n \nexport default function MyApp({ Component, pageProps }: AppPropsWithLayout) {\n  // Use the layout defined at the page level, if available\n  const getLayout = Component.getLayout ?? ((page) => page)\n \n  return getLayout(<Component {...pageProps} />)\n}\nData Fetching\n\nInside your layout, you can fetch data on the client-side using useEffect or a library like SWR\n. Because this file is not a Page, you cannot use getStaticProps or getServerSideProps currently.\n\ncomponents/layout.js\nimport useSWR from 'swr'\nimport Navbar from './navbar'\nimport Footer from './footer'\n \nexport default function Layout({ children }) {\n  const { data, error } = useSWR('/api/navigation', fetcher)\n \n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n \n  return (\n    <>\n      <Navbar links={data.links} />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}"
  },
  {
    "title": "Routing: Redirecting | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/redirecting",
    "html": "Redirecting\n\nThere are a few ways you can handle redirects in Next.js. This page will go through each available option, use cases, and how to manage large numbers of redirects.\n\nAPI\tPurpose\tWhere\tStatus Code\nuseRouter\tPerform a client-side navigation\tComponents\tN/A\nredirects in next.config.js\tRedirect an incoming request based on a path\tnext.config.js file\t307 (Temporary) or 308 (Permanent)\nNextResponse.redirect\tRedirect an incoming request based on a condition\tMiddleware\tAny\nuseRouter() hook\n\nIf you need to redirect inside a component, you can use the push method from the useRouter hook. For example:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n\nGood to know:\n\nIf you don't need to programmatically navigate a user, you should use a <Link> component.\n\nSee the useRouter API reference for more information.\n\nredirects in next.config.js\n\nThe redirects option in the next.config.js file allows you to redirect an incoming request path to a different destination path. This is useful when you change the URL structure of pages or have a list of redirects that are known ahead of time.\n\nredirects supports path, header, cookie, and query matching, giving you the flexibility to redirect users based on an incoming request.\n\nTo use redirects, add the option to your next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      // Basic redirect\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n      // Wildcard path matching\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n        permanent: true,\n      },\n    ]\n  },\n}\n\nSee the redirects API reference for more information.\n\nGood to know:\n\nredirects can return a 307 (Temporary Redirect) or 308 (Permanent Redirect) status code with the permanent option.\nredirects may have a limit on platforms. For example, on Vercel, there's a limit of 1,024 redirects. To manage a large number of redirects (1000+), consider creating a custom solution using Middleware. See managing redirects at scale for more.\nredirects runs before Middleware.\nNextResponse.redirect in Middleware\n\nMiddleware allows you to run code before a request is completed. Then, based on the incoming request, redirect to a different URL using NextResponse.redirect. This is useful if you want to redirect users based on a condition (e.g. authentication, session management, etc) or have a large number of redirects.\n\nFor example, to redirect the user to a /login page if they are not authenticated:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse, NextRequest } from 'next/server'\nimport { authenticate } from 'auth-provider'\n \nexport function middleware(request: NextRequest) {\n  const isAuthenticated = authenticate(request)\n \n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n \n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n \nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n\nGood to know:\n\nMiddleware runs after redirects in next.config.js and before rendering.\n\nSee the Middleware documentation for more information.\n\nManaging redirects at scale (advanced)\n\nTo manage a large number of redirects (1000+), you may consider creating a custom solution using Middleware. This allows you to handle redirects programmatically without having to redeploy your application.\n\nTo do this, you'll need to consider:\n\nCreating and storing a redirect map.\nOptimizing data lookup performance.\n\nNext.js Example: See our Middleware with Bloom filter\n example for an implementation of the recommendations below.\n\n1. Creating and storing a redirect map\n\nA redirect map is a list of redirects that you can store in a database (usually a key-value store) or JSON file.\n\nConsider the following data structure:\n\n{\n  \"/old\": {\n    \"destination\": \"/new\",\n    \"permanent\": true\n  },\n  \"/blog/post-old\": {\n    \"destination\": \"/blog/post-new\",\n    \"permanent\": true\n  }\n}\n\nIn Middleware, you can read from a database such as Vercel's Edge Config\n or Redis\n, and redirect the user based on the incoming request:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse, NextRequest } from 'next/server'\nimport { get } from '@vercel/edge-config'\n \ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n \nexport async function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n \n  if (redirectData && typeof redirectData === 'string') {\n    const redirectEntry: RedirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n \n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n2. Optimizing data lookup performance\n\nReading a large dataset for every incoming request can be slow and expensive. There are two ways you can optimize data lookup performance:\n\nUse a database that is optimized for fast reads, such as Vercel Edge Config\n or Redis\n.\nUse a data lookup strategy such as a Bloom filter\n to efficiently check if a redirect exists before reading the larger redirects file or database.\n\nConsidering the previous example, you can import a generated bloom filter file into Middleware, then, check if the incoming request pathname exists in the bloom filter.\n\nIf it does, forward the request to a API Routes which will check the actual file and redirect the user to the appropriate URL. This avoids importing a large redirects file into Middleware, which can slow down every incoming request.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse, NextRequest } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n \ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n \n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter as any)\n \nexport async function middleware(request: NextRequest) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n \n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n \n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n \n      if (redirectData.ok) {\n        const redirectEntry: RedirectEntry | undefined =\n          await redirectData.json()\n \n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n \n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n \n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n\nThen, in the API Route:\n\npages/api/redirects.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport redirects from '@/app/redirects/redirects.json'\n \ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n \nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const pathname = req.query.pathname\n  if (!pathname) {\n    return res.status(400).json({ message: 'Bad Request' })\n  }\n \n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n \n  // Account for bloom filter false positives\n  if (!redirect) {\n    return res.status(400).json({ message: 'No redirect' })\n  }\n \n  // Return the redirect entry\n  return res.json(redirect)\n}\n\nGood to know:\n\nTo generate a bloom filter, you can use a library like bloom-filters\n.\nYou should validate requests made to your Route Handler to prevent malicious requests."
  },
  {
    "title": "Routing: Linking and Navigating | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating",
    "html": "Linking and Navigating\n\nThe Next.js router allows you to do client-side route transitions between pages, similar to a single-page application.\n\nA React component called Link is provided to do this client-side route transition.\n\nimport Link from 'next/link'\n \nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link href=\"/about\">About Us</Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">Blog Post</Link>\n      </li>\n    </ul>\n  )\n}\n \nexport default Home\n\nThe example above uses multiple links. Each one maps a path (href) to a known page:\n\n/ → pages/index.js\n/about → pages/about.js\n/blog/hello-world → pages/blog/[slug].js\n\nAny <Link /> in the viewport (initially or through scroll) will be prefetched by default (including the corresponding data) for pages using Static Generation. The corresponding data for server-rendered routes is fetched only when the <Link /> is clicked.\n\nLinking to dynamic paths\n\nYou can also use interpolation to create the path, which comes in handy for dynamic route segments. For example, to show a list of posts which have been passed to the component as a prop:\n\nimport Link from 'next/link'\n \nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${encodeURIComponent(post.slug)}`}>\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n \nexport default Posts\n\nencodeURIComponent\n is used in the example to keep the path utf-8 compatible.\n\nAlternatively, using a URL Object:\n\nimport Link from 'next/link'\n \nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link\n            href={{\n              pathname: '/blog/[slug]',\n              query: { slug: post.slug },\n            }}\n          >\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n \nexport default Posts\n\nNow, instead of using interpolation to create the path, we use a URL object in href where:\n\npathname is the name of the page in the pages directory. /blog/[slug] in this case.\nquery is an object with the dynamic segment. slug in this case.\nInjecting the router\nExamples\n\nTo access the router object in a React component you can use useRouter or withRouter.\n\nIn general we recommend using useRouter.\n\nImperative Routing\n\nnext/link should be able to cover most of your routing needs, but you can also do client-side navigations without it, take a look at the documentation for next/router.\n\nThe following example shows how to do basic page navigations with useRouter:\n\nimport { useRouter } from 'next/router'\n \nexport default function ReadMore() {\n  const router = useRouter()\n \n  return (\n    <button onClick={() => router.push('/about')}>\n      Click here to read more\n    </button>\n  )\n}\nShallow Routing\nExamples\n\nShallow routing allows you to change the URL without running data fetching methods again, that includes getServerSideProps, getStaticProps, and getInitialProps.\n\nYou'll receive the updated pathname and the query via the router object (added by useRouter or withRouter), without losing state.\n\nTo enable shallow routing, set the shallow option to true. Consider the following example:\n\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \n// Current URL is '/'\nfunction Page() {\n  const router = useRouter()\n \n  useEffect(() => {\n    // Always do navigations after the first render\n    router.push('/?counter=10', undefined, { shallow: true })\n  }, [])\n \n  useEffect(() => {\n    // The counter changed!\n  }, [router.query.counter])\n}\n \nexport default Page\n\nThe URL will get updated to /?counter=10 and the page won't get replaced, only the state of the route is changed.\n\nYou can also watch for URL changes via componentDidUpdate\n as shown below:\n\ncomponentDidUpdate(prevProps) {\n  const { pathname, query } = this.props.router\n  // verify props have changed to avoid an infinite loop\n  if (query.counter !== prevProps.router.query.counter) {\n    // fetch data based on the new query\n  }\n}\nCaveats\n\nShallow routing only works for URL changes in the current page. For example, let's assume we have another page called pages/about.js, and you run this:\n\nrouter.push('/?counter=10', '/about?counter=10', { shallow: true })\n\nSince that's a new page, it'll unload the current page, load the new one and wait for data fetching even though we asked to do shallow routing.\n\nWhen shallow routing is used with middleware it will not ensure the new page matches the current page like previously done without middleware. This is due to middleware being able to rewrite dynamically and can't be verified client-side without a data fetch which is skipped with shallow, so a shallow route change must always be treated as shallow."
  },
  {
    "title": "Routing: Dynamic Routes | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes",
    "html": "Dynamic Routes\n\nWhen you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or prerendered at build time.\n\nConvention\n\nA Dynamic Segment can be created by wrapping a file or folder name in square brackets: [segmentName]. For example, [id] or [slug].\n\nDynamic Segments can be accessed from useRouter.\n\nExample\n\nFor example, a blog could include the following route pages/blog/[slug].js where [slug] is the Dynamic Segment for blog posts.\n\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n  return <p>Post: {router.query.slug}</p>\n}\nRoute\tExample URL\tparams\npages/blog/[slug].js\t/blog/a\t{ slug: 'a' }\npages/blog/[slug].js\t/blog/b\t{ slug: 'b' }\npages/blog/[slug].js\t/blog/c\t{ slug: 'c' }\nCatch-all Segments\n\nDynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [...segmentName].\n\nFor example, pages/shop/[...slug].js will match /shop/clothes, but also /shop/clothes/tops, /shop/clothes/tops/t-shirts, and so on.\n\nRoute\tExample URL\tparams\npages/shop/[...slug].js\t/shop/a\t{ slug: ['a'] }\npages/shop/[...slug].js\t/shop/a/b\t{ slug: ['a', 'b'] }\npages/shop/[...slug].js\t/shop/a/b/c\t{ slug: ['a', 'b', 'c'] }\nOptional Catch-all Segments\n\nCatch-all Segments can be made optional by including the parameter in double square brackets: [[...segmentName]].\n\nFor example, pages/shop/[[...slug]].js will also match /shop, in addition to /shop/clothes, /shop/clothes/tops, /shop/clothes/tops/t-shirts.\n\nThe difference between catch-all and optional catch-all segments is that with optional, the route without the parameter is also matched (/shop in the example above).\n\nRoute\tExample URL\tparams\npages/shop/[[...slug]].js\t/shop\t{ slug: undefined }\npages/shop/[[...slug]].js\t/shop/a\t{ slug: ['a'] }\npages/shop/[[...slug]].js\t/shop/a/b\t{ slug: ['a', 'b'] }\npages/shop/[[...slug]].js\t/shop/a/b/c\t{ slug: ['a', 'b', 'c'] }"
  },
  {
    "title": "API Reference: Edge Runtime | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/edge",
    "html": "Edge Runtime\n\nThe Next.js Edge Runtime is used for Middleware and supports the following APIs:\n\nNetwork APIs\nAPI\tDescription\nBlob\n\tRepresents a blob\nfetch\n\tFetches a resource\nFetchEvent\n\tRepresents a fetch event\nFile\n\tRepresents a file\nFormData\n\tRepresents form data\nHeaders\n\tRepresents HTTP headers\nRequest\n\tRepresents an HTTP request\nResponse\n\tRepresents an HTTP response\nURLSearchParams\n\tRepresents URL search parameters\nWebSocket\n\tRepresents a websocket connection\nEncoding APIs\nAPI\tDescription\natob\n\tDecodes a base-64 encoded string\nbtoa\n\tEncodes a string in base-64\nTextDecoder\n\tDecodes a Uint8Array into a string\nTextDecoderStream\n\tChainable decoder for streams\nTextEncoder\n\tEncodes a string into a Uint8Array\nTextEncoderStream\n\tChainable encoder for streams\nStream APIs\nAPI\tDescription\nReadableStream\n\tRepresents a readable stream\nReadableStreamBYOBReader\n\tRepresents a reader of a ReadableStream\nReadableStreamDefaultReader\n\tRepresents a reader of a ReadableStream\nTransformStream\n\tRepresents a transform stream\nWritableStream\n\tRepresents a writable stream\nWritableStreamDefaultWriter\n\tRepresents a writer of a WritableStream\nCrypto APIs\nAPI\tDescription\ncrypto\n\tProvides access to the cryptographic functionality of the platform\nCryptoKey\n\tRepresents a cryptographic key\nSubtleCrypto\n\tProvides access to common cryptographic primitives, like hashing, signing, encryption or decryption\nWeb Standard APIs\nAPI\tDescription\nAbortController\n\tAllows you to abort one or more DOM requests as and when desired\nArray\n\tRepresents an array of values\nArrayBuffer\n\tRepresents a generic, fixed-length raw binary data buffer\nAtomics\n\tProvides atomic operations as static methods\nBigInt\n\tRepresents a whole number with arbitrary precision\nBigInt64Array\n\tRepresents a typed array of 64-bit signed integers\nBigUint64Array\n\tRepresents a typed array of 64-bit unsigned integers\nBoolean\n\tRepresents a logical entity and can have two values: true and false\nclearInterval\n\tCancels a timed, repeating action which was previously established by a call to setInterval()\nclearTimeout\n\tCancels a timed, repeating action which was previously established by a call to setTimeout()\nconsole\n\tProvides access to the browser's debugging console\nDataView\n\tRepresents a generic view of an ArrayBuffer\nDate\n\tRepresents a single moment in time in a platform-independent format\ndecodeURI\n\tDecodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine\ndecodeURIComponent\n\tDecodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine\nDOMException\n\tRepresents an error that occurs in the DOM\nencodeURI\n\tEncodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character\nencodeURIComponent\n\tEncodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character\nError\n\tRepresents an error when trying to execute a statement or accessing a property\nEvalError\n\tRepresents an error that occurs regarding the global function eval()\nFloat32Array\n\tRepresents a typed array of 32-bit floating point numbers\nFloat64Array\n\tRepresents a typed array of 64-bit floating point numbers\nFunction\n\tRepresents a function\nInfinity\n\tRepresents the mathematical Infinity value\nInt8Array\n\tRepresents a typed array of 8-bit signed integers\nInt16Array\n\tRepresents a typed array of 16-bit signed integers\nInt32Array\n\tRepresents a typed array of 32-bit signed integers\nIntl\n\tProvides access to internationalization and localization functionality\nisFinite\n\tDetermines whether a value is a finite number\nisNaN\n\tDetermines whether a value is NaN or not\nJSON\n\tProvides functionality to convert JavaScript values to and from the JSON format\nMap\n\tRepresents a collection of values, where each value may occur only once\nMath\n\tProvides access to mathematical functions and constants\nNumber\n\tRepresents a numeric value\nObject\n\tRepresents the object that is the base of all JavaScript objects\nparseFloat\n\tParses a string argument and returns a floating point number\nparseInt\n\tParses a string argument and returns an integer of the specified radix\nPromise\n\tRepresents the eventual completion (or failure) of an asynchronous operation, and its resulting value\nProxy\n\tRepresents an object that is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc)\nqueueMicrotask\n\tQueues a microtask to be executed\nRangeError\n\tRepresents an error when a value is not in the set or range of allowed values\nReferenceError\n\tRepresents an error when a non-existent variable is referenced\nReflect\n\tProvides methods for interceptable JavaScript operations\nRegExp\n\tRepresents a regular expression, allowing you to match combinations of characters\nSet\n\tRepresents a collection of values, where each value may occur only once\nsetInterval\n\tRepeatedly calls a function, with a fixed time delay between each call\nsetTimeout\n\tCalls a function or evaluates an expression after a specified number of milliseconds\nSharedArrayBuffer\n\tRepresents a generic, fixed-length raw binary data buffer\nString\n\tRepresents a sequence of characters\nstructuredClone\n\tCreates a deep copy of a value\nSymbol\n\tRepresents a unique and immutable data type that is used as the key of an object property\nSyntaxError\n\tRepresents an error when trying to interpret syntactically invalid code\nTypeError\n\tRepresents an error when a value is not of the expected type\nUint8Array\n\tRepresents a typed array of 8-bit unsigned integers\nUint8ClampedArray\n\tRepresents a typed array of 8-bit unsigned integers clamped to 0-255\nUint32Array\n\tRepresents a typed array of 32-bit unsigned integers\nURIError\n\tRepresents an error when a global URI handling function was used in a wrong way\nURL\n\tRepresents an object providing static methods used for creating object URLs\nURLPattern\n\tRepresents a URL pattern\nURLSearchParams\n\tRepresents a collection of key/value pairs\nWeakMap\n\tRepresents a collection of key/value pairs in which the keys are weakly referenced\nWeakSet\n\tRepresents a collection of objects in which each object may occur only once\nWebAssembly\n\tProvides access to WebAssembly\nNext.js Specific Polyfills\nAsyncLocalStorage\nEnvironment Variables\n\nYou can use process.env to access Environment Variables for both next dev and next build.\n\nUnsupported APIs\n\nThe Edge Runtime has some restrictions including:\n\nNative Node.js APIs are not supported. For example, you can't read or write to the filesystem.\nnode_modules can be used, as long as they implement ES Modules and do not use native Node.js APIs.\nCalling require directly is not allowed. Use ES Modules instead.\n\nThe following JavaScript language features are disabled, and will not work:\n\nAPI\tDescription\neval\n\tEvaluates JavaScript code represented as a string\nnew Function(evalString)\n\tCreates a new function with the code provided as an argument\nWebAssembly.compile\n\tCompiles a WebAssembly module from a buffer source\nWebAssembly.instantiate\n\tCompiles and instantiates a WebAssembly module from a buffer source\n\nIn rare cases, your code could contain (or import) some dynamic code evaluation statements which can not be reached at runtime and which can not be removed by treeshaking. You can relax the check to allow specific files with your Middleware configuration:\n\nmiddleware.ts\nexport const config = {\n  unstable_allowDynamic: [\n    // allows a single file\n    '/lib/utilities.js',\n    // use a glob to allow anything in the function-bind 3rd party module\n    '/node_modules/function-bind/**',\n  ],\n}\n\nunstable_allowDynamic is a glob\n, or an array of globs, ignoring dynamic code evaluation for specific files. The globs are relative to your application root folder.\n\nBe warned that if these statements are executed on the Edge, they will throw and cause a runtime error."
  },
  {
    "title": "Building Your Application: Routing | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing",
    "html": "Routing\n\nThe Pages Router has a file-system based router built on concepts of pages. When a file is added to the pages directory it's automatically available as a route. Learn more about routing in the Pages Router:"
  },
  {
    "title": "next.config.js Options: webpack | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/webpack",
    "html": "Custom Webpack Config\n\nGood to know: changes to webpack config are not covered by semver so proceed at your own risk\n\nBefore continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case:\n\nCSS imports\nCSS modules\nSass/SCSS imports\nSass/SCSS modules\n\nSome commonly asked for features are available as plugins:\n\n@next/mdx\n@next/bundle-analyzer\n\nIn order to extend our usage of webpack, you can define a function that extends its config inside next.config.js, like so:\n\nnext.config.js\nmodule.exports = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    // Important: return the modified config\n    return config\n  },\n}\n\nThe webpack function is executed three times, twice for the server (nodejs / edge runtime) and once for the client. This allows you to distinguish between client and server configuration using the isServer property.\n\nThe second argument to the webpack function is an object with the following properties:\n\nbuildId: String - The build id, used as a unique identifier between builds\ndev: Boolean - Indicates if the compilation will be done in development\nisServer: Boolean - It's true for server-side compilation, and false for client-side compilation\nnextRuntime: String | undefined - The target runtime for server-side compilation; either \"edge\" or \"nodejs\", it's undefined for client-side compilation.\ndefaultLoaders: Object - Default loaders used internally by Next.js:\nbabel: Object - Default babel-loader configuration\n\nExample usage of defaultLoaders.babel:\n\n// Example config for adding a loader that depends on babel-loader\n// This source was taken from the @next/mdx plugin source:\n// https://github.com/vercel/next.js/tree/canary/packages/next-mdx\nmodule.exports = {\n  webpack: (config, options) => {\n    config.module.rules.push({\n      test: /\\.mdx/,\n      use: [\n        options.defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader',\n          options: pluginOptions.options,\n        },\n      ],\n    })\n \n    return config\n  },\n}\nnextRuntime\n\nNotice that isServer is true when nextRuntime is \"edge\" or \"nodejs\", nextRuntime \"edge\" is currently for middleware and Server Components in edge runtime only."
  },
  {
    "title": "CLI: create-next-app | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/cli/create-next-app",
    "html": "create-next-app\n\nThe create-next-app CLI allow you to create a new Next.js application using the default template or an example\n from a public Github repository. It is the easiest way to get started with Next.js.\n\nBasic usage:\n\nTerminal\nnpx create-next-app@latest [project-name] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShow all available options\n-v or --version\tOutput the version number\n--no-*\tNegate default options. E.g. --no-eslint\n--ts or --typescript\tInitialize as a TypeScript project (default)\n--js or --javascript\tInitialize as a JavaScript project\n--tailwind\tInitialize with Tailwind CSS config (default)\n--eslint\tInitialize with ESLint config\n--app\tInitialize as an App Router project\n--src-dir\tInitialize inside a src/ directory\n--turbo\tEnable Turbopack by default for development\n--import-alias <alias-to-configure>\tSpecify import alias to use (default \"@/*\")\n--empty\tInitialize an empty project\n--use-npm\tExplicitly tell the CLI to bootstrap the application using npm\n--use-pnpm\tExplicitly tell the CLI to bootstrap the application using pnpm\n--use-yarn\tExplicitly tell the CLI to bootstrap the application using Yarn\n--use-bun\tExplicitly tell the CLI to bootstrap the application using Bun\n-e or --example [name] [github-url]\tAn example to bootstrap the app with\n--example-path <path-to-example>\tSpecify the path to the example separately\n--reset-preferences\tExplicitly tell the CLI to reset any stored preferences\n--skip-install\tExplicitly tell the CLI to skip installing packages\n--yes\tUse previous preferences or defaults for all options\nExamples\nWith the default template\n\nTo create a new app using the default template, run the following command in your terminal:\n\nTerminal\nnpx create-next-app@latest\n\nYou will then be asked the following prompts:\n\nTerminal\nWhat is your project named?  my-app\nWould you like to use TypeScript?  No / Yes\nWould you like to use ESLint?  No / Yes\nWould you like to use Tailwind CSS?  No / Yes\nWould you like your code inside a `src/` directory?  No / Yes\nWould you like to use App Router? (recommended)  No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)?  No / Yes\n\nOnce you've answered the prompts, a new project will be created with your chosen configuration.\n\nWith an official Next.js example\n\nTo create a new app using an official Next.js example, use the --example flag. For example:\n\nTerminal\nnpx create-next-app@latest --example [your-project-name] [example-name]\n\nYou can view a list of all available examples along with setup instructions in the Next.js repository\n.\n\nWith any public Github example\n\nTo create a new app using any public Github example, use the --example option with the Github repo's URL. For example:\n\nTerminal\nnpx create-next-app@latest --example [your-project-name] \"https://github.com/.../\""
  },
  {
    "title": "Pages Router: Building Your Application | Next.js",
    "url": "https://nextjs.org/docs/pages/building-your-application",
    "html": "Building Your Application\n\nNext.js provides the building blocks to create flexible, full-stack web applications. The guides in Building Your Application explain how to use these features and how to customize your application's behavior.\n\nThe sections and pages are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your Next.js application. However, you can read them in any order or skip to the pages that apply to your use case.\n\nIf you're new to Next.js, we recommend starting with the Routing, Rendering, Data Fetching and Styling sections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such as Optimizing and Configuring. Finally, once you're ready, checkout the Deploying and Upgrading sections."
  },
  {
    "title": "CLI: next CLI | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/cli/next",
    "html": "next CLI\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nBasic usage:\n\nTerminal\nnpm run next [command] [options]\nReference\n\nThe following options are available:\n\nOptions\tDescription\n-h or --help\tShows all available options\n-v or --version\tOutputs the Next.js version number\nCommands\n\nThe following commands are available:\n\nCommand\tDescription\ndev\tStarts Next.js in development mode with Hot Module Reloading, error reporting, and more.\nbuild\tCreates an optimized production build of your application. Displaying information about each route.\nstart\tStarts Next.js in production mode. The application should be compiled with next build first.\ninfo\tPrints relevant details about the current system which can be used to report Next.js bugs.\nlint\tRuns ESLint for all files in the /src, /app, /pages, /components, and /lib directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.\ntelemetry\tAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nGood to know: Running next without a command is an alias for next dev.\n\nnext dev options\n\nnext dev starts the application in development mode with Hot Module Reloading (HMR), error reporting, and more. The following options are available when running next dev:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory in which to build the application. If not provided, current directory is used.\n--turbo\tStarts development mode using Turbopack\n.\n-p or --port <port>\tSpecify a port number on which to start the application. Default: 3000, env: PORT\n-Hor --hostname <hostname>\tSpecify a hostname on which to start the application. Useful for making the application available for other devices on the network. Default: 0.0.0.0\n--experimental-https\tStarts the server with HTTPS and generates a self-signed certificate.\n--experimental-https-key <path>\tPath to a HTTPS key file.\n--experimental-https-cert <path>\tPath to a HTTPS certificate file.\n--experimental-https-ca <path>\tPath to a HTTPS certificate authority file.\n--experimental-upload-trace <traceUrl>\tReports a subset of the debugging trace to a remote HTTP URL.\nnext build options\n\nnext build creates an optimized production build of your application. The output displays information about each route. For example:\n\nTerminal\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\nSize: The size of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\nFirst Load JS: The size of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are compressed with gzip. The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nThe following options are available for the next build command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n[directory]\tA directory on which to build the application. If not provided, the current directory will be used.\n-d or --debug\tEnables a more verbose build output. With this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\t\n--profile\tEnables production profiling for React\n.\n--no-lint\tDisables linting.\n--no-mangling\tDisables mangling\n. This may affect performance and should only be used for debugging purposes.\n--experimental-app-only\tBuilds only App Router routes.\n--experimental-build-mode [mode]\tUses an experimental build mode. (choices: \"compile\", \"generate\", default: \"default\")\nnext start options\n\nnext start starts the application in production mode. The application should be compiled with next build first.\n\nThe following options are available for the next start command:\n\nOption\tDescription\n-h or --help\tShow all available options.\n[directory]\tA directory on which to start the application. If no directory is provided, the current directory will be used.\n-p or --port <port>\tSpecify a port number on which to start the application. (default: 3000, env: PORT)\n-H or --hostname <hostname>\tSpecify a hostname on which to start the application (default: 0.0.0.0).\n--keepAliveTimeout <keepAliveTimeout>\tSpecify the maximum amount of milliseconds to wait before closing the inactive connections.\nnext info options\n\nnext info prints relevant details about the current system which can be used to report Next.js bugs when opening a GitHub issue\n. This information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm), package versions (next, react, react-dom), and more.\n\nThe output should look like this:\n\nTerminal\nOperating System:\n  Platform: darwin\n  Arch: arm64\n  Version: Darwin Kernel Version 23.6.0\n  Available memory (MB): 65536\n  Available CPU cores: 10\nBinaries:\n  Node: 20.12.0\n  npm: 10.5.0\n  Yarn: 1.22.19\n  pnpm: 9.6.0\nRelevant Packages:\n  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).\n  eslint-config-next: 14.2.5\n  react: 19.0.0-rc\n  react-dom: 19.0.0\n  typescript: 5.5.4\nNext.js Config:\n  output: N/A\n\nThe following options are available for the next info command:\n\nOption\tDescription\n-h or --help\tShow all available options\n--verbose\tCollects additional information for debugging.\nnext lint options\n\nnext lint runs ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.\n\nThe following options are available for the next lint command:\n\nOption\tDescription\n[directory]\tA base directory on which to lint the application. If not provided, the current directory will be used.\n-d, --dir, <dirs...>\tInclude directory, or directories, to run ESLint.\n--file, <files...>\tInclude file, or files, to run ESLint.\n--ext, [exts...]\tSpecify JavaScript file extensions. (default: [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n-c, --config, <config>\tUses this configuration file, overriding all other configuration options.\n--resolve-plugins-relative-to, <rprt>\tSpecify a directory where plugins should be resolved from.\n--strict\tCreates a .eslintrc.json file using the Next.js strict configuration.\n--rulesdir, <rulesdir...>\tUses additional rules from this directory(s).\n--fix\tAutomatically fix linting issues.\n--fix-type <fixType>\tSpecify the types of fixes to apply (e.g., problem, suggestion, layout).\n--ignore-path <path>\tSpecify a file to ignore.\n--no-ignore <path>\tDisables the --ignore-path option.\n--quiet\tReports errors only.\n--max-warnings [maxWarnings]\tSpecify the number of warnings before triggering a non-zero exit code. (default: -1)\n-o, --output-file, <outputFile>\tSpecify a file to write report to.\n-f, --format, <format>\tUses a specific output format.\n--no-inline-config\tPrevents comments from changing config or rules.\n--report-unused-disable-directives-severity <level>\tSpecify severity level for unused eslint-disable directives. (choices: \"error\", \"off\", \"warn\")\n--no-cache\tDisables caching.\n--cache-location, <cacheLocation>\tSpecify a location for cache.\n--cache-strategy, [cacheStrategy]\tSpecify a strategy to use for detecting changed files in the cache. (default: \"metadata\")\n--error-on-unmatched-pattern\tReports errors when any file patterns are unmatched.\n-h, --help\tDisplays this message.\nnext telemetry options\n\nNext.js collects completely anonymous telemetry data about general usage. Participation in this anonymous program is optional, and you can opt-out if you prefer not to share information.\n\nThe following options are available for the next telemetry command:\n\nOption\tDescription\n-h, --help\tShow all available options.\n--enable\tEnables Next.js' telemetry collection.\n--disable\tDisables Next.js' telemetry collection.\n\nLearn more about Telemetry.\n\nExamples\nChanging the default port\n\nBy default, Next.js uses http://localhost:3000 during development and with next start. The default port can be changed with the -p option, like so:\n\nTerminal\nnext dev -p 4000\n\nOr using the PORT environment variable:\n\nTerminal\nPORT=4000 next dev\n\nGood to know: PORT cannot be set in .env as booting up the HTTP server happens before any other code is initialized.\n\nUsing HTTPS during development\n\nFor certain use cases like webhooks or authentication, you can use HTTPS\n to have a secure environment on localhost. Next.js can generate a self-signed certificate with next dev using the --experimental-https flag:\n\nTerminal\nnext dev --experimental-https\n\nYou can also provide a custom certificate and key with --experimental-https-key and --experimental-https-cert. Optionally, you can provide a custom CA certificate with --experimental-https-ca as well.\n\nTerminal\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n\nnext dev --experimental-https is only intended for development and creates a locally trusted certificate with mkcert\n. In production, use properly issued certificates from trusted authorities.\n\nGood to know: When deploying to Vercel, HTTPS is automatically configured\n for your Next.js application.\n\nConfiguring a timeout for downstream proxies\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB), it's important to configure Next's underlying HTTP server with keep-alive timeouts\n that are larger than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass --keepAliveTimeout (in milliseconds) to next start, like so:\n\nTerminal\nnext start --keepAliveTimeout 70000\nPassing Node.js arguments\n\nYou can pass any node arguments\n to next commands. For example:\n\nTerminal\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next"
  },
  {
    "title": "next.config.js Options: webVitalsAttribution | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/webVitalsAttribution",
    "html": "webVitalsAttribution\n\nWhen debugging issues related to Web Vitals, it is often helpful if we can pinpoint the source of the problem. For example, in the case of Cumulative Layout Shift (CLS), we might want to know the first element that shifted when the single largest layout shift occurred. Or, in the case of Largest Contentful Paint (LCP), we might want to identify the element corresponding to the LCP for the page. If the LCP element is an image, knowing the URL of the image resource can help us locate the asset we need to optimize.\n\nPinpointing the biggest contributor to the Web Vitals score, aka attribution\n, allows us to obtain more in-depth information like entries for PerformanceEventTiming\n, PerformanceNavigationTiming\n and PerformanceResourceTiming\n.\n\nAttribution is disabled by default in Next.js but can be enabled per metric by specifying the following in next.config.js.\n\nnext.config.js\nexperimental: {\n  webVitalsAttribution: ['CLS', 'LCP']\n}\n\nValid attribution values are all web-vitals metrics specified in the NextWebVitalsMetric\n type."
  },
  {
    "title": "API Reference: CLI | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/cli",
    "html": "CLI\n\nNext.js comes with two Command Line Interface (CLI) tools:\n\ncreate-next-app: Quickly create a new Next.js application using the default template or an example\n from a public Github repository.\nnext: Run the Next.js development server, build your application, and more."
  },
  {
    "title": "next.config.js Options: useLightningcss | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/useLightningcss",
    "html": "useLightningcss\nThis API is currently experimental and subject to change.\n\nExperimental support for using Lightning CSS\n, a fast CSS bundler and minifier, written in Rust.\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    useLightningcss: true,\n  },\n}\n \nexport default nextConfig\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    useLightningcss: true,\n  },\n}\n \nmodule.exports = nextConfig"
  },
  {
    "title": "next.config.js Options: turbo | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/turbo",
    "html": "turbo\nThis API is currently experimental and subject to change.\n\nTurbopack can be customized to transform different files and change how modules are resolved.\n\nGood to know:\n\nThese features are experimental and will only work with next --turbo.\nTurbopack for Next.js does not require loaders nor loader configuration for built-in functionality. Turbopack has built-in support for css and compiling modern JavaScript, so there's no need for css-loader, postcss-loader, or babel-loader if you're using @babel/preset-env.\nwebpack loaders\n\nIf you need loader support beyond what's built in, many webpack loaders already work with Turbopack. There are currently some limitations:\n\nOnly a core subset of the webpack loader API is implemented. Currently, there is enough coverage for some popular loaders, and we'll expand our API support in the future.\nOnly loaders that return JavaScript code are supported. Loaders that transform files like stylesheets or images are not currently supported.\nOptions passed to webpack loaders must be plain JavaScript primitives, objects, and arrays. For example, it's not possible to pass require()d plugin modules as option values.\n\nTo configure loaders, add the names of the loaders you've installed and any options in next.config.js, mapping file extensions to a list of loaders:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      rules: {\n        '*.svg': {\n          loaders: ['@svgr/webpack'],\n          as: '*.js',\n        },\n      },\n    },\n  },\n}\n\nGood to know: Prior to Next.js version 13.4.4, experimental.turbo.rules was named experimental.turbo.loaders and only accepted file extensions like .mdx instead of *.mdx.\n\nSupported loaders\n\nThe following loaders have been tested to work with Turbopack's webpack loader implementation:\n\nbabel-loader\n@svgr/webpack\nsvg-inline-loader\nyaml-loader\nstring-replace-loader\nraw-loader\nsass-loader\nResolve aliases\n\nThrough next.config.js, Turbopack can be configured to modify module resolution through aliases, similar to webpack's resolve.alias\n configuration.\n\nTo configure resolve aliases, map imported patterns to their new destination in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveAlias: {\n        underscore: 'lodash',\n        mocha: { browser: 'mocha/browser-entry.js' },\n      },\n    },\n  },\n}\n\nThis aliases imports of the underscore package to the lodash package. In other words, import underscore from 'underscore' will load the lodash module instead of underscore.\n\nTurbopack also supports conditional aliasing through this field, similar to Node.js's conditional exports\n. At the moment only the browser condition is supported. In the case above, imports of the mocha module will be aliased to mocha/browser-entry.js when Turbopack targets browser environments.\n\nResolve extensions\n\nThrough next.config.js, Turbopack can be configured to resolve modules with custom extensions, similar to webpack's resolve.extensions\n configuration.\n\nTo configure resolve extensions, use the resolveExtensions field in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveExtensions: [\n        '.mdx',\n        '.tsx',\n        '.ts',\n        '.jsx',\n        '.js',\n        '.mjs',\n        '.json',\n      ],\n    },\n  },\n}\n\nThis overwrites the original resolve extensions with the provided list. Make sure to include the default extensions.\n\nFor more information and guidance for how to migrate your app to Turbopack from webpack, see Turbopack's documentation on webpack compatibility\n.\n\nModule ID strategy\n\nTurbopack currently supports two strategies for assigning module IDs: 'named' and 'deterministic'.\n\n'named' assigns readable module IDs based on the module's path and functionality.\n\n'deterministic' assigns small hashed numeric module IDs, which are mostly consistent between builds and therefore help with long-term caching.\n\nIf not set, Turbopack will use 'named' for development builds and 'deterministic' for production builds.\n\nTo configure the module IDs strategy, use the moduleIdStrategy field in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbo: {\n      moduleIdStrategy: 'deterministic',\n    },\n  },\n}"
  },
  {
    "title": "next.config.js Options: urlImports | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/urlImports",
    "html": "urlImports\nThis API is currently experimental and subject to change.\n\nURL imports are an experimental feature that allows you to import modules directly from external servers (instead of from the local disk).\n\nWarning: Only use domains that you trust to download and execute on your machine. Please exercise discretion, and caution until the feature is flagged as stable.\n\nTo opt-in, add the allowed URL prefixes inside next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],\n  },\n}\n\nThen, you can import modules directly from URLs:\n\nimport { a, b, c } from 'https://example.com/assets/some/module.js'\n\nURL Imports can be used everywhere normal package imports can be used.\n\nSecurity Model\n\nThis feature is being designed with security as the top priority. To start, we added an experimental flag forcing you to explicitly allow the domains you accept URL imports from. We're working to take this further by limiting URL imports to execute in the browser sandbox using the Edge Runtime.\n\nLockfile\n\nWhen using URL imports, Next.js will create a next.lock directory containing a lockfile and fetched assets. This directory must be committed to Git, not ignored by .gitignore.\n\nWhen running next dev, Next.js will download and add all newly discovered URL Imports to your lockfile\nWhen running next build, Next.js will use only the lockfile to build the application for production\n\nTypically, no network requests are needed and any outdated lockfile will cause the build to fail. One exception is resources that respond with Cache-Control: no-cache. These resources will have a no-cache entry in the lockfile and will always be fetched from the network on each build.\n\nExamples\nSkypack\nimport confetti from 'https://cdn.skypack.dev/canvas-confetti'\nimport { useEffect } from 'react'\n \nexport default () => {\n  useEffect(() => {\n    confetti()\n  })\n  return <p>Hello</p>\n}\nStatic Image Imports\nimport Image from 'next/image'\nimport logo from 'https://example.com/assets/logo.png'\n \nexport default () => (\n  <div>\n    <Image src={logo} placeholder=\"blur\" />\n  </div>\n)\nURLs in CSS\n.className {\n  background: url('https://example.com/assets/hero.jpg');\n}\nAsset Imports\nconst logo = new URL('https://example.com/assets/file.txt', import.meta.url)\n \nconsole.log(logo.pathname)\n \n// prints \"/_next/static/media/file.a9727b5d.txt\""
  },
  {
    "title": "next.config.js Options: swrDelta | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/swrDelta",
    "html": "swrDelta\n\nYou can specify a custom stale-while-revalidate period for CDNs to consume in the Cache-Control header for ISR enabled pages.\n\nOpen next.config.js and add the swrDelta config:\n\nnext.config.js\nmodule.exports = {\n  // one year in seconds\n  swrDelta: 31536000,\n}\n\nNow instead of an empty stale-while-revalidate period being provided in the Cache-Control header, the custom period will be included."
  },
  {
    "title": "next.config.js Options: transpilePackages | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/transpilePackages",
    "html": "transpilePackages\n\nNext.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (node_modules). This replaces the next-transpile-modules package.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['package-name'],\n}\n \nmodule.exports = nextConfig\nVersion History\nVersion\tChanges\nv13.0.0\ttranspilePackages added."
  },
  {
    "title": "next.config.js Options: trailingSlash | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/trailingSlash",
    "html": "trailingSlash\n\nBy default Next.js will redirect urls with trailing slashes to their counterpart without a trailing slash. For example /about/ will redirect to /about. You can configure this behavior to act the opposite way, where urls without trailing slashes are redirected to their counterparts with trailing slashes.\n\nOpen next.config.js and add the trailingSlash config:\n\nnext.config.js\nmodule.exports = {\n  trailingSlash: true,\n}\n\nWith this option set, urls like /about will redirect to /about/.\n\nWhen used with output: \"export\" configuration, the /about page will output /about/index.html (instead of the default /about.html).\n\nVersion History\nVersion\tChanges\nv9.5.0\ttrailingSlash added."
  },
  {
    "title": "next.config.js Options: typescript | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/typescript",
    "html": "typescript\n\nNext.js fails your production build (next build) when TypeScript errors are present in your project.\n\nIf you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.\n\nIf disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.\n\nOpen next.config.js and enable the ignoreBuildErrors option in the typescript config:\n\nnext.config.js\nmodule.exports = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}"
  },
  {
    "title": "next.config.js Options: typedRoutes | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/typedRoutes",
    "html": "typedRoutes\nThis API is currently experimental and subject to change.\n\nExperimental support for statically typed links. This feature requires using the App Router as well as TypeScript in your project.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n \nmodule.exports = nextConfig"
  },
  {
    "title": "next.config.js Options: staleTimes | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/staleTimes",
    "html": "staleTimes\nThis API is currently experimental and subject to change.\n\nstaleTimes is an experimental feature that enables caching of page segments in the client-side router cache.\n\nYou can enable this experimental feature and provide custom revalidation times by setting the experimental staleTimes flag:\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    staleTimes: {\n      dynamic: 30,\n      static: 180,\n    },\n  },\n}\n \nmodule.exports = nextConfig\n\nThe static and dynamic properties correspond with the time period (in seconds) based on different types of link prefetching.\n\nThe dynamic property is used when the page is neither statically generated nor fully prefetched (i.e., with prefetch=).\nDefault: 0 seconds (not cached)\nThe static property is used for statically generated pages, or when the prefetch prop on Link is set to true, or when calling router.prefetch.\nDefault: 5 minutes\n\nGood to know:\n\nLoading boundaries are considered reusable for the static period defined in this configuration.\nThis doesn't affect partial rendering, meaning shared layouts won't automatically be refetched on every navigation, only the page segment that changes.\nThis doesn't change back/forward caching behavior to prevent layout shift and to prevent losing the browser scroll position.\n\nYou can learn more about the Client Router Cache here.\n\nVersion History\nVersion\tChanges\nv15.0.0\tThe dynamic staleTime default changed from 30s to 0s\nv14.2.0\texperimental staleTimes introduced"
  },
  {
    "title": "next.config.js Options: serverExternalPackages | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverExternalPackages",
    "html": "serverExternalPackages\n\nDependencies used inside Server Components and Route Handlers will automatically be bundled by Next.js.\n\nIf a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.js require.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverExternalPackages: ['@acme/ui'],\n}\n \nmodule.exports = nextConfig\n\nNext.js includes a short list of popular packages\n that currently are working on compatibility and automatically opt-ed out:\n\n@appsignal/nodejs\n@aws-sdk/client-s3\n@aws-sdk/s3-presigned-post\n@blockfrost/blockfrost-js\n@highlight-run/node\n@jpg-store/lucid-cardano\n@libsql/client\n@mikro-orm/core\n@mikro-orm/knex\n@node-rs/argon2\n@node-rs/bcrypt\n@prisma/client\n@react-pdf/renderer\n@sentry/profiling-node\n@swc/core\nargon2\nautoprefixer\naws-crt\nbcrypt\nbetter-sqlite3\ncanvas\ncpu-features\ncypress\ndd-trace\neslint\nexpress\nfirebase-admin\nisolated-vm\njest\njsdom\nkeyv\nlibsql\nmdx-bundler\nmongodb\nmongoose\nnext-mdx-remote\nnext-seo\nnode-cron\nnode-pty\nnode-web-audio-api\noslo\npg\nplaywright\nplaywright-core\npostcss\nprettier\nprisma\npuppeteer-core\npuppeteer\nrimraf\nsharp\nshiki\nsqlite3\nts-node\nts-morph\ntypescript\nvscode-oniguruma\nwebpack\nwebsocket\nzeromq\nVersion\tChanges\nv15.0.0\tMoved from experimental to stable. Renamed from serverComponentsExternalPackages to serverExternalPackages"
  },
  {
    "title": "next.config.js Options: rewrites | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/rewrites",
    "html": "rewrites\n\nRewrites allow you to map an incoming request path to a different destination path.\n\nRewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast, redirects will reroute to a new page and show the URL changes.\n\nTo use rewrites you can use the rewrites key in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n      },\n    ]\n  },\n}\n\nRewrites are applied to client-side routing, a <Link href=\"/about\"> will have the rewrite applied in the above example.\n\nrewrites is an async function that expects to return either an array or an object of arrays (see below) holding objects with source and destination properties:\n\nsource: String - is the incoming request path pattern.\ndestination: String is the path you want to route to.\nbasePath: false or undefined - if false the basePath won't be included when matching, can be used for external rewrites only.\nlocale: false or undefined - whether the locale should not be included when matching.\nhas is an array of has objects with the type, key and value properties.\nmissing is an array of missing objects with the type, key and value properties.\n\nWhen the rewrites function returns an array, rewrites are applied after checking the filesystem (pages and /public files) and before dynamic routes. When the rewrites function returns an object of arrays with a specific shape, this behavior can be changed and more finely controlled, as of v10.1 of Next.js:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return {\n      beforeFiles: [\n        // These rewrites are checked after headers/redirects\n        // and before all files including _next/public files which\n        // allows overriding page files\n        {\n          source: '/some-page',\n          destination: '/somewhere-else',\n          has: [{ type: 'query', key: 'overrideMe' }],\n        },\n      ],\n      afterFiles: [\n        // These rewrites are checked after pages/public files\n        // are checked but before dynamic routes\n        {\n          source: '/non-existent',\n          destination: '/somewhere-else',\n        },\n      ],\n      fallback: [\n        // These rewrites are checked after both pages/public files\n        // and dynamic routes are checked\n        {\n          source: '/:path*',\n          destination: `https://my-old-site.com/:path*`,\n        },\n      ],\n    }\n  },\n}\n\nGood to know: rewrites in beforeFiles do not check the filesystem/dynamic routes immediately after matching a source, they continue until all beforeFiles have been checked.\n\nThe order Next.js routes are checked is:\n\nheaders are checked/applied\nredirects are checked/applied\nbeforeFiles rewrites are checked/applied\nstatic files from the public directory, _next/static files, and non-dynamic pages are checked/served\nafterFiles rewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match\nfallback rewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you use fallback: true/'blocking' in getStaticPaths, the fallback rewrites defined in your next.config.js will not be run.\nRewrite parameters\n\nWhen using parameters in a rewrite the parameters will be passed in the query by default when none of the parameters are used in the destination.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-about/:path*',\n        destination: '/about', // The :path parameter isn't used here so will be automatically passed in the query\n      },\n    ]\n  },\n}\n\nIf a parameter is used in the destination none of the parameters will be automatically passed in the query.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/docs/:path*',\n        destination: '/:path*', // The :path parameter is used here so will not be automatically passed in the query\n      },\n    ]\n  },\n}\n\nYou can still pass the parameters manually in the query if one is already used in the destination by specifying the query in the destination.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/:first/:second',\n        destination: '/:first?second=:second',\n        // Since the :first parameter is used in the destination the :second parameter\n        // will not automatically be added in the query although we can manually add it\n        // as shown above\n      },\n    ]\n  },\n}\n\nGood to know: Static pages from Automatic Static Optimization or prerendering params from rewrites will be parsed on the client after hydration and provided in the query.\n\nPath Matching\n\nPath matches are allowed, for example /blog/:slug will match /blog/hello-world (no nested paths):\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\nWildcard Path Matching\n\nTo match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\nRegex Path Matching\n\nTo match a regex path you can wrap the regex in parenthesis after a parameter, for example /blog/:slug(\\\\d{1,}) will match /blog/123 but not /blog/abc:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-blog/:post(\\\\d{1,})',\n        destination: '/blog/:post', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n\nThe following characters (, ), {, }, [, ], |, \\, ^, ., :, *, +, -, ?, $ are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n      },\n    ]\n  },\n}\nHeader, Cookie, and Query Matching\n\nTo only match a rewrite when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the rewrite to be applied.\n\nhas and missing items can have the following fields:\n\ntype: String - must be either header, cookie, host, or query.\nkey: String - the key from the selected type to match against.\nvalue: String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName.\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      // if the header `x-rewrite-me` is present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the header `x-rewrite-me` is not present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this rewrite will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        destination: '/:path*/home',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        destination: '/another-page',\n      },\n    ]\n  },\n}\nRewriting to an external URL\nExamples\n\nRewrites allow you to rewrite to an external url. This is especially useful for incrementally adopting Next.js. The following is an example rewrite for redirecting the /blog route of your main app to an external site.\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog',\n        destination: 'https://example.com/blog',\n      },\n      {\n        source: '/blog/:slug',\n        destination: 'https://example.com/blog/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n\nIf you're using trailingSlash: true, you also need to insert a trailing slash in the source parameter. If the destination server is also expecting a trailing slash it should be included in the destination parameter as well.\n\nnext.config.js\nmodule.exports = {\n  trailingSlash: true,\n  async rewrites() {\n    return [\n      {\n        source: '/blog/',\n        destination: 'https://example.com/blog/',\n      },\n      {\n        source: '/blog/:path*/',\n        destination: 'https://example.com/blog/:path*/',\n      },\n    ]\n  },\n}\nIncremental adoption of Next.js\n\nYou can also have Next.js fall back to proxying to an existing website after checking all Next.js routes.\n\nThis way you don't have to change the rewrites configuration when migrating more pages to Next.js\n\nnext.config.js\nmodule.exports = {\n  async rewrites() {\n    return {\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,\n        },\n      ],\n    }\n  },\n}\nRewrites with basePath support\n\nWhen leveraging basePath support with rewrites each source and destination is automatically prefixed with the basePath unless you add basePath: false to the rewrite:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n \n  async rewrites() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n      },\n      {\n        // does not add /docs to /without-basePath since basePath: false is set\n        // Note: this can not be used for internal rewrites e.g. `destination: '/another'`\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n      },\n    ]\n  },\n}\nRewrites with i18n support\n\nWhen leveraging i18n support with rewrites each source and destination is automatically prefixed to handle the configured locales unless you add locale: false to the rewrite. If locale: false is used you must prefix the source and destination with a locale for it to be matched correctly.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n \n  async rewrites() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n      },\n      {\n        // it's possible to match all locales even when locale: false is set\n        source: '/:locale/api-alias/:path*',\n        destination: '/api/:path*',\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n      },\n    ]\n  },\n}\nVersion History\nVersion\tChanges\nv13.3.0\tmissing added.\nv10.2.0\thas added.\nv9.5.0\tHeaders added."
  },
  {
    "title": "next.config.js Options: serverActions | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverActions",
    "html": "serverActions\n\nOptions for configuring Server Actions behavior in your Next.js application.\n\nallowedOrigins\n\nA list of extra safe origin domains from which Server Actions can be invoked. Next.js compares the origin of a Server Action request with the host domain, ensuring they match to prevent CSRF attacks. If not provided, only the same origin is allowed.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\n \nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\nbodySizeLimit\n\nBy default, the maximum size of the request body sent to a Server Action is 1MB, to prevent the consumption of excessive server resources in parsing large amounts of data, as well as potential DDoS attacks.\n\nHowever, you can configure this limit using the serverActions.bodySizeLimit option. It can take the number of bytes or any string format supported by bytes, for example 1000, '500kb' or '3mb'.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\n \nmodule.exports = {\n  experimental: {\n    serverActions: {\n      bodySizeLimit: '2mb',\n    },\n  },\n}\nEnabling Server Actions (v13)\n\nServer Actions became a stable feature in Next.js 14, and are enabled by default. However, if you are using an earlier version of Next.js, you can enable them by setting experimental.serverActions to true.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst config = {\n  experimental: {\n    serverActions: true,\n  },\n}\n \nmodule.exports = config"
  },
  {
    "title": "next.config.js Options: serverComponentsHmrCache | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/serverComponentsHmrCache",
    "html": "serverComponentsHmrCache\nThis API is currently part of a Release Candidate and not yet available in a stable version.\n\nThe experimental serverComponentsHmrCache option allows you to cache fetch responses in Server Components across Hot Module Replacement (HMR) refreshes in local development. This results in faster responses and reduced costs for billed API calls.\n\nBy default, the HMR cache applies to all fetch requests, including those with the cache: 'no-store' option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads.\n\nYou can disable the HMR cache by setting serverComponentsHmrCache to false in your next.config.js file:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    serverComponentsHmrCache: false, // defaults to true\n  },\n}\n \nexport default nextConfig\n\nGood to know: For better observability, we recommend using the logging.fetches option which logs fetch cache hits and misses in the console during development."
  },
  {
    "title": "next.config.js Options: reactStrictMode | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/reactStrictMode",
    "html": "reactStrictMode\n\nGood to know: Since Next.js 13.4, Strict Mode is true by default with app router, so the above configuration is only necessary for pages. You can still disable Strict Mode by setting reactStrictMode: false.\n\nSuggested: We strongly suggest you enable Strict Mode in your Next.js application to better prepare your application for the future of React.\n\nReact's Strict Mode\n is a development mode only feature for highlighting potential problems in an application. It helps to identify unsafe lifecycles, legacy API usage, and a number of other features.\n\nThe Next.js runtime is Strict Mode-compliant. To opt-in to Strict Mode, configure the following option in your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  reactStrictMode: true,\n}\n\nIf you or your team are not ready to use Strict Mode in your entire application, that's OK! You can incrementally migrate on a page-by-page basis using <React.StrictMode>."
  },
  {
    "title": "next.config.js Options: redirects | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/redirects",
    "html": "redirects\n\nRedirects allow you to redirect an incoming request path to a different destination path.\n\nTo use redirects you can use the redirects key in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ]\n  },\n}\n\nredirects is an async function that expects an array to be returned holding objects with source, destination, and permanent properties:\n\nsource is the incoming request path pattern.\ndestination is the path you want to route to.\npermanent true or false - if true will use the 308 status code which instructs clients/search engines to cache the redirect forever, if false will use the 307 status code which is temporary and is not cached.\n\nWhy does Next.js use 307 and 308? Traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, but many browsers changed the request method of the redirect to GET, regardless of the original method. For example, if the browser made a request to POST /v1/users which returned status code 302 with location /v2/users, the subsequent request might be GET /v2/users instead of the expected POST /v2/users. Next.js uses the 307 temporary redirect, and 308 permanent redirect status codes to explicitly preserve the request method used.\n\nbasePath: false or undefined - if false the basePath won't be included when matching, can be used for external redirects only.\nlocale: false or undefined - whether the locale should not be included when matching.\nhas is an array of has objects with the type, key and value properties.\nmissing is an array of missing objects with the type, key and value properties.\n\nRedirects are checked before the filesystem which includes pages and /public files.\n\nWhen using the Pages Router, redirects are not applied to client-side routing (Link, router.push) unless Middleware is present and matches the path.\n\nWhen a redirect is applied, any query values provided in the request will be passed through to the redirect destination. For example, see the following redirect configuration:\n\n{\n  source: '/old-blog/:path*',\n  destination: '/blog/:path*',\n  permanent: false\n}\n\nWhen /old-blog/post-1?hello=world is requested, the client will be redirected to /blog/post-1?hello=world.\n\nPath Matching\n\nPath matches are allowed, for example /old-blog/:slug will match /old-blog/hello-world (no nested paths):\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/old-blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\nWildcard Path Matching\n\nTo match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\nRegex Path Matching\n\nTo match a regex path you can wrap the regex in parentheses after a parameter, for example /post/:slug(\\\\d{1,}) will match /post/123 but not /post/abc:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/post/:slug(\\\\d{1,})',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: false,\n      },\n    ]\n  },\n}\n\nThe following characters (, ), {, }, :, *, +, ? are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n        permanent: false,\n      },\n    ]\n  },\n}\nHeader, Cookie, and Query Matching\n\nTo only match a redirect when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the redirect to be applied.\n\nhas and missing items can have the following fields:\n\ntype: String - must be either header, cookie, host, or query.\nkey: String - the key from the selected type to match against.\nvalue: String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName.\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      // if the header `x-redirect-me` is present,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'header',\n            key: 'x-redirect-me',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the header `x-dont-redirect` is present,\n      // this redirect will NOT be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-do-not-redirect',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this redirect will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        permanent: false,\n        destination: '/another/:path*',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this redirect will be applied\n      {\n        source: '/',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        permanent: false,\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n    ]\n  },\n}\nRedirects with basePath support\n\nWhen leveraging basePath support with redirects each source and destination is automatically prefixed with the basePath unless you add basePath: false to the redirect:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n \n  async redirects() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n        permanent: false,\n      },\n      {\n        // does not add /docs since basePath: false is set\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n        permanent: false,\n      },\n    ]\n  },\n}\nRedirects with i18n support\n\nWhen leveraging i18n support with redirects each source and destination is automatically prefixed to handle the configured locales unless you add locale: false to the redirect. If locale: false is used you must prefix the source and destination with a locale for it to be matched correctly.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n \n  async redirects() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n        permanent: false,\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n        permanent: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n        permanent: false,\n      },\n      // it's possible to match all locales even when locale: false is set\n      {\n        source: '/:locale/page',\n        destination: '/en/newpage',\n        permanent: false,\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n        permanent: false,\n      },\n    ]\n  },\n}\n\nIn some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both. To to ensure IE11 compatibility, a Refresh header is automatically added for the 308 status code.\n\nOther Redirects\nInside API Routes and Route Handlers, you can redirect based on the incoming request.\nInside getStaticProps and getServerSideProps, you can redirect specific pages at request-time.\nVersion History\nVersion\tChanges\nv13.3.0\tmissing added.\nv10.2.0\thas added.\nv9.5.0\tredirects added."
  },
  {
    "title": "next.config.js Options: reactCompiler | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/reactCompiler",
    "html": "reactCompiler\nThis API is currently part of a Release Candidate and not yet available in a stable version.\n\nNext.js 15 RC introduced support for the React Compiler\n. The compiler improves performance by automatically optimizing component rendering. This reduces the amount of manual memoization developers have to do through APIs such as useMemo and useCallback.\n\nTo use it, upgrade to Next.js 15, install the babel-plugin-react-compiler:\n\nTerminal\nnpm install babel-plugin-react-compiler\n\nThen, add experimental.reactCompiler option in next.config.js:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    reactCompiler: true,\n  },\n}\n \nexport default nextConfig\n\nOptionally, you can configure the compiler to run in \"opt-in\" mode as follows:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    reactCompiler: {\n      compilationMode: 'annotation',\n    },\n  },\n}\n \nexport default nextConfig\n\nNote: The React Compiler is currently only possible to use in Next.js through a Babel plugin. This will opt-out of Next.js's default Rust-based compiler, which could result in slower build times. We are working on support for the React Compiler as our default compiler.\n\nLearn more about the React Compiler\n, and the available Next.js config options\n."
  },
  {
    "title": "next.config.js Options: reactMaxHeadersLength | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/reactMaxHeadersLength",
    "html": "reactMaxHeadersLength\n\nDuring static rendering, React can emit headers that can be added to the response. These can be used to improve performance by allowing the browser to preload resources like fonts, scripts, and stylesheets. The default value is 6000, but you can override this value by configuring the reactMaxHeadersLength option in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  reactMaxHeadersLength: 1000,\n}\n\nGood to know: This option is only available in App Router.\n\nDepending on the type of proxy between the browser and the server, the headers can be truncated. For example, if you are using a reverse proxy that doesn't support long headers, you should set a lower value to ensure that the headers are not truncated."
  },
  {
    "title": "next.config.js Options: productionBrowserSourceMaps | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/productionBrowserSourceMaps",
    "html": "productionBrowserSourceMaps\n\nSource Maps are enabled by default during development. During production builds, they are disabled to prevent you leaking your source on the client, unless you specifically opt-in with the configuration flag.\n\nNext.js provides a configuration flag you can use to enable browser source map generation during the production build:\n\nnext.config.js\nmodule.exports = {\n  productionBrowserSourceMaps: true,\n}\n\nWhen the productionBrowserSourceMaps option is enabled, the source maps will be output in the same directory as the JavaScript files. Next.js will automatically serve these files when requested.\n\nAdding source maps can increase next build time\nIncreases memory usage during next build"
  },
  {
    "title": "next.config.js Options: ppr | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/ppr",
    "html": "ppr\nThis API is currently experimental and subject to change.\n\nPartial Prerendering (PPR) enables you to combine static and dynamic components together in the same route. Learn more about PPR.\n\nUsing Partial Prerendering\nIncremental Adoption (Version 15)\n\nIn Next.js 15, you can incrementally adopt Partial Prerendering in layouts and pages by setting the ppr option in next.config.js to incremental, and exporting the experimental_ppr route config option at the top of the file:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n \nexport default nextConfig\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent, Fallback } from \"@/app/ui\"\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return {\n     <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n     </>\n  };\n}\n\nGood to know:\n\nRoutes that don't have experimental_ppr will default to false and will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route.\nexperimental_ppr will apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route.\nTo disable PPR for children segments, you can set experimental_ppr to false in the child segment.\nEnabling PPR (Version 14)\n\nFor version 14, you can enable it by adding the ppr option to your next.config.js file. This will apply to all routes in your application:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: true,\n  },\n}\n \nexport default nextConfig\nVersion\tChanges\nv15.0.0\tincremental value introduced\nv14.0.0\texperimental ppr introduced"
  },
  {
    "title": "next.config.js Options: pageExtensions | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/pageExtensions",
    "html": "pageExtensions\n\nBy default, Next.js accepts files with the following extensions: .tsx, .ts, .jsx, .js. This can be modified to allow other extensions like markdown (.md, .mdx).\n\nnext.config.js\nconst withMDX = require('@next/mdx')()\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],\n}\n \nmodule.exports = withMDX(nextConfig)"
  },
  {
    "title": "next.config.js Options: poweredByHeader | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/poweredByHeader",
    "html": "poweredByHeader\n\nBy default Next.js will add the x-powered-by header. To opt-out of it, open next.config.js and disable the poweredByHeader config:\n\nnext.config.js\nmodule.exports = {\n  poweredByHeader: false,\n}"
  },
  {
    "title": "next.config.js Options: output | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/output",
    "html": "output\n\nDuring a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application.\n\nThis feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package's dependencies installed to run next start. Starting with Next.js 12, you can leverage Output File Tracing in the .next/ directory to only include the necessary files.\n\nFurthermore, this removes the need for the deprecated serverless target which can cause various issues and also creates unnecessary duplication.\n\nHow it Works\n\nDuring next build, Next.js will use @vercel/nft\n to statically analyze import, require, and fs usage to determine all files that a page might load.\n\nNext.js' production server is also traced for its needed files and output at .next/next-server.js.nft.json which can be leveraged in production.\n\nTo leverage the .nft.json files emitted to the .next output directory, you can read the list of files in each trace that are relative to the .nft.json file and then copy them to your deployment location.\n\nAutomatically Copying Traced Files\n\nNext.js can automatically create a standalone folder that copies only the necessary files for a production deployment including select files in node_modules.\n\nTo leverage this automatic copying you can enable it in your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  output: 'standalone',\n}\n\nThis will create a folder at .next/standalone which can then be deployed on its own without installing node_modules.\n\nAdditionally, a minimal server.js file is also output which can be used instead of next start. This minimal server does not copy the public or .next/static folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the standalone/public and standalone/.next/static folders manually, after which server.js file will serve these automatically.\n\nGood to know:\n\nIf your project needs to listen to a specific port or hostname, you can define PORT or HOSTNAME environment variables before running server.js. For example, run PORT=8080 HOSTNAME=0.0.0.0 node server.js to start the server on http://0.0.0.0:8080.\nCaveats\nWhile tracing in monorepo setups, the project directory is used for tracing by default. For next build packages/web-app, packages/web-app would be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can set outputFileTracingRoot in your next.config.js.\npackages/web-app/next.config.js\nmodule.exports = {\n  // this includes files from the monorepo base two directories up\n  outputFileTracingRoot: path.join(__dirname, '../../'),\n}\nThere are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverage outputFileTracingExcludes and outputFileTracingIncludes respectively in next.config.js. Each config accepts an object with minimatch globs\n for the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace.\nnext.config.js\nmodule.exports = {\n  outputFileTracingExcludes: {\n    '/api/hello': ['./un-necessary-folder/**/*'],\n  },\n  outputFileTracingIncludes: {\n    '/api/another': ['./necessary-folder/**/*'],\n    '/api/login/\\\\[\\\\[\\\\.\\\\.\\\\.slug\\\\]\\\\]': [\n      './node_modules/aws-crt/dist/bin/**/*',\n    ],\n  },\n}\n\nNote: The key of outputFileTracingIncludes/outputFileTracingExcludes is a glob\n, so special characters need to be escaped.\n\nCurrently, Next.js does not do anything with the emitted .nft.json files. The files must be read by your deployment platform, for example Vercel\n, to create a minimal deployment. In a future release, a new command is planned to utilize these .nft.json files.\nExperimental turbotrace\n\nTracing dependencies can be slow because it requires very complex computations and analysis. We created turbotrace in Rust as a faster and smarter alternative to the JavaScript implementation.\n\nTo enable it, you can add the following configuration to your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    turbotrace: {\n      // control the log level of the turbotrace, default is `error`\n      logLevel?:\n      | 'bug'\n      | 'fatal'\n      | 'error'\n      | 'warning'\n      | 'hint'\n      | 'note'\n      | 'suggestions'\n      | 'info',\n      // control if the log of turbotrace should contain the details of the analysis, default is `false`\n      logDetail?: boolean\n      // show all log messages without limit\n      // turbotrace only show 1 log message for each categories by default\n      logAll?: boolean\n      // control the context directory of the turbotrace\n      // files outside of the context directory will not be traced\n      // set the `outputFileTracingRoot` has the same effect\n      // if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used\n      contextDirectory?: string\n      // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.\n      // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')\n      processCwd?: string\n      // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.\n      memoryLimit?: number\n    },\n  },\n}"
  },
  {
    "title": "next.config.js Options: onDemandEntries | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/onDemandEntries",
    "html": "onDemandEntries\n\nNext.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development.\n\nTo change the defaults, open next.config.js and add the onDemandEntries config:\n\nnext.config.js\nmodule.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n  },\n}"
  },
  {
    "title": "next.config.js Options: optimizePackageImports | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/optimizePackageImports",
    "html": "optimizePackageImports\n\nSome packages can export hundreds or thousands of modules, which can cause performance issues in development and production.\n\nAdding a package to experimental.optimizePackageImports will only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports.\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    optimizePackageImports: ['package-name'],\n  },\n}\n\nThe following libraries are optimized by default:\n\nlucide-react\ndate-fns\nlodash-es\nramda\nantd\nreact-bootstrap\nahooks\n@ant-design/icons\n@headlessui/react\n@headlessui-float/react\n@heroicons/react/20/solid\n@heroicons/react/24/solid\n@heroicons/react/24/outline\n@visx/visx\n@tremor/react\nrxjs\n@mui/material\n@mui/icons-material\nrecharts\nreact-use\n@material-ui/core\n@material-ui/icons\n@tabler/icons-react\nmui-core\nreact-icons/*"
  },
  {
    "title": "next.config.js Options: mdxRs | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/mdxRs",
    "html": "mdxRs\n\nFor experimental use with @next/mdx. Compiles MDX files using the new Rust compiler.\n\nnext.config.js\nconst withMDX = require('@next/mdx')()\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'mdx'],\n  experimental: {\n    mdxRs: true,\n  },\n}\n \nmodule.exports = withMDX(nextConfig)"
  },
  {
    "title": "next.config.js Options: logging | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/logging",
    "html": "logging\n\nYou can configure the logging level and whether the full URL is logged to the console when running Next.js in development mode.\n\nCurrently, logging only applies to data fetching using the fetch API. It does not yet apply to other logs inside of Next.js.\n\nnext.config.js\nmodule.exports = {\n  logging: {\n    fetches: {\n      fullUrl: true,\n    },\n  },\n}\n\nAny fetch requests that are restored from the Server Components HMR cache are not logged by default. However, this can be enabled by setting logging.fetches.hmrRefreshes to true.\n\nnext.config.js\nmodule.exports = {\n  logging: {\n    fetches: {\n      hmrRefreshes: true,\n    },\n  },\n}\n\nIn addition, you can disable the development logging by setting logging to false.\n\nnext.config.js\nmodule.exports = {\n  logging: false,\n}"
  },
  {
    "title": "next.config.js Options: instrumentationHook | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/instrumentationHook",
    "html": "instrumentationHook\nThis API is currently experimental and subject to change.\n\nThe experimental instrumentationHook option allows you to set up instrumentation via the instrumentation file in your Next.js App.\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\nVersion\tChanges\nv13.2.0\tinstrumentationHook introduced as an experimental feature"
  },
  {
    "title": "next.config.js Options: httpAgentOptions | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/httpAgentOptions",
    "html": "httpAgentOptions\n\nIn Node.js versions prior to 18, Next.js automatically polyfills fetch() with undici and enables HTTP Keep-Alive\n by default.\n\nTo disable HTTP Keep-Alive for all fetch() calls on the server-side, open next.config.js and add the httpAgentOptions config:\n\nnext.config.js\nmodule.exports = {\n  httpAgentOptions: {\n    keepAlive: false,\n  },\n}"
  },
  {
    "title": "next.config.js Options: headers | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/headers",
    "html": "headers\n\nHeaders allow you to set custom HTTP headers on the response to an incoming request on a given path.\n\nTo set custom HTTP headers you can use the headers key in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/about',\n        headers: [\n          {\n            key: 'x-custom-header',\n            value: 'my custom header value',\n          },\n          {\n            key: 'x-another-custom-header',\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n\nheaders is an async function that expects an array to be returned holding objects with source and headers properties:\n\nsource is the incoming request path pattern.\nheaders is an array of response header objects, with key and value properties.\nbasePath: false or undefined - if false the basePath won't be included when matching, can be used for external rewrites only.\nlocale: false or undefined - whether the locale should not be included when matching.\nhas is an array of has objects with the type, key and value properties.\nmissing is an array of missing objects with the type, key and value properties.\n\nHeaders are checked before the filesystem which includes pages and /public files.\n\nHeader Overriding Behavior\n\nIf two headers match the same path and set the same header key, the last header key will override the first. Using the below headers, the path /hello will result in the header x-hello being world due to the last header value set being world.\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'there',\n          },\n        ],\n      },\n      {\n        source: '/hello',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\nPath Matching\n\nPath matches are allowed, for example /blog/:slug will match /blog/hello-world (no nested paths):\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\nWildcard Path Matching\n\nTo match a wildcard path you can use * after a parameter, for example /blog/:slug* will match /blog/a/b/c/d/hello-world:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug*',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug*', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug*', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\nRegex Path Matching\n\nTo match a regex path you can wrap the regex in parenthesis after a parameter, for example /blog/:slug(\\\\d{1,}) will match /blog/123 but not /blog/abc:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:post(\\\\d{1,})',\n        headers: [\n          {\n            key: 'x-post',\n            value: ':post',\n          },\n        ],\n      },\n    ]\n  },\n}\n\nThe following characters (, ), {, }, :, *, +, ? are used for regex path matching, so when used in the source as non-special values they must be escaped by adding \\\\ before them:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        headers: [\n          {\n            key: 'x-header',\n            value: 'value',\n          },\n        ],\n      },\n    ]\n  },\n}\nHeader, Cookie, and Query Matching\n\nTo only apply a header when header, cookie, or query values also match the has field or don't match the missing field can be used. Both the source and all has items must match and all missing items must not match for the header to be applied.\n\nhas and missing items can have the following fields:\n\ntype: String - must be either header, cookie, host, or query.\nkey: String - the key from the selected type to match against.\nvalue: String or undefined - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value first-(?<paramName>.*) is used for first-second then second will be usable in the destination with :paramName.\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      // if the header `x-add-header` is present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-add-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the header `x-no-header` is not present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-no-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the source, query, and cookie are matched,\n      // the `x-authorized` header will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // header key/values since value is provided and\n            // doesn't use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-authorized',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, the `x-another-header` will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the host is `example.com`,\n      // this header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n    ]\n  },\n}\nHeaders with basePath support\n\nWhen leveraging basePath support with headers each source is automatically prefixed with the basePath unless you add basePath: false to the header:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n \n  async headers() {\n    return [\n      {\n        source: '/with-basePath', // becomes /docs/with-basePath\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        source: '/without-basePath', // is not modified since basePath: false is set\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n        basePath: false,\n      },\n    ]\n  },\n}\nHeaders with i18n support\n\nWhen leveraging i18n support with headers each source is automatically prefixed to handle the configured locales unless you add locale: false to the header. If locale: false is used you must prefix the source with a locale for it to be matched correctly.\n\nnext.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n \n  async headers() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\nCache-Control\n\nNext.js sets the Cache-Control header of public, max-age=31536000, immutable for truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example, Static Image Imports. You cannot set Cache-Control headers in next.config.js for these assets.\n\nHowever, you can set Cache-Control headers for other responses or data.\n\nLearn more about caching with the App Router.\n\nOptions\nCORS\n\nCross-Origin Resource Sharing (CORS)\n is a security feature that allows you to control which sites can access your resources. You can set the Access-Control-Allow-Origin header to allow a specific origin to access your Route Handlers.\n\nasync headers() {\n    return [\n      {\n        source: \"/api/:path*\",\n        headers: [\n          {\n            key: \"Access-Control-Allow-Origin\",\n            value: \"*\", // Set your origin\n          },\n          {\n            key: \"Access-Control-Allow-Methods\",\n            value: \"GET, POST, PUT, DELETE, OPTIONS\",\n          },\n          {\n            key: \"Access-Control-Allow-Headers\",\n            value: \"Content-Type, Authorization\",\n          },\n        ],\n      },\n    ];\n  },\nX-DNS-Prefetch-Control\n\nThis header\n controls DNS prefetching, allowing browsers to proactively perform domain name resolution on external links, images, CSS, JavaScript, and more. This prefetching is performed in the background, so the DNS\n is more likely to be resolved by the time the referenced items are needed. This reduces latency when the user clicks a link.\n\n{\n  key: 'X-DNS-Prefetch-Control',\n  value: 'on'\n}\nStrict-Transport-Security\n\nThis header\n informs browsers it should only be accessed using HTTPS, instead of using HTTP. Using the configuration below, all present and future subdomains will use HTTPS for a max-age of 2 years. This blocks access to pages or subdomains that can only be served over HTTP.\n\nIf you're deploying to Vercel\n, this header is not necessary as it's automatically added to all deployments unless you declare headers in your next.config.js.\n\n{\n  key: 'Strict-Transport-Security',\n  value: 'max-age=63072000; includeSubDomains; preload'\n}\nX-Frame-Options\n\nThis header\n indicates whether the site should be allowed to be displayed within an iframe. This can prevent against clickjacking attacks.\n\nThis header has been superseded by CSP's frame-ancestors option, which has better support in modern browsers (see Content Security Policy for configuration details).\n\n{\n  key: 'X-Frame-Options',\n  value: 'SAMEORIGIN'\n}\nPermissions-Policy\n\nThis header\n allows you to control which features and APIs can be used in the browser. It was previously named Feature-Policy.\n\n{\n  key: 'Permissions-Policy',\n  value: 'camera=(), microphone=(), geolocation=(), browsing-topics=()'\n}\nX-Content-Type-Options\n\nThis header\n prevents the browser from attempting to guess the type of content if the Content-Type header is not explicitly set. This can prevent XSS exploits for websites that allow users to upload and share files.\n\nFor example, a user trying to download an image, but having it treated as a different Content-Type like an executable, which could be malicious. This header also applies to downloading browser extensions. The only valid value for this header is nosniff.\n\n{\n  key: 'X-Content-Type-Options',\n  value: 'nosniff'\n}\nReferrer-Policy\n\nThis header\n controls how much information the browser includes when navigating from the current website (origin) to another.\n\n{\n  key: 'Referrer-Policy',\n  value: 'origin-when-cross-origin'\n}\nContent-Security-Policy\n\nLearn more about adding a Content Security Policy to your application.\n\nVersion History\nVersion\tChanges\nv13.3.0\tmissing added.\nv10.2.0\thas added.\nv9.5.0\tHeaders added."
  },
  {
    "title": "next.config.js Options: cacheHandler | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/incrementalCacheHandlerPath",
    "html": "Custom Next.js Cache Handler\n\nCaching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. When deploying to Vercel\n, the ISR cache is automatically persisted to durable storage.\n\nWhen self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router.\n\nYou can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application.\n\nnext.config.js\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n\nView an example of a custom cache handler and learn more about implementation.\n\nAPI Reference\n\nThe cache handler can implement the following methods: get, set, and revalidateTag.\n\nget()\nParameter\tType\tDescription\nkey\tstring\tThe key to the cached value.\n\nReturns the cached value or null if not found.\n\nset()\nParameter\tType\tDescription\nkey\tstring\tThe key to store the data under.\ndata\tData or null\tThe data to be cached.\nctx\t{ tags: [] }\tThe cache tags provided.\n\nReturns Promise<void>.\n\nrevalidateTag()\nParameter\tType\tDescription\ntag\tstring\tThe cache tag to revalidate.\n\nReturns Promise<void>. Learn more about revalidating data or the revalidateTag() function.\n\nGood to know:\n\nrevalidatePath is a convenience layer on top of cache tags. Calling revalidatePath will call your revalidateTag function, which you can then choose if you want to tag cache keys based on the path.\nVersion History\nVersion\tChanges\nv14.1.0\tRenamed to cacheHandler and became stable.\nv13.4.0\tincrementalCacheHandlerPath support for revalidateTag.\nv13.4.0\tincrementalCacheHandlerPath support for standalone output.\nv12.2.0\tExperimental incrementalCacheHandlerPath added."
  },
  {
    "title": "next.config.js Options: generateBuildId | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/generateBuildId",
    "html": "generateBuildId\n\nNext.js generates an ID during next build to identify which version of your application is being served. The same build should be used and boot up multiple containers.\n\nIf you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the generateBuildId command in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}"
  },
  {
    "title": "next.config.js Options: images | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/images",
    "html": "images\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure next.config.js with the following:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n\nThis loaderFile must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:\n\nmy/image/loader.js\n'use client'\n \nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nAlternatively, you can use the loader prop to pass the function to each instance of next/image.\n\nGood to know: Customizing the image loader file, which accepts a function, requires using Client Components to serialize the provided function.\n\nTo learn more about configuring the behavior of the built-in Image Optimization API and the Image Component, see Image Configuration Options for available options.\n\nExample Loader Configuration\nAkamai\nAWS CloudFront\nCloudinary\nCloudflare\nContentful\nFastly\nGumlet\nImageEngine\nImgix\nPixelBin\nSanity\nSirv\nSupabase\nThumbor\nAkamai\n// Docs: https://techdocs.akamai.com/ivm/reference/test-images-on-demand\nexport default function akamaiLoader({ src, width, quality }) {\n  return `https://example.com/${src}?imwidth=${width}`\n}\nAWS CloudFront\n// Docs: https://aws.amazon.com/developer/application-security-performance/articles/image-optimization\nexport default function cloudfrontLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\nCloudinary\n// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpg\nexport default function cloudinaryLoader({ src, width, quality }) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://example.com/${params.join(',')}${src}`\n}\nCloudflare\n// Docs: https://developers.cloudflare.com/images/transform-images\nexport default function cloudflareLoader({ src, width, quality }) {\n  const params = [`width=${width}`, `quality=${quality || 75}`, 'format=auto']\n  return `https://example.com/cdn-cgi/image/${params.join(',')}/${src}`\n}\nContentful\n// Docs: https://www.contentful.com/developers/docs/references/images-api/\nexport default function contentfulLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('fm', 'webp')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\nFastly\n// Docs: https://developer.fastly.com/reference/io/\nexport default function fastlyLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('auto', 'webp')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\nGumlet\n// Docs: https://docs.gumlet.com/reference/image-transform-size\nexport default function gumletLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\nImageEngine\n// Docs: https://support.imageengine.io/hc/en-us/articles/360058880672-Directives\nexport default function imageengineLoader({ src, width, quality }) {\n  const compression = 100 - (quality || 50)\n  const params = [`w_${width}`, `cmpr_${compression}`)]\n  return `https://example.com${src}?imgeng=/${params.join('/')`\n}\nImgix\n// Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300\nexport default function imgixLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('auto', params.getAll('auto').join(',') || 'format')\n  params.set('fit', params.get('fit') || 'max')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 50).toString())\n  return url.href\n}\nPixelBin\n// Doc (Resize): https://www.pixelbin.io/docs/transformations/basic/resize/#width-w\n// Doc (Optimise): https://www.pixelbin.io/docs/optimizations/quality/#image-quality-when-delivering\n// Doc (Auto Format Delivery): https://www.pixelbin.io/docs/optimizations/format/#automatic-format-selection-with-f_auto-url-parameter\nexport default function pixelBinLoader({ src, width, quality }) {\n  const name = '<your-cloud-name>'\n  const opt = `t.resize(w:${width})~t.compress(q:${quality || 75})`\n  return `https://cdn.pixelbin.io/v2/${name}/${opt}/${src}?f_auto=true`\n}\nSanity\n// Docs: https://www.sanity.io/docs/image-urls\nexport default function sanityLoader({ src, width, quality }) {\n  const prj = 'zp7mbokg'\n  const dataset = 'production'\n  const url = new URL(`https://cdn.sanity.io/images/${prj}/${dataset}${src}`)\n  url.searchParams.set('auto', 'format')\n  url.searchParams.set('fit', 'max')\n  url.searchParams.set('w', width.toString())\n  if (quality) {\n    url.searchParams.set('q', quality.toString())\n  }\n  return url.href\n}\nSirv\n// Docs: https://sirv.com/help/articles/dynamic-imaging/\nexport default function sirvLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('format', params.getAll('format').join(',') || 'optimal')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 85).toString())\n  return url.href\n}\nSupabase\n// Docs: https://supabase.com/docs/guides/storage/image-transformations#nextjs-loader\nexport default function supabaseLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\nThumbor\n// Docs: https://thumbor.readthedocs.io/en/latest/\nexport default function thumborLoader({ src, width, quality }) {\n  const params = [`${width}x0`, `filters:quality(${quality || 75})`]\n  return `https://example.com${params.join('/')}${src}`\n}"
  },
  {
    "title": "next.config.js Options: generateEtags | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/generateEtags",
    "html": "generateEtags\n\nNext.js will generate etags\n for every page by default. You may want to disable etag generation for HTML pages depending on your cache strategy.\n\nOpen next.config.js and disable the generateEtags option:\n\nnext.config.js\nmodule.exports = {\n  generateEtags: false,\n}"
  },
  {
    "title": "next.config.js Options: exportPathMap | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/exportPathMap",
    "html": "exportPathMap (Deprecated)\n\nThis feature is exclusive to next export and currently deprecated in favor of getStaticPaths with pages or generateStaticParams with app.\n\nExamples\n\nexportPathMap allows you to specify a mapping of request paths to page destinations, to be used during export. Paths defined in exportPathMap will also be available when using next dev.\n\nLet's start with an example, to create a custom exportPathMap for an app with the following pages:\n\npages/index.js\npages/about.js\npages/post.js\n\nOpen next.config.js and add the following exportPathMap config:\n\nnext.config.js\nmodule.exports = {\n  exportPathMap: async function (\n    defaultPathMap,\n    { dev, dir, outDir, distDir, buildId }\n  ) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },\n    }\n  },\n}\n\nGood to know: the query field in exportPathMap cannot be used with automatically statically optimized pages or getStaticProps pages as they are rendered to HTML files at build-time and additional query information cannot be provided during next export.\n\nThe pages will then be exported as HTML files, for example, /about will become /about.html.\n\nexportPathMap is an async function that receives 2 arguments: the first one is defaultPathMap, which is the default map used by Next.js. The second argument is an object with:\n\ndev - true when exportPathMap is being called in development. false when running next export. In development exportPathMap is used to define routes.\ndir - Absolute path to the project directory\noutDir - Absolute path to the out/ directory (configurable with -o). When dev is true the value of outDir will be null.\ndistDir - Absolute path to the .next/ directory (configurable with the distDir config)\nbuildId - The generated build id\n\nThe returned object is a map of pages where the key is the pathname and the value is an object that accepts the following fields:\n\npage: String - the page inside the pages directory to render\nquery: Object - the query object passed to getInitialProps when prerendering. Defaults to {}\n\nThe exported pathname can also be a filename (for example, /readme.md), but you may need to set the Content-Type header to text/html when serving its content if it is different than .html.\n\nAdding a trailing slash\n\nIt is possible to configure Next.js to export pages as index.html files and require trailing slashes, /about becomes /about/index.html and is routable via /about/. This was the default behavior prior to Next.js 9.\n\nTo switch back and add a trailing slash, open next.config.js and enable the trailingSlash config:\n\nnext.config.js\nmodule.exports = {\n  trailingSlash: true,\n}\nCustomizing the output directory\n\nnext export will use out as the default output directory, you can customize this using the -o argument, like so:\n\nTerminal\nnext export -o outdir\n\nWarning: Using exportPathMap is deprecated and is overridden by getStaticPaths inside pages. We don't recommend using them together."
  },
  {
    "title": "next.config.js Options: crossOrigin | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/crossOrigin",
    "html": "crossOrigin\n\nUse the crossOrigin option to add a crossOrigin attribute\n in all <script> tags generated by the next/script component , and define how cross-origin requests should be handled.\n\nnext.config.js\nmodule.exports = {\n  crossOrigin: 'anonymous',\n}\nOptions\n'anonymous': Adds crossOrigin=\"anonymous\"\n attribute.\n'use-credentials': Adds crossOrigin=\"use-credentials\"\n."
  },
  {
    "title": "next.config.js Options: devIndicators | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/devIndicators",
    "html": "devIndicators\n\ndevIndicators allows you to configure the on-screen indicators that give context about the current route you're viewing during development.\n\nTypes\n  devIndicators: {\n    appIsrStatus?: boolean, // defaults to true\n    buildActivity?: boolean, // defaults to true\n    buildActivityPosition?: 'bottom-right'\n    | 'bottom-left'\n    | 'top-right'\n    | 'top-left', // defaults to 'bottom-right'\n  },\nappIsrStatus (Static Indicator)\n\nThis option is available in Next.js canary.\n\nNext.js displays a static indicator in the bottom corner of the screen that signals if a route will be prerendered at build time. This makes it easier to understand whether a route is static or dynamic, and for you to identify if a route opts out of static rendering.\n\nYou can disable the indicator by closing it, or using the config option next.config.js:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  devIndicators: {\n    appIsrStatus: false,\n  },\n}\n \nexport default nextConfig\nbuildActivity (Compilation Indicator)\n\nWhen you edit your code, and Next.js is compiling the application, a compilation indicator appears in the bottom right corner of the page.\n\nGood to know: This indicator is only present in development mode and will not appear when building and running the app in production mode.\n\nIn some cases this indicator can be misplaced on your page, for example, when conflicting with a chat launcher. To change its position, open next.config.js and set the buildActivityPosition in the devIndicators object to bottom-right (default), bottom-left, top-right or top-left:\n\nnext.config.js\nmodule.exports = {\n  devIndicators: {\n    buildActivityPosition: 'bottom-right',\n  },\n}\n\nIn some cases, this indicator might not be useful for you. To remove it, open next.config.js and disable the buildActivity config in devIndicators object:\n\nnext.config.js\nmodule.exports = {\n  devIndicators: {\n    buildActivity: false,\n  },\n}\nTroubleshooting\nStatic route not showing the indicator\n\nIf you expect a route to be static and the indicator is enabled but not showing, it's likely the route has opted out of static rendering.\n\nYou can confirm if a route is static or dynamic by building your application using next build --debug, and checking the output in your terminal. Static (or prerendered) routes will display a ○ symbol, whereas dynamic routes will display a ƒ symbol. For example:\n\nBuild Output\nRoute (app)                              Size     First Load JS\n┌ ○ /_not-found                          0 B               0 kB\n└ ƒ /products/[id]                       0 B               0 kB\n \n○  (Static)   prerendered as static content\nƒ  (Dynamic)  server-rendered on demand\n\nThere are two reasons a route might opt out of static rendering:\n\nThe presence of Dynamic APIs which rely on runtime information.\nAn uncached data request, like a call to an ORM or database driver.\n\nCheck your route for any of these conditions, and if you are not able to statically render the route, then consider using loading.js or <Suspense />\n to leverage streaming."
  },
  {
    "title": "next.config.js Options: eslint | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/eslint",
    "html": "eslint\n\nWhen ESLint is detected in your project, Next.js fails your production build (next build) when errors are present.\n\nIf you'd like Next.js to produce production code even when your application has ESLint errors, you can disable the built-in linting step completely. This is not recommended unless you already have ESLint configured to run in a separate part of your workflow (for example, in CI or a pre-commit hook).\n\nOpen next.config.js and enable the ignoreDuringBuilds option in the eslint config:\n\nnext.config.js\nmodule.exports = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}"
  },
  {
    "title": "next.config.js Options: distDir | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/distDir",
    "html": "distDir\n\nYou can specify a name to use for a custom build directory to use instead of .next.\n\nOpen next.config.js and add the distDir config:\n\nnext.config.js\nmodule.exports = {\n  distDir: 'build',\n}\n\nNow if you run next build Next.js will use build instead of the default .next folder.\n\ndistDir should not leave your project directory. For example, ../build is an invalid directory."
  },
  {
    "title": "next.config.js Options: cssChunking | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/cssChunking",
    "html": "cssChunking\nThis API is currently experimental and subject to change.\n\nCSS Chunking is a strategy used to improve the performance of your web application by splitting and re-ordering CSS files into chunks. This allows you to load only the CSS that is needed for a specific route, instead of loading all the application's CSS at once.\n\nYou can control how CSS files are chunked using the experimental.cssChunking option in your next.config.js file:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig = {\n  experimental: {\n    cssChunking: 'loose', // default\n  },\n} satisfies NextConfig\n \nexport default nextConfig\nOptions\n'loose' (default): Next.js will try to merge CSS files whenever possible, determining explicit and implicit dependencies between files from import order to reduce the number of chunks and therefore the number of requests.\n'strict': Next.js will load CSS files in the correct order they are imported into your files, which can lead to more chunks and requests.\n\nYou may consider using 'strict' if you run into unexpected CSS behavior. For example, if you import a.css and b.css in different files using a different import order (a before b, or b before a), 'loose' will merge the files in any order and assume there are no dependencies between them. However, if b.css depends on a.css, you may want to use 'strict' to prevent the files from being merged, and instead, load them in the order they are imported - which can result in more chunks and requests.\n\nFor most applications, we recommend 'loose' as it leads to fewer requests and better performance."
  },
  {
    "title": "next.config.js Options: env | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/env",
    "html": "env\n\nSince the release of Next.js 9.4\n we now have a more intuitive and ergonomic experience for adding environment variables. Give it a try!\n\nGood to know: environment variables specified in this way will always be included in the JavaScript bundle, prefixing the environment variable name with NEXT_PUBLIC_ only has an effect when specifying them through the environment or .env files.\n\nTo add environment variables to the JavaScript bundle, open next.config.js and add the env config:\n\nnext.config.js\nmodule.exports = {\n  env: {\n    customKey: 'my-value',\n  },\n}\n\nNow you can access process.env.customKey in your code. For example:\n\nfunction Page() {\n  return <h1>The value of customKey is: {process.env.customKey}</h1>\n}\n \nexport default Page\n\nNext.js will replace process.env.customKey with 'my-value' at build time. Trying to destructure process.env variables won't work due to the nature of webpack DefinePlugin\n.\n\nFor example, the following line:\n\nreturn <h1>The value of customKey is: {process.env.customKey}</h1>\n\nWill end up being:\n\nreturn <h1>The value of customKey is: {'my-value'}</h1>"
  },
  {
    "title": "next.config.js Options: basePath | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/basePath",
    "html": "basePath\n\nTo deploy a Next.js application under a sub-path of a domain you can use the basePath config option.\n\nbasePath allows you to set a path prefix for the application. For example, to use /docs instead of '' (an empty string, the default), open next.config.js and add the basePath config:\n\nnext.config.js\nmodule.exports = {\n  basePath: '/docs',\n}\n\nGood to know: This value must be set at build time and cannot be changed without re-building as the value is inlined in the client-side bundles.\n\nLinks\n\nWhen linking to other pages using next/link and next/router the basePath will be automatically applied.\n\nFor example, using /about will automatically become /docs/about when basePath is set to /docs.\n\nexport default function HomePage() {\n  return (\n    <>\n      <Link href=\"/about\">About Page</Link>\n    </>\n  )\n}\n\nOutput html:\n\n<a href=\"/docs/about\">About Page</a>\n\nThis makes sure that you don't have to change all links in your application when changing the basePath value.\n\nImages\n\nWhen using the next/image component, you will need to add the basePath in front of src.\n\nFor example, using /docs/me.png will properly serve your image when basePath is set to /docs.\n\nimport Image from 'next/image'\n \nfunction Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/docs/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n \nexport default Home"
  },
  {
    "title": "next.config.js Options: compress | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/compress",
    "html": "compress\n\nBy default, Next.js uses gzip to compress rendered content and static files when using next start or a custom server. This is an optimization for applications that do not have compression configured. If compression is already configured in your application via a custom server, Next.js will not add compression.\n\nGood to know:\n\nWhen hosting your application on Vercel\n, compression uses brotli first, then gzip.\nYou can check if compression is enabled and which algorithm is used by looking at the Accept-Encoding\n (browser accepted options) and Content-Encoding\n (currently used) headers in the response.\nDisabling compression\n\nTo disable compression, set the compress config option to false:\n\nnext.config.js\nmodule.exports = {\n  compress: false,\n}\n\nWe do not recommend disabling compression unless you have compression configured on your server, as compression reduces bandwidth usage and improves the performance of your application.\n\nChanging the compression algorithm\n\nTo change your compression algorithm, you will need to configure your custom server and set the compress option to false in your next.config.js file.\n\nFor example, you're using nginx\n and want to switch to brotli, set the compress option to false to allow nginx to handle compression.\n\nGood to know:\n\nFor Next.js applications on Vercel, compression is handled by the Vercel's Edge Network and not Next.js. See the Vercel documentation\n for more information."
  },
  {
    "title": "next.config.js Options: assetPrefix | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/assetPrefix",
    "html": "assetPrefix\n\nAttention: Deploying to Vercel automatically configures a global CDN for your Next.js project. You do not need to manually setup an Asset Prefix.\n\nGood to know: Next.js 9.5+ added support for a customizable Base Path, which is better suited for hosting your application on a sub-path like /docs. We do not suggest you use a custom Asset Prefix for this use case.\n\nSet up a CDN\n\nTo set up a CDN\n, you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n\nOpen next.config.mjs and add the assetPrefix config based on the phase:\n\nnext.config.mjs\n// @ts-check\nimport { PHASE_DEVELOPMENT_SERVER } from 'next/constants'\n \nexport default (phase) => {\n  const isDev = phase === PHASE_DEVELOPMENT_SERVER\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    assetPrefix: isDev ? undefined : 'https://cdn.mydomain.com',\n  }\n  return nextConfig\n}\n\nNext.js will automatically use your asset prefix for the JavaScript and CSS files it loads from the /_next/ path (.next/static/ folder). For example, with the above configuration, the following request for a JS chunk:\n\n/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js\n\n\nWould instead become:\n\nhttps://cdn.mydomain.com/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js\n\n\nThe exact configuration for uploading your files to a given CDN will depend on your CDN of choice. The only folder you need to host on your CDN is the contents of .next/static/, which should be uploaded as _next/static/ as the above URL request indicates. Do not upload the rest of your .next/ folder, as you should not expose your server code and other configuration to the public.\n\nWhile assetPrefix covers requests to _next/static, it does not influence the following paths:\n\nFiles in the public folder; if you want to serve those assets over a CDN, you'll have to introduce the prefix yourself"
  },
  {
    "title": "next.config.js Options: appDir | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js/appDir",
    "html": "appDir\n\nGood to know: This option is no longer needed as of Next.js 13.4. The App Router is now stable.\n\nThe App Router (app directory) enables support for layouts, Server Components, streaming, and colocated data fetching.\n\nUsing the app directory will automatically enable React Strict Mode\n. Learn how to incrementally adopt app."
  },
  {
    "title": "API Reference: next.config.js Options | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/next-config-js",
    "html": "next.config.js Options\n\nNext.js can be configured through a next.config.js file in the root of your project directory (for example, by package.json) with a default export.\n\nnext.config.js\n// @ts-check\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n \nmodule.exports = nextConfig\nECMAScript Modules\n\nnext.config.js is a regular Node.js module, not a JSON file. It gets used by the Next.js server and build phases, and it's not included in the browser build.\n\nIf you need ECMAScript modules\n, you can use next.config.mjs:\n\nnext.config.mjs\n// @ts-check\n \n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  /* config options here */\n}\n \nexport default nextConfig\nConfiguration as a Function\n\nYou can also use a function:\n\nnext.config.mjs\n// @ts-check\n \nexport default (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\nAsync Configuration\n\nSince Next.js 12.1.0, you can use an async function:\n\nnext.config.js\n// @ts-check\n \nmodule.exports = async (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\nPhase\n\nphase is the current context in which the configuration is loaded. You can see the available phases\n. Phases can be imported from next/constants:\n\nnext.config.js\n// @ts-check\n \nconst { PHASE_DEVELOPMENT_SERVER } = require('next/constants')\n \nmodule.exports = (phase, { defaultConfig }) => {\n  if (phase === PHASE_DEVELOPMENT_SERVER) {\n    return {\n      /* development only config options here */\n    }\n  }\n \n  return {\n    /* config options for all phases except development here */\n  }\n}\nTypeScript\n\nThis feature is available from Next.js canary.\n\nIf you are using TypeScript in your project, you can use next.config.ts to use TypeScript in your configuration:\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n \nexport default nextConfig\n\nThe commented lines are the place where you can put the configs allowed by next.config.js, which are defined in this file\n.\n\nHowever, none of the configs are required, and it's not necessary to understand what each config does. Instead, search for the features you need to enable or modify in this section and they will show you what to do.\n\nAvoid using new JavaScript features not available in your target Node.js version. next.config.js will not be parsed by Webpack or Babel.\n\nThis page documents all the available configuration options:"
  },
  {
    "title": "Functions: userAgent | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/userAgent",
    "html": "userAgent\n\nThe userAgent helper extends the Web Request API\n with additional properties and methods to interact with the user agent object from the request.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\nisBot\n\nA boolean indicating whether the request comes from a known bot.\n\nbrowser\n\nAn object containing information about the browser used in the request.\n\nname: A string representing the browser's name, or undefined if not identifiable.\nversion: A string representing the browser's version, or undefined.\ndevice\n\nAn object containing information about the device used in the request.\n\nmodel: A string representing the model of the device, or undefined.\ntype: A string representing the type of the device, such as console, mobile, tablet, smarttv, wearable, embedded, or undefined.\nvendor: A string representing the vendor of the device, or undefined.\nengine\n\nAn object containing information about the browser's engine.\n\nname: A string representing the engine's name. Possible values include: Amaya, Blink, EdgeHTML, Flow, Gecko, Goanna, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, Tasman, Trident, w3m, WebKit or undefined.\nversion: A string representing the engine's version, or undefined.\nos\n\nAn object containing information about the operating system.\n\nname: A string representing the name of the OS, or undefined.\nversion: A string representing the version of the OS, or undefined.\ncpu\n\nAn object containing information about the CPU architecture.\n\narchitecture: A string representing the architecture of the CPU. Possible values include: 68k, amd64, arm, arm64, armhf, avr, ia32, ia64, irix, irix64, mips, mips64, pa-risc, ppc, sparc, sparc64 or undefined"
  },
  {
    "title": "Functions: useSelectedLayoutSegment | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment",
    "html": "useSelectedLayoutSegment\n\nuseSelectedLayoutSegment is a Client Component hook that lets you read the active route segment one level below the Layout it is called from.\n\nIt is useful for navigation UI, such as tabs inside a parent layout that change style depending on the active child segment.\n\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useSelectedLayoutSegment } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const segment = useSelectedLayoutSegment()\n \n  return <p>Active segment: {segment}</p>\n}\n\nGood to know:\n\nSince useSelectedLayoutSegment is a Client Component hook, and Layouts are Server Components by default, useSelectedLayoutSegment is usually called via a Client Component that is imported into a Layout.\nuseSelectedLayoutSegment only returns the segment one level down. To return all active segments, see useSelectedLayoutSegments\nParameters\nconst segment = useSelectedLayoutSegment(parallelRoutesKey?: string)\n\nuseSelectedLayoutSegment optionally accepts a parallelRoutesKey, which allows you to read the active route segment within that slot.\n\nReturns\n\nuseSelectedLayoutSegment returns a string of the active segment or null if one doesn't exist.\n\nFor example, given the Layouts and URLs below, the returned segment would be:\n\nLayout\tVisited URL\tReturned Segment\napp/layout.js\t/\tnull\napp/layout.js\t/dashboard\t'dashboard'\napp/dashboard/layout.js\t/dashboard\tnull\napp/dashboard/layout.js\t/dashboard/settings\t'settings'\napp/dashboard/layout.js\t/dashboard/analytics\t'analytics'\napp/dashboard/layout.js\t/dashboard/analytics/monthly\t'analytics'\nExamples\nCreating an active link component\n\nYou can use useSelectedLayoutSegment to create an active link component that changes style depending on the active segment. For example, a featured posts list in the sidebar of a blog:\n\napp/blog/blog-nav-link.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n \n// This *client* component will be imported into a blog layout\nexport default function BlogNavLink({\n  slug,\n  children,\n}: {\n  slug: string\n  children: React.ReactNode\n}) {\n  // Navigating to `/blog/hello-world` will return 'hello-world'\n  // for the selected layout segment\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n \n  return (\n    <Link\n      href={`/blog/${slug}`}\n      // Change style depending on whether the link is active\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}\napp/blog/layout.tsx\nTypeScript\nJavaScript\nTypeScript\n// Import the Client Component into a parent Layout (Server Component)\nimport { BlogNavLink } from './blog-nav-link'\nimport getFeaturedPosts from './get-featured-posts'\n \nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const featuredPosts = await getFeaturedPosts()\n  return (\n    <div>\n      {featuredPosts.map((post) => (\n        <div key={post.id}>\n          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>\n        </div>\n      ))}\n      <div>{children}</div>\n    </div>\n  )\n}\nVersion History\nVersion\tChanges\nv13.0.0\tuseSelectedLayoutSegment introduced."
  },
  {
    "title": "Functions: useSearchParams | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params",
    "html": "useSearchParams\n\nuseSearchParams is a Client Component hook that lets you read the current URL's query string.\n\nuseSearchParams returns a read-only version of the URLSearchParams\n interface.\n\napp/dashboard/search-bar.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n \n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}\nParameters\nconst searchParams = useSearchParams()\n\nuseSearchParams does not take any parameters.\n\nReturns\n\nuseSearchParams returns a read-only version of the URLSearchParams\n interface, which includes utility methods for reading the URL's query string:\n\nURLSearchParams.get()\n: Returns the first value associated with the search parameter. For example:\n\nURL\tsearchParams.get(\"a\")\n/dashboard?a=1\t'1'\n/dashboard?a=\t''\n/dashboard?b=3\tnull\n/dashboard?a=1&a=2\t'1' - use getAll()\n to get all values\n\nURLSearchParams.has()\n: Returns a boolean value indicating if the given parameter exists. For example:\n\nURL\tsearchParams.has(\"a\")\n/dashboard?a=1\ttrue\n/dashboard?b=3\tfalse\n\nLearn more about other read-only methods of URLSearchParams\n, including the getAll()\n, keys()\n, values()\n, entries()\n, forEach()\n, and toString()\n.\n\nGood to know:\n\nuseSearchParams is a Client Component hook and is not supported in Server Components to prevent stale values during partial rendering.\nIf an application includes the /pages directory, useSearchParams will return ReadonlyURLSearchParams | null. The null value is for compatibility during migration since search params cannot be known during pre-rendering of a page that doesn't use getServerSideProps\nStatic Rendering\n\nIf a route is statically rendered, calling useSearchParams will cause the Client Component tree up to the closest Suspense boundary to be client-side rendered.\n\nThis allows a part of the route to be statically rendered while the dynamic part that uses useSearchParams is client-side rendered.\n\nWe recommend wrapping the Client Component that uses useSearchParams in a <Suspense/> boundary. This will allow any Client Components above it to be statically rendered and sent as part of initial HTML. Example.\n\nFor example:\n\napp/dashboard/search-bar.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n \n  // This will not be logged on the server when using static rendering\n  console.log(search)\n \n  return <>Search: {search}</>\n}\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Suspense } from 'react'\nimport SearchBar from './search-bar'\n \n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n \nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\nBehavior\nDynamic Rendering\n\nIf a route is dynamically rendered, useSearchParams will be available on the server during the initial server render of the Client Component.\n\nFor example:\n\napp/dashboard/search-bar.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n \n  // This will be logged on the server during the initial render\n  // and on the client on subsequent navigations.\n  console.log(search)\n \n  return <>Search: {search}</>\n}\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport SearchBar from './search-bar'\n \nexport const dynamic = 'force-dynamic'\n \nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n\nGood to know: Setting the dynamic route segment config option to force-dynamic can be used to force dynamic rendering.\n\nServer Components\nPages\n\nTo access search params in Pages (Server Components), use the searchParams prop.\n\nLayouts\n\nUnlike Pages, Layouts (Server Components) do not receive the searchParams prop. This is because a shared layout is not re-rendered during navigation which could lead to stale searchParams between navigations. View detailed explanation.\n\nInstead, use the Page searchParams prop or the useSearchParams hook in a Client Component, which is re-rendered on the client with the latest searchParams.\n\nExamples\nUpdating searchParams\n\nYou can use useRouter or Link to set new searchParams. After a navigation is performed, the current page.js will receive an updated searchParams prop.\n\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name: string, value: string) => {\n      const params = new URLSearchParams(searchParams.toString())\n      params.set(name, value)\n \n      return params.toString()\n    },\n    [searchParams]\n  )\n \n  return (\n    <>\n      <p>Sort By</p>\n \n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n \n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\nVersion History\nVersion\tChanges\nv13.0.0\tuseSearchParams introduced."
  },
  {
    "title": "Functions: useSelectedLayoutSegments | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments",
    "html": "useSelectedLayoutSegments\n\nuseSelectedLayoutSegments is a Client Component hook that lets you read the active route segments below the Layout it is called from.\n\nIt is useful for creating UI in parent Layouts that need knowledge of active child segments such as breadcrumbs.\n\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useSelectedLayoutSegments } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const segments = useSelectedLayoutSegments()\n \n  return (\n    <ul>\n      {segments.map((segment, index) => (\n        <li key={index}>{segment}</li>\n      ))}\n    </ul>\n  )\n}\n\nGood to know:\n\nSince useSelectedLayoutSegments is a Client Component hook, and Layouts are Server Components by default, useSelectedLayoutSegments is usually called via a Client Component that is imported into a Layout.\nThe returned segments include Route Groups, which you might not want to be included in your UI. You can use the filter() array method to remove items that start with a bracket.\nParameters\nconst segments = useSelectedLayoutSegments(parallelRoutesKey?: string)\n\nuseSelectedLayoutSegments optionally accepts a parallelRoutesKey, which allows you to read the active route segment within that slot.\n\nReturns\n\nuseSelectedLayoutSegments returns an array of strings containing the active segments one level down from the layout the hook was called from. Or an empty array if none exist.\n\nFor example, given the Layouts and URLs below, the returned segments would be:\n\nLayout\tVisited URL\tReturned Segments\napp/layout.js\t/\t[]\napp/layout.js\t/dashboard\t['dashboard']\napp/layout.js\t/dashboard/settings\t['dashboard', 'settings']\napp/dashboard/layout.js\t/dashboard\t[]\napp/dashboard/layout.js\t/dashboard/settings\t['settings']\nVersion History\nVersion\tChanges\nv13.0.0\tuseSelectedLayoutSegments introduced."
  },
  {
    "title": "Functions: useRouter | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-router",
    "html": "useRouter\n\nThe useRouter hook allows you to programmatically change routes inside Client Components.\n\nRecommendation: Use the <Link> component for navigation unless you have a specific requirement for using useRouter.\n\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\nuseRouter()\nrouter.push(href: string, { scroll: boolean }): Perform a client-side navigation to the provided route. Adds a new entry into the browser’s history\n stack.\nrouter.replace(href: string, { scroll: boolean }): Perform a client-side navigation to the provided route without adding a new entry into the browser’s history stack\n.\nrouter.refresh(): Refresh the current route. Making a new request to the server, re-fetching data requests, and re-rendering Server Components. The client will merge the updated React Server Component payload without losing unaffected client-side React (e.g. useState) or browser state (e.g. scroll position).\nrouter.prefetch(href: string): Prefetch the provided route for faster client-side transitions.\nrouter.back(): Navigate back to the previous route in the browser’s history stack.\nrouter.forward(): Navigate forwards to the next page in the browser’s history stack.\n\nGood to know:\n\nThe <Link> component automatically prefetch routes as they become visible in the viewport.\nrefresh() could re-produce the same result if fetch requests are cached. Other dynamic functions like cookies and headers could also change the response.\nMigrating from next/router\nThe useRouter hook should be imported from next/navigation and not next/router when using the App Router\nThe pathname string has been removed and is replaced by usePathname()\nThe query object has been removed and is replaced by useSearchParams()\nrouter.events has been replaced. See below.\n\nView the full migration guide.\n\nExamples\nRouter events\n\nYou can listen for page changes by composing other Client Component hooks like usePathname and useSearchParams.\n\napp/components/navigation-events.js\n'use client'\n \nimport { useEffect } from 'react'\nimport { usePathname, useSearchParams } from 'next/navigation'\n \nexport function NavigationEvents() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  useEffect(() => {\n    const url = `${pathname}?${searchParams}`\n    console.log(url)\n    // You can now use the current URL\n    // ...\n  }, [pathname, searchParams])\n \n  return '...'\n}\n\nWhich can be imported into a layout.\n\napp/layout.js\nimport { Suspense } from 'react'\nimport { NavigationEvents } from './components/navigation-events'\n \nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n \n        <Suspense fallback={null}>\n          <NavigationEvents />\n        </Suspense>\n      </body>\n    </html>\n  )\n}\n\nGood to know: <NavigationEvents> is wrapped in a Suspense boundary becauseuseSearchParams() causes client-side rendering up to the closest Suspense boundary during static rendering. Learn more.\n\nDisabling scroll restoration\n\nBy default, Next.js will scroll to the top of the page when navigating to a new route. You can disable this behavior by passing scroll: false to router.push() or router.replace().\n\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\nVersion History\nVersion\tChanges\nv13.0.0\tuseRouter from next/navigation introduced."
  },
  {
    "title": "Functions: useReportWebVitals | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals",
    "html": "useReportWebVitals\n\nThe useReportWebVitals hook allows you to report Core Web Vitals\n, and can be used in combination with your analytics service.\n\napp/_components/web-vitals.js\n'use client'\n \nimport { useReportWebVitals } from 'next/web-vitals'\n \nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n}\napp/layout.js\nimport { WebVitals } from './_components/web-vitals'\n \nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n\nSince the useReportWebVitals hook requires the \"use client\" directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the WebVitals component.\n\nuseReportWebVitals\n\nThe metric object passed as the hook's argument consists of a number of properties:\n\nid: Unique identifier for the metric in the context of the current page load\nname: The name of the performance metric. Possible values include names of Web Vitals metrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.\ndelta: The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.\nentries: An array of Performance Entries\n associated with the metric. These entries provide detailed information about the performance events related to the metric.\nnavigationType: Indicates the type of navigation\n that triggered the metric collection. Possible values include \"navigate\", \"reload\", \"back_forward\", and \"prerender\".\nrating: A qualitative rating of the metric value, providing an assessment of the performance. Possible values are \"good\", \"needs-improvement\", and \"poor\". The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.\nvalue: The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from various Performance API\ns.\nWeb Vitals\n\nWeb Vitals\n are a set of useful metrics that aim to capture the user experience of a web page. The following web vitals are all included:\n\nTime to First Byte\n (TTFB)\nFirst Contentful Paint\n (FCP)\nLargest Contentful Paint\n (LCP)\nFirst Input Delay\n (FID)\nCumulative Layout Shift\n (CLS)\nInteraction to Next Paint\n (INP)\n\nYou can handle all the results of these metrics using the name property.\n\napp/components/web-vitals.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useReportWebVitals } from 'next/web-vitals'\n \nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\nUsage on Vercel\n\nVercel Speed Insights\n does not useReportWebVitals, but @vercel/speed-insights package instead. useReportWebVitals hook is useful in local development, or if you're using a different service for collecting Web Vitals.\n\nSending results to external systems\n\nYou can send results to any endpoint to measure and track real user performance on your site. For example:\n\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n \n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n\nGood to know: If you use Google Analytics\n, using the id value can allow you to construct metric distributions manually (to calculate percentiles, etc.)\n\nuseReportWebVitals(metric => {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n  window.gtag('event', metric.name, {\n    value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value), // values must be integers\n    event_label: metric.id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  });\n}\n\nRead more about sending results to Google Analytics\n."
  },
  {
    "title": "Functions: usePathname | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-pathname",
    "html": "usePathname\n\nusePathname is a Client Component hook that lets you read the current URL's pathname.\n\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n\nusePathname intentionally requires using a Client Component. It's important to note Client Components are not a de-optimization. They are an integral part of the Server Components architecture.\n\nFor example, a Client Component with usePathname will be rendered into HTML on the initial page load. When navigating to a new route, this component does not need to be re-fetched. Instead, the component is downloaded once (in the client JavaScript bundle), and re-renders based on the current state.\n\nGood to know:\n\nReading the current URL from a Server Component is not supported. This design is intentional to support layout state being preserved across page navigations.\nCompatibility mode:\nusePathname can return null when a fallback route is being rendered or when a pages directory page has been automatically statically optimized by Next.js and the router is not ready.\nNext.js will automatically update your types if it detects both an app and pages directory in your project.\nParameters\nconst pathname = usePathname()\n\nusePathname does not take any parameters.\n\nReturns\n\nusePathname returns a string of the current URL's pathname. For example:\n\nURL\tReturned value\n/\t'/'\n/dashboard\t'/dashboard'\n/dashboard?v=2\t'/dashboard'\n/blog/hello-world\t'/blog/hello-world'\nExamples\nDo something in response to a route change\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { usePathname, useSearchParams } from 'next/navigation'\n \nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}\nVersion\tChanges\nv13.0.0\tusePathname introduced."
  },
  {
    "title": "Functions: useParams | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-params",
    "html": "useParams\n\nuseParams is a Client Component hook that lets you read a route's dynamic params filled in by the current URL.\n\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useParams } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const params = useParams<{ tag: string; item: string }>()\n \n  // Route -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n \n  return '...'\n}\nParameters\nconst params = useParams()\n\nuseParams does not take any parameters.\n\nReturns\n\nuseParams returns an object containing the current route's filled in dynamic parameters.\n\nEach property in the object is an active dynamic segment.\nThe properties name is the segment's name, and the properties value is what the segment is filled in with.\nThe properties value will either be a string or array of string's depending on the type of dynamic segment.\nIf the route contains no dynamic parameters, useParams returns an empty object.\nIf used in Pages Router, useParams will return null on the initial render and updates with properties following the rules above once the router is ready.\n\nFor example:\n\nRoute\tURL\tuseParams()\napp/shop/page.js\t/shop\t{}\napp/shop/[slug]/page.js\t/shop/1\t{ slug: '1' }\napp/shop/[tag]/[item]/page.js\t/shop/1/2\t{ tag: '1', item: '2' }\napp/shop/[...slug]/page.js\t/shop/1/2\t{ slug: ['1', '2'] }\nVersion History\nVersion\tChanges\nv13.3.0\tuseParams introduced."
  },
  {
    "title": "Functions: unstable_rethrow | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow",
    "html": "unstable_rethrow\nThis API is currently unstable and subject to change.\n\nunstable_rethrow can be used to avoid catching internal errors thrown by Next.js when attempting to handle errors thrown in your application code.\n\nFor example, calling the notFound function will throw an internal Next.js error and render the not-found.js component. However, if used inside a try/catch block, the error will be caught, preventing not-found.js from rendering:\n\n@/app/ui/component.tsx\nimport { notFound } from 'next/navigation'\n \nexport default async function Page() {\n  try {\n    const post = await fetch('https://.../posts/1').then((res) => {\n      if (res.status === 404) notFound()\n      if (!res.ok) throw new Error(res.statusText)\n      return res.json()\n    })\n  } catch (err) {\n    console.error(err)\n  }\n}\n\nYou can use unstable_rethrow API to re-throw the internal error and continue with the expected behavior:\n\n@/app/ui/component.tsx\nimport { notFound, unstable_rethrow } from 'next/navigation'\n \nexport default async function Page() {\n  try {\n    const post = await fetch('https://.../posts/1').then((res) => {\n      if (res.status === 404) notFound()\n      if (!res.ok) throw new Error(res.statusText)\n      return res.json()\n    })\n  } catch (err) {\n    unstable_rethrow(err)\n    console.error(err)\n  }\n}\n\nThe following Next.js APIs rely on throwing an error which should be rethrown and handled by Next.js itself:\n\nnotFound()\nredirect()\npermanentRedirect()\n\nIf a route segment is marked to throw an error unless it's static, a dynamic function call will also throw an error that should similarly not be caught by the developer. Note that Partial Prerendering (PPR) affects this behavior as well. These APIs are:\n\ncookies()\nheaders()\nsearchParams\nfetch(..., { cache: 'no-store' })\nfetch(..., { next: { revalidate: 0 } })\n\nGood to know:\n\nThis method should be called at the top of the catch block, passing the error object as its only argument. It can also be used within a .catch handler of a promise.\nIf you ensure that your calls to APIs that throw are not wrapped in a try/catch then you don't need to use unstable_rethrow\nAny resource cleanup (like clearing intervals, timers, etc) would have to either happen prior to the call to unstable_rethrow or within a finally block."
  },
  {
    "title": "Functions: unstable_noStore | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_noStore",
    "html": "unstable_noStore\nThis API is currently unstable and subject to change.\n\nunstable_noStore can be used to declaratively opt out of static rendering and indicate a particular component should not be cached.\n\nimport { unstable_noStore as noStore } from 'next/cache';\n \nexport default async function Component() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\n\nGood to know:\n\nunstable_noStore is equivalent to cache: 'no-store' on a fetch\nunstable_noStore is preferred over export const dynamic = 'force-dynamic' as it is more granular and can be used on a per-component basis\nUsing unstable_noStore inside unstable_cache will not opt out of static generation. Instead, it will defer to the cache configuration to determine whether to cache the result or not.\nUsage\n\nIf you prefer not to pass additional options to fetch, like cache: 'no-store' or next: { revalidate: 0 }, you can use noStore() as a replacement for all of these use cases.\n\nimport { unstable_noStore as noStore } from 'next/cache';\n \nexport default async function Component() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\nVersion History\nVersion\tChanges\nv14.0.0\tunstable_noStore introduced."
  },
  {
    "title": "Functions: unstable_cache | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_cache",
    "html": "unstable_cache\nThis API is currently unstable and subject to change.\n\nunstable_cache allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.\n\nimport { getUser } from './data';\nimport { unstable_cache } from 'next/cache';\n \nconst getCachedUser = unstable_cache(\n  async (id) => getUser(id),\n  ['my-app-user']\n);\n \nexport default async function Component({ userID }) {\n  const user = await getCachedUser(userID);\n  ...\n}\n\nGood to know:\n\nAccessing dynamic data sources such as headers or cookies inside a cache scope is not supported. If you need this data inside a cached function use headers outside of the cached function and pass the required dynamic data in as an argument.\nThis API uses Next.js' built-in Data Cache to persist the result across requests and deployments.\n\nWarning: This API is unstable and may change in the future. We will provide migration documentation and codemods, if needed, as this API stabilizes.\n\nParameters\nconst data = unstable_cache(fetchData, keyParts, options)()\nfetchData: This is an asynchronous function that fetches the data you want to cache. It must be a function that returns a Promise.\nkeyParts: This is an extra array of keys that further adds identification to the cache. By default, unstable_cache already uses the arguments and the stringified version of your function as the cache key. It is optional in most cases; the only time you need to use it is when you use external variables without passing them as parameters. However, it is important to add closures used within the function if you do not pass them as parameters.\noptions: This is an object that controls how the cache behaves. It can contain the following properties:\ntags: An array of tags that can be used to control cache invalidation. Next.js will not use this to uniquely identify the function.\nrevalidate: The number of seconds after which the cache should be revalidated. Omit or pass false to cache indefinitely or until matching revalidateTag() or revalidatePath() methods are called.\nReturns\n\nunstable_cache returns a function that when invoked, returns a Promise that resolves to the cached data. If the data is not in the cache, the provided function will be invoked, and its result will be cached and returned.\n\nExample\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { unstable_cache } from 'next/cache';\n \nexport default async function Page({ params }: { params: { userID: string } }) {\n const getCachedUser = unstable_cache(\n  async () => {\n \n  return { id: params.userID };\n    },\n    [params.userID], // here we add the userID in the keyParts so Next.js can make separate caches for the different userID's.\n    {\n      tags: [\"cached-user-tag\"],\n      revalidate: 60,\n    }\n);\n  ...\n}\nVersion History\nVersion\tChanges\nv14.0.0\tunstable_cache introduced."
  },
  {
    "title": "Functions: revalidateTag | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/revalidateTag",
    "html": "revalidateTag\n\nrevalidateTag allows you to purge cached data on-demand for a specific cache tag.\n\nGood to know:\n\nrevalidateTag is available in both Node.js and Edge runtimes.\nrevalidateTag only invalidates the cache when the path is next visited. This means calling revalidateTag with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.\nParameters\nrevalidateTag(tag: string): void;\ntag: A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive.\n\nYou can add tags to fetch as follows:\n\nfetch(url, { next: { tags: [...] } });\nReturns\n\nrevalidateTag does not return a value.\n\nExamples\nServer Action\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { revalidateTag } from 'next/cache'\n \nexport default async function submit() {\n  await addPost()\n  revalidateTag('posts')\n}\nRoute Handler\napp/api/revalidate/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextRequest } from 'next/server'\nimport { revalidateTag } from 'next/cache'\n \nexport async function GET(request: NextRequest) {\n  const tag = request.nextUrl.searchParams.get('tag')\n  revalidateTag(tag)\n  return Response.json({ revalidated: true, now: Date.now() })\n}"
  },
  {
    "title": "Functions: unstable_after | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/unstable_after",
    "html": "unstable_after\nThis API is currently part of a Release Candidate and not yet available in a stable version.\n\nunstable_after() allows you to schedule work to be executed after a response is finished. This is useful for tasks and other side effects that should not block the response, such as logging and analytics.\n\nIt can be used in Server Components (including generateMetadata\n), Server Actions, Route Handlers, and Middleware.\n\nTo use unstable_after(), you need to enable it using the experimental.after config in the next.config.js file:\n\nnext.config.js\nconst nextConfig = {\n  experimental: {\n    after: true,\n  },\n}\nmodule.exports = nextConfig\n\nThe function accepts a callback that will be executed after the response is finished:\n\nimport { unstable_after as after } from 'next/server'\nimport { log } from '@/app/utils'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  after(() => {\n    // Execute after the layout is rendered and sent to the user\n    log()\n  })\n  return <>{children}</>\n}\n\nGood to know:\n\nunstable_after() will be executed even if the response didn't complete successfully. Including when an error is thrown or when notFound() or redirect() is called.\nunstable_after() is a dynamic function that will opt a route into dynamic rendering. This behavior can be overridden with the export dynamic = \"force-static\" segment config.\nYou can use React cache to deduplicate functions called inside unstable_after().\ncookies() cannot be set inside unstable_after() since the response has already been sent.\nunstable_after() can be nested inside other unstable_after() calls.\nParameters\nA callback function which will be executed after the response is finished.\nReturns\nunstable_after() does not return a value.\nAlternatives\n\nThe use case for unstable_after() is to process secondary tasks without blocking the primary response. It's similar to using the platform's waitUntil()\n or removing await from a promise, but with the following differences:\n\nwaitUntil(): accepts a promise and enqueues a task to be executed during the lifecycle of the request, whereas unstable_after() accepts a callback that will be executed after the response is finished.\nRemoving await: starts executing during the response, which uses resources. It's also not reliable in serverless environments as the function stops computation immediately after the response is sent, potentially interrupting the task.\n\nWe recommend using unstable_after() as it has been designed to consider other Next.js APIs and contexts.\n\nServerless function duration\n\nunstable_after() will run for the platform's default or configured max duration of a serverless function. If your platform supports it, you can configure the timeout limit using the maxDuration route segment config."
  },
  {
    "title": "Functions: revalidatePath | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/revalidatePath",
    "html": "revalidatePath\n\nrevalidatePath allows you to purge cached data on-demand for a specific path.\n\nGood to know:\n\nrevalidatePath is available in both Node.js and Edge runtimes.\nrevalidatePath only invalidates the cache when the included path is next visited. This means calling revalidatePath with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.\nCurrently, revalidatePath invalidates all the routes in the client-side Router Cache. This behavior is temporary and will be updated in the future to apply only to the specific path.\nUsing revalidatePath invalidates only the specific path in the server-side Route Cache.\nParameters\nrevalidatePath(path: string, type?: 'page' | 'layout'): void;\npath: Either a string representing the filesystem path associated with the data you want to revalidate (for example, /product/[slug]/page), or the literal route segment (for example, /product/123). Must be less than 1024 characters. This value is case-sensitive.\ntype: (optional) 'page' or 'layout' string to change the type of path to revalidate. If path contains a dynamic segment (for example, /product/[slug]/page), this parameter is required. If path refers to the literal route segment, e.g., /product/1 for a dynamic page (e.g., /product/[slug]/page), you should not provide type.\nReturns\n\nrevalidatePath does not return a value.\n\nExamples\nRevalidating A Specific URL\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/post-1')\n\nThis will revalidate one specific URL on the next page visit.\n\nRevalidating A Page Path\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'page')\n// or with route groups\nrevalidatePath('/(main)/blog/[slug]', 'page')\n\nThis will revalidate any URL that matches the provided page file on the next page visit. This will not invalidate pages beneath the specific page. For example, /blog/[slug] won't invalidate /blog/[slug]/[author].\n\nRevalidating A Layout Path\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'layout')\n// or with route groups\nrevalidatePath('/(main)/post/[slug]', 'layout')\n\nThis will revalidate any URL that matches the provided layout file on the next page visit. This will cause pages beneath with the same layout to revalidate on the next visit. For example, in the above case, /blog/[slug]/[another] would also revalidate on the next visit.\n\nRevalidating All Data\nimport { revalidatePath } from 'next/cache'\n \nrevalidatePath('/', 'layout')\n\nThis will purge the Client-side Router Cache, and revalidate the Data Cache on the next page visit.\n\nServer Action\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { revalidatePath } from 'next/cache'\n \nexport default async function submit() {\n  await submitForm()\n  revalidatePath('/')\n}\nRoute Handler\napp/api/revalidate/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { revalidatePath } from 'next/cache'\nimport type { NextRequest } from 'next/server'\n \nexport async function GET(request: NextRequest) {\n  const path = request.nextUrl.searchParams.get('path')\n \n  if (path) {\n    revalidatePath(path)\n    return Response.json({ revalidated: true, now: Date.now() })\n  }\n \n  return Response.json({\n    revalidated: false,\n    now: Date.now(),\n    message: 'Missing path to revalidate',\n  })\n}"
  },
  {
    "title": "Functions: notFound | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/not-found",
    "html": "notFound\n\nThe notFound function allows you to render the not-found file within a route segment as well as inject a <meta name=\"robots\" content=\"noindex\" /> tag.\n\nnotFound()\n\nInvoking the notFound() function throws a NEXT_NOT_FOUND error and terminates rendering of the route segment in which it was thrown. Specifying a not-found file allows you to gracefully handle such errors by rendering a Not Found UI within the segment.\n\napp/user/[id]/page.js\nimport { notFound } from 'next/navigation'\n \nasync function fetchUser(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }) {\n  const user = await fetchUser(params.id)\n \n  if (!user) {\n    notFound()\n  }\n \n  // ...\n}\n\nGood to know: notFound() does not require you to use return notFound() due to using the TypeScript never\n type.\n\nVersion History\nVersion\tChanges\nv13.0.0\tnotFound introduced."
  },
  {
    "title": "Functions: permanentRedirect | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/permanentRedirect",
    "html": "permanentRedirect\n\nThe permanentRedirect function allows you to redirect the user to another URL. permanentRedirect can be used in Server Components, Client Components, Route Handlers, and Server Actions.\n\nWhen used in a streaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 308 (Permanent) HTTP redirect response to the caller.\n\nIf a resource doesn't exist, you can use the notFound function instead.\n\nGood to know: If you prefer to return a 307 (Temporary) HTTP redirect instead of 308 (Permanent), you can use the redirect function instead.\n\nParameters\n\nThe permanentRedirect function accepts two arguments:\n\npermanentRedirect(path, type)\nParameter\tType\tDescription\npath\tstring\tThe URL to redirect to. Can be a relative or absolute path.\ntype\t'replace' (default) or 'push' (default in Server Actions)\tThe type of redirect to perform.\n\nBy default, permanentRedirect will use push (adding a new entry to the browser history stack) in Server Actions and replace (replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the type parameter.\n\nThe type parameter has no effect when used in Server Components.\n\nReturns\n\npermanentRedirect does not return a value.\n\nExample\n\nInvoking the permanentRedirect() function throws a NEXT_REDIRECT error and terminates rendering of the route segment in which it was thrown.\n\napp/team/[id]/page.js\nimport { permanentRedirect } from 'next/navigation'\n \nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    permanentRedirect('/login')\n  }\n \n  // ...\n}\n\nGood to know: permanentRedirect does not require you to use return permanentRedirect() as it uses the TypeScript never\n type."
  },
  {
    "title": "Functions: redirect | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/redirect",
    "html": "redirect\n\nThe redirect function allows you to redirect the user to another URL. redirect can be used in Server Components, Route Handlers, and Server Actions.\n\nWhen used in a streaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 307 HTTP redirect response to the caller.\n\nIf a resource doesn't exist, you can use the notFound function instead.\n\nGood to know:\n\nIn Server Actions and Route Handlers, redirect should be called after the try/catch block.\nIf you prefer to return a 308 (Permanent) HTTP redirect instead of 307 (Temporary), you can use the permanentRedirect function instead.\nParameters\n\nThe redirect function accepts two arguments:\n\nredirect(path, type)\nParameter\tType\tDescription\npath\tstring\tThe URL to redirect to. Can be a relative or absolute path.\ntype\t'replace' (default) or 'push' (default in Server Actions)\tThe type of redirect to perform.\n\nBy default, redirect will use push (adding a new entry to the browser history stack) in Server Actions and replace (replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the type parameter.\n\nThe type parameter has no effect when used in Server Components.\n\nReturns\n\nredirect does not return a value.\n\nExample\nServer Component\n\nInvoking the redirect() function throws a NEXT_REDIRECT error and terminates rendering of the route segment in which it was thrown.\n\napp/team/[id]/page.js\nimport { redirect } from 'next/navigation'\n \nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n \n  // ...\n}\n\nGood to know: redirect does not require you to use return redirect() as it uses the TypeScript never\n type.\n\nClient Component\n\nredirect can be used in a Client Component through a Server Action. If you need to use an event handler to redirect the user, you can use the useRouter hook.\n\napp/client-redirect.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { navigate } from './actions'\n \nexport function ClientRedirect() {\n  return (\n    <form action={navigate}>\n      <input type=\"text\" name=\"id\" />\n      <button>Submit</button>\n    </form>\n  )\n}\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { redirect } from 'next/navigation'\n \nexport async function navigate(data: FormData) {\n  redirect(`/posts/${data.get('id')}`)\n}\nFAQ\nWhy does redirect use 307 and 308?\n\nWhen using redirect() you may notice that the status codes used are 307 for a temporary redirect, and 308 for a permanent redirect. While traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, many browsers changed the request method of the redirect, from a POST to GET request when using a 302, regardless of the origins request method.\n\nTaking the following example of a redirect from /users to /people, if you make a POST request to /users to create a new user, and are conforming to a 302 temporary redirect, the request method will be changed from a POST to a GET request. This doesn't make sense, as to create a new user, you should be making a POST request to /people, and not a GET request.\n\nThe introduction of the 307 status code means that the request method is preserved as POST.\n\n302 - Temporary redirect, will change the request method from POST to GET\n307 - Temporary redirect, will preserve the request method as POST\n\nThe redirect() method uses a 307 by default, instead of a 302 temporary redirect, meaning your requests will always be preserved as POST requests.\n\nLearn more\n about HTTP Redirects.\n\nVersion History\nVersion\tChanges\nv13.0.0\tredirect introduced."
  },
  {
    "title": "Functions: NextResponse | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/next-response",
    "html": "NextResponse\n\nNextResponse extends the Web Response API\n with additional convenience methods.\n\ncookies\n\nRead or mutate the Set-Cookie\n header of the response.\n\nset(name, value)\n\nGiven a name, set a cookie with the given value on the response.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// Set a cookie to hide the banner\nresponse.cookies.set('show-banner', 'false')\n// Response will have a `Set-Cookie:show-banner=false;path=/home` header\nreturn response\nget(name)\n\nGiven a cookie name, return the value of the cookie. If the cookie is not found, undefined is returned. If multiple cookies are found, the first one is returned.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// { name: 'show-banner', value: 'false', Path: '/home' }\nresponse.cookies.get('show-banner')\ngetAll()\n\nGiven a cookie name, return the values of the cookie. If no name is given, return all cookies on the response.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nresponse.cookies.getAll('experiments')\n// Alternatively, get all cookies for the response\nresponse.cookies.getAll()\ndelete(name)\n\nGiven a cookie name, delete the cookie from the response.\n\n// Given incoming request /home\nlet response = NextResponse.next()\n// Returns true for deleted, false is nothing is deleted\nresponse.cookies.delete('experiments')\njson()\n\nProduce a response with the given JSON body.\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\n \nexport async function GET(request: Request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\nredirect()\n\nProduce a response that redirects to a URL\n.\n\nimport { NextResponse } from 'next/server'\n \nreturn NextResponse.redirect(new URL('/new', request.url))\n\nThe URL\n can be created and modified before being used in the NextResponse.redirect() method. For example, you can use the request.nextUrl property to get the current URL, and then modify it to redirect to a different URL.\n\nimport { NextResponse } from 'next/server'\n \n// Given an incoming request...\nconst loginUrl = new URL('/login', request.url)\n// Add ?from=/incoming-url to the /login URL\nloginUrl.searchParams.set('from', request.nextUrl.pathname)\n// And redirect to the new URL\nreturn NextResponse.redirect(loginUrl)\nrewrite()\n\nProduce a response that rewrites (proxies) the given URL\n while preserving the original URL.\n\nimport { NextResponse } from 'next/server'\n \n// Incoming request: /about, browser shows /about\n// Rewritten request: /proxy, browser shows /about\nreturn NextResponse.rewrite(new URL('/proxy', request.url))\nnext()\n\nThe next() method is useful for Middleware, as it allows you to return early and continue routing.\n\nimport { NextResponse } from 'next/server'\n \nreturn NextResponse.next()\n\nYou can also forward headers when producing the response:\n\nimport { NextResponse } from 'next/server'\n \n// Given an incoming request...\nconst newHeaders = new Headers(request.headers)\n// Add a new header\nnewHeaders.set('x-version', '123')\n// And produce a response with the new headers\nreturn NextResponse.next({\n  request: {\n    // New request headers\n    headers: newHeaders,\n  },\n})"
  },
  {
    "title": "Functions: NextRequest | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/next-request",
    "html": "NextRequest\n\nNextRequest extends the Web Request API\n with additional convenience methods.\n\ncookies\n\nRead or mutate the Set-Cookie\n header of the request.\n\nset(name, value)\n\nGiven a name, set a cookie with the given value on the request.\n\n// Given incoming request /home\n// Set a cookie to hide the banner\n// request will have a `Set-Cookie:show-banner=false;path=/home` header\nrequest.cookies.set('show-banner', 'false')\nget(name)\n\nGiven a cookie name, return the value of the cookie. If the cookie is not found, undefined is returned. If multiple cookies are found, the first one is returned.\n\n// Given incoming request /home\n// { name: 'show-banner', value: 'false', Path: '/home' }\nrequest.cookies.get('show-banner')\ngetAll()\n\nGiven a cookie name, return the values of the cookie. If no name is given, return all cookies on the request.\n\n// Given incoming request /home\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nrequest.cookies.getAll('experiments')\n// Alternatively, get all cookies for the request\nrequest.cookies.getAll()\ndelete(name)\n\nGiven a cookie name, delete the cookie from the request.\n\n// Returns true for deleted, false is nothing is deleted\nrequest.cookies.delete('experiments')\nhas(name)\n\nGiven a cookie name, return true if the cookie exists on the request.\n\n// Returns true if cookie exists, false if it does not\nrequest.cookies.has('experiments')\nclear()\n\nRemove the Set-Cookie header from the request.\n\nrequest.cookies.clear()\nnextUrl\n\nExtends the native URL\n API with additional convenience methods, including Next.js specific properties.\n\n// Given a request to /home, pathname is /home\nrequest.nextUrl.pathname\n// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }\nrequest.nextUrl.searchParams\n\nThe following options are available:\n\nProperty\tType\tDescription\nbasePath\tstring\tThe base path of the URL.\nbuildId\tstring | undefined\tThe build identifier of the Next.js application. Can be customized.\npathname\tstring\tThe pathname of the URL.\nsearchParams\tObject\tThe search parameters of the URL.\n\nNote: The internationalization properties from the Pages Router are not available for usage in the App Router. Learn more about internationalization with the App Router.\n\nip\n\nThe ip property is a string that contains the IP address of the request. This value can optionally be provided by your hosting platform.\n\nGood to know: On Vercel\n, this value is provided by default. On other platforms, you can use the X-Forwarded-For\n header to provide the IP address.\n\n// Provided by Vercel\nrequest.ip\n// Self-hosting\nrequest.headers.get('X-Forwarded-For')\ngeo\n\nThe geo property is an object that contains the geographic information of the request. This value can optionally be provided by your hosting platform.\n\nGood to know: On Vercel\n, this value is provided by default. On other platforms, you can use the X-Forwarded-For\n header to provide the IP address, then use a third-party service\n to lookup the geographic information.\n\n// Provided by Vercel\nrequest.geo.city\nrequest.geo.country\nrequest.geo.region\nrequest.geo.latitude\nrequest.geo.longitude\n \n// Self-hosting\nfunction getGeo(request) {\n  let ip = request.headers.get('X-Forwarded-For')\n  // Use a third-party service to lookup the geographic information\n}"
  },
  {
    "title": "Functions: ImageResponse | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/image-response",
    "html": "ImageResponse\n\nThe ImageResponse constructor allows you to generate dynamic images using JSX and CSS. This is useful for generating social media images such as Open Graph images, Twitter cards, and more.\n\nThe following options are available for ImageResponse:\n\nimport { ImageResponse } from 'next/og'\n \nnew ImageResponse(\n  element: ReactElement,\n  options: {\n    width?: number = 1200\n    height?: number = 630\n    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',\n    fonts?: {\n      name: string,\n      data: ArrayBuffer,\n      weight: number,\n      style: 'normal' | 'italic'\n    }[]\n    debug?: boolean = false\n \n    // Options that will be passed to the HTTP response\n    status?: number = 200\n    statusText?: string\n    headers?: Record<string, string>\n  },\n)\nSupported CSS Properties\n\nPlease refer to Satori’s documentation\n for a list of supported HTML and CSS features.\n\nVersion History\nVersion\tChanges\nv14.0.0\tImageResponse moved from next/server to next/og\nv13.3.0\tImageResponse can be imported from next/server.\nv13.0.0\tImageResponse introduced via @vercel/og package."
  },
  {
    "title": "Functions: generateViewport | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/generate-viewport",
    "html": "generateViewport\n\nYou can customize the initial viewport of the page with the static viewport object or the dynamic generateViewport function.\n\nGood to know:\n\nThe viewport object and generateViewport function exports are only supported in Server Components.\nYou cannot export both the viewport object and generateViewport function from the same route segment.\nIf you're coming from migrating metadata exports, you can use metadata-to-viewport-export codemod to update your changes.\nThe viewport object\n\nTo define the viewport options, export a viewport object from a layout.jsx or page.jsx file.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Viewport } from 'next'\n \nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n \nexport default function Page() {}\ngenerateViewport function\n\ngenerateViewport should return a Viewport object containing one or more viewport fields.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function generateViewport({ params }) {\n  return {\n    themeColor: '...',\n  }\n}\n\nGood to know:\n\nIf the viewport doesn't depend on runtime information, it should be defined using the static viewport object rather than generateViewport.\nViewport Fields\nthemeColor\n\nLearn more about theme-color\n.\n\nSimple theme color\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Viewport } from 'next'\n \nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n<head> output\n<meta name=\"theme-color\" content=\"black\" />\n\nWith media attribute\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Viewport } from 'next'\n \nexport const viewport: Viewport = {\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: 'cyan' },\n    { media: '(prefers-color-scheme: dark)', color: 'black' },\n  ],\n}\n<head> output\n<meta name=\"theme-color\" media=\"(prefers-color-scheme: light)\" content=\"cyan\" />\n<meta name=\"theme-color\" media=\"(prefers-color-scheme: dark)\" content=\"black\" />\nwidth, initialScale, maximumScale and userScalable\n\nGood to know: The viewport meta tag is automatically set, and manual configuration is usually unnecessary as the default is sufficient. However, the information is provided for completeness.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Viewport } from 'next'\n \nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  // Also supported by less commonly used\n  // interactiveWidget: 'resizes-visual',\n}\n<head> output\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"\n/>\ncolorScheme\n\nLearn more about color-scheme\n.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Viewport } from 'next'\n \nexport const viewport: Viewport = {\n  colorScheme: 'dark',\n}\n<head> output\n<meta name=\"color-scheme\" content=\"dark\" />\nTypes\n\nYou can add type safety to your viewport object by using the Viewport type. If you are using the built-in TypeScript plugin in your IDE, you do not need to manually add the type, but you can still explicitly add it if you want.\n\nviewport object\nimport type { Viewport } from 'next'\n \nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\ngenerateViewport function\nRegular function\nimport type { Viewport } from 'next'\n \nexport function generateViewport(): Viewport {\n  return {\n    themeColor: 'black',\n  }\n}\nWith segment props\nimport type { Viewport } from 'next'\n \ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n \nexport function generateViewport({ params, searchParams }: Props): Viewport {\n  return {\n    themeColor: 'black',\n  }\n}\n \nexport default function Page({ params, searchParams }: Props) {}\nJavaScript Projects\n\nFor JavaScript projects, you can use JSDoc to add type safety.\n\n/** @type {import(\"next\").Viewport} */\nexport const viewport = {\n  themeColor: 'black',\n}\nVersion History\nVersion\tChanges\nv14.0.0\tviewport and generateViewport introduced."
  },
  {
    "title": "Functions: headers | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/headers",
    "html": "headers\n\nThe headers function allows you to read the HTTP incoming request headers from a Server Component.\n\nheaders()\n\nThis API extends the Web Headers API\n. It is read-only, meaning you cannot set / delete the outgoing request headers.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { headers } from 'next/headers'\n \nexport default function Page() {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n \n  return <div>Referer: {referer}</div>\n}\n\nGood to know:\n\nheaders() is a Dynamic Function whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into dynamic rendering at request time.\nAPI Reference\nconst headersList = headers()\nParameters\n\nheaders does not take any parameters.\n\nReturns\n\nheaders returns a read-only Web Headers\n object.\n\nHeaders.entries()\n: Returns an iterator\n allowing to go through all key/value pairs contained in this object.\nHeaders.forEach()\n: Executes a provided function once for each key/value pair in this Headers object.\nHeaders.get()\n: Returns a String\n sequence of all the values of a header within a Headers object with a given name.\nHeaders.has()\n: Returns a boolean stating whether a Headers object contains a certain header.\nHeaders.keys()\n: Returns an iterator\n allowing you to go through all keys of the key/value pairs contained in this object.\nHeaders.values()\n: Returns an iterator\n allowing you to go through all values of the key/value pairs contained in this object.\nExamples\nUsage with Data Fetching\n\nheaders() can be used in combination with React Suspense:\n\napp/page.js\nimport { Suspense } from 'react'\nimport { headers } from 'next/headers'\n \nasync function User() {\n  const authorization = headers().get('authorization')\n  const res = await fetch('...', {\n    headers: { authorization }, // Forward the authorization header\n  })\n  const user = await res.json()\n \n  return <h1>{user.name}</h1>\n}\n \nexport default function Page() {\n  return (\n    <Suspense fallback={null}>\n      <User />\n    </Suspense>\n  )\n}\nIP Address\n\nheaders() can be used to get the IP address of the client.\n\napp/page.js\nimport { Suspense } from 'react'\nimport { headers } from 'next/headers'\n \nfunction IP() {\n  const FALLBACK_IP_ADDRESS = '0.0.0.0'\n  const forwardedFor = headers().get('x-forwarded-for')\n \n  if (forwardedFor) {\n    return forwardedFor.split(',')[0] ?? FALLBACK_IP_ADDRESS\n  }\n \n  return headers().get('x-real-ip') ?? FALLBACK_IP_ADDRESS\n}\n \nexport default function Page() {\n  return (\n    <Suspense fallback={null}>\n      <IP />\n    </Suspense>\n  )\n}\n\nIn addition to x-forwarded-for, headers() can also read:\n\nx-real-ip\nx-forwarded-host\nx-forwarded-port\nx-forwarded-proto\nVersion History\nVersion\tChanges\nv13.0.0\theaders introduced."
  },
  {
    "title": "Functions: generateStaticParams | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/generate-static-params",
    "html": "generateStaticParams\n\nThe generateStaticParams function can be used in combination with dynamic route segments to statically generate routes at build time instead of on-demand at request time.\n\napp/blog/[slug]/page.js\n// Return a list of `params` to populate the [slug] dynamic segment\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n \n// Multiple versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\nexport default function Page({ params }) {\n  const { slug } = params\n  // ...\n}\n\nGood to know:\n\nYou can use the dynamicParams segment config option to control what happens when a dynamic segment is visited that was not generated with generateStaticParams.\nYou must return an empty array from generateStaticParams or utilize export const dynamic = 'force-static' in order to revalidate (ISR) paths at runtime.\nDuring next dev, generateStaticParams will be called when you navigate to a route.\nDuring next build, generateStaticParams runs before the corresponding Layouts or Pages are generated.\nDuring revalidation (ISR), generateStaticParams will not be called again.\ngenerateStaticParams replaces the getStaticPaths function in the Pages Router.\nParameters\n\noptions.params (optional)\n\nIf multiple dynamic segments in a route use generateStaticParams, the child generateStaticParams function is executed once for each set of params the parent generates.\n\nThe params object contains the populated params from the parent generateStaticParams, which can be used to generate the params in a child segment.\n\nReturns\n\ngenerateStaticParams should return an array of objects where each object represents the populated dynamic segments of a single route.\n\nEach property in the object is a dynamic segment to be filled in for the route.\nThe properties name is the segment's name, and the properties value is what that segment should be filled in with.\nExample Route\tgenerateStaticParams Return Type\n/product/[id]\t{ id: string }[]\n/products/[category]/[product]\t{ category: string, product: string }[]\n/products/[...slug]\t{ slug: string[] }[]\nSingle Dynamic Segment\napp/product/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }, { id: '3' }]\n}\n \n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/1\n// - /product/2\n// - /product/3\nexport default function Page({ params }: { params: { id: string } }) {\n  const { id } = params\n  // ...\n}\nMultiple Dynamic Segments\napp/products/[category]/[product]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function generateStaticParams() {\n  return [\n    { category: 'a', product: '1' },\n    { category: 'b', product: '2' },\n    { category: 'c', product: '3' },\n  ]\n}\n \n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /products/a/1\n// - /products/b/2\n// - /products/c/3\nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  const { category, product } = params\n  // ...\n}\nCatch-all Dynamic Segment\napp/product/[...slug]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function generateStaticParams() {\n  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]\n}\n \n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/a/1\n// - /product/b/2\n// - /product/c/3\nexport default function Page({ params }: { params: { slug: string[] } }) {\n  const { slug } = params\n  // ...\n}\nExamples\nStatic Rendering\nAll paths at build time\n\nTo statically render all paths at build time, supply the full list of paths to generateStaticParams:\n\napp/blog/[slug]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\nSubset of paths at build time\n\nTo statically render a subset of paths at build time, and the rest the first time they're visited at runtime, return a partial list of paths:\n\napp/blog/[slug]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  // Render the first 10 posts at build time\n  return posts.slice(0, 10).map((post) => ({\n    slug: post.slug,\n  }))\n}\n\nThen, by using the dynamicParams segment config option, you can control what happens when a dynamic segment is visited that was not generated with generateStaticParams.\n\napp/blog/[slug]/page.js\n// All posts besides the top 10 will be a 404\nexport const dynamicParams = false\n \nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n  const topPosts = posts.slice(0, 10)\n \n  return topPosts.map((post) => ({\n    slug: post.slug,\n  }))\n}\nAll paths at runtime\n\nTo statically render all paths the first time they're visited, return an empty array (no paths will be rendered at build time) or utilize export const dynamic = 'force-static':\n\napp/blog/[slug]/page.js\nexport async function generateStaticParams() {\n  return []\n}\n\nGood to know: You must always return an array from generateStaticParams, even if it's empty. Otherwise, the route will be dynamically rendered.\n\napp/changelog/[slug]/page.js\nexport const dynamic = 'force-static'\nDisable rendering for unspecified paths\n\nTo prevent unspecified paths from being statically rendered at runtime, add the export const dynamicParams = false option in a route segment. When this config option is used, only paths provided by generateStaticParams will be served, and unspecified routes will 404 or match (in the case of catch-all routes).\n\nMultiple Dynamic Segments in a Route\n\nYou can generate params for dynamic segments above the current layout or page, but not below. For example, given the app/products/[category]/[product] route:\n\napp/products/[category]/[product]/page.js can generate params for both [category] and [product].\napp/products/[category]/layout.js can only generate params for [category].\n\nThere are two approaches to generating params for a route with multiple dynamic segments:\n\nGenerate params from the bottom up\n\nGenerate multiple dynamic segments from the child route segment.\n\napp/products/[category]/[product]/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// Generate segments for both [category] and [product]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n \n  return products.map((product) => ({\n    category: product.category.slug,\n    product: product.id,\n  }))\n}\n \nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  // ...\n}\nGenerate params from the top down\n\nGenerate the parent segments first and use the result to generate the child segments.\n\napp/products/[category]/layout.tsx\nTypeScript\nJavaScript\nTypeScript\n// Generate segments for [category]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n \n  return products.map((product) => ({\n    category: product.category.slug,\n  }))\n}\n \nexport default function Layout({ params }: { params: { category: string } }) {\n  // ...\n}\n\nA child route segment's generateStaticParams function is executed once for each segment a parent generateStaticParams generates.\n\nThe child generateStaticParams function can use the params returned from the parent generateStaticParams function to dynamically generate its own segments.\n\napp/products/[category]/[product]/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// Generate segments for [product] using the `params` passed from\n// the parent segment's `generateStaticParams` function\nexport async function generateStaticParams({\n  params: { category },\n}: {\n  params: { category: string }\n}) {\n  const products = await fetch(\n    `https://.../products?category=${category}`\n  ).then((res) => res.json())\n \n  return products.map((product) => ({\n    product: product.id,\n  }))\n}\n \nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  // ...\n}\n\nGood to know: fetch requests are automatically memoized for the same data across all generate-prefixed functions, Layouts, Pages, and Server Components. React cache can be used if fetch is unavailable.\n\nVersion History\nVersion\tChanges\nv13.0.0\tgenerateStaticParams introduced."
  },
  {
    "title": "Functions: generateMetadata | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/generate-metadata",
    "html": "generateMetadata\n\nThis page covers all Config-based Metadata options with generateMetadata and the static metadata object.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \n// either Static metadata\nexport const metadata: Metadata = {\n  title: '...',\n}\n \n// or Dynamic metadata\nexport async function generateMetadata({ params }) {\n  return {\n    title: '...',\n  }\n}\n\nGood to know:\n\nThe metadata object and generateMetadata function exports are only supported in Server Components.\nYou cannot export both the metadata object and generateMetadata function from the same route segment.\nThe metadata object\n\nTo define static metadata, export a Metadata object from a layout.js or page.js file.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n \nexport default function Page() {}\n\nSee the Metadata Fields for a complete list of supported options.\n\ngenerateMetadata function\n\nDynamic metadata depends on dynamic information, such as the current route parameters, external data, or metadata in parent segments, can be set by exporting a generateMetadata function that returns a Metadata object.\n\napp/products/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata, ResolvingMetadata } from 'next'\n \ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n \nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  // read route params\n  const id = params.id\n \n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n \n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n \n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n \nexport default function Page({ params, searchParams }: Props) {}\nParameters\n\ngenerateMetadata function accepts the following parameters:\n\nprops - An object containing the parameters of the current route:\n\nparams - An object containing the dynamic route parameters object from the root segment down to the segment generateMetadata is called from. Examples:\n\nRoute\tURL\tparams\napp/shop/[slug]/page.js\t/shop/1\t{ slug: '1' }\napp/shop/[tag]/[item]/page.js\t/shop/1/2\t{ tag: '1', item: '2' }\napp/shop/[...slug]/page.js\t/shop/1/2\t{ slug: ['1', '2'] }\n\nsearchParams - An object containing the current URL's search params\n. Examples:\n\nURL\tsearchParams\n/shop?a=1\t{ a: '1' }\n/shop?a=1&b=2\t{ a: '1', b: '2' }\n/shop?a=1&a=2\t{ a: ['1', '2'] }\n\nparent - A promise of the resolved metadata from parent route segments.\n\nReturns\n\ngenerateMetadata should return a Metadata object containing one or more metadata fields.\n\nGood to know:\n\nIf metadata doesn't depend on runtime information, it should be defined using the static metadata object rather than generateMetadata.\nfetch requests are automatically memoized for the same data across generateMetadata, generateStaticParams, Layouts, Pages, and Server Components. React cache can be used if fetch is unavailable.\nsearchParams are only available in page.js segments.\nThe redirect() and notFound() Next.js methods can also be used inside generateMetadata.\nMetadata Fields\ntitle\n\nThe title attribute is used to set the title of the document. It can be defined as a simple string or an optional template object.\n\nString\nlayout.js | page.js\nexport const metadata = {\n  title: 'Next.js',\n}\n<head> output\n<title>Next.js</title>\nTemplate object\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: {\n    template: '...',\n    default: '...',\n    absolute: '...',\n  },\n}\nDefault\n\ntitle.default can be used to provide a fallback title to child route segments that don't define a title.\n\napp/layout.tsx\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: {\n    default: 'Acme',\n  },\n}\napp/about/page.tsx\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {}\n \n// Output: <title>Acme</title>\nTemplate\n\ntitle.template can be used to add a prefix or a suffix to titles defined in child route segments.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: {\n    template: '%s | Acme',\n    default: 'Acme', // a default is required when creating a template\n  },\n}\napp/about/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'About',\n}\n \n// Output: <title>About | Acme</title>\n\nGood to know:\n\ntitle.template applies to child route segments and not the segment it's defined in. This means:\n\ntitle.default is required when you add a title.template.\ntitle.template defined in layout.js will not apply to a title defined in a page.js of the same route segment.\ntitle.template defined in page.js has no effect because a page is always the terminating segment (it doesn't have any children route segments).\n\ntitle.template has no effect if a route has not defined a title or title.default.\n\nAbsolute\n\ntitle.absolute can be used to provide a title that ignores title.template set in parent segments.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\napp/about/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n \n// Output: <title>About</title>\n\nGood to know:\n\nlayout.js\n\ntitle (string) and title.default define the default title for child segments (that do not define their own title). It will augment title.template from the closest parent segment if it exists.\ntitle.absolute defines the default title for child segments. It ignores title.template from parent segments.\ntitle.template defines a new title template for child segments.\n\npage.js\n\nIf a page does not define its own title the closest parents resolved title will be used.\ntitle (string) defines the routes title. It will augment title.template from the closest parent segment if it exists.\ntitle.absolute defines the route title. It ignores title.template from parent segments.\ntitle.template has no effect in page.js because a page is always the terminating segment of a route.\ndescription\nlayout.js | page.js\nexport const metadata = {\n  description: 'The React Framework for the Web',\n}\n<head> output\n<meta name=\"description\" content=\"The React Framework for the Web\" />\nBasic Fields\nlayout.js | page.js\nexport const metadata = {\n  generator: 'Next.js',\n  applicationName: 'Next.js',\n  referrer: 'origin-when-cross-origin',\n  keywords: ['Next.js', 'React', 'JavaScript'],\n  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],\n  creator: 'Jiachi Liu',\n  publisher: 'Sebastian Markbåge',\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n}\n<head> output\n<meta name=\"application-name\" content=\"Next.js\" />\n<meta name=\"author\" content=\"Seb\" />\n<link rel=\"author\" href=\"https://nextjs.org\" />\n<meta name=\"author\" content=\"Josh\" />\n<meta name=\"generator\" content=\"Next.js\" />\n<meta name=\"keywords\" content=\"Next.js,React,JavaScript\" />\n<meta name=\"referrer\" content=\"origin-when-cross-origin\" />\n<meta name=\"color-scheme\" content=\"dark\" />\n<meta name=\"creator\" content=\"Jiachi Liu\" />\n<meta name=\"publisher\" content=\"Sebastian Markbåge\" />\n<meta name=\"format-detection\" content=\"telephone=no, address=no, email=no\" />\nmetadataBase\n\nmetadataBase is a convenience option to set a base URL prefix for metadata fields that require a fully qualified URL.\n\nmetadataBase allows URL-based metadata fields defined in the current route segment and below to use a relative path instead of an otherwise required absolute URL.\nThe field's relative path will be composed with metadataBase to form a fully qualified URL.\nIf not configured, metadataBase is automatically populated with a default value.\nlayout.js | page.js\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n  alternates: {\n    canonical: '/',\n    languages: {\n      'en-US': '/en-US',\n      'de-DE': '/de-DE',\n    },\n  },\n  openGraph: {\n    images: '/og-image.png',\n  },\n}\n<head> output\n<link rel=\"canonical\" href=\"https://acme.com\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://acme.com/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://acme.com/de-DE\" />\n<meta property=\"og:image\" content=\"https://acme.com/og-image.png\" />\n\nGood to know:\n\nmetadataBase is typically set in root app/layout.js to apply to URL-based metadata fields across all routes.\nAll URL-based metadata fields that require absolute URLs can be configured with a metadataBase option.\nmetadataBase can contain a subdomain e.g. https://app.acme.com or base path e.g. https://acme.com/start/from/here\nIf a metadata field provides an absolute URL, metadataBase will be ignored.\nUsing a relative path in a URL-based metadata field without configuring a metadataBase will cause a build error.\nNext.js will normalize duplicate slashes between metadataBase (e.g. https://acme.com/) and a relative field (e.g. /path) to a single slash (e.g. https://acme.com/path)\nDefault value\n\nIf not configured, metadataBase has a default value.\n\nOn Vercel:\n\nFor production deployments, VERCEL_PROJECT_PRODUCTION_URL will be used.\nFor preview deployments, VERCEL_BRANCH_URL will take priority, and fallback to VERCEL_URL if it's not present.\n\nIf these values are present they will be used as the default value of metadataBase, otherwise it falls back to http://localhost:${process.env.PORT || 3000}. This allows Open Graph images to work on both local build and Vercel preview and production deployments. When overriding the default, we recommend using environment variables to compute the URL. This allows configuring a URL for local development, staging, and production environments.\n\nSee more details about these environment variables in the System Environment Variables\n docs.\n\nURL Composition\n\nURL composition favors developer intent over default directory traversal semantics.\n\nTrailing slashes between metadataBase and metadata fields are normalized.\nAn \"absolute\" path in a metadata field (that typically would replace the whole URL path) is treated as a \"relative\" path (starting from the end of metadataBase).\n\nFor example, given the following metadataBase:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  metadataBase: new URL('https://acme.com'),\n}\n\nAny metadata fields that inherit the above metadataBase and set their own value will be resolved as follows:\n\nmetadata field\tResolved URL\n/\thttps://acme.com\n./\thttps://acme.com\npayments\thttps://acme.com/payments\n/payments\thttps://acme.com/payments\n./payments\thttps://acme.com/payments\n../payments\thttps://acme.com/payments\nhttps://beta.acme.com/payments\thttps://beta.acme.com/payments\nopenGraph\nlayout.js | page.js\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    url: 'https://nextjs.org',\n    siteName: 'Next.js',\n    images: [\n      {\n        url: 'https://nextjs.org/og.png', // Must be an absolute URL\n        width: 800,\n        height: 600,\n      },\n      {\n        url: 'https://nextjs.org/og-alt.png', // Must be an absolute URL\n        width: 1800,\n        height: 1600,\n        alt: 'My custom alt',\n      },\n    ],\n    videos: [\n      {\n        url: 'https://nextjs.org/video.mp4', // Must be an absolute URL\n        width: 800,\n        height: 600,\n      },\n    ],\n    locale: 'en_US',\n    type: 'website',\n  },\n}\n<head> output\n<meta property=\"og:title\" content=\"Next.js\" />\n<meta property=\"og:description\" content=\"The React Framework for the Web\" />\n<meta property=\"og:url\" content=\"https://nextjs.org/\" />\n<meta property=\"og:site_name\" content=\"Next.js\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta property=\"og:image:url\" content=\"https://nextjs.org/og.png\" />\n<meta property=\"og:image:width\" content=\"800\" />\n<meta property=\"og:image:height\" content=\"600\" />\n<meta property=\"og:image:url\" content=\"https://nextjs.org/og-alt.png\" />\n<meta property=\"og:image:width\" content=\"1800\" />\n<meta property=\"og:image:height\" content=\"1600\" />\n<meta property=\"og:image:alt\" content=\"My custom alt\" />\n<meta property=\"og:type\" content=\"website\" />\nlayout.js | page.js\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    type: 'article',\n    publishedTime: '2023-01-01T00:00:00.000Z',\n    authors: ['Seb', 'Josh'],\n  },\n}\n<head> output\n<meta property=\"og:title\" content=\"Next.js\" />\n<meta property=\"og:description\" content=\"The React Framework for the Web\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-01-01T00:00:00.000Z\" />\n<meta property=\"article:author\" content=\"Seb\" />\n<meta property=\"article:author\" content=\"Josh\" />\n\nGood to know:\n\nIt may be more convenient to use the file-based Metadata API for Open Graph images. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you.\nrobots\nlayout.tsx | page.tsx\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  robots: {\n    index: false,\n    follow: true,\n    nocache: true,\n    googleBot: {\n      index: true,\n      follow: false,\n      noimageindex: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n}\n<head> output\n<meta name=\"robots\" content=\"noindex, follow, nocache\" />\n<meta\n  name=\"googlebot\"\n  content=\"index, nofollow, noimageindex, max-video-preview:-1, max-image-preview:large, max-snippet:-1\"\n/>\nicons\n\nGood to know: We recommend using the file-based Metadata API for icons where possible. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you.\n\nlayout.js | page.js\nexport const metadata = {\n  icons: {\n    icon: '/icon.png',\n    shortcut: '/shortcut-icon.png',\n    apple: '/apple-icon.png',\n    other: {\n      rel: 'apple-touch-icon-precomposed',\n      url: '/apple-touch-icon-precomposed.png',\n    },\n  },\n}\n<head> output\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\nlayout.js | page.js\nexport const metadata = {\n  icons: {\n    icon: [\n      { url: '/icon.png' },\n      new URL('/icon.png', 'https://example.com'),\n      { url: '/icon-dark.png', media: '(prefers-color-scheme: dark)' },\n    ],\n    shortcut: ['/shortcut-icon.png'],\n    apple: [\n      { url: '/apple-icon.png' },\n      { url: '/apple-icon-x3.png', sizes: '180x180', type: 'image/png' },\n    ],\n    other: [\n      {\n        rel: 'apple-touch-icon-precomposed',\n        url: '/apple-touch-icon-precomposed.png',\n      },\n    ],\n  },\n}\n<head> output\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"icon\" href=\"https://example.com/icon.png\" />\n<link rel=\"icon\" href=\"/icon-dark.png\" media=\"(prefers-color-scheme: dark)\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon-x3.png\"\n  sizes=\"180x180\"\n  type=\"image/png\"\n/>\n\nGood to know: The msapplication-* meta tags are no longer supported in Chromium builds of Microsoft Edge, and thus no longer needed.\n\nthemeColor\n\nDeprecated: The themeColor option in metadata is deprecated as of Next.js 14. Please use the viewport configuration instead.\n\nmanifest\n\nA web application manifest, as defined in the Web Application Manifest specification\n.\n\nlayout.js | page.js\nexport const metadata = {\n  manifest: 'https://nextjs.org/manifest.json',\n}\n<head> output\n<link rel=\"manifest\" href=\"https://nextjs.org/manifest.json\" />\ntwitter\n\nThe Twitter specification is (surprisingly) used for more than just X (formerly known as Twitter).\n\nLearn more about the Twitter Card markup reference\n.\n\nlayout.js | page.js\nexport const metadata = {\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: ['https://nextjs.org/og.png'], // Must be an absolute URL\n  },\n}\n<head> output\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\nlayout.js | page.js\nexport const metadata = {\n  twitter: {\n    card: 'app',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: {\n      url: 'https://nextjs.org/og.png',\n      alt: 'Next.js Logo',\n    },\n    app: {\n      name: 'twitter_app',\n      id: {\n        iphone: 'twitter_app://iphone',\n        ipad: 'twitter_app://ipad',\n        googleplay: 'twitter_app://googleplay',\n      },\n      url: {\n        iphone: 'https://iphone_url',\n        ipad: 'https://ipad_url',\n      },\n    },\n  },\n}\n<head> output\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:card\" content=\"app\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\n<meta name=\"twitter:image:alt\" content=\"Next.js Logo\" />\n<meta name=\"twitter:app:name:iphone\" content=\"twitter_app\" />\n<meta name=\"twitter:app:id:iphone\" content=\"twitter_app://iphone\" />\n<meta name=\"twitter:app:id:ipad\" content=\"twitter_app://ipad\" />\n<meta name=\"twitter:app:id:googleplay\" content=\"twitter_app://googleplay\" />\n<meta name=\"twitter:app:url:iphone\" content=\"https://iphone_url\" />\n<meta name=\"twitter:app:url:ipad\" content=\"https://ipad_url\" />\n<meta name=\"twitter:app:name:ipad\" content=\"twitter_app\" />\n<meta name=\"twitter:app:name:googleplay\" content=\"twitter_app\" />\nviewport\n\nDeprecated: The viewport option in metadata is deprecated as of Next.js 14. Please use the viewport configuration instead.\n\nverification\nlayout.js | page.js\nexport const metadata = {\n  verification: {\n    google: 'google',\n    yandex: 'yandex',\n    yahoo: 'yahoo',\n    other: {\n      me: ['my-email', 'my-link'],\n    },\n  },\n}\n<head> output\n<meta name=\"google-site-verification\" content=\"google\" />\n<meta name=\"y_key\" content=\"yahoo\" />\n<meta name=\"yandex-verification\" content=\"yandex\" />\n<meta name=\"me\" content=\"my-email\" />\n<meta name=\"me\" content=\"my-link\" />\nappleWebApp\nlayout.js | page.js\nexport const metadata = {\n  itunes: {\n    appId: 'myAppStoreID',\n    appArgument: 'myAppArgument',\n  },\n  appleWebApp: {\n    title: 'Apple Web App',\n    statusBarStyle: 'black-translucent',\n    startupImage: [\n      '/assets/startup/apple-touch-startup-image-768x1004.png',\n      {\n        url: '/assets/startup/apple-touch-startup-image-1536x2008.png',\n        media: '(device-width: 768px) and (device-height: 1024px)',\n      },\n    ],\n  },\n}\n<head> output\n<meta\n  name=\"apple-itunes-app\"\n  content=\"app-id=myAppStoreID, app-argument=myAppArgument\"\n/>\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Apple Web App\" />\n<link\n  href=\"/assets/startup/apple-touch-startup-image-768x1004.png\"\n  rel=\"apple-touch-startup-image\"\n/>\n<link\n  href=\"/assets/startup/apple-touch-startup-image-1536x2008.png\"\n  media=\"(device-width: 768px) and (device-height: 1024px)\"\n  rel=\"apple-touch-startup-image\"\n/>\n<meta\n  name=\"apple-mobile-web-app-status-bar-style\"\n  content=\"black-translucent\"\n/>\nalternates\nlayout.js | page.js\nexport const metadata = {\n  alternates: {\n    canonical: 'https://nextjs.org',\n    languages: {\n      'en-US': 'https://nextjs.org/en-US',\n      'de-DE': 'https://nextjs.org/de-DE',\n    },\n    media: {\n      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',\n    },\n    types: {\n      'application/rss+xml': 'https://nextjs.org/rss',\n    },\n  },\n}\n<head> output\n<link rel=\"canonical\" href=\"https://nextjs.org\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://nextjs.org/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://nextjs.org/de-DE\" />\n<link\n  rel=\"alternate\"\n  media=\"only screen and (max-width: 600px)\"\n  href=\"https://nextjs.org/mobile\"\n/>\n<link\n  rel=\"alternate\"\n  type=\"application/rss+xml\"\n  href=\"https://nextjs.org/rss\"\n/>\nappLinks\nlayout.js | page.js\nexport const metadata = {\n  appLinks: {\n    ios: {\n      url: 'https://nextjs.org/ios',\n      app_store_id: 'app_store_id',\n    },\n    android: {\n      package: 'com.example.android/package',\n      app_name: 'app_name_android',\n    },\n    web: {\n      url: 'https://nextjs.org/web',\n      should_fallback: true,\n    },\n  },\n}\n<head> output\n<meta property=\"al:ios:url\" content=\"https://nextjs.org/ios\" />\n<meta property=\"al:ios:app_store_id\" content=\"app_store_id\" />\n<meta property=\"al:android:package\" content=\"com.example.android/package\" />\n<meta property=\"al:android:app_name\" content=\"app_name_android\" />\n<meta property=\"al:web:url\" content=\"https://nextjs.org/web\" />\n<meta property=\"al:web:should_fallback\" content=\"true\" />\narchives\n\nDescribes a collection of records, documents, or other materials of historical interest (source\n).\n\nlayout.js | page.js\nexport const metadata = {\n  archives: ['https://nextjs.org/13'],\n}\n<head> output\n<link rel=\"archives\" href=\"https://nextjs.org/13\" />\nassets\nlayout.js | page.js\nexport const metadata = {\n  assets: ['https://nextjs.org/assets'],\n}\n<head> output\n<link rel=\"assets\" href=\"https://nextjs.org/assets\" />\nbookmarks\nlayout.js | page.js\nexport const metadata = {\n  bookmarks: ['https://nextjs.org/13'],\n}\n<head> output\n<link rel=\"bookmarks\" href=\"https://nextjs.org/13\" />\ncategory\nlayout.js | page.js\nexport const metadata = {\n  category: 'technology',\n}\n<head> output\n<meta name=\"category\" content=\"technology\" />\nfacebook\n\nYou can connect a Facebook app or Facebook account to you webpage for certain Facebook Social Plugins Facebook Documentation\n\nGood to know: You can specify either appId or admins, but not both.\n\nlayout.js | page.js\nexport const metadata = {\n  facebook: {\n    appId: '12345678',\n  },\n}\n<head> output\n<meta property=\"fb:app_id\" content=\"12345678\" />\nlayout.js | page.js\nexport const metadata = {\n  facebook: {\n    admins: '12345678',\n  },\n}\n<head> output\n<meta property=\"fb:admins\" content=\"12345678\" />\n\nIf you want to generate multiple fb:admins meta tags you can use array value.\n\nlayout.js | page.js\nexport const metadata = {\n  facebook: {\n    admins: ['12345678', '87654321'],\n  },\n}\n<head> output\n<meta property=\"fb:admins\" content=\"12345678\" />\n<meta property=\"fb:admins\" content=\"87654321\" />\nother\n\nAll metadata options should be covered using the built-in support. However, there may be custom metadata tags specific to your site, or brand new metadata tags just released. You can use the other option to render any custom metadata tag.\n\nlayout.js | page.js\nexport const metadata = {\n  other: {\n    custom: 'meta',\n  },\n}\n<head> output\n<meta name=\"custom\" content=\"meta\" />\n\nIf you want to generate multiple same key meta tags you can use array value.\n\nlayout.js | page.js\nexport const metadata = {\n  other: {\n    custom: ['meta1', 'meta2'],\n  },\n}\n<head> output\n<meta name=\"custom\" content=\"meta1\" /> <meta name=\"custom\" content=\"meta2\" />\nUnsupported Metadata\n\nThe following metadata types do not currently have built-in support. However, they can still be rendered in the layout or page itself.\n\nMetadata\tRecommendation\n<meta http-equiv=\"...\">\tUse appropriate HTTP Headers via redirect(), Middleware, Security Headers\n<base>\tRender the tag in the layout or page itself.\n<noscript>\tRender the tag in the layout or page itself.\n<style>\tLearn more about styling in Next.js.\n<script>\tLearn more about using scripts.\n<link rel=\"stylesheet\" />\timport stylesheets directly in the layout or page itself.\n<link rel=\"preload />\tUse ReactDOM preload method\n<link rel=\"preconnect\" />\tUse ReactDOM preconnect method\n<link rel=\"dns-prefetch\" />\tUse ReactDOM prefetchDNS method\nResource hints\n\nThe <link> element has a number of rel keywords that can be used to hint to the browser that an external resource is likely to be needed. The browser uses this information to apply preloading optimizations depending on the keyword.\n\nWhile the Metadata API doesn't directly support these hints, you can use new ReactDOM methods\n to safely insert them into the <head> of the document.\n\napp/preload-resources.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport ReactDOM from 'react-dom'\n \nexport function PreloadResources() {\n  ReactDOM.preload('...', { as: '...' })\n  ReactDOM.preconnect('...', { crossOrigin: '...' })\n  ReactDOM.prefetchDNS('...')\n \n  return '...'\n}\n<link rel=\"preload\">\n\nStart loading a resource early in the page rendering (browser) lifecycle. MDN Docs\n.\n\nReactDOM.preload(href: string, options: { as: string })\n<head> output\n<link rel=\"preload\" href=\"...\" as=\"...\" />\n<link rel=\"preconnect\">\n\nPreemptively initiate a connection to an origin. MDN Docs\n.\n\nReactDOM.preconnect(href: string, options?: { crossOrigin?: string })\n<head> output\n<link rel=\"preconnect\" href=\"...\" crossorigin />\n<link rel=\"dns-prefetch\">\n\nAttempt to resolve a domain name before resources get requested. MDN Docs\n.\n\nReactDOM.prefetchDNS(href: string)\n<head> output\n<link rel=\"dns-prefetch\" href=\"...\" />\n\nGood to know:\n\nThese methods are currently only supported in Client Components, which are still Server Side Rendered on initial page load.\nNext.js in-built features such as next/font, next/image and next/script automatically handle relevant resource hints.\nTypes\n\nYou can add type safety to your metadata by using the Metadata type. If you are using the built-in TypeScript plugin in your IDE, you do not need to manually add the type, but you can still explicitly add it if you want.\n\nmetadata object\nlayout.tsx | page.tsx\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\ngenerateMetadata function\nRegular function\nlayout.tsx | page.tsx\nimport type { Metadata } from 'next'\n \nexport function generateMetadata(): Metadata {\n  return {\n    title: 'Next.js',\n  }\n}\nAsync function\nlayout.tsx | page.tsx\nimport type { Metadata } from 'next'\n \nexport async function generateMetadata(): Promise<Metadata> {\n  return {\n    title: 'Next.js',\n  }\n}\nWith segment props\nlayout.tsx | page.tsx\nimport type { Metadata } from 'next'\n \ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n \nexport function generateMetadata({ params, searchParams }: Props): Metadata {\n  return {\n    title: 'Next.js',\n  }\n}\n \nexport default function Page({ params, searchParams }: Props) {}\nWith parent metadata\nlayout.tsx | page.tsx\nimport type { Metadata, ResolvingMetadata } from 'next'\n \nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  return {\n    title: 'Next.js',\n  }\n}\nJavaScript Projects\n\nFor JavaScript projects, you can use JSDoc to add type safety.\n\nlayout.js | page.js\n/** @type {import(\"next\").Metadata} */\nexport const metadata = {\n  title: 'Next.js',\n}\nVersion History\nVersion\tChanges\nv13.2.0\tviewport, themeColor, and colorScheme deprecated in favor of the viewport configuration.\nv13.2.0\tmetadata and generateMetadata introduced."
  },
  {
    "title": "Functions: generateSitemaps | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/generate-sitemaps",
    "html": "generateSitemaps\n\nYou can use the generateSitemaps function to generate multiple sitemaps for your application.\n\nReturns\n\nThe generateSitemaps returns an array of objects with an id property.\n\nURLs\n\nIn production, your generated sitemaps will be available at /.../sitemap/[id].xml. For example, /product/sitemap/1.xml.\n\nIn development, you can view the generated sitemap on /.../sitemap.xml/[id]. For example, /product/sitemap.xml/1. This difference is temporary and will follow the production format.\n\nExample\n\nFor example, to split a sitemap using generateSitemaps, return an array of objects with the sitemap id. Then, use the id to generate the unique sitemaps.\n\napp/product/sitemap.ts\nTypeScript\nJavaScript\nTypeScript\nimport { BASE_URL } from '@/app/lib/constants'\n \nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n \nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${product.id}`,\n    lastModified: product.date,\n  }))\n}"
  },
  {
    "title": "Functions: draftMode | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/draft-mode",
    "html": "draftMode\n\nThe draftMode function allows you to detect Draft Mode inside a Server Component.\n\napp/page.js\nimport { draftMode } from 'next/headers'\n \nexport default function Page() {\n  const { isEnabled } = draftMode()\n  return (\n    <main>\n      <h1>My Blog Post</h1>\n      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>\n    </main>\n  )\n}\nVersion History\nVersion\tChanges\nv13.4.0\tdraftMode introduced."
  },
  {
    "title": "Functions: generateImageMetadata | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/generate-image-metadata",
    "html": "generateImageMetadata\n\nYou can use generateImageMetadata to generate different versions of one image or return multiple images for one route segment. This is useful for when you want to avoid hard-coding metadata values, such as for icons.\n\nParameters\n\ngenerateImageMetadata function accepts the following parameters:\n\nparams (optional)\n\nAn object containing the dynamic route parameters object from the root segment down to the segment generateImageMetadata is called from.\n\nicon.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function generateImageMetadata({\n  params,\n}: {\n  params: { slug: string }\n}) {\n  // ...\n}\nRoute\tURL\tparams\napp/shop/icon.js\t/shop\tundefined\napp/shop/[slug]/icon.js\t/shop/1\t{ slug: '1' }\napp/shop/[tag]/[item]/icon.js\t/shop/1/2\t{ tag: '1', item: '2' }\nReturns\n\nThe generateImageMetadata function should return an array of objects containing the image's metadata such as alt and size. In addition, each item must include an id value which will be passed to the props of the image generating function.\n\nImage Metadata Object\tType\nid\tstring (required)\nalt\tstring\nsize\t{ width: number; height: number }\ncontentType\tstring\nicon.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ImageResponse } from 'next/og'\n \nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n \nexport default function Icon({ id }: { id: string }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\nExamples\nUsing external data\n\nThis example uses the params object and external data to generate multiple Open Graph images for a route segment.\n\napp/products/[id]/opengraph-image.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n \nexport async function generateImageMetadata({\n  params,\n}: {\n  params: { id: string }\n}) {\n  const images = await getOGImages(params.id)\n \n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n \nexport default async function Image({\n  params,\n  id,\n}: {\n  params: { id: string }\n  id: number\n}) {\n  const productId = params.id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n \n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\nVersion History\nVersion\tChanges\nv13.3.0\tgenerateImageMetadata introduced."
  },
  {
    "title": "Functions: fetch | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/fetch",
    "html": "fetch\n\nNext.js extends the Web fetch() API\n to allow each request on the server to set its own persistent caching and revalidation semantics.\n\nIn the browser, the cache option indicates how a fetch request will interact with the browser's HTTP cache. With this extension, cache indicates how a server-side fetch request will interact with the framework's persistent Data Cache.\n\nYou can call fetch with async and await directly within Server Components.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\nfetch(url, options)\n\nSince Next.js extends the Web fetch() API\n, you can use any of the native options available\n.\n\noptions.cache\n\nConfigure how the request should interact with Next.js Data Cache.\n\nfetch(`https://...`, { cache: 'force-cache' | 'no-store' })\nforce-cache (default): Next.js looks for a matching request in its Data Cache.\nIf there is a match and it is fresh, it will be returned from the cache.\nIf there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource.\nno-store: Next.js fetches the resource from the remote server on every request without looking in the cache, and it will not update the cache with the downloaded resource.\noptions.next.revalidate\nfetch(`https://...`, { next: { revalidate: false | 0 | number } })\n\nSet the cache lifetime of a resource (in seconds).\n\nfalse - Cache the resource indefinitely. Semantically equivalent to revalidate: Infinity. The HTTP cache may evict older resources over time.\n0 - Prevent the resource from being cached.\nnumber - (in seconds) Specify the resource should have a cache lifetime of at most n seconds.\n\nGood to know:\n\nIf an individual fetch() request sets a revalidate number lower than the default revalidate of a route, the whole route revalidation interval will be decreased.\nIf two fetch requests with the same URL in the same route have different revalidate values, the lower value will be used.\nAs a convenience, it is not necessary to set the cache option if revalidate is set to a number.\nConflicting options such as { revalidate: 3600, cache: 'no-store' } will cause an error.\noptions.next.tags\nfetch(`https://...`, { next: { tags: ['collection'] } })\n\nSet the cache tags of a resource. Data can then be revalidated on-demand using revalidateTag\n. The max length for a custom tag is 256 characters and the max tag items is 64.\n\nTroubleshooting\nFetch cache: 'no-store' not showing fresh data in development\n\nNext.js caches fetch responses in Server Components across Hot Module Replacement (HMR) in local development for faster responses and to reduce costs for billed API calls.\n\nBy default, the HMR cache applies to all fetch requests, including those with the cache: 'no-store' option. This means uncached requests will not show fresh data between HMR refreshes. However, the cache will be cleared on navigation or full-page reloads.\n\nSee the serverComponentsHmrCache docs for more information.\n\nVersion History\nVersion\tChanges\nv13.0.0\tfetch introduced."
  },
  {
    "title": "Functions: cookies | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions/cookies",
    "html": "cookies\n\nThe cookies function allows you to read the HTTP incoming request cookies from a Server Component or write outgoing request cookies in a Server Action or Route Handler.\n\nGood to know: cookies() is a Dynamic Function whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into dynamic rendering at request time.\n\ncookies().get(name)\n\nA method that takes a cookie name and returns an object with name and value. If a cookie with name isn't found, it returns undefined. If multiple cookies match, it will only return the first match.\n\napp/page.js\nimport { cookies } from 'next/headers'\n \nexport default function Page() {\n  const cookieStore = cookies()\n  const theme = cookieStore.get('theme')\n  return '...'\n}\ncookies().getAll()\n\nA method that is similar to get, but returns a list of all the cookies with a matching name. If name is unspecified, it returns all the available cookies.\n\napp/page.js\nimport { cookies } from 'next/headers'\n \nexport default function Page() {\n  const cookieStore = cookies()\n  return cookieStore.getAll().map((cookie) => (\n    <div key={cookie.name}>\n      <p>Name: {cookie.name}</p>\n      <p>Value: {cookie.value}</p>\n    </div>\n  ))\n}\ncookies().has(name)\n\nA method that takes a cookie name and returns a boolean based on if the cookie exists (true) or not (false).\n\napp/page.js\nimport { cookies } from 'next/headers'\n \nexport default function Page() {\n  const cookieStore = cookies()\n  const hasCookie = cookieStore.has('theme')\n  return '...'\n}\ncookies().set(name, value, options)\n\nA method that takes a cookie name, value, and options and sets the outgoing request cookie.\n\nGood to know: HTTP does not allow setting cookies after streaming starts, so you must use .set() in a Server Action or Route Handler.\n\napp/actions.js\n'use server'\n \nimport { cookies } from 'next/headers'\n \nasync function create(data) {\n  cookies().set('name', 'lee')\n  // or\n  cookies().set('name', 'lee', { secure: true })\n  // or\n  cookies().set({\n    name: 'name',\n    value: 'lee',\n    httpOnly: true,\n    path: '/',\n  })\n}\nDeleting cookies\n\nGood to know: You can only delete cookies in a Server Action or Route Handler.\n\nThere are several options for deleting a cookie:\n\ncookies().delete(name)\n\nYou can explicitly delete a cookie with a given name.\n\napp/actions.js\n'use server'\n \nimport { cookies } from 'next/headers'\n \nasync function delete(data) {\n  cookies().delete('name')\n}\ncookies().set(name, '')\n\nAlternatively, you can set a new cookie with the same name and an empty value.\n\napp/actions.js\n'use server'\n \nimport { cookies } from 'next/headers'\n \nasync function delete(data) {\n  cookies().set('name', '')\n}\n\nGood to know: .set() is only available in a Server Action or Route Handler.\n\ncookies().set(name, value, { maxAge: 0 })\n\nSetting maxAge to 0 will immediately expire a cookie. maxAge accepts a value in seconds.\n\napp/actions.js\n'use server'\n \nimport { cookies } from 'next/headers'\n \nasync function delete(data) {\n  cookies().set('name', 'value', { maxAge: 0 })\n}\ncookies().set(name, value, { expires: timestamp })\n\nSetting expires to any value in the past will immediately expire a cookie.\n\napp/actions.js\n'use server'\n \nimport { cookies } from 'next/headers'\n \nasync function delete(data) {\n  const oneDay = 24 * 60 * 60 * 1000\n  cookies().set('name', 'value', { expires: Date.now() - oneDay })\n}\n\nGood to know: You can only delete cookies that belong to the same domain from which .set() is called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete.\n\nVersion History\nVersion\tChanges\nv13.0.0\tcookies introduced."
  },
  {
    "title": "API Reference: Functions | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/functions",
    "html": "Functions"
  },
  {
    "title": "Metadata Files: sitemap.xml | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap",
    "html": "sitemap.xml\n\nsitemap.(xml|js|ts) is a special file that matches the Sitemaps XML format\n to help search engine crawlers index your site more efficiently.\n\nSitemap files (.xml)\n\nFor smaller applications, you can create a sitemap.xml file and place it in the root of your app directory.\n\napp/sitemap.xml\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\nGenerating a sitemap using code (.js, .ts)\n\nYou can use the sitemap.(js|ts) file convention to programmatically generate a sitemap by exporting a default function that returns an array of URLs. If using TypeScript, a Sitemap type is available.\n\nGood to know: sitemap.js is a special Route Handlers that is cached by default unless it uses a dynamic function or dynamic config option.\n\napp/sitemap.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { MetadataRoute } from 'next'\n \nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      changeFrequency: 'yearly',\n      priority: 1,\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.5,\n    },\n  ]\n}\n\nOutput:\n\nacme.com/sitemap.xml\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\nImage Sitemaps\n\nYou can use images property to create image sitemaps. Learn more details in the Google Developer Docs\n.\n\napp/sitemap.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { MetadataRoute } from 'next'\n \nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://example.com',\n      lastModified: '2021-01-01',\n      changeFrequency: 'weekly',\n      priority: 0.5,\n      images: ['https://example.com/image.jpg'],\n    },\n  ]\n}\n\nOutput:\n\nacme.com/sitemap.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\n  xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"\n>\n  <url>\n    <loc>https://example.com</loc>\n    <image:image>\n      <image:loc>https://example.com/image.jpg</image:loc>\n    </image:image>\n    <lastmod>2021-01-01</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\nGenerate a localized Sitemap\napp/sitemap.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { MetadataRoute } from 'next'\n \nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es',\n          de: 'https://acme.com/de',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/about',\n          de: 'https://acme.com/de/about',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/blog',\n          de: 'https://acme.com/de/blog',\n        },\n      },\n    },\n  ]\n}\n\nOutput:\n\nacme.com/sitemap.xml\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n  <url>\n    <loc>https://acme.com</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/about\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/about\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/blog\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/blog\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n</urlset>\nGenerating multiple sitemaps\n\nWhile a single sitemap will work for most applications. For large web applications, you may need to split a sitemap into multiple files.\n\nThere are two ways you can create multiple sitemaps:\n\nBy nesting sitemap.(xml|js|ts) inside multiple route segments e.g. app/sitemap.xml and app/products/sitemap.xml.\nBy using the generateSitemaps function.\n\nFor example, to split a sitemap using generateSitemaps, return an array of objects with the sitemap id. Then, use the id to generate the unique sitemaps.\n\napp/product/sitemap.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { MetadataRoute } from 'next'\nimport { BASE_URL } from '@/app/lib/constants'\n \nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n \nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${product.id}`,\n    lastModified: product.date,\n  }))\n}\n\nYour generated sitemaps will be available at /.../sitemap/[id]. For example, /product/sitemap/1.xml.\n\nSee the generateSitemaps API reference for more information.\n\nReturns\n\nThe default function exported from sitemap.(xml|ts|js) should return an array of objects with the following properties:\n\ntype Sitemap = Array<{\n  url: string\n  lastModified?: string | Date\n  changeFrequency?:\n    | 'always'\n    | 'hourly'\n    | 'daily'\n    | 'weekly'\n    | 'monthly'\n    | 'yearly'\n    | 'never'\n  priority?: number\n  alternates?: {\n    languages?: Languages<string>\n  }\n}>\nVersion History\nVersion\tChanges\nv14.2.0\tAdd localizations support.\nv13.4.14\tAdd changeFrequency and priority attributes to sitemaps.\nv13.3.0\tsitemap introduced."
  },
  {
    "title": "Metadata Files: opengraph-image and twitter-image | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image",
    "html": "opengraph-image and twitter-image\n\nThe opengraph-image and twitter-image file conventions allow you to set Open Graph and Twitter images for a route segment.\n\nThey are useful for setting the images that appear on social networks and messaging apps when a user shares a link to your site.\n\nThere are two ways to set Open Graph and Twitter images:\n\nUsing image files (.jpg, .png, .gif)\nUsing code to generate images (.js, .ts, .tsx)\nImage files (.jpg, .png, .gif)\n\nUse an image file to set a route segment's shared image by placing an opengraph-image or twitter-image image file in the segment.\n\nNext.js will evaluate the file and automatically add the appropriate tags to your app's <head> element.\n\nFile convention\tSupported file types\nopengraph-image\t.jpg, .jpeg, .png, .gif\ntwitter-image\t.jpg, .jpeg, .png, .gif\nopengraph-image.alt\t.txt\ntwitter-image.alt\t.txt\nopengraph-image\n\nAdd an opengraph-image.(jpg|jpeg|png|gif) image file to any route segment.\n\n<head> output\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:type\" content=\"<generated>\" />\n<meta property=\"og:image:width\" content=\"<generated>\" />\n<meta property=\"og:image:height\" content=\"<generated>\" />\ntwitter-image\n\nAdd a twitter-image.(jpg|jpeg|png|gif) image file to any route segment.\n\n<head> output\n<meta name=\"twitter:image\" content=\"<generated>\" />\n<meta name=\"twitter:image:type\" content=\"<generated>\" />\n<meta name=\"twitter:image:width\" content=\"<generated>\" />\n<meta name=\"twitter:image:height\" content=\"<generated>\" />\nopengraph-image.alt.txt\n\nAdd an accompanying opengraph-image.alt.txt file in the same route segment as the opengraph-image.(jpg|jpeg|png|gif) image it's alt text.\n\nopengraph-image.alt.txt\nAbout Acme\n<head> output\n<meta property=\"og:image:alt\" content=\"About Acme\" />\ntwitter-image.alt.txt\n\nAdd an accompanying twitter-image.alt.txt file in the same route segment as the twitter-image.(jpg|jpeg|png|gif) image it's alt text.\n\ntwitter-image.alt.txt\nAbout Acme\n<head> output\n<meta property=\"twitter:image:alt\" content=\"About Acme\" />\nGenerate images using code (.js, .ts, .tsx)\n\nIn addition to using literal image files, you can programmatically generate images using code.\n\nGenerate a route segment's shared image by creating an opengraph-image or twitter-image route that default exports a function.\n\nFile convention\tSupported file types\nopengraph-image\t.js, .ts, .tsx\ntwitter-image\t.js, .ts, .tsx\n\nGood to know:\n\nBy default, generated images are statically optimized (generated at build time and cached) unless they use dynamic functions or uncached data.\nYou can generate multiple Images in the same file using generateImageMetadata.\nopengraph-image.js and twitter-image.js are special Route Handlers that is cached by default unless it uses a dynamic function or dynamic config option.\n\nThe easiest way to generate an image is to use the ImageResponse API from next/og.\n\napp/about/opengraph-image.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ImageResponse } from 'next/og'\n \nexport const runtime = 'edge'\n \n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n \nexport const contentType = 'image/png'\n \n// Image generation\nexport default async function Image() {\n  // Font\n  const interSemiBold = fetch(\n    new URL('./Inter-SemiBold.ttf', import.meta.url)\n  ).then((res) => res.arrayBuffer())\n \n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: await interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n<head> output\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n<meta property=\"og:image:type\" content=\"image/png\" />\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\nProps\n\nThe default export function receives the following props:\n\nparams (optional)\n\nAn object containing the dynamic route parameters object from the root segment down to the segment opengraph-image or twitter-image is colocated in.\n\napp/shop/[slug]/opengraph-image.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Image({ params }: { params: { slug: string } }) {\n  // ...\n}\nRoute\tURL\tparams\napp/shop/opengraph-image.js\t/shop\tundefined\napp/shop/[slug]/opengraph-image.js\t/shop/1\t{ slug: '1' }\napp/shop/[tag]/[item]/opengraph-image.js\t/shop/1/2\t{ tag: '1', item: '2' }\napp/shop/[...slug]/opengraph-image.js\t/shop/1/2\t{ slug: ['1', '2'] }\nReturns\n\nThe default export function should return a Blob | ArrayBuffer | TypedArray | DataView | ReadableStream | Response.\n\nGood to know: ImageResponse satisfies this return type.\n\nConfig exports\n\nYou can optionally configure the image's metadata by exporting alt, size, and contentType variables from opengraph-image or twitter-image route.\n\nOption\tType\nalt\tstring\nsize\t{ width: number; height: number }\ncontentType\tstring - image MIME type\nalt\nopengraph-image.tsx | twitter-image.tsx\nTypeScript\nJavaScript\nTypeScript\nexport const alt = 'My images alt text'\n \nexport default function Image() {}\n<head> output\n<meta property=\"og:image:alt\" content=\"My images alt text\" />\nsize\nopengraph-image.tsx | twitter-image.tsx\nTypeScript\nJavaScript\nTypeScript\nexport const size = { width: 1200, height: 630 }\n \nexport default function Image() {}\n<head> output\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\ncontentType\nopengraph-image.tsx | twitter-image.tsx\nTypeScript\nJavaScript\nTypeScript\nexport const contentType = 'image/png'\n \nexport default function Image() {}\n<head> output\n<meta property=\"og:image:type\" content=\"image/png\" />\nRoute Segment Config\n\nopengraph-image and twitter-image are specialized Route Handlers that can use the same route segment configuration options as Pages and Layouts.\n\nExamples\nUsing external data\n\nThis example uses the params object and external data to generate the image.\n\nGood to know: By default, this generated image will be statically optimized. You can configure the individual fetch options or route segments options to change this behavior.\n\napp/posts/[slug]/opengraph-image.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ImageResponse } from 'next/og'\n \nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n \nexport default async function Image({ params }: { params: { slug: string } }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\nUsing Edge runtime with local assets\n\nThis example uses the Edge runtime to fetch a local image on the file system and passes it as an ArrayBuffer to the src attribute of an <img> element. The local asset should be placed relative to the example source file location.\n\napp/opengraph-image.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ImageResponse } from 'next/og'\n \nexport const runtime = 'edge'\n \nexport default async function Image() {\n  const logoSrc = await fetch(new URL('./logo.png', import.meta.url)).then(\n    (res) => res.arrayBuffer()\n  )\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={logoSrc} height=\"100\" />\n      </div>\n    )\n  )\n}\nUsing Node.js runtime with local assets\n\nThis example uses the Node.js runtime to fetch a local image on the file system and passes it as an ArrayBuffer to the src attribute of an <img> element. The local asset should be placed relative to the root of your project, rather than the location of the example source file.\n\napp/opengraph-image.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ImageResponse } from 'next/og'\nimport { join } from 'node:path'\nimport { readFile } from 'node:fs/promises'\n \nexport default async function Image() {\n  const logoData = await readFile(join(process.cwd(), 'logo.png'))\n  const logoSrc = Uint8Array.from(logoData).buffer\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={logoSrc} height=\"100\" />\n      </div>\n    )\n  )\n}\nVersion History\nVersion\tChanges\nv13.3.0\topengraph-image and twitter-image introduced."
  },
  {
    "title": "Metadata Files: robots.txt | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/robots",
    "html": "robots.txt\n\nAdd or generate a robots.txt file that matches the Robots Exclusion Standard\n in the root of app directory to tell search engine crawlers which URLs they can access on your site.\n\nStatic robots.txt\napp/robots.txt\nUser-Agent: *\nAllow: /\nDisallow: /private/\nSitemap: https://acme.com/sitemap.xml\nGenerate a Robots file\n\nAdd a robots.js or robots.ts file that returns a Robots object.\n\nGood to know: robots.js is a special Route Handlers that is cached by default unless it uses a dynamic function or dynamic config option.\n\napp/robots.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { MetadataRoute } from 'next'\n \nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: '/private/',\n    },\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n\nOutput:\n\nUser-Agent: *\nAllow: /\nDisallow: /private/\nSitemap: https://acme.com/sitemap.xml\nCustomizing specific user agents\n\nYou can customise how individual search engine bots crawl your site by passing an array of user agents to the rules property. For example:\n\napp/robots.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { MetadataRoute } from 'next'\n \nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: [\n      {\n        userAgent: 'Googlebot',\n        allow: ['/'],\n        disallow: '/private/',\n      },\n      {\n        userAgent: ['Applebot', 'Bingbot'],\n        disallow: ['/'],\n      },\n    ],\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n\nOutput:\n\nUser-Agent: Googlebot\nAllow: /\nDisallow: /private/\nUser-Agent: Applebot\nDisallow: /\nUser-Agent: Bingbot\nDisallow: /\nSitemap: https://acme.com/sitemap.xml\nRobots object\ntype Robots = {\n  rules:\n    | {\n        userAgent?: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }\n    | Array<{\n        userAgent: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }>\n  sitemap?: string | string[]\n  host?: string\n}\nVersion History\nVersion\tChanges\nv13.3.0\trobots introduced."
  },
  {
    "title": "Metadata Files: favicon, icon, and apple-icon | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/app-icons",
    "html": "favicon, icon, and apple-icon\n\nThe favicon, icon, or apple-icon file conventions allow you to set icons for your application.\n\nThey are useful for adding app icons that appear in places like web browser tabs, phone home screens, and search engine results.\n\nThere are two ways to set app icons:\n\nUsing image files (.ico, .jpg, .png)\nUsing code to generate an icon (.js, .ts, .tsx)\nImage files (.ico, .jpg, .png)\n\nUse an image file to set an app icon by placing a favicon, icon, or apple-icon image file within your /app directory. The favicon image can only be located in the top level of app/.\n\nNext.js will evaluate the file and automatically add the appropriate tags to your app's <head> element.\n\nFile convention\tSupported file types\tValid locations\nfavicon\t.ico\tapp/\nicon\t.ico, .jpg, .jpeg, .png, .svg\tapp/**/*\napple-icon\t.jpg, .jpeg, .png\tapp/**/*\nfavicon\n\nAdd a favicon.ico image file to the root /app route segment.\n\n<head> output\n<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\" />\nicon\n\nAdd an icon.(ico|jpg|jpeg|png|svg) image file.\n\n<head> output\n<link\n  rel=\"icon\"\n  href=\"/icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\napple-icon\n\nAdd an apple-icon.(jpg|jpeg|png) image file.\n\n<head> output\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\n\nGood to know:\n\nYou can set multiple icons by adding a number suffix to the file name. For example, icon1.png, icon2.png, etc. Numbered files will sort lexically.\nFavicons can only be set in the root /app segment. If you need more granularity, you can use icon.\nThe appropriate <link> tags and attributes such as rel, href, type, and sizes are determined by the icon type and metadata of the evaluated file.\nFor example, a 32 by 32px .png file will have type=\"image/png\" and sizes=\"32x32\" attributes.\nsizes=\"any\" is added to favicon.ico output to avoid a browser bug\n where an .ico icon is favored over .svg.\nGenerate icons using code (.js, .ts, .tsx)\n\nIn addition to using literal image files, you can programmatically generate icons using code.\n\nGenerate an app icon by creating an icon or apple-icon route that default exports a function.\n\nFile convention\tSupported file types\nicon\t.js, .ts, .tsx\napple-icon\t.js, .ts, .tsx\n\nThe easiest way to generate an icon is to use the ImageResponse API from next/og.\n\napp/icon.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ImageResponse } from 'next/og'\n \n// Image metadata\nexport const size = {\n  width: 32,\n  height: 32,\n}\nexport const contentType = 'image/png'\n \n// Image generation\nexport default function Icon() {\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 24,\n          background: 'black',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n        }}\n      >\n        A\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported icons size metadata\n      // config to also set the ImageResponse's width and height.\n      ...size,\n    }\n  )\n}\n<head> output\n<link rel=\"icon\" href=\"/icon?<generated>\" type=\"image/png\" sizes=\"32x32\" />\n\nGood to know:\n\nBy default, generated icons are statically optimized (generated at build time and cached) unless they use dynamic functions or uncached data.\nYou can generate multiple icons in the same file using generateImageMetadata.\nYou cannot generate a favicon icon. Use icon or a favicon.ico file instead.\nApp icons are special Route Handlers that is cached by default unless it uses a dynamic function or dynamic config option.\nProps\n\nThe default export function receives the following props:\n\nparams (optional)\n\nAn object containing the dynamic route parameters object from the root segment down to the segment icon or apple-icon is colocated in.\n\napp/shop/[slug]/icon.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Icon({ params }: { params: { slug: string } }) {\n  // ...\n}\nRoute\tURL\tparams\napp/shop/icon.js\t/shop\tundefined\napp/shop/[slug]/icon.js\t/shop/1\t{ slug: '1' }\napp/shop/[tag]/[item]/icon.js\t/shop/1/2\t{ tag: '1', item: '2' }\nReturns\n\nThe default export function should return a Blob | ArrayBuffer | TypedArray | DataView | ReadableStream | Response.\n\nGood to know: ImageResponse satisfies this return type.\n\nConfig exports\n\nYou can optionally configure the icon's metadata by exporting size and contentType variables from the icon or apple-icon route.\n\nOption\tType\nsize\t{ width: number; height: number }\ncontentType\tstring - image MIME type\nsize\nicon.tsx | apple-icon.tsx\nTypeScript\nJavaScript\nTypeScript\nexport const size = { width: 32, height: 32 }\n \nexport default function Icon() {}\n<head> output\n<link rel=\"icon\" sizes=\"32x32\" />\ncontentType\nicon.tsx | apple-icon.tsx\nTypeScript\nJavaScript\nTypeScript\nexport const contentType = 'image/png'\n \nexport default function Icon() {}\n<head> output\n<link rel=\"icon\" type=\"image/png\" />\nRoute Segment Config\n\nicon and apple-icon are specialized Route Handlers that can use the same route segment configuration options as Pages and Layouts.\n\nVersion History\nVersion\tChanges\nv13.3.0\tfavicon icon and apple-icon introduced"
  },
  {
    "title": "Metadata Files: manifest.json | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/manifest",
    "html": "manifest.json\n\nAdd or generate a manifest.(json|webmanifest) file that matches the Web Manifest Specification\n in the root of app directory to provide information about your web application for the browser.\n\nStatic Manifest file\napp/manifest.json | app/manifest.webmanifest\n{\n  \"name\": \"My Next.js Application\",\n  \"short_name\": \"Next.js App\",\n  \"description\": \"An application built with Next.js\",\n  \"start_url\": \"/\"\n  // ...\n}\nGenerate a Manifest file\n\nAdd a manifest.js or manifest.ts file that returns a Manifest object.\n\nGood to know: manifest.js is special Route Handlers that is cached by default unless it uses a dynamic function or dynamic config option.\n\napp/manifest.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { MetadataRoute } from 'next'\n \nexport default function manifest(): MetadataRoute.Manifest {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\nManifest Object\n\nThe manifest object contains an extensive list of options that may be updated due to new web standards. For information on all the current options, refer to the MetadataRoute.Manifest type in your code editor if using TypeScript\n or see the MDN\n docs."
  },
  {
    "title": "File Conventions: Metadata Files | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata",
    "html": "Metadata Files API Reference\n\nThis section of the docs covers Metadata file conventions. File-based metadata can be defined by adding special metadata files to route segments.\n\nEach file convention can be defined using a static file (e.g. opengraph-image.jpg), or a dynamic variant that uses code to generate the file (e.g. opengraph-image.js).\n\nOnce a file is defined, Next.js will automatically serve the file (with hashes in production for caching) and update the relevant head elements with the correct metadata, such as the asset's URL, file type, and image size.\n\nGood to know:\n\nSpecial Route Handlers like sitemap.ts, opengraph-image.tsx, and icon.tsx, and other metadata files are cached by default.\nIf using along with middleware.ts, configure the matcher to exclude the metadata files."
  },
  {
    "title": "File Conventions: template.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/template",
    "html": "template.js\n\nA template file is similar to a layout in that it wraps a layout or page. Unlike layouts that persist across routes and maintain state, templates are given a unique key, meaning children Client Components reset their state on navigation.\n\napp/template.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n\nWhile less common, you might choose to use a template over a layout if you want:\n\nFeatures that rely on useEffect (e.g logging page views) and useState (e.g a per-page feedback form).\nTo change the default framework behavior. For example, Suspense Boundaries inside layouts only show the fallback the first time the Layout is loaded and not when switching pages. For templates, the fallback is shown on each navigation.\nProps\nchildren (required)\n\nTemplate accepts a children prop. For example:\n\nOutput\n<Layout>\n  {/* Note that the template is automatically given a unique key. */}\n  <Template key={routeParam}>{children}</Template>\n</Layout>\n\nGood to know:\n\nBy default, template is a Server Component, but can also be used as a Client Component through the \"use client\" directive.\nWhen a user navigates between routes that share a template, a new instance of the component is mounted, DOM elements are recreated, state is not preserved in Client Components, and effects are re-synchronized.\nVersion History\nVersion\tChanges\nv13.0.0\ttemplate introduced."
  },
  {
    "title": "File Conventions: Route Segment Config | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config",
    "html": "Route Segment Config\n\nThe Route Segment options allows you to configure the behavior of a Page, Layout, or Route Handler by directly exporting the following variables:\n\nOption\tType\tDefault\nexperimental_ppr\t'true' | 'false'\t\ndynamic\t'auto' | 'force-dynamic' | 'error' | 'force-static'\t'auto'\ndynamicParams\tboolean\ttrue\nrevalidate\tfalse | 0 | number\tfalse\nfetchCache\t'auto' | 'default-cache' | 'only-cache' | 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'\t'auto'\nruntime\t'nodejs' | 'edge'\t'nodejs'\npreferredRegion\t'auto' | 'global' | 'home' | string | string[]\t'auto'\nmaxDuration\tnumber\tSet by deployment platform\nOptions\nexperimental_ppr\n\nEnable Partial Prerendering (PPR) for a layout or page.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport const experimental_ppr = true\n// true | false\ndynamic\n\nChange the dynamic behavior of a layout or page to fully static or fully dynamic.\n\nlayout.tsx | page.tsx | route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const dynamic = 'auto'\n// 'auto' | 'force-dynamic' | 'error' | 'force-static'\n\nGood to know: The new model in the app directory favors granular caching control at the fetch request level over the binary all-or-nothing model of getServerSideProps and getStaticProps at the page-level in the pages directory. The dynamic option is a way to opt back in to the previous model as a convenience and provides a simpler migration path.\n\n'auto' (default): The default option to cache as much as possible without preventing any components from opting into dynamic behavior.\n\n'force-dynamic': Force dynamic rendering, which will result in routes being rendered for each user at request time. This option is equivalent to:\n\ngetServerSideProps() in the pages directory.\nSetting the option of every fetch() request in a layout or page to { cache: 'no-store', next: { revalidate: 0 } }.\nSetting the segment config to export const fetchCache = 'force-no-store'\n\n'error': Force static rendering and cache the data of a layout or page by causing an error if any components use dynamic functions or uncached data. This option is equivalent to:\n\ngetStaticProps() in the pages directory.\nSetting the option of every fetch() request in a layout or page to { cache: 'force-cache' }.\nSetting the segment config to fetchCache = 'only-cache', dynamicParams = false.\ndynamic = 'error' changes the default of dynamicParams from true to false. You can opt back into dynamically rendering pages for dynamic params not generated by generateStaticParams by manually setting dynamicParams = true.\n\n'force-static': Force static rendering and cache the data of a layout or page by forcing cookies(), headers() and useSearchParams() to return empty values.\n\nGood to know:\n\nInstructions on how to migrate from getServerSideProps and getStaticProps to dynamic: 'force-dynamic' and dynamic: 'error' can be found in the upgrade guide.\ndynamicParams\n\nControl what happens when a dynamic segment is visited that was not generated with generateStaticParams.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport const dynamicParams = true // true | false,\ntrue (default): Dynamic segments not included in generateStaticParams are generated on demand.\nfalse: Dynamic segments not included in generateStaticParams will return a 404.\n\nGood to know:\n\nThis option replaces the fallback: true | false | blocking option of getStaticPaths in the pages directory.\nTo statically render all paths the first time they're visited, you'll need to return an empty array in generateStaticParams or utilize export const dynamic = 'force-static'.\nWhen dynamicParams = true, the segment uses Streaming Server Rendering.\nIf the dynamic = 'error' and dynamic = 'force-static' are used, it'll change the default of dynamicParams to false.\nrevalidate\n\nSet the default revalidation time for a layout or page. This option does not override the revalidate value set by individual fetch requests.\n\nlayout.tsx | page.tsx | route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const revalidate = false\n// false | 0 | number\nfalse (default): The default heuristic to cache any fetch requests that set their cache option to 'force-cache' or are discovered before a dynamic function is used. Semantically equivalent to revalidate: Infinity which effectively means the resource should be cached indefinitely. It is still possible for individual fetch requests to use cache: 'no-store' or revalidate: 0 to avoid being cached and make the route dynamically rendered. Or set revalidate to a positive number lower than the route default to increase the revalidation frequency of a route.\n0: Ensure a layout or page is always dynamically rendered even if no dynamic functions or uncached data fetches are discovered. This option changes the default of fetch requests that do not set a cache option to 'no-store' but leaves fetch requests that opt into 'force-cache' or use a positive revalidate as is.\nnumber: (in seconds) Set the default revalidation frequency of a layout or page to n seconds.\n\nGood to know:\n\nThe revalidate value needs to be statically analyzable. For example revalidate = 600 is valid, but revalidate = 60 * 10 is not.\nThe revalidate value is not available when using runtime = 'edge'.\nRevalidation Frequency\nThe lowest revalidate across each layout and page of a single route will determine the revalidation frequency of the entire route. This ensures that child pages are revalidated as frequently as their parent layouts.\nIndividual fetch requests can set a lower revalidate than the route's default revalidate to increase the revalidation frequency of the entire route. This allows you to dynamically opt-in to more frequent revalidation for certain routes based on some criteria.\nfetchCache\nThis is an advanced option that should only be used if you specifically need to override the default behavior.\nruntime\n\nWe recommend using the Node.js runtime for rendering your application, and the Edge runtime for Middleware (only supported option).\n\nlayout.tsx | page.tsx | route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const runtime = 'nodejs'\n// 'nodejs' | 'edge'\n'nodejs' (default)\n'edge'\n\nLearn more about the different runtimes.\n\npreferredRegion\nlayout.tsx | page.tsx | route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const preferredRegion = 'auto'\n// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']\n\nSupport for preferredRegion, and regions supported, is dependent on your deployment platform.\n\nGood to know:\n\nIf a preferredRegion is not specified, it will inherit the option of the nearest parent layout.\nThe root layout defaults to all regions.\nmaxDuration\n\nBy default, Next.js does not limit the execution of server-side logic (rendering a page or handling an API). Deployment platforms can use maxDuration from the Next.js build output to add specific execution limits. For example, on Vercel\n.\n\nNote: This settings requires Next.js 13.4.10 or higher.\n\nlayout.tsx | page.tsx | route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const maxDuration = 5\n\nGood to know:\n\nIf using Server Actions, set the maxDuration at the page level to change the default timeout of all Server Actions used on the page.\ngenerateStaticParams\n\nThe generateStaticParams function can be used in combination with dynamic route segments to define the list of route segment parameters that will be statically generated at build time instead of on-demand at request time.\n\nSee the API reference for more details."
  },
  {
    "title": "File Conventions: route.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/route",
    "html": "route.js\n\nRoute Handlers allow you to create custom request handlers for a given route using the Web Request\n and Response\n APIs.\n\nHTTP Methods\n\nA route file allows you to create custom request handlers for a given route. The following HTTP methods\n are supported: GET, POST, PUT, PATCH, DELETE, HEAD, and OPTIONS.\n\nroute.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET(request: Request) {}\n \nexport async function HEAD(request: Request) {}\n \nexport async function POST(request: Request) {}\n \nexport async function PUT(request: Request) {}\n \nexport async function DELETE(request: Request) {}\n \nexport async function PATCH(request: Request) {}\n \n// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and  set the appropriate Response `Allow` header depending on the other methods defined in the route handler.\nexport async function OPTIONS(request: Request) {}\n\nGood to know: Route Handlers are only available inside the App Router. You do not need to use API Routes (pages) and Route Handlers (app) together, as Route Handlers should be able to handle all use cases.\n\nParameters\nrequest (optional)\n\nThe request object is a NextRequest object, which is an extension of the Web Request\n API. NextRequest gives you further control over the incoming request, including easily accessing cookies and an extended, parsed, URL object nextUrl.\n\ncontext (optional)\napp/dashboard/[team]/route.ts\nTypeScript\nJavaScript\nTypeScript\ntype Params = {\n  team: string\n}\n \nexport async function GET(request: Request, context: { params: Params }) {\n  const team = context.params.team // '1'\n}\n \n// Define params type according to your route parameters (see table below)\n\nCurrently, the only value of context is params, which is an object containing the dynamic route parameters for the current route.\n\nExample\tURL\tparams\napp/dashboard/[team]/route.js\t/dashboard/1\t{ team: '1' }\napp/shop/[tag]/[item]/route.js\t/shop/1/2\t{ tag: '1', item: '2' }\napp/blog/[...slug]/route.js\t/blog/1/2\t{ slug: ['1', '2'] }\nNextResponse\n\nRoute Handlers can extend the Web Response API by returning a NextResponse object. This allows you to easily set cookies, headers, redirect, and rewrite. View the API reference.\n\nVersion History\nVersion\tChanges\nv15.0.0\tThe default caching for GET handlers was changed from static to dynamic\nv13.2.0\tRoute Handlers are introduced."
  },
  {
    "title": "File Conventions: page.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/page",
    "html": "page.js\n\nA page is UI that is unique to a route.\n\napp/blog/[slug]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page({\n  params,\n  searchParams,\n}: {\n  params: { slug: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}) {\n  return <h1>My Page</h1>\n}\nProps\nparams (optional)\n\nAn object containing the dynamic route parameters from the root segment down to that page. For example:\n\nExample\tURL\tparams\napp/shop/[slug]/page.js\t/shop/1\t{ slug: '1' }\napp/shop/[category]/[item]/page.js\t/shop/1/2\t{ category: '1', item: '2' }\napp/shop/[...slug]/page.js\t/shop/1/2\t{ slug: ['1', '2'] }\nsearchParams (optional)\n\nAn object containing the search parameters\n of the current URL. For example:\n\nURL\tsearchParams\n/shop?a=1\t{ a: '1' }\n/shop?a=1&b=2\t{ a: '1', b: '2' }\n/shop?a=1&a=2\t{ a: ['1', '2'] }\n\nGood to know:\n\nsearchParams is a Dynamic API whose values cannot be known ahead of time. Using it will opt the page into dynamic rendering at request time.\nsearchParams returns a plain JavaScript object and not a URLSearchParams instance.\nVersion History\nVersion\tChanges\nv13.0.0\tpage introduced."
  },
  {
    "title": "File Conventions: not-found.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/not-found",
    "html": "not-found.js\n\nThe not-found file is used to render UI when the notFound function is thrown within a route segment. Along with serving a custom UI, Next.js will return a 200 HTTP status code for streamed responses, and 404 for non-streamed responses.\n\napp/not-found.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function NotFound() {\n  return (\n    <div>\n      <h2>Not Found</h2>\n      <p>Could not find requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n\nGood to know: In addition to catching expected notFound() errors, the root app/not-found.js file also handles any unmatched URLs for your whole application. This means users that visit a URL that is not handled by your app will be shown the UI exported by the app/not-found.js file.\n\nProps\n\nnot-found.js components do not accept any props.\n\nData Fetching\n\nBy default, not-found is a Server Component. You can mark it as async to fetch and display data:\n\napp/not-found.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\nimport { headers } from 'next/headers'\n \nexport default async function NotFound() {\n  const headersList = headers()\n  const domain = headersList.get('host')\n  const data = await getSiteData(domain)\n  return (\n    <div>\n      <h2>Not Found: {data.name}</h2>\n      <p>Could not find requested resource</p>\n      <p>\n        View <Link href=\"/blog\">all posts</Link>\n      </p>\n    </div>\n  )\n}\n\nIf you need to use Client Component hooks like usePathname to display content based on the path, you must fetch data on the client-side instead.\n\nVersion History\nVersion\tChanges\nv13.3.0\tRoot app/not-found handles global unmatched URLs.\nv13.0.0\tnot-found introduced."
  },
  {
    "title": "File Conventions: middleware.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/middleware",
    "html": "middleware.js\n\nThe middleware.js|ts file is used to write Middleware and run code on the server before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.\n\nMiddleware executes before routes are rendered. It's particularly useful for implementing custom server-side logic like authentication, logging, or handling redirects.\n\nUse the file middleware.ts (or .js) in the root of your project to define Middleware. For example, at the same level as app or pages, or inside src if applicable.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse, NextRequest } from 'next/server'\n \n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n \nexport const config = {\n  matcher: '/about/:path*',\n}\nExports\nMiddleware function\n\nThe file must export a single function, either as a default export or named middleware. Note that multiple middleware from the same file are not supported.\n\nmiddleware.js\n// Example of default export\nexport default function middleware(request) {\n  // Middleware logic\n}\nConfig object (optional)\n\nOptionally, a config object can be exported alongside the Middleware function. This object includes the matcher to specify paths where the Middleware applies.\n\nMatcher\n\nThe matcher option allows you to target specific paths for the Middleware to run on. You can specify these paths in several ways:\n\nFor a single path: Directly use a string to define the path, like '/about'.\nFor multiple paths: Use an array to list multiple paths, such as matcher: ['/about', '/contact'], which applies the Middleware to both /about and /contact.\n\nAdditionally, matcher supports complex path specifications through regular expressions, such as matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'], enabling precise control over which paths to include or exclude.\n\nThe matcher option also accepts an array of objects with the following keys:\n\nsource: The path or pattern used to match the request paths. It can be a string for direct path matching or a pattern for more complex matching.\nregexp (optional): A regular expression string that fine-tunes the matching based on the source. It provides additional control over which paths are included or excluded.\nlocale (optional): A boolean that, when set to false, ignores locale-based routing in path matching.\nhas (optional): Specifies conditions based on the presence of specific request elements such as headers, query parameters, or cookies.\nmissing (optional): Focuses on conditions where certain request elements are absent, like missing headers or cookies.\nmiddleware.js\nexport const config = {\n  matcher: [\n    {\n      source: '/api/*',\n      regexp: '^/api/(.*)',\n      locale: false,\n      has: [\n        { type: 'header', key: 'Authorization', value: 'Bearer Token' },\n        { type: 'query', key: 'userId', value: '123' },\n      ],\n      missing: [{ type: 'cookie', key: 'session', value: 'active' }],\n    },\n  ],\n}\nParams\nrequest\n\nWhen defining Middleware, the default export function accepts a single parameter, request. This parameter is an instance of NextRequest, which represents the incoming HTTP request.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  // Middleware logic goes here\n}\n\nGood to know:\n\nNextRequest is a type that represents incoming HTTP requests in Next.js Middleware, whereas NextResponse is a class used to manipulate and send back HTTP responses.\nNextResponse\n\nMiddleware can use the NextResponse object which extends the Web Response API\n. By returning a NextResponse object, you can directly manipulate cookies, set headers, implement redirects, and rewrite paths.\n\nGood to know: For redirects, you can also use Response.redirect instead of NextResponse.redirect.\n\nRuntime\n\nMiddleware only supports the Edge runtime. The Node.js runtime cannot be used.\n\nVersion History\nVersion\tChanges\nv13.1.0\tAdvanced Middleware flags added\nv13.0.0\tMiddleware can modify request headers, response headers, and send responses\nv12.2.0\tMiddleware is stable, please see the upgrade guide\nv12.0.9\tEnforce absolute URLs in Edge Runtime (PR\n)\nv12.0.0\tMiddleware (Beta) added"
  },
  {
    "title": "File Conventions: mdx-components.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/mdx-components",
    "html": "mdx-components.js\n\nThe mdx-components.js|tsx file is required to use @next/mdx with App Router and will not work without it. Additionally, you can use it to customize styles.\n\nUse the file mdx-components.tsx (or .js) in the root of your project to define MDX Components. For example, at the same level as pages or app, or inside src if applicable.\n\nmdx-components.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { MDXComponents } from 'mdx/types'\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\nExports\nuseMDXComponents function\n\nThe file must export a single function, either as a default export or named useMDXComponents.\n\nmdx-components.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { MDXComponents } from 'mdx/types'\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\nParams\ncomponents\n\nWhen defining MDX Components, the export function accepts a single parameter, components. This parameter is an instance of MDXComponents.\n\nThe key is the name of the HTML element to override.\nThe value is the component to render instead.\n\nGood to know: Remember to pass all other components (i.e. ...components) that do not have overrides.\n\nVersion History\nVersion\tChanges\nv13.1.2\tMDX Components added"
  },
  {
    "title": "File Conventions: loading.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/loading",
    "html": "loading.js\n\nA loading file can create instant loading states built on Suspense.\n\nBy default, this file is a Server Component - but can also be used as a Client Component through the \"use client\" directive.\n\napp/feed/loading.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Loading() {\n  // Or a custom loading skeleton component\n  return <p>Loading...</p>\n}\n\nLoading UI components do not accept any parameters.\n\nGood to know:\n\nWhile designing loading UI, you may find it helpful to use the React Developer Tools\n to manually toggle Suspense boundaries.\nVersion History\nVersion\tChanges\nv13.0.0\tloading introduced."
  },
  {
    "title": "File Conventions: error.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/error",
    "html": "error.js\n\nAn error file allows you to handle unexpected runtime errors and display fallback UI.\n\napp/dashboard/error.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client' // Error boundaries must be Client Components\n \nimport { useEffect } from 'react'\n \nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n \n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\nHow error.js Works\n\nerror.js wraps a route segment and its nested children in a React Error Boundary\n. When an error throws within the boundary, the error component shows as the fallback UI.\n\nGood to know:\n\nThe React DevTools\n allow you to toggle error boundaries to test error states.\nProps\nerror\n\nAn instance of an Error\n object forwarded to the error.js Client Component.\n\nGood to know: During development, the Error object forwarded to the client will be serialized and include the message of the original error for easier debugging. However, this behavior is different in production to avoid leaking potentially sensitive details included in the error to the client.\n\nerror.message\nErrors forwarded from Client Components show the original Error message.\nErrors forwarded from Server Components show a generic message with an identifier. This is to prevent leaking sensitive details. You can use the identifier, under errors.digest, to match the corresponding server-side logs.\nerror.digest\n\nAn automatically generated hash of the error thrown. It can be used to match the corresponding error in server-side logs.\n\nreset\n\nThe cause of an error can sometimes be temporary. In these cases, trying again might resolve the issue.\n\nAn error component can use the reset() function to prompt the user to attempt to recover from the error. When executed, the function will try to re-render the error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render.\n\napp/dashboard/error.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client' // Error boundaries must be Client Components\n \nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={() => reset()}>Try again</button>\n    </div>\n  )\n}\nglobal-error.js\n\nWhile less common, you can handle errors in the root layout or template using app/global-error.js, located in the root app directory, even when leveraging internationalization. Global error UI must define its own <html> and <body> tags. This file replaces the root layout or template when active.\n\napp/global-error.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client' // Error boundaries must be Client Components\n \nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    // global-error must include html and body tags\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n\nGood to know:\n\nglobal-error.js is only enabled in production. In development, our error overlay will show instead.\nnot-found.js\n\nThe not-found\n file shows UI when calling the notFound() function within a route segment.\n\nVersion History\nVersion\tChanges\nv13.1.0\tglobal-error introduced.\nv13.0.0\terror introduced."
  },
  {
    "title": "File Conventions: layout.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/layout",
    "html": "layout.js\n\nA layout is UI that is shared between routes.\n\napp/dashboard/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n\nA root layout is the top-most layout in the root app directory. It is used to define the <html> and <body> tags and other globally shared UI.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\nProps\nchildren (required)\n\nLayout components should accept and use a children prop. During rendering, children will be populated with the route segments the layout is wrapping. These will primarily be the component of a child Layout (if it exists) or Page, but could also be other special files like Loading or Error when applicable.\n\nparams (optional)\n\nThe dynamic route parameters object from the root segment down to that layout.\n\nExample\tURL\tparams\napp/dashboard/[team]/layout.js\t/dashboard/1\t{ team: '1' }\napp/shop/[tag]/[item]/layout.js\t/shop/1/2\t{ tag: '1', item: '2' }\napp/blog/[...slug]/layout.js\t/blog/1/2\t{ slug: ['1', '2'] }\n\nFor example:\n\napp/shop/[tag]/[item]/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function ShopLayout({\n  children,\n  params,\n}: {\n  children: React.ReactNode\n  params: {\n    tag: string\n    item: string\n  }\n}) {\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  return <section>{children}</section>\n}\nGood to know\nRoot Layouts\nThe app directory must include a root app/layout.js.\nThe root layout must define <html> and <body> tags.\nYou should not manually add <head> tags such as <title> and <meta> to root layouts. Instead, you should use the Metadata API which automatically handles advanced requirements such as streaming and de-duplicating <head> elements.\nYou can use route groups to create multiple root layouts.\nNavigating across multiple root layouts will cause a full page load (as opposed to a client-side navigation). For example, navigating from /cart that uses app/(shop)/layout.js to /blog that uses app/(marketing)/layout.js will cause a full page load. This only applies to multiple root layouts.\nLayouts do not receive searchParams\n\nUnlike Pages, Layout components do not receive the searchParams prop. This is because a shared layout is not re-rendered during navigation which could lead to stale searchParams between navigations.\n\nWhen using client-side navigation, Next.js automatically only renders the part of the page below the common layout between two routes.\n\nFor example, in the following directory structure, dashboard/layout.tsx is the common layout for both /dashboard/settings and /dashboard/analytics:\n\nWhen navigating from /dashboard/settings to /dashboard/analytics, page.tsx in /dashboard/analytics will rerender on the server, while dashboard/layout.tsx will not rerender because it's a common UI shared between the two routes.\n\nThis performance optimization allows navigation between pages that share a layout to be quicker as only the data fetching and rendering for the page has to run, instead of the entire route that could include shared layouts that fetch their own data.\n\nBecause dashboard/layout.tsx doesn't re-render, the searchParams prop in the layout Server Component might become stale after navigation.\n\nInstead, use the Page searchParams prop or the useSearchParams hook in a Client Component, which is re-rendered on the client with the latest searchParams.\n\nLayouts cannot access pathname\n\nLayouts cannot access pathname. This is because layouts are Server Components by default, and don't rerender during client-side navigation, which could lead to pathname becoming stale between navigations. To prevent staleness, Next.js would need to refetch all segments of a route, losing the benefits of caching and increasing the RSC payload size on navigation.\n\nInstead, you can extract the logic that depends on pathname into a Client Component and import it into your layouts. Since Client Components rerender (but are not refetched) during navigation, you can use Next.js hooks such as usePathname\n to access the current pathname and prevent staleness.\n\napp/dashboard/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ClientComponent } from '@/app/ui/ClientComponent'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <ClientComponent />\n      {/* Other Layout UI */}\n      <main>{children}</main>\n    <>\n  )\n}\n\nCommon pathname patterns can also be implemented with params prop.\n\nSee the examples section for more information.\n\nVersion History\nVersion\tChanges\nv13.0.0\tlayout introduced."
  },
  {
    "title": "File Conventions: instrumentation.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation",
    "html": "instrumentation.js\n\nThe instrumentation.js|ts file is used to integrate observability tools into your application, allowing you to track the performance and behavior, and to debug issues in production.\n\nTo use it, place the file in the root of your application or inside a src folder if using one.\n\nEnabling Instrumentation\n\nInstrumentation is currently an experimental feature, to use the instrumentation.js file, you must explicitly opt-in by defining experimental.instrumentationHook = true; in your next.config.js:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\n \nexport default nextConfig\nExports\nregister (required)\n\nThe file exports a register function that is called once when a new Next.js server instance is initiated. register can be an async function.\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { registerOTel } from '@vercel/otel'\n \nexport function register() {\n  registerOTel('next-app')\n}\nonRequestError (optional)\n\nThis API is available in Next.js canary.\n\nYou can optionally export an onRequestError function to track and send server errors to an observability tool.\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { type Instrumentation } from 'next'\n \nexport const onRequestError: Instrumentation.onRequestError = (\n  err,\n  request,\n  context\n) => {\n  fetch('https://.../write-log', {\n    method: 'POST',\n    body: JSON.stringify({\n      message: err.message,\n      request,\n      context,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\nParameters\n\nThe function accepts three parameters: error, request, and context.\n\nTypes\nexport function onRequestError(\n  error: { digest: string } & Error,\n  request: {\n    path: string // resource path, e.g. /blog?name=foo\n    method: string // request method. e.g. GET, POST, etc\n    headers: { [key: string]: string }\n  },\n  context: {\n    routerKind: 'Pages Router' | 'App Router' // the router type\n    routePath: string // the route file path, e.g. /app/blog/[dynamic]\n    routeType: 'render' | 'route' | 'action' | 'middleware' // the context in which the error occurred\n    renderSource:\n      | 'react-server-components'\n      | 'react-server-components-payload'\n      | 'server-rendering'\n    revalidateReason: 'on-demand' | 'stale' | undefined // undefined is a normal request without revalidation\n    renderType: 'dynamic' | 'dynamic-resume' // 'dynamic-resume' for PPR\n  }\n)\nerror: The caught error itself (type is always Error), and a digest property which is the unique ID of the error.\nrequest: Read-only request information associated with the error.\ncontext: The context in which the error occurred. This can be the type of router (App or Pages Router), and/or (Server Components ('render'), Route Handlers ('route'), Server Actions ('action'), or Middleware ('middleware')).\nVersion History\nVersion\tChanges\nv15.0.0\tonRequestError introduced\nv14.0.4\tTurbopack support for instrumentation\nv13.2.0\tinstrumentation introduced as an experimental feature"
  },
  {
    "title": "Components: <Link> | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/components/link",
    "html": "<Link>\n\n<Link> is a React component that extends the HTML <a> element to provide prefetching and client-side navigation between routes. It is the primary way to navigate between routes in Next.js.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\nProps\n\nHere's a summary of the props available for the Link Component:\n\nProp\tExample\tType\tRequired\nhref\thref=\"/dashboard\"\tString or Object\tYes\nreplace\treplace={false}\tBoolean\t-\nscroll\tscroll={false}\tBoolean\t-\nprefetch\tprefetch={false}\tBoolean or null\t-\n\nGood to know: <a> tag attributes such as className or target=\"_blank\" can be added to <Link> as props and will be passed to the underlying <a> element.\n\nhref (required)\n\nThe path or URL to navigate to.\n\n<Link href=\"/dashboard\">Dashboard</Link>\n\nhref can also accept an object, for example:\n\n// Navigate to /about?name=test\n<Link\n  href={{\n    pathname: '/about',\n    query: { name: 'test' },\n  }}\n>\n  About\n</Link>\nreplace\n\nDefaults to false. When true, next/link will replace the current history state instead of adding a new URL into the browser’s history\n stack.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\nscroll\n\nDefaults to true. The default behavior of <Link> is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation. When false, next/link will not scroll to the top of the page after a navigation.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n\nGood to know:\n\nNext.js will scroll to the Page if it is not visible in the viewport upon navigation.\nprefetch\n\nPrefetching happens when a <Link /> component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the href) and its data in the background to improve the performance of client-side navigations. Prefetching is only enabled in production.\n\nnull (default): Prefetch behavior depends on whether the route is static or dynamic. For static routes, the full route will be prefetched (including all its data). For dynamic routes, the partial route down to the nearest segment with a loading.js boundary will be prefetched.\ntrue: The full route will be prefetched for both static and dynamic routes.\nfalse: Prefetching will never happen both on entering the viewport and on hover.\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\nExamples\nLinking to Dynamic Routes\n\nFor dynamic routes, it can be handy to use template literals to create the link's path.\n\nFor example, you can generate a list of links to the dynamic route app/blog/[slug]/page.js:\n\napp/blog/page.js\nimport Link from 'next/link'\n \nfunction Page({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\nIf the child is a custom component that wraps an <a> tag\n\nIf the child of Link is a custom component that wraps an <a> tag, you must add passHref to Link. This is necessary if you’re using libraries like styled-components\n. Without this, the <a> tag will not have the href attribute, which hurts your site's accessibility and might affect SEO. If you're using ESLint, there is a built-in rule next/link-passhref to ensure correct usage of passHref.\n\nimport Link from 'next/link'\nimport styled from 'styled-components'\n \n// This creates a custom component that wraps an <a> tag\nconst RedLink = styled.a`\n  color: red;\n`\n \nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <RedLink>{name}</RedLink>\n    </Link>\n  )\n}\n \nexport default NavLink\nIf you’re using emotion\n’s JSX pragma feature (@jsx jsx), you must use passHref even if you use an <a> tag directly.\nThe component should support onClick property to trigger navigation correctly\nIf the child is a functional component\n\nIf the child of Link is a functional component, in addition to using passHref and legacyBehavior, you must wrap the component in React.forwardRef\n:\n\nimport Link from 'next/link'\n \n// `onClick`, `href`, and `ref` need to be passed to the DOM element\n// for proper handling\nconst MyButton = React.forwardRef(({ onClick, href }, ref) => {\n  return (\n    <a href={href} onClick={onClick} ref={ref}>\n      Click Me\n    </a>\n  )\n})\n \nfunction Home() {\n  return (\n    <Link href=\"/about\" passHref legacyBehavior>\n      <MyButton />\n    </Link>\n  )\n}\n \nexport default Home\nReplace the URL instead of push\n\nThe default behavior of the Link component is to push a new URL into the history stack. You can use the replace prop to prevent adding a new entry, as in the following example:\n\n<Link href=\"/about\" replace>\n  About us\n</Link>\nDisable scrolling to the top of the page\n\nThe default behavior of Link is to scroll to the top of the page. When there is a hash defined it will scroll to the specific id, like a normal <a> tag. To prevent scrolling to the top / hash scroll={false} can be added to Link:\n\n<Link href=\"/#hashid\" scroll={false}>\n  Disables scrolling to the top\n</Link>\nMiddleware\n\nIt's common to use Middleware for authentication or other purposes that involve rewriting the user to a different page. In order for the <Link /> component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch.\n\nFor example, if you want to serve a /dashboard route that has authenticated and visitor views, you may add something similar to the following in your Middleware to redirect the user to the correct page:\n\nmiddleware.js\nexport function middleware(req) {\n  const nextUrl = req.nextUrl\n  if (nextUrl.pathname === '/dashboard') {\n    if (req.cookies.authToken) {\n      return NextResponse.rewrite(new URL('/auth/dashboard', req.url))\n    } else {\n      return NextResponse.rewrite(new URL('/public/dashboard', req.url))\n    }\n  }\n}\n\nIn this case, you would want to use the following code in your <Link /> component:\n\nimport Link from 'next/link'\nimport useIsAuthed from './hooks/useIsAuthed'\n \nexport default function Page() {\n  const isAuthed = useIsAuthed()\n  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'\n  return (\n    <Link as=\"/dashboard\" href={path}>\n      Dashboard\n    </Link>\n  )\n}\nVersion History\nVersion\tChanges\nv13.0.0\tNo longer requires a child <a> tag. A codemod is provided to automatically update your codebase.\nv10.0.0\thref props pointing to a dynamic route are automatically resolved and no longer require an as prop.\nv8.0.0\tImproved prefetching performance.\nv1.0.0\tnext/link introduced."
  },
  {
    "title": "API Reference: File Conventions | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions",
    "html": "File Conventions"
  },
  {
    "title": "Components: <Script> | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/components/script",
    "html": "<Script>\n\nThis API reference will help you understand how to use props available for the Script Component. For features and usage, please see the Optimizing Scripts page.\n\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\nProps\n\nHere's a summary of the props available for the Script Component:\n\nProp\tExample\tType\tRequired\nsrc\tsrc=\"http://example.com/script\"\tString\tRequired unless inline script is used\nstrategy\tstrategy=\"lazyOnload\"\tString\t-\nonLoad\tonLoad={onLoadFunc}\tFunction\t-\nonReady\tonReady={onReadyFunc}\tFunction\t-\nonError\tonError={onErrorFunc}\tFunction\t-\nRequired Props\n\nThe <Script /> component requires the following properties.\n\nsrc\n\nA path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. The src property is required unless an inline script is used.\n\nOptional Props\n\nThe <Script /> component accepts a number of additional properties beyond those which are required.\n\nstrategy\n\nThe loading strategy of the script. There are four different strategies that can be used:\n\nbeforeInteractive: Load before any Next.js code and before any page hydration occurs.\nafterInteractive: (default) Load early but after some hydration on the page occurs.\nlazyOnload: Load during browser idle time.\nworker: (experimental) Load in a web worker.\nbeforeInteractive\n\nScripts that load with the beforeInteractive strategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed before any hydration occurs on the page.\n\nScripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution does not block page hydration from occurring.\n\nbeforeInteractive scripts must be placed inside the root layout (app/layout.tsx) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side).\n\nThis strategy should only be used for critical scripts that need to be fetched before any part of the page becomes interactive.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n\nGood to know: Scripts with beforeInteractive will always be injected inside the head of the HTML document regardless of where it's placed in the component.\n\nSome examples of scripts that should be loaded as soon as possible with beforeInteractive include:\n\nBot detectors\nCookie consent managers\nafterInteractive\n\nScripts that use the afterInteractive strategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page. This is the default strategy of the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code.\n\nafterInteractive scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.\n\napp/page.js\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"afterInteractive\" />\n    </>\n  )\n}\n\nSome examples of scripts that are good candidates for afterInteractive include:\n\nTag managers\nAnalytics\nlazyOnload\n\nScripts that use the lazyOnload strategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early.\n\nlazyOnload scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.\n\napp/page.js\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"lazyOnload\" />\n    </>\n  )\n}\n\nExamples of scripts that do not need to load immediately and can be fetched with lazyOnload include:\n\nChat support plugins\nSocial media widgets\nworker\n\nWarning: The worker strategy is not yet stable and does not yet work with the app directory. Use with caution.\n\nScripts that use the worker strategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts.\n\nTo use worker as a strategy, the nextScriptWorkers flag must be enabled in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n\nworker scripts can only currently be used in the pages/ directory:\n\npages/home.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\nonLoad\n\nWarning: onLoad does not yet work with Server Components and can only be used in Client Components. Further, onLoad can't be used with beforeInteractive – consider using onReady instead.\n\nSome third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with either afterInteractive or lazyOnload as a loading strategy, you can execute code after it has loaded using the onLoad property.\n\nHere's an example of executing a lodash method only after the library has been loaded.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\nonReady\n\nWarning: onReady does not yet work with Server Components and can only be used in Client Components.\n\nSome third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script's load event when it first loads and then after every subsequent component re-mount using the onReady property.\n\nHere's an example of how to re-instantiate a Google Maps JS embed every time the component is mounted:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useRef } from 'react'\nimport Script from 'next/script'\n \nexport default function Page() {\n  const mapRef = useRef()\n \n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\nonError\n\nWarning: onError does not yet work with Server Components and can only be used in Client Components. onError cannot be used with the beforeInteractive loading strategy.\n\nSometimes it is helpful to catch when a script fails to load. These errors can be handled with the onError property:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\nVersion History\nVersion\tChanges\nv13.0.0\tbeforeInteractive and afterInteractive is modified to support app.\nv12.2.4\tonReady prop added.\nv12.2.2\tAllow next/script with beforeInteractive to be placed in _document.\nv11.0.0\tnext/script introduced."
  },
  {
    "title": "File Conventions: default.js | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/default",
    "html": "default.js\n\nThe default.js file is used to render a fallback within Parallel Routes when Next.js cannot recover a slot's active state after a full-page load.\n\nDuring soft navigation, Next.js keeps track of the active state (subpage) for each slot. However, for hard navigations (full-page load), Next.js cannot recover the active state. In this case, a default.js file can be rendered for subpages that don't match the current URL.\n\nConsider the following folder structure. The @team slot has a settings page, but @analytics does not.\n\nWhen navigating to /settings, the @team slot will render the settings page while maintaining the currently active page for the @analytics slot.\n\nOn refresh, Next.js will render a default.js for @analytics. If default.js doesn't exist, a 404 is rendered instead.\n\nAdditionally, since children is an implicit slot, you also need to create a default.js file to render a fallback for children when Next.js cannot recover the active state of the parent page.\n\nProps\nparams (optional)\n\nAn object containing the dynamic route parameters from the root segment down to the slot's subpages. For example:\n\nExample\tURL\tparams\napp/[artist]/@sidebar/default.js\t/zack\t{ artist: 'zack' }\napp/[artist]/[album]/@sidebar/default.js\t/zack/next\t{ artist: 'zack', album: 'next' }"
  },
  {
    "title": "Components: <Image> | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/components/image",
    "html": "<Image>\nExamples\n\nThis API reference will help you understand how to use props and configuration options available for the Image Component. For features and usage, please see the Image Component page.\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <Image\n      src=\"/profile.png\"\n      width={500}\n      height={500}\n      alt=\"Picture of the author\"\n    />\n  )\n}\nProps\n\nHere's a summary of the props available for the Image Component:\n\nProp\tExample\tType\tStatus\nsrc\tsrc=\"/profile.png\"\tString\tRequired\nwidth\twidth={500}\tInteger (px)\tRequired\nheight\theight={500}\tInteger (px)\tRequired\nalt\talt=\"Picture of the author\"\tString\tRequired\nloader\tloader={imageLoader}\tFunction\t-\nfill\tfill={true}\tBoolean\t-\nsizes\tsizes=\"(max-width: 768px) 100vw, 33vw\"\tString\t-\nquality\tquality={80}\tInteger (1-100)\t-\npriority\tpriority={true}\tBoolean\t-\nplaceholder\tplaceholder=\"blur\"\tString\t-\nstyle\tstyle={{objectFit: \"contain\"}}\tObject\t-\nonLoadingComplete\tonLoadingComplete={img => done())}\tFunction\tDeprecated\nonLoad\tonLoad={event => done())}\tFunction\t-\nonError\tonError(event => fail()}\tFunction\t-\nloading\tloading=\"lazy\"\tString\t-\nblurDataURL\tblurDataURL=\"data:image/jpeg...\"\tString\t-\noverrideSrc\toverrideSrc=\"/seo.png\"\tString\t-\nRequired Props\n\nThe Image Component requires the following properties: src, alt, width and height (or fill).\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <div>\n      <Image\n        src=\"/profile.png\"\n        width={500}\n        height={500}\n        alt=\"Picture of the author\"\n      />\n    </div>\n  )\n}\nsrc\n\nMust be one of the following:\n\nA statically imported image file\nA path string. This can be either an absolute external URL, or an internal path depending on the loader prop.\n\nWhen using an external URL, you must add it to remotePatterns in next.config.js.\n\nwidth\n\nThe width property represents the intrinsic image width in pixels.\n\nRequired, except for statically imported images or images with the fill property.\n\nheight\n\nThe height property represents the intrinsic image height in pixels.\n\nRequired, except for statically imported images or images with the fill property.\n\nGood to know:\n\nCombined, both width and height properties are used to determine the aspect ratio of the image which used by browsers to reserve space for the image before it loads.\nThe intrinsic size does not always mean the rendered size in the browser, which will be determined by the parent container. For example, if the parent container is smaller than the intrinsic size, the image will be scaled down to fit the container.\nYou can use the fill property when the width and height are unknown.\nalt\n\nThe alt property is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image.\n\nIt should contain text that could replace the image without changing the meaning of the page\n. It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image.\n\nIf the image is purely decorative\n or not intended for the user\n, the alt property should be an empty string (alt=\"\").\n\nLearn more\n\nOptional Props\n\nThe <Image /> component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in the Advanced Props section.\n\nloader\n\nA custom function used to resolve image URLs.\n\nA loader is a function returning a URL string for the image, given the following parameters:\n\nsrc\nwidth\nquality\n\nHere is an example of using a custom loader:\n\n'use client'\n \nimport Image from 'next/image'\n \nconst imageLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n \nexport default function Page() {\n  return (\n    <Image\n      loader={imageLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n\nGood to know: Using props like loader, which accept a function, requires using Client Components to serialize the provided function.\n\nAlternatively, you can use the loaderFile configuration in next.config.js to configure every instance of next/image in your application, without passing a prop.\n\nfill\nfill={true} // {true} | {false}\n\nA boolean that causes the image to fill the parent element, which is useful when the width and height are unknown.\n\nThe parent element must assign position: \"relative\", position: \"fixed\", or position: \"absolute\" style.\n\nBy default, the img element will automatically be assigned the position: \"absolute\" style.\n\nIf no styles are applied to the image, the image will stretch to fit the container. You may prefer to set object-fit: \"contain\" for an image which is letterboxed to fit the container and preserve aspect ratio.\n\nAlternatively, object-fit: \"cover\" will cause the image to fill the entire container and be cropped to preserve aspect ratio.\n\nFor more information, see also:\n\nposition\nobject-fit\nobject-position\nsizes\n\nA string, similar to a media query, that provides information about how wide the image will be at different breakpoints. The value of sizes will greatly affect performance for images using fill or which are styled to have a responsive size.\n\nThe sizes property serves two important purposes related to image performance:\n\nFirst, the value of sizes is used by the browser to determine which size of the image to download, from next/image's automatically generated srcset. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. The sizes property allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify a sizes value in an image with the fill property, a default value of 100vw (full screen width) is used.\nSecond, the sizes property changes the behavior of the automatically generated srcset value. If no sizes value is present, a small srcset is generated, suitable for a fixed-size image (1x/2x/etc). If sizes is defined, a large srcset is generated, suitable for a responsive image (640w/750w/etc). If the sizes property includes sizes such as 50vw, which represent a percentage of the viewport width, then the srcset is trimmed to not include any values which are too small to ever be necessary.\n\nFor example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:\n\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <div className=\"grid-element\">\n      <Image\n        fill\n        src=\"/example.png\"\n        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      />\n    </div>\n  )\n}\n\nThis example sizes could have a dramatic effect on performance metrics. Without the 33vw sizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, without sizes the user would download an image that's 9 times larger than necessary.\n\nLearn more about srcset and sizes:\n\nweb.dev\nmdn\nquality\nquality={75} // {number 1-100}\n\nThe quality of the optimized image, an integer between 1 and 100, where 100 is the best quality and therefore largest file size. Defaults to 75.\n\npriority\npriority={false} // {false} | {true}\n\nWhen true, the image will be considered high priority and preload\n. Lazy loading is automatically disabled for images using priority.\n\nYou should use the priority property on any image detected as the Largest Contentful Paint (LCP)\n element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes.\n\nShould only be used when the image is visible above the fold. Defaults to false.\n\nplaceholder\nplaceholder = 'empty' // \"empty\" | \"blur\" | \"data:image/...\"\n\nA placeholder to use while the image is loading. Possible values are blur, empty, or data:image/.... Defaults to empty.\n\nWhen blur, the blurDataURL property will be used as the placeholder. If src is an object from a static import and the imported image is .jpg, .png, .webp, or .avif, then blurDataURL will be automatically populated, except when the image is detected to be animated.\n\nFor dynamic images, you must provide the blurDataURL property. Solutions such as Plaiceholder\n can help with base64 generation.\n\nWhen data:image/..., the Data URL\n will be used as the placeholder while the image is loading.\n\nWhen empty, there will be no placeholder while the image is loading, only empty space.\n\nTry it out:\n\nDemo the blur placeholder\nDemo the shimmer effect with data URL placeholder prop\nDemo the color effect with blurDataURL prop\nAdvanced Props\n\nIn some cases, you may need more advanced usage. The <Image /> component optionally accepts the following advanced properties.\n\nstyle\n\nAllows passing CSS styles to the underlying image element.\n\ncomponents/ProfileImage.js\nconst imageStyle = {\n  borderRadius: '50%',\n  border: '1px solid #fff',\n}\n \nexport default function ProfileImage() {\n  return <Image src=\"...\" style={imageStyle} />\n}\n\nRemember that the required width and height props can interact with your styling. If you use styling to modify an image's width, you should also style its height to auto to preserve its intrinsic aspect ratio, or your image will be distorted.\n\nonLoadingComplete\n'use client'\n \n<Image onLoadingComplete={(img) => console.log(img.naturalWidth)} />\n\nWarning: Deprecated since Next.js 14 in favor of onLoad.\n\nA callback function that is invoked once the image is completely loaded and the placeholder has been removed.\n\nThe callback function will be called with one argument, a reference to the underlying <img> element.\n\nGood to know: Using props like onLoadingComplete, which accept a function, requires using Client Components to serialize the provided function.\n\nonLoad\n<Image onLoad={(e) => console.log(e.target.naturalWidth)} />\n\nA callback function that is invoked once the image is completely loaded and the placeholder has been removed.\n\nThe callback function will be called with one argument, the Event which has a target that references the underlying <img> element.\n\nGood to know: Using props like onLoad, which accept a function, requires using Client Components to serialize the provided function.\n\nonError\n<Image onError={(e) => console.error(e.target.id)} />\n\nA callback function that is invoked if the image fails to load.\n\nGood to know: Using props like onError, which accept a function, requires using Client Components to serialize the provided function.\n\nloading\n\nRecommendation: This property is only meant for advanced use cases. Switching an image to load with eager will normally hurt performance. We recommend using the priority property instead, which will eagerly preload the image.\n\nloading = 'lazy' // {lazy} | {eager}\n\nThe loading behavior of the image. Defaults to lazy.\n\nWhen lazy, defer loading the image until it reaches a calculated distance from the viewport.\n\nWhen eager, load the image immediately.\n\nLearn more about the loading attribute\n.\n\nblurDataURL\n\nA Data URL\n to be used as a placeholder image before the src image successfully loads. Only takes effect when combined with placeholder=\"blur\".\n\nMust be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or less) is recommended. Including larger images as placeholders may harm your application performance.\n\nTry it out:\n\nDemo the default blurDataURL prop\nDemo the color effect with blurDataURL prop\n\nYou can also generate a solid color Data URL\n to match the image.\n\nunoptimized\nunoptimized = {false} // {false} | {true}\n\nWhen true, the source image will be served as-is instead of changing quality, size, or format. Defaults to false.\n\nimport Image from 'next/image'\n \nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n\nSince Next.js 12.3.0, this prop can be assigned to all images by updating next.config.js with the following configuration:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\noverrideSrc\n\nWhen providing the src prop to the <Image> component, both the srcset and src attributes are generated automatically for the resulting <img>.\n\ninput.js\n<Image src=\"/me.jpg\" />\noutput.html\n<img\n  srcset=\"\n    /_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/_next/image?url=%2Fme.jpg&w=828&q=75\"\n/>\n\nIn some cases, it is not desirable to have the src attribute generated and you may wish to override it using the overrideSrc prop.\n\nFor example, when upgrading an existing website from <img> to <Image>, you may wish to maintain the same src attribute for SEO purposes such as image ranking or avoiding recrawl.\n\ninput.js\n<Image src=\"/me.jpg\" overrideSrc=\"/override.jpg\" />\noutput.html\n<img\n  srcset=\"\n    /_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/override.jpg\"\n/>\nOther Props\n\nOther properties on the <Image /> component will be passed to the underlying img element with the exception of the following:\n\nsrcSet. Use Device Sizes instead.\ndecoding. It is always \"async\".\nConfiguration Options\n\nIn addition to props, you can configure the Image Component in next.config.js. The following options are available:\n\nremotePatterns\n\nTo protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with the remotePatterns property in your next.config.js file, as shown below:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n      },\n    ],\n  },\n}\n\nGood to know: The example above will ensure the src property of next/image must start with https://example.com/account123/. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request.\n\nBelow is another example of the remotePatterns property in the next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n      },\n    ],\n  },\n}\n\nGood to know: The example above will ensure the src property of next/image must start with https://img1.example.com or https://me.avatar.example.com or any number of subdomains. Any other protocol, port, or unmatched hostname will respond with 400 Bad Request.\n\nWildcard patterns can be used for both pathname and hostname and have the following syntax:\n\n* match a single path segment or subdomain\n** match any number of path segments at the end or subdomains at the beginning\n\nThe ** syntax does not work in the middle of the pattern.\n\nGood to know: When omitting protocol, port or pathname, then the wildcard ** is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend.\n\ndomains\n\nWarning: Deprecated since Next.js 14 in favor of strict remotePatterns in order to protect your application from malicious users. Only use domains if you own all the content served from the domain.\n\nSimilar to remotePatterns, the domains configuration can be used to provide a list of allowed hostnames for external images.\n\nHowever, the domains configuration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname.\n\nBelow is an example of the domains property in the next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\nloaderFile\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure the loaderFile in your next.config.js like the following:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n\nThis must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:\n\nmy/image/loader.js\n'use client'\n \nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nAlternatively, you can use the loader prop to configure each instance of next/image.\n\nExamples:\n\nCustom Image Loader Configuration\n\nGood to know: Customizing the image loader file, which accepts a function, requires using Client Components to serialize the provided function.\n\nAdvanced\n\nThe following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates.\n\ndeviceSizes\n\nIf you know the expected device widths of your users, you can specify a list of device width breakpoints using the deviceSizes property in next.config.js. These widths are used when the next/image component uses sizes prop to ensure the correct image is served for user's device.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\nimageSizes\n\nYou can specify a list of image widths using the images.imageSizes property in your next.config.js file. These widths are concatenated with the array of device sizes to form the full array of sizes used to generate image srcset\ns.\n\nThe reason there are two separate lists is that imageSizes is only used for images which provide a sizes prop, which indicates that the image is less than the full width of the screen. Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\nformats\n\nThe default Image Optimization API will automatically detect the browser's supported image formats via the request's Accept header.\n\nIf the Accept head matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image is animated), the Image Optimization API will fallback to the original image's format.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n\nYou can enable AVIF support with the following configuration.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    formats: ['image/avif', 'image/webp'],\n  },\n}\n\nGood to know:\n\nAVIF generally takes 20% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.\nIf you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward the Accept header.\nCaching Behavior\n\nThe following describes the caching algorithm for the default loader. For all other loaders, please refer to your cloud provider's documentation.\n\nImages are optimized dynamically upon request and stored in the <distDir>/cache/images directory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date.\n\nThe cache status of an image can be determined by reading the value of the x-nextjs-cache response header. The possible values are the following:\n\nMISS - the path is not in the cache (occurs at most once, on the first visit)\nSTALE - the path is in the cache but exceeded the revalidate time so it will be updated in the background\nHIT - the path is in the cache and has not exceeded the revalidate time\n\nThe expiration (or rather Max Age) is defined by either the minimumCacheTTL configuration or the upstream image Cache-Control header, whichever is larger. Specifically, the max-age value of the Cache-Control header is used. If both s-maxage and max-age are found, then s-maxage is preferred. The max-age is also passed-through to any downstream clients including CDNs and browsers.\n\nYou can configure minimumCacheTTL to increase the cache duration when the upstream image does not include Cache-Control header or the value is very low.\nYou can configure deviceSizes and imageSizes to reduce the total number of possible generated images.\nYou can configure formats to disable multiple formats in favor of a single image format.\nminimumCacheTTL\n\nYou can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use a Static Image Import which will automatically hash the file contents and cache the image forever with a Cache-Control header of immutable.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60,\n  },\n}\n\nThe expiration (or rather Max Age) of the optimized image is defined by either the minimumCacheTTL or the upstream image Cache-Control header, whichever is larger.\n\nIf you need to change the caching behavior per image, you can configure headers to set the Cache-Control header on the upstream image (e.g. /some-asset.jpg, not /_next/image itself).\n\nThere is no mechanism to invalidate the cache at this time, so its best to keep minimumCacheTTL low. Otherwise you may need to manually change the src prop or delete <distDir>/cache/images.\n\ndisableStaticImages\n\nThe default behavior allows you to import static files such as import icon from './icon.png' and then pass that to the src property.\n\nIn some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently.\n\nYou can disable static image imports inside your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\ndangerouslyAllowSVG\n\nThe default loader does not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without proper Content Security Policy (CSP) headers.\n\nTherefore, we recommended using the unoptimized prop when the src prop is known to be SVG. This happens automatically when src ends with \".svg\".\n\nHowever, if you need to serve SVG images with the default Image Optimization API, you can set dangerouslyAllowSVG inside your next.config.js:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n\nIn addition, it is strongly recommended to also set contentDispositionType to force the browser to download the image, as well as contentSecurityPolicy to prevent scripts embedded in the image from executing.\n\ncontentDispositionType\n\nThe default loader sets the Content-Disposition\n header to attachment for added protection since the API can serve arbitrary remote images.\n\nThe default value is attachment which forces the browser to download the image when visiting directly. This is particularly important when dangerouslyAllowSVG is true.\n\nYou can optionally configure inline to allow the browser to render the image when visiting directly, without downloading it.\n\nnext.config.js\nmodule.exports = {\n  images: {\n    contentDispositionType: 'inline',\n  },\n}\nAnimated Images\n\nThe default loader will automatically bypass Image Optimization for animated images and serve the image as-is.\n\nAuto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use the unoptimized prop.\n\nResponsive Images\n\nThe default generated srcset contains 1x and 2x images in order to support different device pixel ratios. However, you may wish to render a responsive image that stretches with the viewport. In that case, you'll need to set sizes as well as style (or className).\n\nYou can render a responsive image using one of the following methods below.\n\nResponsive image using a static import\n\nIf the source image is not dynamic, you can statically import to create a responsive image:\n\ncomponents/author.js\nimport Image from 'next/image'\nimport me from '../photos/me.jpg'\n \nexport default function Author() {\n  return (\n    <Image\n      src={me}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n    />\n  )\n}\n\nTry it out:\n\nDemo the image responsive to viewport\nResponsive image with aspect ratio\n\nIf the source image is a dynamic or a remote url, you will also need to provide width and height to set the correct aspect ratio of the responsive image:\n\ncomponents/page.js\nimport Image from 'next/image'\n \nexport default function Page({ photoUrl }) {\n  return (\n    <Image\n      src={photoUrl}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n      width={500}\n      height={300}\n    />\n  )\n}\n\nTry it out:\n\nDemo the image responsive to viewport\nResponsive image with fill\n\nIf you don't know the aspect ratio, you will need to set the fill prop and set position: relative on the parent. Optionally, you can set object-fit style depending on the desired stretch vs crop behavior:\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page({ photoUrl }) {\n  return (\n    <div style={{ position: 'relative', width: '300px', height: '500px' }}>\n      <Image\n        src={photoUrl}\n        alt=\"Picture of the author\"\n        sizes=\"300px\"\n        fill\n        style={{\n          objectFit: 'contain',\n        }}\n      />\n    </div>\n  )\n}\n\nTry it out:\n\nDemo the fill prop\nTheme Detection CSS\n\nIf you want to display a different image for light and dark mode, you can create a new component that wraps two <Image> components and reveals the correct one based on a CSS media query.\n\ncomponents/theme-image.module.css\n.imgDark {\n  display: none;\n}\n \n@media (prefers-color-scheme: dark) {\n  .imgLight {\n    display: none;\n  }\n  .imgDark {\n    display: unset;\n  }\n}\ncomponents/theme-image.tsx\nTypeScript\nJavaScript\nTypeScript\nimport styles from './theme-image.module.css'\nimport Image, { ImageProps } from 'next/image'\n \ntype Props = Omit<ImageProps, 'src' | 'priority' | 'loading'> & {\n  srcLight: string\n  srcDark: string\n}\n \nconst ThemeImage = (props: Props) => {\n  const { srcLight, srcDark, ...rest } = props\n \n  return (\n    <>\n      <Image {...rest} src={srcLight} className={styles.imgLight} />\n      <Image {...rest} src={srcDark} className={styles.imgDark} />\n    </>\n  )\n}\n\nGood to know: The default behavior of loading=\"lazy\" ensures that only the correct image is loaded. You cannot use priority or loading=\"eager\" because that would cause both images to load. Instead, you can use fetchPriority=\"high\"\n.\n\nTry it out:\n\nDemo light/dark mode theme detection\ngetImageProps\n\nFor more advanced use cases, you can call getImageProps() to get the props that would be passed to the underlying <img> element, and instead pass to them to another component, style, canvas, etc.\n\nThis also avoid calling React useState() so it can lead to better performance, but it cannot be used with the placeholder prop because the placeholder will never be removed.\n\nTheme Detection Picture\n\nIf you want to display a different image for light and dark mode, you can use the <picture>\n element to display a different image based on the user's preferred color scheme\n.\n\napp/page.js\nimport { getImageProps } from 'next/image'\n \nexport default function Page() {\n  const common = { alt: 'Theme Example', width: 800, height: 400 }\n  const {\n    props: { srcSet: dark },\n  } = getImageProps({ ...common, src: '/dark.png' })\n  const {\n    props: { srcSet: light, ...rest },\n  } = getImageProps({ ...common, src: '/light.png' })\n \n  return (\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcSet={dark} />\n      <source media=\"(prefers-color-scheme: light)\" srcSet={light} />\n      <img {...rest} />\n    </picture>\n  )\n}\nArt Direction\n\nIf you want to display a different image for mobile and desktop, sometimes called Art Direction\n, you can provide different src, width, height, and quality props to getImageProps().\n\napp/page.js\nimport { getImageProps } from 'next/image'\n \nexport default function Home() {\n  const common = { alt: 'Art Direction Example', sizes: '100vw' }\n  const {\n    props: { srcSet: desktop },\n  } = getImageProps({\n    ...common,\n    width: 1440,\n    height: 875,\n    quality: 80,\n    src: '/desktop.jpg',\n  })\n  const {\n    props: { srcSet: mobile, ...rest },\n  } = getImageProps({\n    ...common,\n    width: 750,\n    height: 1334,\n    quality: 70,\n    src: '/mobile.jpg',\n  })\n \n  return (\n    <picture>\n      <source media=\"(min-width: 1000px)\" srcSet={desktop} />\n      <source media=\"(min-width: 500px)\" srcSet={mobile} />\n      <img {...rest} style={{ width: '100%', height: 'auto' }} />\n    </picture>\n  )\n}\nBackground CSS\n\nYou can even convert the srcSet string to the image-set()\n CSS function to optimize a background image.\n\napp/page.js\nimport { getImageProps } from 'next/image'\n \nfunction getBackgroundImage(srcSet = '') {\n  const imageSet = srcSet\n    .split(', ')\n    .map((str) => {\n      const [url, dpi] = str.split(' ')\n      return `url(\"${url}\") ${dpi}`\n    })\n    .join(', ')\n  return `image-set(${imageSet})`\n}\n \nexport default function Home() {\n  const {\n    props: { srcSet },\n  } = getImageProps({ alt: '', width: 128, height: 128, src: '/img.png' })\n  const backgroundImage = getBackgroundImage(srcSet)\n  const style = { height: '100vh', width: '100vw', backgroundImage }\n \n  return (\n    <main style={style}>\n      <h1>Hello World</h1>\n    </main>\n  )\n}\nKnown Browser Bugs\n\nThis next/image component uses browser native lazy loading\n, which may fallback to eager loading for older browsers before Safari 15.4. When using the blur-up placeholder, older browsers before Safari 12 will fallback to empty placeholder. When using styles with width/height of auto, it is possible to cause Layout Shift\n on older browsers before Safari 15 that don't preserve the aspect ratio\n. For more details, see this MDN video\n.\n\nSafari 15 - 16.3\n display a gray border while loading. Safari 16.4 fixed this issue\n. Possible solutions:\nUse CSS @supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }\nUse priority if the image is above the fold\nFirefox 67+\n displays a white background while loading. Possible solutions:\nEnable AVIF formats\nUse placeholder\nVersion History\nVersion\tChanges\nv15.0.0\tcontentDispositionType configuration default changed to attachment.\nv14.2.0\toverrideSrc prop added.\nv14.1.0\tgetImageProps() is stable.\nv14.0.0\tonLoadingComplete prop and domains config deprecated.\nv13.4.14\tplaceholder prop support for data:/image...\nv13.2.0\tcontentDispositionType configuration added.\nv13.0.6\tref prop added.\nv13.0.0\tThe next/image import was renamed to next/legacy/image. The next/future/image import was renamed to next/image. A codemod is available to safely and automatically rename your imports. <span> wrapper removed. layout, objectFit, objectPosition, lazyBoundary, lazyRoot props removed. alt is required. onLoadingComplete receives reference to img element. Built-in loader config removed.\nv12.3.0\tremotePatterns and unoptimized configuration is stable.\nv12.2.0\tExperimental remotePatterns and experimental unoptimized configuration added. layout=\"raw\" removed.\nv12.1.1\tstyle prop added. Experimental support for layout=\"raw\" added.\nv12.1.0\tdangerouslyAllowSVG and contentSecurityPolicy configuration added.\nv12.0.9\tlazyRoot prop added.\nv12.0.0\tformats configuration added.\nAVIF support added.\nWrapper <div> changed to <span>.\nv11.1.0\tonLoadingComplete and lazyBoundary props added.\nv11.0.0\tsrc prop support for static import.\nplaceholder prop added.\nblurDataURL prop added.\nv10.0.5\tloader prop added.\nv10.0.1\tlayout prop added.\nv10.0.0\tnext/image introduced."
  },
  {
    "title": "Components: <Form> | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/components/form",
    "html": "<Form>\nThis API is currently in the canary channel and not yet available in a stable version.\n\nThe <Form> component extends the HTML <form> element to provide prefetching of loading UI, client-side navigation on submission, and progressive enhancement.\n\nIt's useful for forms that update URL search params as it reduces the boilerplate code needed to achieve the above.\n\nBasic usage:\n\n/app/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Form from 'next/form'\n \nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      {/* On submission, the input value will be appended to \n          the URL, e.g. /search?query=abc */}\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\nReference\n\nThe behavior of the <Form> component depends on whether the action prop is passed a string or function.\n\nWhen action is a string, the <Form> behaves like a native HTML form that uses a GET method. The form data is encoded into the URL as search params, and when the form is submitted, it navigates to the specified URL. In addition, Next.js:\nPrefetches the path when the form becomes visible, this preloads shared UI (e.g. layout.js and loading.js), resulting in faster navigation.\nPerforms a client-side navigation instead of a full page reload when the form is submitted. This retains shared UI and client-side state.\nWhen action is a function (Server Action), <Form> behaves like a React form\n, executing the action when the form is submitted.\naction (string) Props\n\nWhen action is a string, the <Form> component supports the following props:\n\nProp\tExample\tType\tRequired\naction\taction=\"/search\"\tstring (URL or relative path)\tYes\nreplace\treplace={false}\tboolean\t-\nscroll\tscroll={true}\tboolean\t-\naction: The URL or path to navigate to when the form is submitted.\nAn empty string \"\" will navigate to the same route with updated search params.\nscroll: Controls the scroll behavior during navigation. Defaults to true, this means it will scroll to the top of the new route, and maintain the scroll position for backwards and forwards navigation.\nreplace: Replaces the current history state instead of pushing a new one to the browser's history\n stack. Default is false.\naction (function) Props\n\nWhen action is a function, the <Form> component supports the following prop:\n\nProp\tExample\tType\tRequired\naction\taction={myAction}\tfunction (Server Action)\tYes\naction: The Server Action to be called when the form is submitted. See the React docs\n for more.\n\nGood to know: When action is a function, the replace and scroll props are ignored.\n\nCaveats\nonSubmit: Can be used to handle form submission logic. However, calling event.preventDefault() will override <Form> behavior such as navigating to the specified URL.\nformAction: Can be used in a <button> or <input type=\"submit\"> fields to override the action prop. Next.js will perform a client-side navigation, however, this approach doesn't support prefetching.\nWhen using basePath, you must also include it in the formAction path. e.g. formAction=\"/base-path/search\".\nmethod\n, encType\n, target\n: Are not supported as they override <Form> behavior.\nSimilarly, formMethod, formEncType, and formTarget can be used to override the method, encType, and target props respectively, and using them will fallback to native browser behavior.\nIf you need to use these props, use the HTML <form> element instead.\nkey: Passing a key prop to a string action is not supported. If you'd like to trigger a re-render or perform a mutation, consider using a function action instead.\n<input type=\"file\">: Using this input type when the action is a string will match browser behavior by submitting the filename instead of the file object.\nExamples\nSearch form that leads to a search result page\n\nYou can create a search form that navigates to a search results page by passing the path as an action:\n\n/app/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Form from 'next/form'\n \nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n\nWhen the user updates the query input field and submits the form, the form data will be encoded into the URL as search params, e.g. /search?query=abc.\n\nGood to know: If you pass an empty string \"\" to action, the form will navigate to the same route with updated search params.\n\nOn the results page, you can access the query using the searchParams page.js prop and use it to fetch data from an external source.\n\n/app/search/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { getSearchResults } from '@/lib/search'\n \nexport default async function SearchPage({\n  searchParams,\n}: {\n  searchParams: { [key: string]: string | string[] | undefined }\n}) {\n  const results = await getSearchResults(searchParams.query)\n \n  return <div>...</div>\n}\n\nWhen the <Form> becomes visible in the user's viewport, shared UI (such as layout.js and loading.js) on the /search page will be prefetched. On submission, the form will immediately navigate to the new route and show loading UI while the results are being fetched. You can design the fallback UI using loading.js:\n\n/app/search/loading.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Loading() {\n  return <div>Loading...</div>\n}\n\nTo cover cases when shared UI hasn't yet loaded, you can show instant feedback to the user using useFormStatus\n.\n\nFirst, create a component that displays a loading state when the form is pending:\n\n/app/ui/search-button.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\nimport { useFormStatus } from 'react-dom'\n \nexport default function SearchButton() {\n  const status = useFormStatus()\n  return (\n    <button type=\"submit\">{status.pending ? 'Searching...' : 'Search'}</button>\n  )\n}\n\nThen, update the search form page to use the SearchButton component:\n\n/app/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Form from 'next/form'\nimport { SearchButton } from '@/ui/search-button'\n \nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <SearchButton />\n    </Form>\n  )\n}\nMutations with Server Actions\n\nYou can perform mutations by passing a function to the action prop.\n\n/app/posts/create/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Form from 'next/form'\nimport { createPost } from '@/posts/actions'\n \nexport default function Page() {\n  return (\n    <Form action={createPost}>\n      <input name=\"title\" />\n      {/* ... */}\n      <button type=\"submit\">Create Post</button>\n    </Form>\n  )\n}\n\nAfter a mutation, it's common to redirect to the new resource. You can use the redirect function from next/navigation to navigate to the new post page.\n\nGood to know: Since the \"destination\" of the form submission is not known until the action is executed, <Form> cannot automatically prefetch shared UI.\n\n/app/posts/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\nimport { redirect } from 'next/navigation'\n \nexport async function createPost(formData: FormData) {\n  // Create a new post\n  // ...\n \n  // Redirect to the new post\n  redirect(`/posts/${data.id}`)\n}\n\nThen, in the new page, you can fetch data using the params prop:\n\n/app/posts/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { getPost } from '@/posts/data'\n \nexport default async function PostPage({ params }: { params: { id: string } }) {\n  const data = await getPost(params.id)\n \n  return (\n    <div>\n      <h1>{data.title}</h1>\n      {/* ... */}\n    </div>\n  )\n}\n\nSee the Server Actions docs for more examples."
  },
  {
    "title": "Components: Font | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/components/font",
    "html": "Font Module\n\nThis API reference will help you understand how to use next/font/google and next/font/local. For features and usage, please see the Optimizing Fonts page.\n\nFont Function Arguments\n\nFor usage, review Google Fonts and Local Fonts.\n\nKey\tfont/google\tfont/local\tType\tRequired\nsrc\t\n\t\n\tString or Array of Objects\tYes\nweight\t\n\t\n\tString or Array\tRequired/Optional\nstyle\t\n\t\n\tString or Array\t-\nsubsets\t\n\t\n\tArray of Strings\t-\naxes\t\n\t\n\tArray of Strings\t-\ndisplay\t\n\t\n\tString\t-\npreload\t\n\t\n\tBoolean\t-\nfallback\t\n\t\n\tArray of Strings\t-\nadjustFontFallback\t\n\t\n\tBoolean or String\t-\nvariable\t\n\t\n\tString\t-\ndeclarations\t\n\t\n\tArray of Objects\t-\nsrc\n\nThe path of the font file as a string or an array of objects (with type Array<{path: string, weight?: string, style?: string}>) relative to the directory where the font loader function is called.\n\nUsed in next/font/local\n\nRequired\n\nExamples:\n\nsrc:'./fonts/my-font.woff2' where my-font.woff2 is placed in a directory named fonts inside the app directory\nsrc:[{path: './inter/Inter-Thin.ttf', weight: '100',},{path: './inter/Inter-Regular.ttf',weight: '400',},{path: './inter/Inter-Bold-Italic.ttf', weight: '700',style: 'italic',},]\nif the font loader function is called in app/page.tsx using src:'../styles/fonts/my-font.ttf', then my-font.ttf is placed in styles/fonts at the root of the project\nweight\n\nThe font weight\n with the following possibilities:\n\nA string with possible values of the weights available for the specific font or a range of values if it's a variable\n font\nAn array of weight values if the font is not a variable google font\n. It applies to next/font/google only.\n\nUsed in next/font/google and next/font/local\n\nRequired if the font being used is not variable\n\nExamples:\n\nweight: '400': A string for a single weight value - for the font Inter\n, the possible values are '100', '200', '300', '400', '500', '600', '700', '800', '900' or 'variable' where 'variable' is the default)\nweight: '100 900': A string for the range between 100 and 900 for a variable font\nweight: ['100','400','900']: An array of 3 possible values for a non variable font\nstyle\n\nThe font style\n with the following possibilities:\n\nA string value\n with default value of 'normal'\nAn array of style values if the font is not a variable google font\n. It applies to next/font/google only.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\nstyle: 'italic': A string - it can be normal or italic for next/font/google\nstyle: 'oblique': A string - it can take any value for next/font/local but is expected to come from standard font styles\nstyle: ['italic','normal']: An array of 2 values for next/font/google - the values are from normal and italic\nsubsets\n\nThe font subsets\n defined by an array of string values with the names of each subset you would like to be preloaded. Fonts specified via subsets will have a link preload tag injected into the head when the preload option is true, which is the default.\n\nUsed in next/font/google\n\nOptional\n\nExamples:\n\nsubsets: ['latin']: An array with the subset latin\n\nYou can find a list of all subsets on the Google Fonts page for your font.\n\naxes\n\nSome variable fonts have extra axes that can be included. By default, only the font weight is included to keep the file size down. The possible values of axes depend on the specific font.\n\nUsed in next/font/google\n\nOptional\n\nExamples:\n\naxes: ['slnt']: An array with value slnt for the Inter variable font which has slnt as additional axes as shown here\n. You can find the possible axes values for your font by using the filter on the Google variable fonts page\n and looking for axes other than wght\ndisplay\n\nThe font display\n with possible string values\n of 'auto', 'block', 'swap', 'fallback' or 'optional' with default value of 'swap'.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\ndisplay: 'optional': A string assigned to the optional value\npreload\n\nA boolean value that specifies whether the font should be preloaded or not. The default is true.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\npreload: false\nfallback\n\nThe fallback font to use if the font cannot be loaded. An array of strings of fallback fonts with no default.\n\nOptional\n\nUsed in next/font/google and next/font/local\n\nExamples:\n\nfallback: ['system-ui', 'arial']: An array setting the fallback fonts to system-ui or arial\nadjustFontFallback\nFor next/font/google: A boolean value that sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift\n. The default is true.\nFor next/font/local: A string or boolean false value that sets whether an automatic fallback font should be used to reduce Cumulative Layout Shift\n. The possible values are 'Arial', 'Times New Roman' or false. The default is 'Arial'.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\nadjustFontFallback: false: for next/font/google\nadjustFontFallback: 'Times New Roman': for next/font/local\nvariable\n\nA string value to define the CSS variable name to be used if the style is applied with the CSS variable method.\n\nUsed in next/font/google and next/font/local\n\nOptional\n\nExamples:\n\nvariable: '--my-font': The CSS variable --my-font is declared\ndeclarations\n\nAn array of font face descriptor\n key-value pairs that define the generated @font-face further.\n\nUsed in next/font/local\n\nOptional\n\nExamples:\n\ndeclarations: [{ prop: 'ascent-override', value: '90%' }]\nApplying Styles\n\nYou can apply the font styles in three ways:\n\nclassName\nstyle\nCSS Variables\nclassName\n\nReturns a read-only CSS className for the loaded font to be passed to an HTML element.\n\n<p className={inter.className}>Hello, Next.js!</p>\nstyle\n\nReturns a read-only CSS style object for the loaded font to be passed to an HTML element, including style.fontFamily to access the font family name and fallback fonts.\n\n<p style={inter.style}>Hello World</p>\nCSS Variables\n\nIf you would like to set your styles in an external style sheet and specify additional options there, use the CSS variable method.\n\nIn addition to importing the font, also import the CSS file where the CSS variable is defined and set the variable option of the font loader object as follows:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n \nconst inter = Inter({\n  variable: '--font-inter',\n})\n\nTo use the font, set the className of the parent container of the text you would like to style to the font loader's variable value and the className of the text to the styles property from the external CSS file.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n<main className={inter.variable}>\n  <p className={styles.text}>Hello World</p>\n</main>\n\nDefine the text selector class in the component.module.css CSS file as follows:\n\nstyles/component.module.css\n.text {\n  font-family: var(--font-inter);\n  font-weight: 200;\n  font-style: italic;\n}\n\nIn the example above, the text Hello World is styled using the Inter font and the generated font fallback with font-weight: 200 and font-style: italic.\n\nUsing a font definitions file\n\nEvery time you call the localFont or Google font function, that font will be hosted as one instance in your application. Therefore, if you need to use the same font in multiple places, you should load it in one place and import the related font object where you need it. This is done using a font definitions file.\n\nFor example, create a fonts.ts file in a styles folder at the root of your app directory.\n\nThen, specify your font definitions as follows:\n\nstyles/fonts.ts\nTypeScript\nJavaScript\nTypeScript\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n \n// define your variable fonts\nconst inter = Inter()\nconst lora = Lora()\n// define 2 weights of a non-variable font\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\n// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n \nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n\nYou can now use these definitions in your code as follows:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'\n \nexport default function Page() {\n  return (\n    <div>\n      <p className={inter.className}>Hello world using Inter font</p>\n      <p style={lora.style}>Hello world using Lora font</p>\n      <p className={sourceCodePro700.className}>\n        Hello world using Source_Sans_3 font with weight 700\n      </p>\n      <p className={greatVibes.className}>My title in Great Vibes font</p>\n    </div>\n  )\n}\n\nTo make it easier to access the font definitions in your code, you can define a path alias in your tsconfig.json or jsconfig.json files as follows:\n\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/fonts\": [\"./styles/fonts\"]\n    }\n  }\n}\n\nYou can now import any font definition as follows:\n\napp/about/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { greatVibes, sourceCodePro400 } from '@/fonts'\nVersion Changes\nVersion\tChanges\nv13.2.0\t@next/font renamed to next/font. Installation no longer required.\nv13.0.0\t@next/font was added."
  },
  {
    "title": "API Reference: Components | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference/components",
    "html": "Components"
  },
  {
    "title": "Upgrading: Migrating from Vite | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-vite",
    "html": "Migrating from Vite\n\nThis guide will help you migrate an existing Vite application to Next.js.\n\nWhy Switch?\n\nThere are several reasons why you might want to switch from Vite to Next.js:\n\nSlow initial page loading time\n\nIf you have built your application with the default Vite plugin for React\n, your application is a purely client-side application. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:\n\nThe browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load some data.\nYour application code grows with every new feature and extra dependency you add.\nNo automatic code splitting\n\nThe previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router.\n\nNetwork waterfalls\n\nA common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data.\n\nWhile fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls.\n\nFast and intentional loading states\n\nWith built-in support for streaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls.\n\nThis enables you to build pages that are faster to load and eliminate layout shifts\n.\n\nChoose the data fetching strategy\n\nDepending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN.\n\nMiddleware\n\nNext.js Middleware allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and internationalization.\n\nBuilt-in Optimizations\n\nImages, fonts, and third-party scripts often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you.\n\nMigration Steps\n\nOur goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts.\n\nStep 1: Install the Next.js Dependency\n\nThe first thing you need to do is to install next as a dependency:\n\nTerminal\nnpm install next@latest\nStep 2: Create the Next.js Configuration File\n\nCreate a next.config.mjs at the root of your project. This file will hold your Next.js configuration options.\n\nnext.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n}\n \nexport default nextConfig\n\nGood to know: You can use either .js or .mjs for your Next.js configuration file.\n\nStep 3: Update TypeScript Configuration\n\nIf you're using TypeScript, you need to update your tsconfig.json file with the following changes to make it compatible with Next.js. If you're not using TypeScript, you can skip this step.\n\nRemove the project reference\n to tsconfig.node.json\nAdd ./dist/types/**/*.ts and ./next-env.d.ts to the include array\nAdd ./node_modules to the exclude array\nAdd { \"name\": \"next\" } to the plugins array in compilerOptions\n: \"plugins\": [{ \"name\": \"next\" }]\nSet esModuleInterop\n to true: \"esModuleInterop\": true\nSet jsx\n to preserve: \"jsx\": \"preserve\"\nSet allowJs\n to true: \"allowJs\": true\nSet forceConsistentCasingInFileNames\n to true: \"forceConsistentCasingInFileNames\": true\nSet incremental\n to true: \"incremental\": true\n\nHere's an example of a working tsconfig.json with those changes:\n\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowJs\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"plugins\": [{ \"name\": \"next\" }]\n  },\n  \"include\": [\"./src\", \"./dist/types/**/*.ts\", \"./next-env.d.ts\"],\n  \"exclude\": [\"./node_modules\"]\n}\n\nYou can find more information about configuring TypeScript on the Next.js docs.\n\nStep 4: Create the Root Layout\n\nA Next.js App Router application must include a root layout file, which is a React Server Component that will wrap all pages in your application. This file is defined at the top level of the app directory.\n\nThe closest equivalent to the root layout file in a Vite application is the index.html file\n, which contains your <html>, <head>, and <body> tags.\n\nIn this step, you'll convert your index.html file into a root layout file:\n\nCreate a new app directory in your src directory.\nCreate a new layout.tsx file inside that app directory:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return '...'\n}\n\nGood to know: .js, .jsx, or .tsx extensions can be used for Layout files.\n\nCopy the content of your index.html file into the previously created <RootLayout> component while replacing the body.div#root and body.script tags with <div id=\"root\">{children}</div>:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\nNext.js already includes by default the meta charset\n and meta viewport\n tags, so you can safely remove those from your <head>:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\nAny metadata files such as favicon.ico, icon.png, robots.txt are automatically added to the application <head> tag as long as you have them placed into the top level of the app directory. After moving all supported files into the app directory you can safely delete their <link> tags:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\nFinally, Next.js can manage your last <head> tags with the Metadata API. Move your final metadata info into an exported metadata object:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nWith the above changes, you shifted from declaring everything in your index.html to using Next.js' convention-based approach built into the framework (Metadata API). This approach enables you to more easily improve your SEO and web shareability of your pages.\n\nStep 5: Create the Entrypoint Page\n\nOn Next.js you declare an entrypoint for your application by creating a page.tsx file. The closest equivalent of this file on Vite is your main.tsx file. In this step, you’ll set up the entrypoint of your application.\n\nCreate a [[...slug]] directory in your app directory.\n\nSince in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application), you need your page entrypoint to catch all possible routes of your application. For that, create a new [[...slug]] directory in your app directory.\n\nThis directory is what is called an optional catch-all route segment. Next.js uses a file-system based router where directories are used to define routes. This special directory will make sure that all routes of your application will be directed to its containing page.tsx file.\n\nCreate a new page.tsx file inside the app/[[...slug]] directory with the following content:\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport '../../index.css'\n \nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return '...' // We'll update this\n}\n\nGood to know: .js, .jsx, or .tsx extensions can be used for Page files.\n\nThis file is a Server Component. When you run next build, the file is prerendered into a static asset. It does not require any dynamic code.\n\nThis file imports our global CSS and tells generateStaticParams we are only going to generate one route, the index route at /.\n\nNow, let's move the rest of our Vite application which will run client-only.\n\napp/[[...slug]]/client.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport React from 'react'\nimport dynamic from 'next/dynamic'\n \nconst App = dynamic(() => import('../../App'), { ssr: false })\n \nexport function ClientOnly() {\n  return <App />\n}\n\nThis file is a Client Component, defined by the 'use client' directive. Client Components are still prerendered to HTML on the server before being sent to the client.\n\nSince we want a client-only application to start, we can configure Next.js to disable prerendering from the App component down.\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nNow, update your entrypoint page to use the new component:\n\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport '../../index.css'\nimport { ClientOnly } from './client'\n \nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return <ClientOnly />\n}\nStep 6: Update Static Image Imports\n\nNext.js handles static image imports slightly different from Vite. With Vite, importing an image file will return its public URL as a string:\n\nApp.tsx\nimport image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production\n \nexport default function App() {\n  return <img src={image} />\n}\n\nWith Next.js, static image imports return an object. The object can then be used directly with the Next.js <Image> component, or you can use the object's src property with your existing <img> tag.\n\nThe <Image> component has the added benefits of automatic image optimization. The <Image> component automatically sets the width and height attributes of the resulting <img> based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled to auto. When not styled to auto, the dimension will default to the <img> dimension attribute's value, which can cause the image to appear distorted.\n\nKeeping the <img> tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the <Image> component to take advantage of optimizing images by configuring a loader, or moving to the default Next.js server which has automatic image optimization.\n\nConvert absolute import paths for images imported from /public into relative imports:\n// Before\nimport logo from '/logo.png'\n \n// After\nimport logo from '../public/logo.png'\nPass the image src property instead of the whole image object to your <img> tag:\n// Before\n<img src={logo} />\n \n// After\n<img src={logo.src} />\n\nAlternatively, you can reference the public URL for the image asset based on the filename. For example, public/logo.png will serve the image at /logo.png for your application, which would be the src value.\n\nWarning: If you're using TypeScript, you might encounter type errors when accessing the src property. You can safely ignore those for now. They will be fixed by the end of this guide.\n\nStep 7: Migrate the Environment Variables\n\nNext.js has support for .env environment variables similar to Vite. The main difference is the prefix used to expose environment variables on the client-side.\n\nChange all environment variables with the VITE_ prefix to NEXT_PUBLIC_.\n\nVite exposes a few built-in environment variables on the special import.meta.env object which aren’t supported by Next.js. You need to update their usage as follows:\n\nimport.meta.env.MODE ⇒ process.env.NODE_ENV\nimport.meta.env.PROD ⇒ process.env.NODE_ENV === 'production'\nimport.meta.env.DEV ⇒ process.env.NODE_ENV !== 'production'\nimport.meta.env.SSR ⇒ typeof window !== 'undefined'\n\nNext.js also doesn't provide a built-in BASE_URL environment variable. However, you can still configure one, if you need it:\n\nAdd the following to your .env file:\n.env\n# ...\nNEXT_PUBLIC_BASE_PATH=\"/some-base-path\"\nSet basePath to process.env.NEXT_PUBLIC_BASE_PATH in your next.config.mjs file:\nnext.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n  basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.\n}\n \nexport default nextConfig\nUpdate import.meta.env.BASE_URL usages to process.env.NEXT_PUBLIC_BASE_PATH\nStep 8: Update Scripts in package.json\n\nYou should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update your scripts in your package.json with Next.js related commands, and add .next and next-env.d.ts to your .gitignore:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n.gitignore\n# ...\n.next\nnext-env.d.ts\ndist\n\nNow run npm run dev, and open http://localhost:3000\n. You should see your application now running on Next.js.\n\nExample: Check out this pull request\n for a working example of a Vite application migrated to Next.js.\n\nStep 9: Clean Up\n\nYou can now clean up your codebase from Vite related artifacts:\n\nDelete main.tsx\nDelete index.html\nDelete vite-env.d.ts\nDelete tsconfig.node.json\nDelete vite.config.ts\nUninstall Vite dependencies\nNext Steps\n\nIf everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:\n\nMigrate from React Router to the Next.js App Router to get:\nAutomatic code splitting\nStreaming Server-Rendering\nReact Server Components\nOptimize images with the <Image> component\nOptimize fonts with next/font\nOptimize third-party scripts with the <Script> component\nUpdate your ESLint configuration to support Next.js rules"
  },
  {
    "title": "App Router: API Reference | Next.js",
    "url": "https://nextjs.org/docs/app/api-reference",
    "html": "API Reference\n\nThe Next.js API reference is divided into the following sections:"
  },
  {
    "title": "Building Your Application: Examples | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/examples",
    "html": "Next.js Examples\nData Fetching\nUsing the fetch API\nUsing an ORM or database client\nRevalidating Data\nUsing ISR to revalidate data after a certain time\nUsing ISR to revalidate data on-demand\nForms\nShowing a pending state while submitting a form\nServer-side form validation\nHandling expected errors\nHandling unexpected exceptions\nShowing optimistic UI updates\nProgrammatic form submission\nServer Actions\nPassing additional values\nRevalidating data\nRedirecting\nSetting cookies\nDeleting cookies\nMetadata\nCreating an RSS feed\nCreating an Open Graph image\nCreating a sitemap\nCreating a robots.txt file\nCreating a custom 404 page\nCreating a custom 500 page\nAuth\nCreating a sign-up form\nStateless, cookie-based session management\nStateful, database-backed session management\nManaging authorization\nTesting\nVitest\nJest\nPlaywright\nCypress\nDeployment\nCreating a Dockerfile\nCreating a static export (SPA)\nConfiguring caching when self-hosting\nConfiguring Image Optimization when self-hosting"
  },
  {
    "title": "Upgrading: Migrating from Create React App | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/from-create-react-app",
    "html": "Migrating from Create React App\n\nThis guide will help you migrate an existing Create React App site to Next.js.\n\nWhy Switch?\n\nThere are several reasons why you might want to switch from Create React App to Next.js:\n\nSlow initial page loading time\n\nCreate React App uses purely client-side React. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:\n\nThe browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load data.\nYour application code grows with every new feature and dependency you add.\nNo automatic code splitting\n\nThe previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router.\n\nNetwork waterfalls\n\nA common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data.\n\nWhile fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls.\n\nFast and intentional loading states\n\nWith built-in support for streaming through React Suspense, you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls.\n\nThis enables you to build pages that are faster to load and eliminate layout shifts\n.\n\nChoose the data fetching strategy\n\nDepending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN.\n\nMiddleware\n\nNext.js Middleware allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and internationalization.\n\nBuilt-in Optimizations\n\nImages, fonts, and third-party scripts often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you.\n\nMigration Steps\n\nOur goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts.\n\nStep 1: Install the Next.js Dependency\n\nThe first thing you need to do is to install next as a dependency:\n\nTerminal\nnpm install next@latest\nStep 2: Create the Next.js Configuration File\n\nCreate a next.config.mjs at the root of your project. This file will hold your Next.js configuration options.\n\nnext.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './build', // Changes the build output directory to `./dist`.\n}\n \nexport default nextConfig\nStep 3: Create the Root Layout\n\nA Next.js App Router application must include a root layout file, which is a React Server Component that will wrap all pages in your application. This file is defined at the top level of the app directory.\n\nThe closest equivalent to the root layout file in a CRA application is the index.html file, which contains your <html>, <head>, and <body> tags.\n\nIn this step, you'll convert your index.html file into a root layout file:\n\nCreate a new app directory in your src directory.\nCreate a new layout.tsx file inside that app directory:\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return '...'\n}\n\nGood to know: .js, .jsx, or .tsx extensions can be used for Layout files.\n\nCopy the content of your index.html file into the previously created <RootLayout> component while replacing the body.div#root and body.noscript tags with <div id=\"root\">{children}</div>:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nGood to know: Next.js ignores CRA's public/manifest.json file, additional iconography (except favicon, icon, and apple-icon ), and testing configuration, but if these are requirements, Next.js also supports these options. See the Metadata API and Testing docs for more information.\n\nStep 4: Metadata\n\nNext.js already includes by default the meta charset\n and meta viewport\n tags, so you can safely remove those from your <head>:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nAny metadata files such as favicon.ico, icon.png, robots.txt are automatically added to the application <head> tag as long as you have them placed into the top level of the app directory. After moving all supported files into the app directory you can safely delete their <link> tags:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nFinally, Next.js can manage your last <head> tags with the Metadata API. Move your final metadata info into an exported metadata object:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n\nWith the above changes, you shifted from declaring everything in your index.html to using Next.js' convention-based approach built into the framework (Metadata API). This approach enables you to more easily improve your SEO and web shareability of your pages.\n\nStep 5: Styles\n\nLike Create React App, Next.js has built-in support for CSS Modules.\n\nIf you're using a global CSS file, import it into your app/layout.tsx file:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport '../index.css'\n \n// ...\n\nIf you're using Tailwind, you'll need to install postcss and autoprefixer:\n\nTerminal\nnpm install postcss autoprefixer\n\nThen, create a postcss.config.js file at the root of your project:\n\npostcss.config.js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\nStep 6: Create the Entrypoint Page\n\nOn Next.js you declare an entrypoint for your application by creating a page.tsx file. The closest equivalent of this file on CRA is your src/index.tsx file. In this step, you’ll set up the entry point of your application.\n\nCreate a [[...slug]] directory in your app directory.\n\nSince this guide is aiming to first set up our Next.js as an SPA (Single Page Application), you need your page entry point to catch all possible routes of your application. For that, create a new [[...slug]] directory in your app directory.\n\nThis directory is what is called an optional catch-all route segment. Next.js uses a file-system based router where directories are used to define routes. This special directory will make sure that all routes of your application will be directed to its containing page.tsx file.\n\nCreate a new page.tsx file inside the app/[[...slug]] directory with the following content:\n\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return '...' // We'll update this\n}\n\nThis file is a Server Component. When you run next build, the file is prerendered into a static asset. It does not require any dynamic code.\n\nThis file imports our global CSS and tells generateStaticParams we are only going to generate one route, the index route at /.\n\nNow, let's move the rest of our CRA application which will run client-only.\n\napp/[[...slug]]/client.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport dynamic from 'next/dynamic'\n \nconst App = dynamic(() => import('../../App'), { ssr: false })\n \nexport function ClientOnly() {\n  return <App />\n}\n\nThis file is a Client Component, defined by the 'use client' directive. Client Components are still prerendered to HTML on the server before being sent to the client.\n\nSince we want a client-only application to start, we can configure Next.js to disable prerendering from the App component down.\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nNow, update your entrypoint page to use the new component:\n\napp/[[...slug]]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { ClientOnly } from './client'\n \nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n \nexport default function Page() {\n  return <ClientOnly />\n}\nStep 7: Update Static Image Imports\n\nNext.js handles static image imports slightly different from CRA. With CRA, importing an image file will return its public URL as a string:\n\nApp.tsx\nimport image from './img.png'\n \nexport default function App() {\n  return <img src={image} />\n}\n\nWith Next.js, static image imports return an object. The object can then be used directly with the Next.js <Image> component, or you can use the object's src property with your existing <img> tag.\n\nThe <Image> component has the added benefits of automatic image optimization. The <Image> component automatically sets the width and height attributes of the resulting <img> based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled to auto. When not styled to auto, the dimension will default to the <img> dimension attribute's value, which can cause the image to appear distorted.\n\nKeeping the <img> tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the <Image> component to take advantage of optimizing images by configuring a loader, or moving to the default Next.js server which has automatic image optimization.\n\nConvert absolute import paths for images imported from /public into relative imports:\n\n// Before\nimport logo from '/logo.png'\n \n// After\nimport logo from '../public/logo.png'\n\nPass the image src property instead of the whole image object to your <img> tag:\n\n// Before\n<img src={logo} />\n \n// After\n<img src={logo.src} />\n\nAlternatively, you can reference the public URL for the image asset based on the filename. For example, public/logo.png will serve the image at /logo.png for your application, which would be the src value.\n\nWarning: If you're using TypeScript, you might encounter type errors when accessing the src property. To fix them, you need to add next-env.d.ts to the include array\n of your tsconfig.json file. Next.js will automatically generate this file when you run your application on step 9.\n\nStep 8: Migrate the Environment Variables\n\nNext.js has support for .env environment variables similar to CRA.\n\nThe main difference is the prefix used to expose environment variables on the client-side. Change all environment variables with the REACT_APP_ prefix to NEXT_PUBLIC_.\n\nStep 9: Update Scripts in package.json\n\nYou should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update your scripts in your package.json with Next.js related commands, and add .next, and next-env.d.ts to your .gitignore file:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"npx serve@latest ./build\"\n  }\n}\n.gitignore\n# ...\n.next\nnext-env.d.ts\n\nNow run npm run dev, and open http://localhost:3000\n. You should see your application now running on Next.js.\n\nStep 10: Clean Up\n\nYou can now clean up your codebase from Create React App related artifacts:\n\nDelete public/index.html\nDelete src/index.tsx\nDelete src/react-app-env.d.ts\nDelete reportWebVitals setup\nUninstall CRA dependencies (react-scripts)\nBundler Compatibility\n\nCreate React App and Next.js both default to using webpack for bundling.\n\nWhen migrating your CRA application to Next.js, you might have a custom webpack configuration you're looking to migrate. Next.js supports providing a custom webpack configuration.\n\nFurther, Next.js has support for Turbopack through next dev --turbo to improve your local dev performance. Turbopack supports some webpack loaders as well for compatibility and incremental adoption.\n\nNext Steps\n\nIf everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:\n\nMigrate from React Router to the Next.js App Router to get:\nAutomatic code splitting\nStreaming Server-Rendering\nReact Server Components\nOptimize images with the <Image> component\nOptimize fonts with next/font\nOptimize third-party scripts with the <Script> component\nUpdate your ESLint configuration to support Next.js rules\n\nGood to know: Using a static export does not currently support\n using the useParams hook."
  },
  {
    "title": "Upgrading: App Router Migration | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/app-router-migration",
    "html": "App Router Incremental Adoption Guide\n\nThis guide will help you:\n\nUpdate your Next.js application from version 12 to version 13\nUpgrade features that work in both the pages and the app directories\nIncrementally migrate your existing application from pages to app\nUpgrading\nNode.js Version\n\nThe minimum Node.js version is now v18.17. See the Node.js documentation\n for more information.\n\nNext.js Version\n\nTo update to Next.js version 13, run the following command using your preferred package manager:\n\nTerminal\nnpm install next@latest react@latest react-dom@latest\nESLint Version\n\nIf you're using ESLint, you need to upgrade your ESLint version:\n\nTerminal\nnpm install -D eslint-config-next@latest\n\nGood to know: You may need to restart the ESLint server in VS Code for the ESLint changes to take effect. Open the Command Palette (cmd+shift+p on Mac; ctrl+shift+p on Windows) and search for ESLint: Restart ESLint Server.\n\nNext Steps\n\nAfter you've updated, see the following sections for next steps:\n\nUpgrade new features: A guide to help you upgrade to new features such as the improved Image and Link Components.\nMigrate from the pages to app directory: A step-by-step guide to help you incrementally migrate from the pages to the app directory.\nUpgrading New Features\n\nNext.js 13 introduced the new App Router with new features and conventions. The new Router is available in the app directory and co-exists with the pages directory.\n\nUpgrading to Next.js 13 does not require using the new App Router. You can continue using pages with new features that work in both directories, such as the updated Image component, Link component, Script component, and Font optimization.\n\n<Image/> Component\n\nNext.js 12 introduced new improvements to the Image Component with a temporary import: next/future/image. These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading.\n\nIn version 13, this new behavior is now the default for next/image.\n\nThere are two codemods to help you migrate to the new Image Component:\n\nnext-image-to-legacy-image codemod: Safely and automatically renames next/image imports to next/legacy/image. Existing components will maintain the same behavior.\nnext-image-experimental codemod: Dangerously adds inline styles and removes unused props. This will change the behavior of existing components to match the new defaults. To use this codemod, you need to run the next-image-to-legacy-image codemod first.\n<Link> Component\n\nThe <Link> Component no longer requires manually adding an <a> tag as a child. This behavior was added as an experimental option in version 12.2\n and is now the default. In Next.js 13, <Link> always renders <a> and allows you to forward props to the underlying tag.\n\nFor example:\n\nimport Link from 'next/link'\n \n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n \n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n\nTo upgrade your links to Next.js 13, you can use the new-link codemod.\n\n<Script> Component\n\nThe behavior of next/script has been updated to support both pages and app, but some changes need to be made to ensure a smooth migration:\n\nMove any beforeInteractive scripts you previously included in _document.js to the root layout file (app/layout.tsx).\nThe experimental worker strategy does not yet work in app and scripts denoted with this strategy will either have to be removed or modified to use a different strategy (e.g. lazyOnload).\nonLoad, onReady, and onError handlers will not work in Server Components so make sure to move them to a Client Component or remove them altogether.\nFont Optimization\n\nPreviously, Next.js helped you optimize fonts by inlining font CSS. Version 13 introduces the new next/font module which gives you the ability to customize your font loading experience while still ensuring great performance and privacy. next/font is supported in both the pages and app directories.\n\nWhile inlining CSS still works in pages, it does not work in app. You should use next/font instead.\n\nSee the Font Optimization page to learn how to use next/font.\n\nMigrating from pages to app\n\n🎥 Watch: Learn how to incrementally adopt the App Router → YouTube (16 minutes)\n.\n\nMoving to the App Router may be the first time using React features that Next.js builds on top of such as Server Components, Suspense, and more. When combined with new Next.js features such as special files and layouts, migration means new concepts, mental models, and behavioral changes to learn.\n\nWe recommend reducing the combined complexity of these updates by breaking down your migration into smaller steps. The app directory is intentionally designed to work simultaneously with the pages directory to allow for incremental page-by-page migration.\n\nThe app directory supports nested routes and layouts. Learn more.\nUse nested folders to define routes and a special page.js file to make a route segment publicly accessible. Learn more.\nSpecial file conventions are used to create UI for each route segment. The most common special files are page.js and layout.js.\nUse page.js to define UI unique to a route.\nUse layout.js to define UI that is shared across multiple routes.\n.js, .jsx, or .tsx file extensions can be used for special files.\nYou can colocate other files inside the app directory such as components, styles, tests, and more. Learn more.\nData fetching functions like getServerSideProps and getStaticProps have been replaced with a new API inside app. getStaticPaths has been replaced with generateStaticParams.\npages/_app.js and pages/_document.js have been replaced with a single app/layout.js root layout. Learn more.\npages/_error.js has been replaced with more granular error.js special files. Learn more.\npages/404.js has been replaced with the not-found.js file.\npages/api/* API Routes have been replaced with the route.js (Route Handler) special file.\nStep 1: Creating the app directory\n\nUpdate to the latest Next.js version (requires 13.4 or greater):\n\nnpm install next@latest\n\nThen, create a new app directory at the root of your project (or src/ directory).\n\nStep 2: Creating a Root Layout\n\nCreate a new app/layout.tsx file inside the app directory. This is a root layout that will apply to all routes inside app.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\nThe app directory must include a root layout.\nThe root layout must define <html>, and <body> tags since Next.js does not automatically create them\nThe root layout replaces the pages/_app.tsx and pages/_document.tsx files.\n.js, .jsx, or .tsx extensions can be used for layout files.\n\nTo manage <head> HTML elements, you can use the built-in SEO support:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\nMigrating _document.js and _app.js\n\nIf you have an existing _app or _document file, you can copy the contents (e.g. global styles) to the root layout (app/layout.tsx). Styles in app/layout.tsx will not apply to pages/*. You should keep _app/_document while migrating to prevent your pages/* routes from breaking. Once fully migrated, you can then safely delete them.\n\nIf you are using any React Context providers, they will need to be moved to a Client Component.\n\nMigrating the getLayout() pattern to Layouts (Optional)\n\nNext.js recommended adding a property to Page components to achieve per-page layouts in the pages directory. This pattern can be replaced with native support for nested layouts in the app directory.\n\nSee before and after example\nStep 3: Migrating next/head\n\nIn the pages directory, the next/head React component is used to manage <head> HTML elements such as title and meta . In the app directory, next/head is replaced with the new built-in SEO support.\n\nBefore:\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Head from 'next/head'\n \nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </>\n  )\n}\n\nAfter:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'My Page Title',\n}\n \nexport default function Page() {\n  return '...'\n}\n\nSee all metadata options.\n\nStep 4: Migrating Pages\nPages in the app directory are Server Components by default. This is different from the pages directory where pages are Client Components.\nData fetching has changed in app. getServerSideProps, getStaticProps and getInitialProps have been replaced with a simpler API.\nThe app directory uses nested folders to define routes and a special page.js file to make a route segment publicly accessible.\npages Directory\tapp Directory\tRoute\nindex.js\tpage.js\t/\nabout.js\tabout/page.js\t/about\nblog/[slug].js\tblog/[slug]/page.js\t/blog/post-1\n\nWe recommend breaking down the migration of a page into two main steps:\n\nStep 1: Move the default exported Page Component into a new Client Component.\nStep 2: Import the new Client Component into a new page.js file inside the app directory.\n\nGood to know: This is the easiest migration path because it has the most comparable behavior to the pages directory.\n\nStep 1: Create a new Client Component\n\nCreate a new separate file inside the app directory (i.e. app/home-page.tsx or similar) that exports a Client Component. To define Client Components, add the 'use client' directive to the top of the file (before any imports).\nSimilar to the Pages Router, there is an optimization step to prerender Client Components to static HTML on the initial page load.\nMove the default exported page component from pages/index.js to app/home-page.tsx.\napp/home-page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \n// This is a Client Component (same as components in the `pages` directory)\n// It receives data as props, has access to state and effects, and is\n// prerendered on the server during the initial page load.\nexport default function HomePage({ recentPosts }) {\n  return (\n    <div>\n      {recentPosts.map((post) => (\n        <div key={post.id}>{post.title}</div>\n      ))}\n    </div>\n  )\n}\n\nStep 2: Create a new page\n\nCreate a new app/page.tsx file inside the app directory. This is a Server Component by default.\n\nImport the home-page.tsx Client Component into the page.\n\nIf you were fetching data in pages/index.js, move the data fetching logic directly into the Server Component using the new data fetching APIs. See the data fetching upgrade guide for more details.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// Import your Client Component\nimport HomePage from './home-page'\n \nasync function getPosts() {\n  const res = await fetch('https://...')\n  const posts = await res.json()\n  return posts\n}\n \nexport default async function Page() {\n  // Fetch data directly in a Server Component\n  const recentPosts = await getPosts()\n  // Forward fetched data to your Client Component\n  return <HomePage recentPosts={recentPosts} />\n}\n\nIf your previous page used useRouter, you'll need to update to the new routing hooks. Learn more.\n\nStart your development server and visit http://localhost:3000\n. You should see your existing index route, now served through the app directory.\n\nStep 5: Migrating Routing Hooks\n\nA new router has been added to support the new behavior in the app directory.\n\nIn app, you should use the three new hooks imported from next/navigation: useRouter(), usePathname(), and useSearchParams().\n\nThe new useRouter hook is imported from next/navigation and has different behavior to the useRouter hook in pages which is imported from next/router.\nThe useRouter hook imported from next/router is not supported in the app directory but can continue to be used in the pages directory.\nThe new useRouter does not return the pathname string. Use the separate usePathname hook instead.\nThe new useRouter does not return the query object. Search parameters and dynamic route parameters are now separate. Use the useSearchParams and useParams hooks instead.\nYou can use useSearchParams and usePathname together to listen to page changes. See the Router Events section for more details.\nThese new hooks are only supported in Client Components. They cannot be used in Server Components.\napp/example-client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  // ...\n}\n\nIn addition, the new useRouter hook has the following changes:\n\nisFallback has been removed because fallback has been replaced.\nThe locale, locales, defaultLocales, domainLocales values have been removed because built-in i18n Next.js features are no longer necessary in the app directory. Learn more about i18n.\nbasePath has been removed. The alternative will not be part of useRouter. It has not yet been implemented.\nasPath has been removed because the concept of as has been removed from the new router.\nisReady has been removed because it is no longer necessary. During static rendering, any component that uses the useSearchParams() hook will skip the prerendering step and instead be rendered on the client at runtime.\n\nView the useRouter() API reference.\n\nStep 6: Migrating Data Fetching Methods\n\nThe pages directory uses getServerSideProps and getStaticProps to fetch data for pages. Inside the app directory, these previous data fetching functions are replaced with a simpler API built on top of fetch() and async React Server Components.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n \n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n \n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n \n  return <div>...</div>\n}\nServer-side Rendering (getServerSideProps)\n\nIn the pages directory, getServerSideProps is used to fetch data on the server and forward props to the default exported React component in the file. The initial HTML for the page is prerendered from the server, followed by \"hydrating\" the page in the browser (making it interactive).\n\npages/dashboard.js\n// `pages` directory\n \nexport async function getServerSideProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return { props: { projects } }\n}\n \nexport default function Dashboard({ projects }) {\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nIn the App Router, we can colocate our data fetching inside our React components using Server Components. This allows us to send less JavaScript to the client, while maintaining the rendered HTML from the server.\n\nBy setting the cache option to no-store, we can indicate that the fetched data should never be cached. This is similar to getServerSideProps in the pages directory.\n\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// `app` directory\n \n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n \n  return projects\n}\n \nexport default async function Dashboard() {\n  const projects = await getProjects()\n \n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\nAccessing Request Object\n\nIn the pages directory, you can retrieve request-based data based on the Node.js HTTP API.\n\nFor example, you can retrieve the req object from getServerSideProps and use it to retrieve the request's cookies and headers.\n\npages/index.js\n// `pages` directory\n \nexport async function getServerSideProps({ req, query }) {\n  const authHeader = req.getHeaders()['authorization'];\n  const theme = req.cookies['theme'];\n \n  return { props: { ... }}\n}\n \nexport default function Page(props) {\n  return ...\n}\n\nThe app directory exposes new read-only functions to retrieve request data:\n\nheaders(): Based on the Web Headers API, and can be used inside Server Components to retrieve request headers.\ncookies(): Based on the Web Cookies API, and can be used inside Server Components to retrieve cookies.\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// `app` directory\nimport { cookies, headers } from 'next/headers'\n \nasync function getData() {\n  const authHeader = headers().get('authorization')\n \n  return '...'\n}\n \nexport default async function Page() {\n  // You can use `cookies()` or `headers()` inside Server Components\n  // directly or in your data fetching function\n  const theme = cookies().get('theme')\n  const data = await getData()\n  return '...'\n}\nStatic Site Generation (getStaticProps)\n\nIn the pages directory, the getStaticProps function is used to pre-render a page at build time. This function can be used to fetch data from an external API or directly from a database, and pass this data down to the entire page as it's being generated during the build.\n\npages/index.js\n// `pages` directory\n \nexport async function getStaticProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return { props: { projects } }\n}\n \nexport default function Index({ projects }) {\n  return projects.map((project) => <div>{project.name}</div>)\n}\n\nIn the app directory, data fetching with fetch() will default to cache: 'force-cache', which will cache the request data until manually invalidated. This is similar to getStaticProps in the pages directory.\n\napp/page.js\n// `app` directory\n \n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n \n  return projects\n}\n \nexport default async function Index() {\n  const projects = await getProjects()\n \n  return projects.map((project) => <div>{project.name}</div>)\n}\nDynamic paths (getStaticPaths)\n\nIn the pages directory, the getStaticPaths function is used to define the dynamic paths that should be pre-rendered at build time.\n\npages/posts/[id].js\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n \nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return { props: { post } }\n}\n \nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n\nIn the app directory, getStaticPaths is replaced with generateStaticParams.\n\ngenerateStaticParams behaves similarly to getStaticPaths, but has a simplified API for returning route parameters and can be used inside layouts. The return shape of generateStaticParams is an array of segments instead of an array of nested param objects or a string of resolved paths.\n\napp/posts/[id]/page.js\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n \nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n \nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n \n  return post\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params)\n \n  return <PostLayout post={post} />\n}\n\nUsing the name generateStaticParams is more appropriate than getStaticPaths for the new model in the app directory. The get prefix is replaced with a more descriptive generate, which sits better alone now that getStaticProps and getServerSideProps are no longer necessary. The Paths suffix is replaced by Params, which is more appropriate for nested routing with multiple dynamic segments.\n\nReplacing fallback\n\nIn the pages directory, the fallback property returned from getStaticPaths is used to define the behavior of a page that isn't pre-rendered at build time. This property can be set to true to show a fallback page while the page is being generated, false to show a 404 page, or blocking to generate the page at request time.\n\npages/posts/[id].js\n// `pages` directory\n \nexport async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}\n \nexport async function getStaticProps({ params }) {\n  ...\n}\n \nexport default function Post({ post }) {\n  return ...\n}\n\nIn the app directory the config.dynamicParams property controls how params outside of generateStaticParams are handled:\n\ntrue: (default) Dynamic segments not included in generateStaticParams are generated on demand.\nfalse: Dynamic segments not included in generateStaticParams will return a 404.\n\nThis replaces the fallback: true | false | 'blocking' option of getStaticPaths in the pages directory. The fallback: 'blocking' option is not included in dynamicParams because the difference between 'blocking' and true is negligible with streaming.\n\napp/posts/[id]/page.js\n// `app` directory\n \nexport const dynamicParams = true;\n \nexport async function generateStaticParams() {\n  return [...]\n}\n \nasync function getPost(params) {\n  ...\n}\n \nexport default async function Post({ params }) {\n  const post = await getPost(params);\n \n  return ...\n}\n\nWith dynamicParams set to true (the default), when a route segment is requested that hasn't been generated, it will be server-rendered and cached.\n\nIncremental Static Regeneration (getStaticProps with revalidate)\n\nIn the pages directory, the getStaticProps function allows you to add a revalidate field to automatically regenerate a page after a certain amount of time.\n\npages/index.js\n// `pages` directory\n \nexport async function getStaticProps() {\n  const res = await fetch(`https://.../posts`)\n  const posts = await res.json()\n \n  return {\n    props: { posts },\n    revalidate: 60,\n  }\n}\n \nexport default function Index({ posts }) {\n  return (\n    <Layout>\n      <PostList posts={posts} />\n    </Layout>\n  )\n}\n\nIn the app directory, data fetching with fetch() can use revalidate, which will cache the request for the specified amount of seconds.\n\napp/page.js\n// `app` directory\n \nasync function getPosts() {\n  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })\n  const data = await res.json()\n \n  return data.posts\n}\n \nexport default async function PostList() {\n  const posts = await getPosts()\n \n  return posts.map((post) => <div>{post.name}</div>)\n}\nAPI Routes\n\nAPI Routes continue to work in the pages/api directory without any changes. However, they have been replaced by Route Handlers in the app directory.\n\nRoute Handlers allow you to create custom request handlers for a given route using the Web Request\n and Response\n APIs.\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET(request: Request) {}\n\nGood to know: If you previously used API routes to call an external API from the client, you can now use Server Components instead to securely fetch data. Learn more about data fetching.\n\nStep 7: Styling\n\nIn the pages directory, global stylesheets are restricted to only pages/_app.js. With the app directory, this restriction has been lifted. Global styles can be added to any layout, page, or component.\n\nCSS Modules\nTailwind CSS\nGlobal Styles\nCSS-in-JS\nExternal Stylesheets\nSass\nTailwind CSS\n\nIf you're using Tailwind CSS, you'll need to add the app directory to your tailwind.config.js file:\n\ntailwind.config.js\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n\nYou'll also need to import your global styles in your app/layout.js file:\n\napp/layout.js\nimport '../styles/globals.css'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n\nLearn more about styling with Tailwind CSS\n\nCodemods\n\nNext.js provides Codemod transformations to help upgrade your codebase when a feature is deprecated. See Codemods for more information."
  },
  {
    "title": "Upgrading: Codemods | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/codemods",
    "html": "Codemods\n\nCodemods are transformations that run on your codebase programmatically. This allows a large number of changes to be programmatically applied without having to manually go through every file.\n\nNext.js provides Codemod transformations to help upgrade your Next.js codebase when an API is updated or deprecated.\n\nUsage\n\nIn your terminal, navigate (cd) into your project's folder, then run:\n\nTerminal\nnpx @next/codemod <transform> <path>\n\nReplacing <transform> and <path> with appropriate values.\n\ntransform - name of transform\npath - files or directory to transform\n--dry Do a dry-run, no code will be edited\n--print Prints the changed output for comparison\nNext.js Codemods\n14.0\nMigrate ImageResponse imports\nnext-og-import\nTerminal\nnpx @next/codemod@latest next-og-import .\n\nThis codemod moves transforms imports from next/server to next/og for usage of Dynamic OG Image Generation.\n\nFor example:\n\nimport { ImageResponse } from 'next/server'\n\nTransforms into:\n\nimport { ImageResponse } from 'next/og'\nUse viewport export\nmetadata-to-viewport-export\nTerminal\nnpx @next/codemod@latest metadata-to-viewport-export .\n\nThis codemod migrates certain viewport metadata to viewport export.\n\nFor example:\n\nexport const metadata = {\n  title: 'My App',\n  themeColor: 'dark',\n  viewport: {\n    width: 1,\n  },\n}\n\nTransforms into:\n\nexport const metadata = {\n  title: 'My App',\n}\n \nexport const viewport = {\n  width: 1,\n  themeColor: 'dark',\n}\n13.2\nUse Built-in Font\nbuilt-in-next-font\nTerminal\nnpx @next/codemod@latest built-in-next-font .\n\nThis codemod uninstalls the @next/font package and transforms @next/font imports into the built-in next/font.\n\nFor example:\n\nimport { Inter } from '@next/font/google'\n\nTransforms into:\n\nimport { Inter } from 'next/font/google'\n13.0\nRename Next Image Imports\nnext-image-to-legacy-image\nTerminal\nnpx @next/codemod@latest next-image-to-legacy-image .\n\nSafely renames next/image imports in existing Next.js 10, 11, or 12 applications to next/legacy/image in Next.js 13. Also renames next/future/image to next/image.\n\nFor example:\n\npages/index.js\nimport Image1 from 'next/image'\nimport Image2 from 'next/future/image'\n \nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n\nTransforms into:\n\npages/index.js\n// 'next/image' becomes 'next/legacy/image'\nimport Image1 from 'next/legacy/image'\n// 'next/future/image' becomes 'next/image'\nimport Image2 from 'next/image'\n \nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\nMigrate to the New Image Component\nnext-image-experimental\nTerminal\nnpx @next/codemod@latest next-image-experimental .\n\nDangerously migrates from next/legacy/image to the new next/image by adding inline styles and removing unused props.\n\nRemoves layout prop and adds style.\nRemoves objectFit prop and adds style.\nRemoves objectPosition prop and adds style.\nRemoves lazyBoundary prop.\nRemoves lazyRoot prop.\nRemove <a> Tags From Link Components\nnew-link\nTerminal\nnpx @next/codemod@latest new-link .\n\nRemove <a> tags inside Link Components, or add a legacyBehavior prop to Links that cannot be auto-fixed.\n\nFor example:\n\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\">\n  About\n</Link>\n \n<Link href=\"/about\">\n  <a onClick={() => console.log('clicked')}>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\" onClick={() => console.log('clicked')}>\n  About\n</Link>\n\nIn cases where auto-fixing can't be applied, the legacyBehavior prop is added. This allows your app to keep functioning using the old behavior for that particular link.\n\nconst Component = () => <a>About</a>\n \n<Link href=\"/about\">\n  <Component />\n</Link>\n// becomes\n<Link href=\"/about\" legacyBehavior>\n  <Component />\n</Link>\n11\nMigrate from CRA\ncra-to-next\nTerminal\nnpx @next/codemod cra-to-next\n\nMigrates a Create React App project to Next.js; creating a Pages Router and necessary config to match behavior. Client-side only rendering is leveraged initially to prevent breaking compatibility due to window usage during SSR and can be enabled seamlessly to allow the gradual adoption of Next.js specific features.\n\nPlease share any feedback related to this transform in this discussion\n.\n\n10\nAdd React imports\nadd-missing-react-import\nTerminal\nnpx @next/codemod add-missing-react-import\n\nTransforms files that do not import React to include the import in order for the new React JSX transform\n to work.\n\nFor example:\n\nmy-component.js\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n\nTransforms into:\n\nmy-component.js\nimport React from 'react'\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n9\nTransform Anonymous Components into Named Components\nname-default-component\nTerminal\nnpx @next/codemod name-default-component\n\nVersions 9 and above.\n\nTransforms anonymous components into named components to make sure they work with Fast Refresh\n.\n\nFor example:\n\nmy-component.js\nexport default function () {\n  return <div>Hello World</div>\n}\n\nTransforms into:\n\nmy-component.js\nexport default function MyComponent() {\n  return <div>Hello World</div>\n}\n\nThe component will have a camel-cased name based on the name of the file, and it also works with arrow functions.\n\n8\nTransform AMP HOC into page config\nwithamp-to-config\nTerminal\nnpx @next/codemod withamp-to-config\n\nTransforms the withAmp HOC into Next.js 9 page configuration.\n\nFor example:\n\n// Before\nimport { withAmp } from 'next/amp'\n \nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n \nexport default withAmp(Home)\n// After\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n \nexport const config = {\n  amp: true,\n}\n6\nUse withRouter\nurl-to-withrouter\nTerminal\nnpx @next/codemod url-to-withrouter\n\nTransforms the deprecated automatically injected url property on top level pages to using withRouter and the router property it injects. Read more here: https://nextjs.org/docs/messages/url-deprecated\n\nFor example:\n\nFrom\nimport React from 'react'\nexport default class extends React.Component {\n  render() {\n    const { pathname } = this.props.url\n    return <div>Current pathname: {pathname}</div>\n  }\n}\nTo\nimport React from 'react'\nimport { withRouter } from 'next/router'\nexport default withRouter(\n  class extends React.Component {\n    render() {\n      const { pathname } = this.props.router\n      return <div>Current pathname: {pathname}</div>\n    }\n  }\n)\n\nThis is one case. All the cases that are transformed (and tested) can be found in the __testfixtures__ directory\n."
  },
  {
    "title": "Upgrading: Version 14 | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/version-14",
    "html": "Version 14\nUpgrading from 13 to 14\n\nTo update to Next.js version 14, run the following command using your preferred package manager:\n\nTerminal\nnpm i next@latest react@latest react-dom@latest eslint-config-next@latest\nTerminal\nyarn add next@latest react@latest react-dom@latest eslint-config-next@latest\nTerminal\npnpm up next react react-dom eslint-config-next --latest\nTerminal\nbun add next@latest react@latest react-dom@latest eslint-config-next@latest\n\nGood to know: If you are using TypeScript, ensure you also upgrade @types/react and @types/react-dom to their latest versions.\n\nv14 Summary\nThe minimum Node.js version has been bumped from 16.14 to 18.17, since 16.x has reached end-of-life.\nThe next export command has been removed in favor of output: 'export' config. Please see the docs\n for more information.\nThe next/server import for ImageResponse was renamed to next/og. A codemod is available to safely and automatically rename your imports.\nThe @next/font package has been fully removed in favor of the built-in next/font. A codemod is available to safely and automatically rename your imports.\nThe WASM target for next-swc has been removed."
  },
  {
    "title": "Upgrading: Version 15 | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/version-15",
    "html": "Version 15\nUpgrading from 14 to 15\n\nTo update to Next.js version 15, run the following command using your preferred package manager:\n\nTerminal\nnpm i next@rc react@rc react-dom@rc eslint-config-next@rc\nTerminal\nyarn add next@rc react@rc react-dom@rc eslint-config-next@rc\nTerminal\npnpm up next@rc react@rc react-dom@rc eslint-config-next@rc\nTerminal\nbun add next@rc react@rc react-dom@rc eslint-config-next@rc\n\nGood to know:\n\nIf you see a peer dependencies warning, you may need to update react and react-dom to the suggested versions, or you use the --force or --legacy-peer-deps flag to ignore the warning. This won't be necessary once both Next.js 15 and React 19 are stable.\nIf you are using TypeScript, you'll need to temporarily override the React types. See the React 19 RC upgrade guide\n for more information.\nMinimum React version\nThe minimum react and react-dom is now 19.\nfetch requests\n\nfetch requests are no longer cached by default.\n\nTo opt specific fetch requests into caching, you can pass the cache: 'force-cache' option.\n\napp/layout.js\nexport default async function RootLayout() {\n  const a = await fetch('https://...') // Not Cached\n  const b = await fetch('https://...', { cache: 'force-cache' }) // Cached\n \n  // ...\n}\n\nTo opt all fetch requests in a layout or page into caching, you can use the export const fetchCache = 'default-cache' segment config option. If individual fetch requests specify a cache option, that will be used instead.\n\napp/layout.js\n// Since this is the root layout, all fetch requests in the app\n// that don't set their own cache option will be cached.\nexport const fetchCache = 'default-cache'\n \nexport default async function RootLayout() {\n  const a = await fetch('https://...') // Cached\n  const b = await fetch('https://...', { cache: 'no-store' }) // Not cached\n \n  // ...\n}\nRoute Handlers\n\nGET functions in Route Handlers are no longer cached by default. To opt GET methods into caching, you can use a route config option such as export const dynamic = 'force-static' in your Route Handler file.\n\napp/api/route.js\nexport const dynamic = 'force-static'\n \nexport async function GET() {}\nClient-side Router Cache\n\nWhen navigating between pages via <Link> or useRouter, page segments are no longer reused from the client-side router cache. However, they are still reused during browser backward and forward navigation and for shared layouts.\n\nTo opt page segments into caching, you can use the staleTimes config option:\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    staleTimes: {\n      dynamic: 30,\n      static: 180,\n    },\n  },\n}\n \nmodule.exports = nextConfig\n\nLayouts and loading states are still cached and reused on navigation.\n\nnext/font\n\nThe @next/font package has been removed in favor of the built-in next/font. A codemod is available to safely and automatically rename your imports.\n\napp/layout.js\n// Before\nimport { Inter } from '@next/font/google'\n \n// After\nimport { Inter } from 'next/font/google'\nbundlePagesRouterDependencies\n\nexperimental.bundlePagesExternals is now stable and renamed to bundlePagesRouterDependencies.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Before\n  experimental: {\n    bundlePagesExternals: true,\n  },\n \n  // After\n  bundlePagesRouterDependencies: true,\n}\n \nmodule.exports = nextConfig\nserverExternalPackages\n\nexperimental.serverComponentsExternalPackages is now stable and renamed to serverExternalPackages.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Before\n  experimental: {\n    serverComponentsExternalPackages: ['package-name'],\n  },\n \n  // After\n  serverExternalPackages: ['package-name'],\n}\n \nmodule.exports = nextConfig\nSpeed Insights\n\nAuto instrumentation for Speed Insights was removed in Next.js 15.\n\nTo continue using Speed Insights, follow the Vercel Speed Insights Quickstart\n guide."
  },
  {
    "title": "Building Your Application: Upgrading | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading",
    "html": "Upgrade Guide\n\nUpgrade your application to newer versions of Next.js or migrate from the Pages Router to the App Router."
  },
  {
    "title": "Deploying: Multi-Zones | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/deploying/multi-zones",
    "html": "Multi-Zones\nExamples\nWith Zones\n\nMulti-Zones are an approach to micro-frontends that separate a large application on a domain into smaller Next.js applications that each serve a set of paths. This is useful when there are collections of pages unrelated to the other pages in the application. By moving those pages to a separate zone (i.e., a separate application), you can reduce the size of each application which improves build times and removes code that is only necessary for one of the zones.\n\nFor example, let's say you have the following set of pages that you would like to split up:\n\n/blog/* for all blog posts\n/dashboard/* for all pages when the user is logged-in to the dashboard\n/* for the rest of your website not covered by other zones\n\nWith Multi-Zones support, you can create three applications that all are served on the same domain and look the same to the user, but you can develop and deploy each of the applications independently.\n\nNavigating between pages in the same zone will perform soft navigations, a navigation that does not require reloading the page. For example, in this diagram, navigating from / to /products will be a soft navigation.\n\nNavigating from a page in one zone to a page in another zone, such as from / to /dashboard, will perform a hard navigation, unloading the resources of the current page and loading the resources of the new page. Pages that are frequently visited together should live in the same zone to avoid hard navigations.\n\nHow to define a zone\n\nThere are no special APIs to define a new zone. A zone is a normal Next.js application where you also configure a basePath to avoid conflicts with pages and static files in other zones.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  basePath: '/blog',\n}\n\nThe default application that will handle all paths not sent to a more specific zone does not need a basePath.\n\nNext.js assets, such as JavaScript and CSS, will also be prefixed with basePath to make sure that they don't conflict with assets from other zones. These assets will be served under /basePath/_next/... for each of the zones.\n\nIf the zone serves pages that don't share a common path prefix, such as /home and /blog, then you can also set assetPrefix to ensure that all Next.js assets are served under a unique path prefix for the zone without adding a path prefix to the rest of the routes in your application.\n\nHow to route requests to the right zone\n\nWith the Multi Zones set-up, you need to route the paths to the correct zone since they are served by different applications. You can use any HTTP proxy to do this, but one of the Next.js applications can also be used to route requests for the entire domain.\n\nTo route to the correct zone using a Next.js application, you can use rewrites. For each path served by a different zone, you would add a rewrite rule to send that path to the domain of the other zone. For example:\n\nnext.config.js\nasync rewrites() {\n    return [\n        {\n            source: '/blog',\n            destination: `${process.env.BLOG_DOMAIN}/blog`,\n        },\n        {\n            source: '/blog/:path+',\n            destination: `${process.env.BLOG_DOMAIN}/blog/:path+`,\n        }\n    ];\n}\n\ndestination should be a URL that is served by the zone, including scheme and domain. This should point to the zone's production domain, but it can also be used to route requests to localhost in local development.\n\nGood to know: URL paths should be unique to a zone. For example, two zones trying to serve /blog would create a routing conflict.\n\nLinking between zones\n\nLinks to paths in a different zone should use an a tag instead of the Next.js <Link> component. This is because Next.js will try to prefetch and soft navigate to any relative path in <Link> component, which will not work across zones.\n\nSharing code\n\nThe Next.js applications that make up the different zones can live in any repository. However, it is often convenient to put these zones in a monorepo\n to more easily share code. For zones that live in different repositories, code can also be shared using public or private NPM packages.\n\nSince the pages in different zones may be released at different times, feature flags can be useful for enabling or disabling features in unison across the different zones.\n\nFor Next.js on Vercel\n applications, you can use a monorepo\n to deploy all affected zones with a single git push."
  },
  {
    "title": "Deploying: Static Exports | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/deploying/static-exports",
    "html": "Static Exports\n\nNext.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server.\n\nWhen running next build, Next.js generates an HTML file per route. By breaking a strict SPA into individual HTML files, Next.js can avoid loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads.\n\nSince Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets.\n\nConfiguration\n\nTo enable a static export, change the output mode inside next.config.js:\n\nnext.config.js\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n \n  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`\n  // trailingSlash: true,\n \n  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`\n  // skipTrailingSlashRedirect: true,\n \n  // Optional: Change the output directory `out` -> `dist`\n  // distDir: 'dist',\n}\n \nmodule.exports = nextConfig\n\nAfter running next build, Next.js will produce an out folder which contains the HTML/CSS/JS assets for your application.\n\nSupported Features\n\nThe core of Next.js has been designed to support static exports.\n\nServer Components\n\nWhen you run next build to generate a static export, Server Components consumed inside the app directory will run during the build, similar to traditional static-site generation.\n\nThe resulting component will be rendered into static HTML for the initial page load and a static payload for client navigation between routes. No changes are required for your Server Components when using the static export, unless they consume dynamic server functions.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  // This fetch will run on the server during `next build`\n  const res = await fetch('https://api.example.com/...')\n  const data = await res.json()\n \n  return <main>...</main>\n}\nClient Components\n\nIf you want to perform data fetching on the client, you can use a Client Component with SWR\n to memoize requests.\n\napp/other/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport useSWR from 'swr'\n \nconst fetcher = (url: string) => fetch(url).then((r) => r.json())\n \nexport default function Page() {\n  const { data, error } = useSWR(\n    `https://jsonplaceholder.typicode.com/posts/1`,\n    fetcher\n  )\n  if (error) return 'Failed to load'\n  if (!data) return 'Loading...'\n \n  return data.title\n}\n\nSince route transitions happen client-side, this behaves like a traditional SPA. For example, the following index route allows you to navigate to different posts on the client:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <>\n      <h1>Index Page</h1>\n      <hr />\n      <ul>\n        <li>\n          <Link href=\"/post/1\">Post 1</Link>\n        </li>\n        <li>\n          <Link href=\"/post/2\">Post 2</Link>\n        </li>\n      </ul>\n    </>\n  )\n}\nImage Optimization\n\nImage Optimization through next/image can be used with a static export by defining a custom image loader in next.config.js. For example, you can optimize images with a service like Cloudinary:\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  images: {\n    loader: 'custom',\n    loaderFile: './my-loader.ts',\n  },\n}\n \nmodule.exports = nextConfig\n\nThis custom loader will define how to fetch images from a remote source. For example, the following loader will construct the URL for Cloudinary:\n\nmy-loader.ts\nTypeScript\nJavaScript\nTypeScript\nexport default function cloudinaryLoader({\n  src,\n  width,\n  quality,\n}: {\n  src: string\n  width: number\n  quality?: number\n}) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://res.cloudinary.com/demo/image/upload/${params.join(\n    ','\n  )}${src}`\n}\n\nYou can then use next/image in your application, defining relative paths to the image in Cloudinary:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Image from 'next/image'\n \nexport default function Page() {\n  return <Image alt=\"turtles\" src=\"/turtles.jpg\" width={300} height={300} />\n}\nRoute Handlers\n\nRoute Handlers will render a static response when running next build. Only the GET HTTP verb is supported. This can be used to generate static HTML, JSON, TXT, or other files from cached or uncached data. For example:\n\napp/data.json/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET() {\n  return Response.json({ name: 'Lee' })\n}\n\nThe above file app/data.json/route.ts will render to a static file during next build, producing data.json containing { name: 'Lee' }.\n\nIf you need to read dynamic values from the incoming request, you cannot use a static export.\n\nBrowser APIs\n\nClient Components are pre-rendered to HTML during next build. Because Web APIs\n like window, localStorage, and navigator are not available on the server, you need to safely access these APIs only when running in the browser. For example:\n\n'use client';\n \nimport { useEffect } from 'react';\n \nexport default function ClientComponent() {\n  useEffect(() => {\n    // You now have access to `window`\n    console.log(window.innerHeight);\n  }, [])\n \n  return ...;\n}\nUnsupported Features\n\nFeatures that require a Node.js server, or dynamic logic that cannot be computed during the build process, are not supported:\n\nDynamic Routes with dynamicParams: true\nDynamic Routes without generateStaticParams()\nRoute Handlers that rely on Request\nCookies\nRewrites\nRedirects\nHeaders\nMiddleware\nIncremental Static Regeneration\nImage Optimization with the default loader\nDraft Mode\nServer Actions\n\nAttempting to use any of these features with next dev will result in an error, similar to setting the dynamic option to error in the root layout.\n\nexport const dynamic = 'error'\nDeploying\n\nWith a static export, Next.js can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets.\n\nWhen running next build, Next.js generates the static export into the out folder. For example, let's say you have the following routes:\n\n/\n/blog/[id]\n\nAfter running next build, Next.js will generate the following files:\n\n/out/index.html\n/out/404.html\n/out/blog/post-1.html\n/out/blog/post-2.html\n\nIf you are using a static host like Nginx, you can configure rewrites from incoming requests to the correct files:\n\nnginx.conf\nserver {\n  listen 80;\n  server_name acme.com;\n \n  root /var/www/out;\n \n  location / {\n      try_files $uri $uri.html $uri/ =404;\n  }\n \n  # This is necessary when `trailingSlash: false`.\n  # You can omit this when `trailingSlash: true`.\n  location /blog/ {\n      rewrite ^/blog/(.*)$ /blog/$1.html break;\n  }\n \n  error_page 404 /404.html;\n  location = /404.html {\n      internal;\n  }\n}\nVersion History\nVersion\tChanges\nv14.0.0\tnext export has been removed in favor of \"output\": \"export\"\nv13.4.0\tApp Router (Stable) adds enhanced static export support, including using React Server Components and Route Handlers.\nv13.3.0\tnext export is deprecated and replaced with \"output\": \"export\""
  },
  {
    "title": "Deploying: Production Checklist | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/deploying/production-checklist",
    "html": "Production Checklist\n\nBefore taking your Next.js application to production, there are some optimizations and patterns you should consider implementing for the best user experience, performance, and security.\n\nThis page provides best practices that you can use as a reference when building your application, before going to production, and after deployment - as well as the automatic Next.js optimizations you should be aware of.\n\nAutomatic optimizations\n\nThese Next.js optimizations are enabled by default and require no configuration:\n\nServer Components: Next.js uses Server Components by default. Server Components run on the server, and don't require JavaScript to render on the client. As such, they have no impact on the size of your client-side JavaScript bundles. You can then use Client Components as needed for interactivity.\nCode-splitting: Server Components enable automatic code-splitting by route segments. You may also consider lazy loading Client Components and third-party libraries, where appropriate.\nPrefetching: When a link to a new route enters the user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. You can opt out of prefetching, where appropriate.\nStatic Rendering: Next.js statically renders Server and Client Components on the server at build time and caches the rendered result to improve your application's performance. You can opt into Dynamic Rendering for specific routes, where appropriate.\nCaching: Next.js caches data requests, the rendered result of Server and Client Components, static assets, and more, to reduce the number of network requests to your server, database, and backend services. You may opt out of caching, where appropriate.\n\nThese defaults aim to improve your application's performance, and reduce the cost and amount of data transferred on each network request.\n\nDuring development\n\nWhile building your application, we recommend using the following features to ensure the best performance and user experience:\n\nRouting and rendering\nLayouts: Use layouts to share UI across pages and enable partial rendering on navigation.\n<Link> component: Use the <Link> component for client-side navigation and prefetching.\nError Handling: Gracefully handle catch-all errors and 404 errors in production by creating custom error pages.\nComposition Patterns: Follow the recommended composition patterns for Server and Client Components, and check the placement of your \"use client\" boundaries to avoid unnecessarily increasing your client-side JavaScript bundle.\nDynamic Functions: Be aware that dynamic functions like cookies() and the searchParams prop will opt the entire route into Dynamic Rendering (or your whole application if used in the Root Layout). Ensure dynamic function usage is intentional and wrap them in <Suspense> boundaries where appropriate.\n\nGood to know: Partial Prerendering (experimental) will allow parts of a route to be dynamic without opting the whole route into dynamic rendering.\n\nData fetching and caching\nServer Components: Leverage the benefits of fetching data on the server using Server Components.\nRoute Handlers: Use Route Handlers to access your backend resources from Client Components. But do not call Route Handlers from Server Components to avoid an additional server request.\nStreaming: Use Loading UI and React Suspense to progressively send UI from the server to the client, and prevent the whole route from blocking while data is being fetched.\nParallel Data Fetching: Reduce network waterfalls by fetching data in parallel, where appropriate. Also, consider preloading data where appropriate.\nData Caching: Verify whether your data requests are being cached or not, and opt into caching, where appropriate. Ensure requests that don't use fetch are cached.\nStatic Images: Use the public directory to automatically cache your application's static assets, e.g. images.\nUI and accessibility\nForms and Validation: Use Server Actions to handle form submissions, server-side validation, and handle errors.\nFont Module: Optimize fonts by using the Font Module, which automatically hosts your font files with other static assets, removes external network requests, and reduces layout shift\n.\n<Image> Component: Optimize images by using the Image Component, which automatically optimizes images, prevents layout shift, and serves them in modern formats like WebP or AVIF.\n<Script> Component: Optimize third-party scripts by using the Script Component, which automatically defers scripts and prevents them from blocking the main thread.\nESLint: Use the built-in eslint-plugin-jsx-a11y plugin to catch accessibility issues early.\nSecurity\nTainting: Prevent sensitive data from being exposed to the client by tainting data objects and/or specific values.\nServer Actions: Ensure users are authorized to call Server Actions. Review the recommended security practices.\nEnvironment Variables: Ensure your .env.* files are added to .gitignore and only public variables are prefixed with NEXT_PUBLIC_.\nContent Security Policy: Consider adding a Content Security Policy to protect your application against various security threats such as cross-site scripting, clickjacking, and other code injection attacks.\nMetadata and SEO\nMetadata API: Use the Metadata API to improve your application's Search Engine Optimization (SEO) by adding page titles, descriptions, and more.\nOpen Graph (OG) images: Create OG images to prepare your application for social sharing.\nSitemaps and Robots: Help Search Engines crawl and index your pages by generating sitemaps and robots files.\nType safety\nTypeScript and TS Plugin: Use TypeScript and the TypeScript plugin for better type-safety, and to help you catch errors early.\nBefore going to production\n\nBefore going to production, you can run next build to build your application locally and catch any build errors, then run next start to measure the performance of your application in a production-like environment.\n\nCore Web Vitals\nLighthouse\n: Run lighthouse in incognito to gain a better understanding of how your users will experience your site, and to identify areas for improvement. This is a simulated test and should be paired with looking at field data (such as Core Web Vitals).\nuseReportWebVitals hook: Use this hook to send Core Web Vitals\n data to analytics tools.\nAnalyzing bundles\n\nUse the @next/bundle-analyzer plugin to analyze the size of your JavaScript bundles and identify large modules and dependencies that might be impacting your application's performance.\n\nAdditionally, the following tools can help you understand the impact of adding new dependencies to your application:\n\nImport Cost\nPackage Phobia\nBundle Phobia\nbundlejs\nAfter deployment\n\nDepending on where you deploy your application, you might have access to additional tools and integrations to help you monitor and improve your application's performance.\n\nFor Vercel deployments, we recommend the following:\n\nAnalytics\n: A built-in analytics dashboard to help you understand your application's traffic, including the number of unique visitors, page views, and more.\nSpeed Insights\n: Real-world performance insights based on visitor data, offering a practical view of how your website is performing in the field.\nLogging\n: Runtime and Activity logs to help you debug issues and monitor your application in production. Alternatively, see the integrations page\n for a list of third-party tools and services.\n\nGood to know:\n\nTo get a comprehensive understanding of the best practices for production deployments on Vercel, including detailed strategies for improving website performance, refer to the Vercel Production Checklist\n.\n\nFollowing these recommendations will help you build a faster, more reliable, and secure application for your users."
  },
  {
    "title": "Building Your Application: Deploying | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/deploying",
    "html": "Deploying\n\nCongratulations, it's time to ship to production.\n\nYou can deploy managed Next.js with Vercel, or self-host on a Node.js server, Docker image, or even static HTML files. When deploying using next start, all Next.js features are supported.\n\nProduction Builds\n\nRunning next build generates an optimized version of your application for production. HTML, CSS, and JavaScript files are created based on your pages. JavaScript is compiled and browser bundles are minified using the Next.js Compiler to help achieve the best performance and support all modern browsers.\n\nNext.js produces a standard deployment output used by managed and self-hosted Next.js. This ensures all features are supported across both methods of deployment. In the next major version, we will be transforming this output into our Build Output API specification\n.\n\nManaged Next.js with Vercel\n\nVercel\n, the creators and maintainers of Next.js, provide managed infrastructure and a developer experience platform for your Next.js applications.\n\nDeploying to Vercel is zero-configuration and provides additional enhancements for scalability, availability, and performance globally. However, all Next.js features are still supported when self-hosted.\n\nLearn more about Next.js on Vercel\n or deploy a template for free\n to try it out.\n\nSelf-Hosting\n\nYou can self-host Next.js in three different ways:\n\nA Node.js server\nA Docker container\nA static export\nNode.js Server\n\nNext.js can be deployed to any hosting provider that supports Node.js. Ensure your package.json has the \"build\" and \"start\" scripts:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n\nThen, run npm run build to build your application. Finally, run npm run start to start the Node.js server. This server supports all Next.js features.\n\nDocker Image\n\nNext.js can be deployed to any hosting provider that supports Docker\n containers. You can use this approach when deploying to container orchestrators such as Kubernetes\n or when running inside a container in any cloud provider.\n\nInstall Docker\n on your machine\nClone our example\n (or the multi-environment example\n)\nBuild your container: docker build -t nextjs-docker .\nRun your container: docker run -p 3000:3000 nextjs-docker\n\nNext.js through Docker supports all Next.js features.\n\nStatic HTML Export\n\nNext.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server.\n\nSince Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. This includes tools like AWS S3, Nginx, or Apache.\n\nRunning as a static export does not support Next.js features that require a server. Learn more.\n\nGood to know:\n\nServer Components are supported with static exports.\nFeatures\nImage Optimization\n\nImage Optimization through next/image works self-hosted with zero configuration when deploying using next start. If you would prefer to have a separate service to optimize images, you can configure an image loader.\n\nImage Optimization can be used with a static export by defining a custom image loader in next.config.js. Note that images are optimized at runtime, not during the build.\n\nGood to know:\n\nOn glibc-based Linux systems, Image Optimization may require additional configuration\n to prevent excessive memory usage.\nLearn more about the caching behavior of optimized images and how to configure the TTL.\nYou can also disable Image Optimization and still retain other benefits of using next/image if you prefer. For example, if you are optimizing images yourself separately.\nMiddleware\n\nMiddleware works self-hosted with zero configuration when deploying using next start. Since it requires access to the incoming request, it is not supported when using a static export.\n\nMiddleware uses a runtime that is a subset of all available Node.js APIs to help ensure low latency, since it may run in front of every route or asset in your application. This runtime does not require running “at the edge” and works in a single-region server. Additional configuration and infrastructure are required to run Middleware in multiple regions.\n\nIf you are looking to add logic (or use an external package) that requires all Node.js APIs, you might be able to move this logic to a layout as a Server Component. For example, checking headers and redirecting. You can also use headers, cookies, or query parameters to redirect or rewrite through next.config.js. If that does not work, you can also use a custom server.\n\nEnvironment Variables\n\nNext.js can support both build time and runtime environment variables.\n\nBy default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed with NEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle during next build.\n\nTo read runtime environment variables, we recommend using getServerSideProps or incrementally adopting the App Router. With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values.\n\nimport { unstable_noStore as noStore } from 'next/cache';\n \nexport default function Component() {\n  noStore();\n  // cookies(), headers(), and other dynamic functions\n  // will also opt into dynamic rendering, making\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  ...\n}\n\nGood to know:\n\nYou can run code on server startup using the register function.\nWe do not recommend using the runtimeConfig option, as this does not work with the standalone output mode. Instead, we recommend incrementally adopting the App Router.\nCaching and ISR\n\nNext.js can cache responses, generated static pages, build outputs, and other static assets like images, fonts, and scripts.\n\nCaching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. By default, this cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router.\n\nYou can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application.\n\nAutomatic Caching\nNext.js sets the Cache-Control header of public, max-age=31536000, immutable to truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example, Static Image Imports. You can configure the TTL for images.\nIncremental Static Regeneration (ISR) sets the Cache-Control header of s-maxage: <revalidate in getStaticProps>, stale-while-revalidate. This revalidation time is defined in your getStaticProps function in seconds. If you set revalidate: false, it will default to a one-year cache duration.\nDynamically rendered pages set a Cache-Control header of private, no-cache, no-store, max-age=0, must-revalidate to prevent user-specific data from being cached. This applies to both the App Router and Pages Router. This also includes Draft Mode.\nStatic Assets\n\nIf you want to host static assets on a different domain or CDN, you can use the assetPrefix configuration in next.config.js. Next.js will use this asset prefix when retrieving JavaScript or CSS files. Separating your assets to a different domain does come with the downside of extra time spent on DNS and TLS resolution.\n\nLearn more about assetPrefix.\n\nConfiguring Caching\n\nBy default, generated cache assets will be stored in memory (defaults to 50mb) and on disk. If you are hosting Next.js using a container orchestration platform like Kubernetes, each pod will have a copy of the cache. To prevent stale data from being shown since the cache is not shared between pods by default, you can configure the Next.js cache to provide a cache handler and disable in-memory caching.\n\nTo configure the ISR/Data Cache location when self-hosting, you can configure a custom handler in your next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n\nThen, create cache-handler.js in the root of your project, for example:\n\ncache-handler.js\nconst cache = new Map()\n \nmodule.exports = class CacheHandler {\n  constructor(options) {\n    this.options = options\n  }\n \n  async get(key) {\n    // This could be stored anywhere, like durable storage\n    return cache.get(key)\n  }\n \n  async set(key, data, ctx) {\n    // This could be stored anywhere, like durable storage\n    cache.set(key, {\n      value: data,\n      lastModified: Date.now(),\n      tags: ctx.tags,\n    })\n  }\n \n  async revalidateTag(tag) {\n    // Iterate over all entries in the cache\n    for (let [key, value] of cache) {\n      // If the value's tags include the specified tag, delete this entry\n      if (value.tags.includes(tag)) {\n        cache.delete(key)\n      }\n    }\n  }\n}\n\nUsing a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application. For instance, you can save the cached values anywhere, like Redis\n or AWS S3.\n\nGood to know:\n\nrevalidatePath is a convenience layer on top of cache tags. Calling revalidatePath will call the revalidateTag function with a special default tag for the provided page.\nBuild Cache\n\nNext.js generates an ID during next build to identify which version of your application is being served. The same build should be used and boot up multiple containers.\n\nIf you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the generateBuildId command in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\nVersion Skew\n\nNext.js will automatically mitigate most instances of version skew\n and automatically reload the application to retrieve new assets when detected. For example, if there is a mismatch in the deploymentId, transitions between pages will perform a hard navigation versus using a prefetched value.\n\nWhen the application is reloaded, there may be a loss of application state if it's not designed to persist between page navigations. For example, using URL state or local storage would persist state after a page refresh. However, component state like useState would be lost in such navigations.\n\nVercel provides additional skew protection\n for Next.js applications to ensure assets and functions from the previous version are still available to older clients, even after the new version is deployed.\n\nYou can manually configure the deploymentId property in your next.config.js file to ensure each request uses either ?dpl query string or x-deployment-id header.\n\nStreaming and Suspense\n\nThe Next.js App Router supports streaming responses when self-hosting. If you are using Nginx or a similar proxy, you will need to configure it to disable buffering to enable streaming.\n\nFor example, you can disable buffering in Nginx by setting X-Accel-Buffering to no:\n\nnext.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*{/}?',\n        headers: [\n          {\n            key: 'X-Accel-Buffering',\n            value: 'no',\n          },\n        ],\n      },\n    ]\n  },\n}\nPartial Prerendering\n\nPartial Prendering (experimental) works by default with Next.js and is not a CDN feature. This includes deployment as a Node.js server (through next start) and when used with a Docker container.\n\nUsage with CDNs\n\nWhen using a CDN in front on your Next.js application, the page will include Cache-Control: private response header when dynamic APIs are accessed. This ensures that the resulting HTML page is marked as non-cachable. If the page is fully prerendered to static, it will include Cache-Control: public to allow the page to be cached on the CDN.\n\nIf you don't need a mix of both static and dynamic components, you can make your entire route static and cache the output HTML on a CDN. This Automatic Static Optimization is the default behavior when running next build if dynamic APIs are not used."
  },
  {
    "title": "Building Your Application: Authentication | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/authentication",
    "html": "Authentication\n\nUnderstanding authentication is crucial for protecting your application's data. This page will guide you through what React and Next.js features to use to implement auth.\n\nBefore starting, it helps to break down the process into three concepts:\n\nAuthentication: Verifies if the user is who they say they are. It requires the user to prove their identity with something they have, such as a username and password.\nSession Management: Tracks the user's auth state across requests.\nAuthorization: Decides what routes and data the user can access.\n\nThis diagram shows the authentication flow using React and Next.js features:\n\nThe examples on this page walk through basic username and password auth for educational purposes. While you can implement a custom auth solution, for increased security and simplicity, we recommend using an authentication library. These offer built-in solutions for authentication, session management, and authorization, as well as additional features such as social logins, multi-factor authentication, and role-based access control. You can find a list in the Auth Libraries section.\n\nAuthentication\nSign-up and login functionality\n\nGood to know: These examples use React's useActionState hook, which is available in React 19 RC. If you are using an earlier version of React, use useFormState instead. See the React docs\n for more information.\n\nYou can use the <form>\n element with React's Server Actions and useActionState\n to capture user credentials, validate form fields, and call your Authentication Provider's API or database.\n\nSince Server Actions always execute on the server, they provide a secure environment for handling authentication logic.\n\nHere are the steps to implement signup/login functionality:\n\n1. Capture user credentials\n\nTo capture user credentials, create a form that invokes a Server Action on submission. For example, a signup form that accepts the user's name, email, and password:\n\napp/ui/signup-form.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { signup } from '@/app/actions/auth'\n \nexport function SignupForm() {\n  return (\n    <form action={signup}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email\" />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\napp/actions/auth.tsx\nTypeScript\nJavaScript\nTypeScript\nexport async function signup(formData: FormData) {}\n2. Validate form fields on the server\n\nUse the Server Action to validate the form fields on the server. If your authentication provider doesn't provide form validation, you can use a schema validation library like Zod\n or Yup\n.\n\nUsing Zod as an example, you can define a form schema with appropriate error messages:\n\napp/lib/definitions.ts\nTypeScript\nJavaScript\nTypeScript\nimport { z } from 'zod'\n \nexport const SignupFormSchema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name must be at least 2 characters long.' })\n    .trim(),\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n  password: z\n    .string()\n    .min(8, { message: 'Be at least 8 characters long' })\n    .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n    .regex(/[0-9]/, { message: 'Contain at least one number.' })\n    .regex(/[^a-zA-Z0-9]/, {\n      message: 'Contain at least one special character.',\n    })\n    .trim(),\n})\n \nexport type FormState =\n  | {\n      errors?: {\n        name?: string[]\n        email?: string[]\n        password?: string[]\n      }\n      message?: string\n    }\n  | undefined\n\nTo prevent unnecessary calls to your authentication provider's API or database, you can return early in the Server Action if any form fields do not match the defined schema.\n\napp/actions/auth.ts\nTypeScript\nJavaScript\nTypeScript\nimport { SignupFormSchema, FormState } from '@/app/lib/definitions'\n \nexport async function signup(state: FormState, formData: FormData) {\n  // Validate form fields\n  const validatedFields = SignupFormSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    password: formData.get('password'),\n  })\n \n  // If any form fields are invalid, return early\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n \n  // Call the provider or db to create a user...\n}\n\nBack in your <SignupForm />, you can use React's useActionState() hook to display validation errors and a pending state while the form is submitting:\n\napp/ui/signup-form.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useActionState } from 'react'\nimport { signup } from '@/app/actions/auth'\n \nexport function SignupForm() {\n  const [state, action, pending] = useActionState(signup, undefined)\n \n  return (\n    <form action={action}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      {state?.errors?.name && <p>{state.errors.name}</p>}\n \n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\n      </div>\n      {state?.errors?.email && <p>{state.errors.email}</p>}\n \n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      {state?.errors?.password && (\n        <div>\n          <p>Password must:</p>\n          <ul>\n            {state.errors.password.map((error) => (\n              <li key={error}>- {error}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <button aria-disabled={pending} type=\"submit\">\n        {pending ? 'Submitting...' : 'Sign up'}\n      </button>\n    </form>\n  )\n}\n\nGood to know: Alternatively, you can use the useFormStatus\n hook to display the pending state.\n\n3. Create a user or check user credentials\n\nAfter validating form fields, you can create a new user account or check if the user exists by calling your authentication provider's API or database.\n\nContinuing from the previous example:\n\napp/actions/auth.tsx\nTypeScript\nJavaScript\nTypeScript\nexport async function signup(state: FormState, formData: FormData) {\n  // 1. Validate form fields\n  // ...\n \n  // 2. Prepare data for insertion into database\n  const { name, email, password } = validatedFields.data\n  // e.g. Hash the user's password before storing it\n  const hashedPassword = await bcrypt.hash(password, 10)\n \n  // 3. Insert the user into the database or call an Auth Library's API\n  const data = await db\n    .insert(users)\n    .values({\n      name,\n      email,\n      password: hashedPassword,\n    })\n    .returning({ id: users.id })\n \n  const user = data[0]\n \n  if (!user) {\n    return {\n      message: 'An error occurred while creating your account.',\n    }\n  }\n \n  // TODO:\n  // 4. Create user session\n  // 5. Redirect user\n}\n\nAfter successfully creating the user account or verifying the user credentials, you can create a session to manage the user's auth state. Depending on your session management strategy, the session can be stored in a cookie or database, or both. Continue to the Session Management section to learn more.\n\nTips:\n\nThe example above is verbose since it breaks down the authentication steps for the purpose of education. This highlights that implementing your own secure solution can quickly become complex. Consider using an Auth Library to simplify the process.\nTo improve the user experience, you may want to check for duplicate emails or usernames earlier in the registration flow. For example, as the user types in a username or the input field loses focus. This can help prevent unnecessary form submissions and provide immediate feedback to the user. You can debounce requests with libraries such as use-debounce\n to manage the frequency of these checks.\nSession Management\n\nSession management ensures that the user's authenticated state is preserved across requests. It involves creating, storing, refreshing, and deleting sessions or tokens.\n\nThere are two types of sessions:\n\nStateless: Session data (or a token) is stored in the browser's cookies. The cookie is sent with each request, allowing the session to be verified on the server. This method is simpler, but can be less secure if not implemented correctly.\nDatabase: Session data is stored in a database, with the user's browser only receiving the encrypted session ID. This method is more secure, but can be complex and use more server resources.\n\nGood to know: While you can use either method, or both, we recommend using session management library such as iron-session\n or Jose\n.\n\nStateless Sessions\n\nTo create and manage stateless sessions, there are a few steps you need to follow:\n\nGenerate a secret key, which will be used to sign your session, and store it as an environment variable.\nWrite logic to encrypt/decrypt session data using a session management library.\nManage cookies using the Next.js cookies() API.\n\nIn addition to the above, consider adding functionality to update (or refresh) the session when the user returns to the application, and delete the session when the user logs out.\n\nGood to know: Check if your auth library includes session management.\n\n1. Generating a secret key\n\nThere are a few ways you can generate secret key to sign your session. For example, you may choose to use the openssl command in your terminal:\n\nterminal\nopenssl rand -base64 32\n\nThis command generates a 32-character random string that you can use as your secret key and store in your environment variables file:\n\n.env\nSESSION_SECRET=your_secret_key\n\nYou can then reference this key in your session management logic:\n\napp/lib/session.js\nconst secretKey = process.env.SESSION_SECRET\n2. Encrypting and decrypting sessions\n\nNext, you can use your preferred session management library to encrypt and decrypt sessions. Continuing from the previous example, we'll use Jose\n (compatible with the Edge Runtime) and React's server-only\n package to ensure that your session management logic is only executed on the server.\n\napp/lib/session.ts\nTypeScript\nJavaScript\nTypeScript\nimport 'server-only'\nimport { SignJWT, jwtVerify } from 'jose'\nimport { SessionPayload } from '@/app/lib/definitions'\n \nconst secretKey = process.env.SESSION_SECRET\nconst encodedKey = new TextEncoder().encode(secretKey)\n \nexport async function encrypt(payload: SessionPayload) {\n  return new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('7d')\n    .sign(encodedKey)\n}\n \nexport async function decrypt(session: string | undefined = '') {\n  try {\n    const { payload } = await jwtVerify(session, encodedKey, {\n      algorithms: ['HS256'],\n    })\n    return payload\n  } catch (error) {\n    console.log('Failed to verify session')\n  }\n}\n\nTips:\n\nThe payload should contain the minimum, unique user data that'll be used in subsequent requests, such as the user's ID, role, etc. It should not contain personally identifiable information like phone number, email address, credit card information, etc, or sensitive data like passwords.\n3. Setting cookies (recommended options)\n\nTo store the session in a cookie, use the Next.js cookies() API. The cookie should be set on the server, and include the recommended options:\n\nHttpOnly: Prevents client-side JavaScript from accessing the cookie.\nSecure: Use https to send the cookie.\nSameSite: Specify whether the cookie can be sent with cross-site requests.\nMax-Age or Expires: Delete the cookie after a certain period.\nPath: Define the URL path for the cookie.\n\nPlease refer to MDN\n for more information on each of these options.\n\napp/lib/session.ts\nTypeScript\nJavaScript\nTypeScript\nimport 'server-only'\nimport { cookies } from 'next/headers'\n \nexport async function createSession(userId: string) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  const session = await encrypt({ userId, expiresAt })\n \n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n\nBack in your Server Action, you can invoke the createSession() function, and use the redirect() API to redirect the user to the appropriate page:\n\napp/actions/auth.ts\nTypeScript\nJavaScript\nTypeScript\nimport { createSession } from '@/app/lib/session'\n \nexport async function signup(state: FormState, formData: FormData) {\n  // Previous steps:\n  // 1. Validate form fields\n  // 2. Prepare data for insertion into database\n  // 3. Insert the user into the database or call an Library API\n \n  // Current steps:\n  // 4. Create user session\n  await createSession(user.id)\n  // 5. Redirect user\n  redirect('/profile')\n}\n\nTips:\n\nCookies should be set on the server to prevent client-side tampering.\n🎥 Watch: Learn more about stateless sessions and authentication with Next.js → YouTube (11 minutes)\n.\nUpdating (or refreshing) sessions\n\nYou can also extend the session's expiration time. This is useful for keeping the user logged in after they access the application again. For example:\n\napp/lib/session.ts\nTypeScript\nJavaScript\nTypeScript\nimport 'server-only'\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n \nexport async function updateSession() {\n  const session = cookies().get('session')?.value\n  const payload = await decrypt(session)\n \n  if (!session || !payload) {\n    return null\n  }\n \n  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expires,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n\nTip: Check if your auth library supports refresh tokens, which can be used to extend the user's session.\n\nDeleting the session\n\nTo delete the session, you can delete the cookie:\n\napp/lib/session.ts\nTypeScript\nJavaScript\nTypeScript\nimport 'server-only'\nimport { cookies } from 'next/headers'\n \nexport function deleteSession() {\n  cookies().delete('session')\n}\n\nThen you can reuse the deleteSession() function in your application, for example, on logout:\n\napp/actions/auth.ts\nTypeScript\nJavaScript\nTypeScript\nimport { cookies } from 'next/headers'\nimport { deleteSession } from '@/app/lib/session'\n \nexport async function logout() {\n  deleteSession()\n  redirect('/login')\n}\nDatabase Sessions\n\nTo create and manage database sessions, you'll need to follow these steps:\n\nCreate a table in your database to store session and data (or check if your Auth Library handles this).\nImplement functionality to insert, update, and delete sessions\nEncrypt the session ID before storing it in the user's browser, and ensure the database and cookie stay in sync (this is optional, but recommended for optimistic auth checks in Middleware).\n\nFor example:\n\napp/lib/session.ts\nTypeScript\nJavaScript\nTypeScript\nimport cookies from 'next/headers'\nimport { db } from '@/app/lib/db'\nimport { encrypt } from '@/app/lib/session'\n \nexport async function createSession(id: number) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n \n  // 1. Create a session in the database\n  const data = await db\n    .insert(sessions)\n    .values({\n      userId: id,\n      expiresAt,\n    })\n    // Return the session ID\n    .returning({ id: sessions.id })\n \n  const sessionId = data[0].id\n \n  // 2. Encrypt the session ID\n  const session = await encrypt({ sessionId, expiresAt })\n \n  // 3. Store the session in cookies for optimistic auth checks\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n\nTips:\n\nFor faster data retrieval, consider using a database like Vercel Redis\n. However, you can also keep the session data in your primary database, and combine data requests to reduce the number of queries.\nYou may opt to use database sessions for more advanced use cases, such as keeping track of the last time a user logged in, or number of active devices, or give users the ability to log out of all devices.\n\nAfter implementing session management, you'll need to add authorization logic to control what users can access and do within your application. Continue to the Authorization section to learn more.\n\nAuthorization\n\nOnce a user is authenticated and a session is created, you can implement authorization to control what the user can access and do within your application.\n\nThere are two main types of authorization checks:\n\nOptimistic: Checks if the user is authorized to access a route or perform an action using the session data stored in the cookie. These checks are useful for quick operations, such as showing/hiding UI elements or redirecting users based on permissions or roles.\nSecure: Checks if the user is authorized to access a route or perform an action using the session data stored in the database. These checks are more secure and are used for operations that require access to sensitive data or actions.\n\nFor both cases, we recommend:\n\nCreating a Data Access Layer to centralize your authorization logic\nUsing Data Transfer Objects (DTO) to only return the necessary data\nOptionally use Middleware to perform optimistic checks.\nOptimistic checks with Middleware (Optional)\n\nThere are some cases where you may want to use Middleware and redirect users based on permissions:\n\nTo perform optimistic checks. Since Middleware runs on every route, it's a good way to centralize redirect logic and pre-filter unauthorized users.\nTo protect static routes that share data between users (e.g. content behind a paywall).\n\nHowever, since Middleware runs on every route, including prefetched routes, it's important to only read the session from the cookie (optimistic checks), and avoid database checks to prevent performance issues.\n\nFor example:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse } from 'next/server'\nimport { decrypt } from '@/app/lib/session'\nimport { cookies } from 'next/headers'\n \n// 1. Specify protected and public routes\nconst protectedRoutes = ['/dashboard']\nconst publicRoutes = ['/login', '/signup', '/']\n \nexport default async function middleware(req: NextRequest) {\n  // 2. Check if the current route is protected or public\n  const path = req.nextUrl.pathname\n  const isProtectedRoute = protectedRoutes.includes(path)\n  const isPublicRoute = publicRoutes.includes(path)\n \n  // 3. Decrypt the session from the cookie\n  const cookie = cookies().get('session')?.value\n  const session = await decrypt(cookie)\n \n  // 5. Redirect to /login if the user is not authenticated\n  if (isProtectedRoute && !session?.userId) {\n    return NextResponse.redirect(new URL('/login', req.nextUrl))\n  }\n \n  // 6. Redirect to /dashboard if the user is authenticated\n  if (\n    isPublicRoute &&\n    session?.userId &&\n    !req.nextUrl.pathname.startsWith('/dashboard')\n  ) {\n    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))\n  }\n \n  return NextResponse.next()\n}\n \n// Routes Middleware should not run on\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n\nWhile Middleware can be useful for initial checks, it should not be your only line of defense in protecting your data. The majority of security checks should be performed as close as possible to your data source, see Data Access Layer for more information.\n\nTips:\n\nIn Middleware, you can also read cookies using req.cookies.get('session').value.\nMiddleware uses the Edge Runtime, check if your Auth library and session management library are compatible.\nYou can use the matcher property in the Middleware to specify which routes Middleware should run on. Although, for auth, it's recommended Middleware runs on all routes.\nCreating a Data Access Layer (DAL)\n\nWe recommend creating a DAL to centralize your data requests and authorization logic.\n\nThe DAL should include a function that verifies the user's session as they interact with your application. At the very least, the function should check if the session is valid, then redirect or return the user information needed to make further requests.\n\nFor example, create a separate file for your DAL that includes a verifySession() function. Then use React's cache\n API to memoize the return value of the function during a React render pass:\n\napp/lib/dal.ts\nTypeScript\nJavaScript\nTypeScript\nimport 'server-only'\n \nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n \nexport const verifySession = cache(async () => {\n  const cookie = cookies().get('session')?.value\n  const session = await decrypt(cookie)\n \n  if (!session?.userId) {\n    redirect('/login')\n  }\n \n  return { isAuth: true, userId: session.userId }\n})\n\nYou can then invoke the verifySession() function in your data requests, Server Actions, Route Handlers:\n\napp/lib/dal.ts\nTypeScript\nJavaScript\nTypeScript\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n \n  try {\n    const data = await db.query.users.findMany({\n      where: eq(users.id, session.userId),\n      // Explicitly return the columns you need rather than the whole user object\n      columns: {\n        id: true,\n        name: true,\n        email: true,\n      },\n    })\n \n    const user = data[0]\n \n    return user\n  } catch (error) {\n    console.log('Failed to fetch user')\n    return null\n  }\n})\n\nTip:\n\nA DAL can be used to protect data fetched at request time. However, for static routes that share data between users, data will be fetched at build time and not at request time. Use Middleware to protect static routes.\nFor secure checks, you can check if the session is valid by comparing the session ID with your database. Use React's cache\n function to avoid unnecessary duplicate requests to the database during a render pass.\nYou may wish to consolidate related data requests in a JavaScript class that runs verifySession() before any methods.\nUsing Data Transfer Objects (DTO)\n\nWhen retrieving data, it's recommended you return only the necessary data that will be used in your application, and not entire objects. For example, if you're fetching user data, you might only return the user's ID and name, rather than the entire user object which could contain passwords, phone numbers, etc.\n\nHowever, if you have no control over the returned data structure, or are working in a team where you want to avoid whole objects being passed to the client, you can use strategies such as specifying what fields are safe to be exposed to the client.\n\napp/lib/dto.ts\nTypeScript\nJavaScript\nTypeScript\nimport 'server-only'\nimport { getUser } from '@/app/lib/dal'\n \nfunction canSeeUsername(viewer: User) {\n  return true\n}\n \nfunction canSeePhoneNumber(viewer: User, team: string) {\n  return viewer.isAdmin || team === viewer.team\n}\n \nexport async function getProfileDTO(slug: string) {\n  const data = await db.query.users.findMany({\n    where: eq(users.slug, slug),\n    // Return specific columns here\n  })\n  const user = data[0]\n \n  const currentUser = await getUser(user.id)\n \n  // Or return only what's specific to the query here\n  return {\n    username: canSeeUsername(currentUser) ? user.username : null,\n    phonenumber: canSeePhoneNumber(currentUser, user.team)\n      ? user.phonenumber\n      : null,\n  }\n}\n\nBy centralizing your data requests and authorization logic in a DAL and using DTOs, you can ensure that all data requests are secure and consistent, making it easier to maintain, audit, and debug as your application scales.\n\nGood to know:\n\nThere are a couple of different ways you can define a DTO, from using toJSON(), to individual functions like the example above, or JS classes. Since these are JavaScript patterns and not a React or Next.js feature, we recommend doing some research to find the best pattern for your application.\nLearn more about security best practices in our Security in Next.js article.\nServer Components\n\nAuth check in Server Components are useful for role-based access. For example, to conditionally render components based on the user's role:\n\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { verifySession } from '@/app/lib/dal'\n \nexport default function Dashboard() {\n  const session = await verifySession()\n  const userRole = session?.user?.role // Assuming 'role' is part of the session object\n \n  if (userRole === 'admin') {\n    return <AdminDashboard />\n  } else if (userRole === 'user') {\n    return <UserDashboard />\n  } else {\n    redirect('/login')\n  }\n}\n\nIn the example, we use the verifySession() function from our DAL to check for 'admin', 'user', and unauthorized roles. This pattern ensures that each user interacts only with components appropriate to their role.\n\nLayouts and auth checks\n\nDue to Partial Rendering, be cautious when doing checks in Layouts as these don't re-render on navigation, meaning the user session won't be checked on every route change.\n\nInstead, you should do the checks close to your data source or the component that'll be conditionally rendered.\n\nFor example, consider a shared layout that fetches the user data and displays the user image in a nav. Instead of doing the auth check in the layout, you should fetch the user data (getUser()) in the layout and do the auth check in your DAL.\n\nThis guarantees that wherever getUser() is called within your application, the auth check is performed, and prevents developers forgetting to check the user is authorized to access the data.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const user = await getUser();\n \n  return (\n    // ...\n  )\n}\napp/lib/dal.ts\nTypeScript\nJavaScript\nTypeScript\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n \n  // Get user ID from session and fetch data\n})\n\nGood to know:\n\nA common pattern in SPAs is to return null in a layout or a top-level component if a user is not authorized. This pattern is not recommended since Next.js applications have multiple entry points, which will not prevent nested route segments and Server Actions from being accessed.\nServer Actions\n\nTreat Server Actions with the same security considerations as public-facing API endpoints, and verify if the user is allowed to perform a mutation.\n\nIn the example below, we check the user's role before allowing the action to proceed:\n\napp/lib/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\nimport { verifySession } from '@/app/lib/dal'\n \nexport async function serverAction(formData: FormData) {\n  const session = await verifySession()\n  const userRole = session?.user?.role\n \n  // Return early if user is not authorized to perform the action\n  if (userRole !== 'admin') {\n    return null\n  }\n \n  // Proceed with the action for authorized users\n}\nRoute Handlers\n\nTreat Route Handlers with the same security considerations as public-facing API endpoints, and verify if the user is allowed to access the Route Handler.\n\nFor example:\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { verifySession } from '@/app/lib/dal'\n \nexport async function GET() {\n  // User authentication and role verification\n  const session = await verifySession()\n \n  // Check if the user is authenticated\n  if (!session) {\n    // User is not authenticated\n    return new Response(null, { status: 401 })\n  }\n \n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    // User is authenticated but does not have the right permissions\n    return new Response(null, { status: 403 })\n  }\n \n  // Continue for authorized users\n}\n\nThe example above demonstrates a Route Handler with a two-tier security check. It first checks for an active session, and then verifies if the logged-in user is an 'admin'.\n\nContext Providers\n\nUsing context providers for auth work due to interleaving. However, React context is not supported in Server Components, making them only applicable to Client Components.\n\nThis works, but any child Server Components will be rendered on the server first, and will not have access to the context provider’s session data:\n\napp/layout.ts\nTypeScript\nJavaScript\nTypeScript\nimport { ContextProvider } from 'auth-lib'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <ContextProvider>{children}</ContextProvider>\n      </body>\n    </html>\n  )\n}\n\"use client\";\n \nimport { useSession } from \"auth-lib\";\n \nexport default function Profile() {\n  const { userId } = useSession();\n  const { data } = useSWR(`/api/user/${userId}`, fetcher)\n \n  return (\n    // ...\n  );\n}\n\nIf session data is needed in Client Components (e.g. for client-side data fetching),use React’s taintUniqueValue\n API to prevent sensitive session data from being exposed to the client.\n\nResources\n\nNow that you've learned about authentication in Next.js, here are Next.js-compatible libraries and resources to help you implement secure authentication and session management:\n\nAuth Libraries\nAuth0\nClerk\nKinde\nLucia\nNextAuth.js\nStack Auth\nSupabase\nStytch\nWorkOS\nSession Management Libraries\nIron Session\nJose\nFurther Reading\n\nTo continue learning about authentication and security, check out the following resources:\n\nHow to think about security in Next.js\nUnderstanding XSS Attacks\nUnderstanding CSRF Attacks\nThe Copenhagen Book"
  },
  {
    "title": "Testing: Jest | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/testing/jest",
    "html": "Setting up Jest with Next.js\n\nJest and React Testing Library are frequently used together for Unit Testing and Snapshot Testing. This guide will show you how to set up Jest with Next.js and write your first tests.\n\nGood to know: Since async Server Components are new to the React ecosystem, Jest currently does not support them. While you can still run unit tests for synchronous Server and Client Components, we recommend using an E2E tests for async components.\n\nQuickstart\n\nYou can use create-next-app with the Next.js with-jest\n example to quickly get started:\n\nTerminal\nnpx create-next-app@latest --example with-jest with-jest-app\nManual setup\n\nSince the release of Next.js 12\n, Next.js now has built-in configuration for Jest.\n\nTo set up Jest, install jest and the following packages as dev dependencies:\n\nTerminal\nnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom\n# or\nyarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom\n# or\npnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom\n\nGenerate a basic Jest configuration file by running the following command:\n\nTerminal\nnpm init jest@latest\n# or\nyarn create jest@latest\n# or\npnpm create jest@latest\n\nThis will take you through a series of prompts to setup Jest for your project, including automatically creating a jest.config.ts|js file.\n\nUpdate your config file to use next/jest. This transformer has all the necessary configuration options for Jest to work with Next.js:\n\njest.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { Config } from 'jest'\nimport nextJest from 'next/jest.js'\n \nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n \n// Add any custom config to be passed to Jest\nconst config: Config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n \n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nexport default createJestConfig(config)\n\nUnder the hood, next/jest is automatically configuring Jest for you, including:\n\nSetting up transform using the Next.js Compiler\nAuto mocking stylesheets (.css, .module.css, and their scss variants), image imports and next/font\nLoading .env (and all variants) into process.env\nIgnoring node_modules from test resolving and transforms\nIgnoring .next from test resolving\nLoading next.config.js for flags that enable SWC transforms\n\nGood to know: To test environment variables directly, load them manually in a separate setup script or in your jest.config.ts file. For more information, please see Test Environment Variables.\n\nOptional: Handling Absolute Imports and Module Path Aliases\n\nIf your project is using Module Path Aliases, you will need to configure Jest to resolve the imports by matching the paths option in the jsconfig.json file with the moduleNameMapper option in the jest.config.js file. For example:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\njest.config.js\nmoduleNameMapper: {\n  // ...\n  '^@/components/(.*)$': '<rootDir>/components/$1',\n}\nOptional: Extend Jest with custom matchers\n\n@testing-library/jest-dom includes a set of convenient custom matchers\n such as .toBeInTheDocument() making it easier to write tests. You can import the custom matchers for every test by adding the following option to the Jest configuration file:\n\njest.config.ts\nTypeScript\nJavaScript\nTypeScript\nsetupFilesAfterEnv: ['<rootDir>/jest.setup.ts']\n\nThen, inside jest.setup.ts, add the following import:\n\njest.setup.ts\nTypeScript\nJavaScript\nTypeScript\nimport '@testing-library/jest-dom'\n\nGood to know:extend-expect was removed in v6.0\n, so if you are using @testing-library/jest-dom before version 6, you will need to import @testing-library/jest-dom/extend-expect instead.\n\nIf you need to add more setup options before each test, you can add them to the jest.setup.js file above.\n\nAdd a test script to package.json:\n\nFinally, add a Jest test script to your package.json file:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  }\n}\n\njest --watch will re-run tests when a file is changed. For more Jest CLI options, please refer to the Jest Docs\n.\n\nCreating your first test:\n\nYour project is now ready to run tests. Create a folder called __tests__ in your project's root directory.\n\nFor example, we can add a test to check if the <Page /> component successfully renders a heading:\n\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n__tests__/page.test.jsx\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n \ndescribe('Page', () => {\n  it('renders a heading', () => {\n    render(<Page />)\n \n    const heading = screen.getByRole('heading', { level: 1 })\n \n    expect(heading).toBeInTheDocument()\n  })\n})\n\nOptionally, add a snapshot test\n to keep track of any unexpected changes in your component:\n\n__tests__/snapshot.js\nimport { render } from '@testing-library/react'\nimport Page from '../app/page'\n \nit('renders homepage unchanged', () => {\n  const { container } = render(<Page />)\n  expect(container).toMatchSnapshot()\n})\nRunning your tests\n\nThen, run the following command to run your tests:\n\nTerminal\nnpm run test\n# or\nyarn test\n# or\npnpm test\nAdditional Resources\n\nFor further reading, you may find these resources helpful:\n\nNext.js with Jest example\nJest Docs\nReact Testing Library Docs\nTesting Playground\n - use good testing practices to match elements."
  },
  {
    "title": "Testing: Cypress | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/testing/cypress",
    "html": "Setting up Cypress with Next.js\n\nCypress\n is a test runner used for End-to-End (E2E) and Component Testing. This page will show you how to set up Cypress with Next.js and write your first tests.\n\nWarning:\n\nFor component testing, Cypress currently does not support Next.js version 14\n and async Server Components. These issues are being tracked. For now, component testing works with Next.js version 13, and we recommend E2E testing for async Server Components.\nCypress versions below 13.6.3 do not support TypeScript version 5\n with moduleResolution:\"bundler\". However, this issue has been resolved in Cypress version 13.6.3 and later. cypress v13.6.3\nQuickstart\n\nYou can use create-next-app with the with-cypress example\n to quickly get started.\n\nTerminal\nnpx create-next-app@latest --example with-cypress with-cypress-app\nManual setup\n\nTo manually set up Cypress, install cypress as a dev dependency:\n\nTerminal\nnpm install -D cypress\n# or\nyarn add -D cypress\n# or\npnpm install -D cypress\n\nAdd the Cypress open command to the package.json scripts field:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"cypress:open\": \"cypress open\"\n  }\n}\n\nRun Cypress for the first time to open the Cypress testing suite:\n\nTerminal\nnpm run cypress:open\n\nYou can choose to configure E2E Testing and/or Component Testing. Selecting any of these options will automatically create a cypress.config.js file and a cypress folder in your project.\n\nCreating your first Cypress E2E test\n\nEnsure your cypress.config.js file has the following configuration:\n\ncypress.config.ts\nimport { defineConfig } from 'cypress'\n \nexport default defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\ncypress.config.js\nconst { defineConfig } = require('cypress')\n \nmodule.exports = defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n\nThen, create two new Next.js files:\n\napp/page.js\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\napp/about/page.js\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n\nAdd a test to check your navigation is working correctly:\n\ncypress/e2e/app.cy.js\ndescribe('Navigation', () => {\n  it('should navigate to the about page', () => {\n    // Start from the index page\n    cy.visit('http://localhost:3000/')\n \n    // Find a link with an href attribute containing \"about\" and click it\n    cy.get('a[href*=\"about\"]').click()\n \n    // The new url should include \"/about\"\n    cy.url().should('include', '/about')\n \n    // The new page should contain an h1 with \"About\"\n    cy.get('h1').contains('About')\n  })\n})\nRunning E2E Tests\n\nCypress will simulate a user navigating your application, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.\n\nRun npm run build && npm run start to build your Next.js application, then run npm run cypress:open in another terminal window to start Cypress and run your E2E testing suite.\n\nGood to know:\n\nYou can use cy.visit(\"/\") instead of cy.visit(\"http://localhost:3000/\") by adding baseUrl: 'http://localhost:3000' to the cypress.config.js configuration file.\nAlternatively, you can install the start-server-and-test package to run the Next.js production server in conjunction with Cypress. After installation, add \"test\": \"start-server-and-test start http://localhost:3000 cypress\" to your package.json scripts field. Remember to rebuild your application after new changes.\nCreating your first Cypress component test\n\nComponent tests build and mount a specific component without having to bundle your whole application or start a server.\n\nSelect Component Testing in the Cypress app, then select Next.js as your front-end framework. A cypress/component folder will be created in your project, and a cypress.config.js file will be updated to enable component testing.\n\nEnsure your cypress.config.js file has the following configuration:\n\ncypress.config.ts\nimport { defineConfig } from 'cypress'\n \nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\ncypress.config.js\nconst { defineConfig } = require('cypress')\n \nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\n\nAssuming the same components from the previous section, add a test to validate a component is rendering the expected output:\n\ncypress/component/about.cy.tsx\nimport Page from '../../app/page'\n \ndescribe('<Page />', () => {\n  it('should render and display expected content', () => {\n    // Mount the React component for the Home page\n    cy.mount(<Page />)\n \n    // The new page should contain an h1 with \"Home\"\n    cy.get('h1').contains('Home')\n \n    // Validate that a link with the expected URL is present\n    // Following the link is better suited to an E2E test\n    cy.get('a[href=\"/about\"]').should('be.visible')\n  })\n})\n\nGood to know:\n\nCypress currently doesn't support component testing for async Server Components. We recommend using E2E testing.\nSince component tests do not require a Next.js server, features like <Image /> that rely on a server being available may not function out-of-the-box.\nRunning Component Tests\n\nRun npm run cypress:open in your terminal to start Cypress and run your component testing suite.\n\nContinuous Integration (CI)\n\nIn addition to interactive testing, you can also run Cypress headlessly using the cypress run command, which is better suited for CI environments:\n\npackage.json\n{\n  \"scripts\": {\n    //...\n    \"e2e\": \"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\",\n    \"e2e:headless\": \"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\",\n    \"component\": \"cypress open --component\",\n    \"component:headless\": \"cypress run --component\"\n  }\n}\n\nYou can learn more about Cypress and Continuous Integration from these resources:\n\nNext.js with Cypress example\nCypress Continuous Integration Docs\nCypress GitHub Actions Guide\nOfficial Cypress GitHub Action\nCypress Discord"
  },
  {
    "title": "Testing: Playwright | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/testing/playwright",
    "html": "Setting up Playwright with Next.js\n\nPlaywright is a testing framework that lets you automate Chromium, Firefox, and WebKit with a single API. You can use it to write End-to-End (E2E) testing. This guide will show you how to set up Playwright with Next.js and write your first tests.\n\nQuickstart\n\nThe fastest way to get started is to use create-next-app with the with-playwright example\n. This will create a Next.js project complete with Playwright configured.\n\nTerminal\nnpx create-next-app@latest --example with-playwright with-playwright-app\nManual setup\n\nTo install Playwright, run the following command:\n\nTerminal\nnpm init playwright\n# or\nyarn create playwright\n# or\npnpm create playwright\n\nThis will take you through a series of prompts to setup and configure Playwright for your project, including adding a playwright.config.ts file. Please refer to the Playwright installation guide\n for the step-by-step guide.\n\nCreating your first Playwright E2E test\n\nCreate two new Next.js pages:\n\napp/page.tsx\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\napp/about/page.tsx\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n\nThen, add a test to verify that your navigation is working correctly:\n\ntests/example.spec.ts\nimport { test, expect } from '@playwright/test'\n \ntest('should navigate to the about page', async ({ page }) => {\n  // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)\n  await page.goto('http://localhost:3000/')\n  // Find an element with the text 'About' and click on it\n  await page.click('text=About')\n  // The new URL should be \"/about\" (baseURL is used there)\n  await expect(page).toHaveURL('http://localhost:3000/about')\n  // The new page should contain an h1 with \"About\"\n  await expect(page.locator('h1')).toContainText('About')\n})\n\nGood to know:\n\nYou can use page.goto(\"/\") instead of page.goto(\"http://localhost:3000/\"), if you add \"baseURL\": \"http://localhost:3000\"\n to the playwright.config.ts configuration file\n.\n\nRunning your Playwright tests\n\nPlaywright will simulate a user navigating your application using three browsers: Chromium, Firefox and Webkit, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.\n\nRun npm run build and npm run start, then run npx playwright test in another terminal window to run the Playwright tests.\n\nGood to know: Alternatively, you can use the webServer\n feature to let Playwright start the development server and wait until it's fully available.\n\nRunning Playwright on Continuous Integration (CI)\n\nPlaywright will by default run your tests in the headless mode\n. To install all the Playwright dependencies, run npx playwright install-deps.\n\nYou can learn more about Playwright and Continuous Integration from these resources:\n\nNext.js with Playwright example\nPlaywright on your CI provider\nPlaywright Discord"
  },
  {
    "title": "Testing: Vitest | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/testing/vitest",
    "html": "Setting up Vitest with Next.js\n\nVite and React Testing Library are frequently used together for Unit Testing. This guide will show you how to setup Vitest with Next.js and write your first tests.\n\nGood to know: Since async Server Components are new to the React ecosystem, Vitest currently does not support them. While you can still run unit tests for synchronous Server and Client Components, we recommend using an E2E tests for async components.\n\nQuickstart\n\nYou can use create-next-app with the Next.js with-vitest\n example to quickly get started:\n\nTerminal\nnpx create-next-app@latest --example with-vitest with-vitest-app\nManual Setup\n\nTo manually set up Vitest, install vitest and the following packages as dev dependencies:\n\nTerminal\nnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n# or\nyarn add -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n# or\npnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n# or\nbun add -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom\n\nCreate a vitest.config.ts|js file in the root of your project, and add the following options:\n\nvitest.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\n \nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n\nFor more information on configuring Vitest, please refer to the Vitest Configuration\n docs.\n\nThen, add a test script to your package.json:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"vitest\"\n  }\n}\n\nWhen you run npm run test, Vitest will watch for changes in your project by default.\n\nCreating your first Vitest Unit Test\n\nCheck that everything is working by creating a test to check if the <Page /> component successfully renders a heading:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n__tests__/page.test.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n \ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n\nGood to know: The example above uses the common __tests__ convention, but test files can also be colocated inside the app router.\n\nRunning your tests\n\nThen, run the following command to run your tests:\n\nTerminal\nnpm run test\n# or\nyarn test\n# or\npnpm test\n# or\nbun test\nAdditional Resources\n\nYou may find these resources helpful:\n\nNext.js with Vitest example\nVitest Docs\nReact Testing Library Docs"
  },
  {
    "title": "Configuring: Debugging | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/debugging",
    "html": "Debugging\n\nThis documentation explains how you can debug your Next.js frontend and backend code with full source maps support using either the VS Code debugger\n or Chrome DevTools\n.\n\nAny debugger that can attach to Node.js can also be used to debug a Next.js application. You can find more details in the Node.js Debugging Guide\n.\n\nDebugging with VS Code\n\nCreate a file named .vscode/launch.json at the root of your project with the following content:\n\nlaunch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Next.js: debug server-side\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\"\n    },\n    {\n      \"name\": \"Next.js: debug full stack\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/node_modules/.bin/next\",\n      \"runtimeArgs\": [\"--inspect\"],\n      \"skipFiles\": [\"<node_internals>/**\"],\n      \"serverReadyAction\": {\n        \"action\": \"debugWithEdge\",\n        \"killOnServerStop\": true,\n        \"pattern\": \"- Local:.+(https?://.+)\",\n        \"uriFormat\": \"%s\",\n        \"webRoot\": \"${workspaceFolder}\"\n      }\n    }\n  ]\n}\n\nnpm run dev can be replaced with yarn dev if you're using Yarn or pnpm dev if you're using pnpm.\n\nIf you're changing the port number your application starts on, replace the 3000 in http://localhost:3000 with the port you're using instead.\n\nIf you're running Next.js from a directory other than root (for example, if you're using Turborepo) then you need to add cwd to the server-side and full stack debugging tasks. For example, \"cwd\": \"${workspaceFolder}/apps/web\".\n\nNow go to the Debug panel (Ctrl+Shift+D on Windows/Linux, ⇧+⌘+D on macOS), select a launch configuration, then press F5 or select Debug: Start Debugging from the Command Palette to start your debugging session.\n\nUsing the Debugger in Jetbrains WebStorm\n\nClick the drop down menu listing the runtime configuration, and click Edit Configurations.... Create a Javascript Debug debug configuration with http://localhost:3000 as the URL. Customize to your liking (e.g. Browser for debugging, store as project file), and click OK. Run this debug configuration, and the selected browser should automatically open. At this point, you should have 2 applications in debug mode: the NextJS node application, and the client/ browser application.\n\nDebugging with Chrome DevTools\nClient-side code\n\nStart your development server as usual by running next dev, npm run dev, or yarn dev. Once the server starts, open http://localhost:3000 (or your alternate URL) in Chrome. Next, open Chrome's Developer Tools (Ctrl+Shift+J on Windows/Linux, ⌥+⌘+I on macOS), then go to the Sources tab.\n\nNow, any time your client-side code reaches a debugger\n statement, code execution will pause and that file will appear in the debug area. You can also press Ctrl+P on Windows/Linux or ⌘+P on macOS to search for a file and set breakpoints manually. Note that when searching here, your source files will have paths starting with webpack://_N_E/./.\n\nServer-side code\n\nTo debug server-side Next.js code with Chrome DevTools, you need to pass the --inspect\n flag to the underlying Node.js process:\n\nTerminal\nNODE_OPTIONS='--inspect' next dev\n\nIf you're using npm run dev or yarn dev then you should update the dev script on your package.json:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n\nLaunching the Next.js dev server with the --inspect flag will look something like this:\n\nTerminal\nDebugger listening on ws://127.0.0.1:9229/0cf90313-350d-4466-a748-cd60f4e47c95\nFor help, see: https://nodejs.org/en/docs/inspector\nready - started server on 0.0.0.0:3000, url: http://localhost:3000\n\nBe aware that running NODE_OPTIONS='--inspect' npm run dev or NODE_OPTIONS='--inspect' yarn dev won't work. This would try to start multiple debuggers on the same port: one for the npm/yarn process and one for Next.js. You would then get an error like Starting inspector on 127.0.0.1:9229 failed: address already in use in your console.\n\nOnce the server starts, open a new tab in Chrome and visit chrome://inspect, where you should see your Next.js application inside the Remote Target section. Click inspect under your application to open a separate DevTools window, then go to the Sources tab.\n\nDebugging server-side code here works much like debugging client-side code with Chrome DevTools, except that when you search for files here with Ctrl+P or ⌘+P, your source files will have paths starting with webpack://{application-name}/./ (where {application-name} will be replaced with the name of your application according to your package.json file).\n\nDebugging on Windows\n\nWindows users may run into an issue when using NODE_OPTIONS='--inspect' as that syntax is not supported on Windows platforms. To get around this, install the cross-env\n package as a development dependency (-D with npm and yarn) and replace the dev script with the following.\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_OPTIONS='--inspect' next dev\"\n  }\n}\n\ncross-env will set the NODE_OPTIONS environment variable regardless of which platform you are on (including Mac, Linux, and Windows) and allow you to debug consistently across devices and operating systems.\n\nGood to know: Ensure Windows Defender is disabled on your machine. This external service will check every file read, which has been reported to greatly increase Fast Refresh time with next dev. This is a known issue, not related to Next.js, but it does affect Next.js development.\n\nMore information\n\nTo learn more about how to use a JavaScript debugger, take a look at the following documentation:\n\nNode.js debugging in VS Code: Breakpoints\nChrome DevTools: Debug JavaScript"
  },
  {
    "title": "Building Your Application: Testing | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/testing",
    "html": "Testing\n\nIn React and Next.js, there are a few different types of tests you can write, each with its own purpose and use cases. This page provides an overview of types and commonly used tools you can use to test your application.\n\nTypes of tests\nUnit testing involves testing individual units (or blocks of code) in isolation. In React, a unit can be a single function, hook, or component.\nComponent testing is a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.\nIntegration testing involves testing how multiple units work together. This can be a combination of components, hooks, and functions.\nEnd-to-End (E2E) Testing involves testing user flows in an environment that simulates real user scenarios, like the browser. This means testing specific tasks (e.g. signup flow) in a production-like environment.\nSnapshot testing involves capturing the rendered output of a component and saving it to a snapshot file. When tests run, the current rendered output of the component is compared against the saved snapshot. Changes in the snapshot are used to indicate unexpected changes in behavior.\nAsync Server Components\n\nSince async Server Components are new to the React ecosystem, some tools do not fully support them. In the meantime, we recommend using End-to-End Testing over Unit Testing for async components.\n\nGuides\n\nSee the guides below to learn how to set up Next.js with these commonly used testing tools:"
  },
  {
    "title": "Configuring: Content Security Policy | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/content-security-policy",
    "html": "Content Security Policy\n\nContent Security Policy (CSP)\n is important to guard your Next.js application against various security threats such as cross-site scripting (XSS), clickjacking, and other code injection attacks.\n\nBy using CSP, developers can specify which origins are permissible for content sources, scripts, stylesheets, images, fonts, objects, media (audio, video), iframes, and more.\n\nExamples\nNonces\n\nA nonce\n is a unique, random string of characters created for a one-time use. It is used in conjunction with CSP to selectively allow certain inline scripts or styles to execute, bypassing strict CSP directives.\n\nWhy use a nonce?\n\nEven though CSPs are designed to block malicious scripts, there are legitimate scenarios where inline scripts are necessary. In such cases, nonces offer a way to allow these scripts to execute if they have the correct nonce.\n\nAdding a nonce with Middleware\n\nMiddleware enables you to add headers and generate nonces before the page renders.\n\nEvery time a page is viewed, a fresh nonce should be generated. This means that you must use dynamic rendering to add nonces.\n\nFor example:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n \n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n \n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n \n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n \n  return response\n}\n\nBy default, Middleware runs on all requests. You can filter Middleware to run on specific paths using a matcher.\n\nWe recommend ignoring matching prefetches (from next/link) and static assets that don't need the CSP header.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\nReading the nonce\n\nYou can now read the nonce from a Server Component using headers:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n \nexport default function Page() {\n  const nonce = headers().get('x-nonce')\n \n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\nWithout Nonces\n\nFor applications that do not require nonces, you can set the CSP header directly in your next.config.js file:\n\nnext.config.js\nconst cspHeader = `\n    default-src 'self';\n    script-src 'self' 'unsafe-eval' 'unsafe-inline';\n    style-src 'self' 'unsafe-inline';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n \nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Content-Security-Policy',\n            value: cspHeader.replace(/\\n/g, ''),\n          },\n        ],\n      },\n    ]\n  },\n}\nVersion History\n\nWe recommend using v13.4.20+ of Next.js to properly handle and apply nonces."
  },
  {
    "title": "Configuring: Draft Mode | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode",
    "html": "Draft Mode\n\nStatic rendering is useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want to view the draft immediately on your page. You’d want Next.js to render these pages at request time instead of build time and fetch the draft content instead of the published content. You’d want Next.js to switch to dynamic rendering only for this specific case.\n\nNext.js has a feature called Draft Mode which solves this problem. Here are instructions on how to use it.\n\nStep 1: Create and access the Route Handler\n\nFirst, create a Route Handler. It can have any name - e.g. app/api/draft/route.ts\n\nThen, import draftMode from next/headers and call the enable() method.\n\napp/api/draft/route.ts\nTypeScript\nJavaScript\nTypeScript\n// route handler enabling draft mode\nimport { draftMode } from 'next/headers'\n \nexport async function GET(request: Request) {\n  draftMode().enable()\n  return new Response('Draft mode is enabled')\n}\n\nThis will set a cookie to enable draft mode. Subsequent requests containing this cookie will trigger Draft Mode changing the behavior for statically generated pages (more on this later).\n\nYou can test this manually by visiting /api/draft and looking at your browser’s developer tools. Notice the Set-Cookie response header with a cookie named __prerender_bypass.\n\nSecurely accessing it from your Headless CMS\n\nIn practice, you’d want to call this Route Handler securely from your headless CMS. The specific steps will vary depending on which headless CMS you’re using, but here are some common steps you could take.\n\nThese steps assume that the headless CMS you’re using supports setting custom draft URLs. If it doesn’t, you can still use this method to secure your draft URLs, but you’ll need to construct and access the draft URL manually.\n\nFirst, you should create a secret token string using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don’t have access to your CMS from accessing draft URLs.\n\nSecond, if your headless CMS supports setting custom draft URLs, specify the following as the draft URL. This assumes that your Route Handler is located at app/api/draft/route.ts\n\nTerminal\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n<your-site> should be your deployment domain.\n<token> should be replaced with the secret token you generated.\n<path> should be the path for the page that you want to view. If you want to view /posts/foo, then you should use &slug=/posts/foo.\n\nYour headless CMS might allow you to include a variable in the draft URL so that <path> can be set dynamically based on the CMS’s data like so: &slug=/posts/{entry.fields.slug}\n\nFinally, in the Route Handler:\n\nCheck that the secret matches and that the slug parameter exists (if not, the request should fail).\nCall draftMode.enable() to set the cookie.\nThen redirect the browser to the path specified by slug.\napp/api/draft/route.ts\nTypeScript\nJavaScript\nTypeScript\n// route handler with secret and slug\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n \nexport async function GET(request: Request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n \n  // Check the secret and next parameters\n  // This secret should only be known to this route handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n \n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n \n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n \n  // Enable Draft Mode by setting the cookie\n  draftMode().enable()\n \n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n\nIf it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie.\n\nStep 2: Update page\n\nThe next step is to update your page to check the value of draftMode().isEnabled.\n\nIf you request a page which has the cookie set, then data will be fetched at request time (instead of at build time).\n\nFurthermore, the value of isEnabled will be true.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// page that fetches data\nimport { draftMode } from 'next/headers'\n \nasync function getData() {\n  const { isEnabled } = draftMode()\n \n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n \n  const res = await fetch(url)\n \n  return res.json()\n}\n \nexport default async function Page() {\n  const { title, desc } = await getData()\n \n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n\nThat's it! If you access the draft Route Handler (with secret and slug) from your headless CMS or manually, you should now be able to see the draft content. And if you update your draft without publishing, you should be able to view the draft.\n\nSet this as the draft URL on your headless CMS or access manually, and you should be able to see the draft.\n\nTerminal\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\nMore Details\nClear the Draft Mode cookie\n\nBy default, the Draft Mode session ends when the browser is closed.\n\nTo clear the Draft Mode cookie manually, create a Route Handler that calls draftMode().disable():\n\napp/api/disable-draft/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { draftMode } from 'next/headers'\n \nexport async function GET(request: Request) {\n  draftMode().disable()\n  return new Response('Draft mode is disabled')\n}\n\nThen, send a request to /api/disable-draft to invoke the Route Handler. If calling this route using next/link, you must pass prefetch={false} to prevent accidentally deleting the cookie on prefetch.\n\nUnique per next build\n\nA new bypass cookie value will be generated each time you run next build.\n\nThis ensures that the bypass cookie can’t be guessed.\n\nGood to know: To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access."
  },
  {
    "title": "Configuring: MDX | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx",
    "html": "Markdown and MDX\n\nMarkdown\n is a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs.\n\nYou write...\n\nI **love** using [Next.js](https://nextjs.org/)\n\nOutput:\n\n<p>I <strong>love</strong> using <a href=\"https://nextjs.org/\">Next.js</a></p>\n\nMDX\n is a superset of markdown that lets you write JSX\n directly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content.\n\nNext.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router).\n\nGood to know: View the Portfolio Starter Kit\n template for a complete working example.\n\nInstall dependencies\n\nThe @next/mdx package, and related packages, are used to configure Next.js so it can process markdown and MDX. It sources data from local files, allowing you to create pages with a .md or .mdx extension, directly in your /pages or /app directory.\n\nInstall these packages to render MDX with Next.js:\n\nTerminal\nnpm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx\nConfigure next.config.mjs\n\nUpdate the next.config.mjs file at your project's root to configure it to use MDX:\n\nnext.config.mjs\nimport createMDX from '@next/mdx'\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions` to include markdown and MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n \nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n})\n \n// Merge MDX config with Next.js config\nexport default withMDX(nextConfig)\n\nThis allows .md and .mdx files to act as pages, routes, or imports in your application.\n\nAdd an mdx-components.tsx file\n\nCreate an mdx-components.tsx (or .js) file in the root of your project to define global MDX Components. For example, at the same level as pages or app, or inside src if applicable.\n\nmdx-components.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { MDXComponents } from 'mdx/types'\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n\nGood to know:\n\nmdx-components.tsx is required to use @next/mdx with App Router and will not work without it.\nLearn more about the mdx-components.tsx file convention.\nLearn how to use custom styles and components.\nRendering MDX\n\nYou can render MDX using Next.js's file based routing or by importing MDX files into other pages.\n\nUsing file based routing\n\nWhen using file based routing, you can use MDX pages like any other page.\n\nIn App Router apps, that includes being able to use metadata.\n\nCreate a new MDX page within the /app directory:\n\n  my-project\n  ├── app\n  │   └── mdx-page\n  │       └── page.(mdx/md)\n  |── mdx-components.(tsx/js)\n  └── package.json\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\nimport { MyComponent } from 'my-component'\n \n# Welcome to my MDX page!\n \nThis is some **bold** and _italics_ text.\n \nThis is a list in markdown:\n \n- One\n- Two\n- Three\n \nCheckout my React component:\n \n<MyComponent />\n\nNavigating to the /mdx-page route should display your rendered MDX page.\n\nUsing imports\n\nCreate a new page within the /app directory and an MDX file wherever you'd like:\n\n  my-project\n  ├── app\n  │   └── mdx-page\n  │       └── page.(tsx/js)\n  ├── markdown\n  │   └── welcome.(mdx/md)\n  |── mdx-components.(tsx/js)\n  └── package.json\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\nImport the MDX file inside the page to display the content:\n\napp/mdx-page/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Welcome from '@/markdown/welcome.mdx'\n \nexport default function Page() {\n  return <Welcome />\n}\n\nNavigating to the /mdx-page route should display your rendered MDX page.\n\nUsing custom styles and components\n\nMarkdown, when rendered, maps to native HTML elements. For example, writing the following markdown:\n\n## This is a heading\n \nThis is a list in markdown:\n \n- One\n- Two\n- Three\n\nGenerates the following HTML:\n\n<h2>This is a heading</h2>\n \n<p>This is a list in markdown:</p>\n \n<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>\n\nTo style your markdown, you can provide custom components that map to the generated HTML elements. Styles and components can be implemented globally, locally, and with shared layouts.\n\nGlobal styles and components\n\nAdding styles and components in mdx-components.tsx will affect all MDX files in your application.\n\nmdx-components.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { MDXComponents } from 'mdx/types'\nimport Image, { ImageProps } from 'next/image'\n \n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => (\n      <h1 style={{ color: 'red', fontSize: '48px' }}>{children}</h1>\n    ),\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...(props as ImageProps)}\n      />\n    ),\n    ...components,\n  }\n}\nLocal styles and components\n\nYou can apply local styles and components to specific pages by passing them into imported MDX components. These will merge with and override global styles and components.\n\napp/mdx-page/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Welcome from '@/markdown/welcome.mdx'\n \nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n \nconst overrideComponents = {\n  h1: CustomH1,\n}\n \nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\nShared layouts\n\nTo share a layout across MDX pages, you can use the built-in layouts support with the App Router.\n\napp/mdx-page/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\nUsing Tailwind typography plugin\n\nIf you are using Tailwind\n to style your application, using the @tailwindcss/typography plugin\n will allow you to reuse your Tailwind configuration and styles in your markdown files.\n\nThe plugin adds a set of prose classes that can be used to add typographic styles to content blocks that come from sources, like markdown.\n\nInstall Tailwind typography\n and use with shared layouts to add the prose you want.\n\napp/mdx-page/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\nFrontmatter\n\nFrontmatter is a YAML like key/value pairing that can be used to store data about a page. @next/mdx does not support frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:\n\nremark-frontmatter\nremark-mdx-frontmatter\ngray-matter\n\n@next/mdx does allow you to use exports like any other JavaScript component:\n\nMetadata can now be referenced outside of the MDX file:\n\napp/blog/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n \nexport default function Page() {\n  console.log('metadata: ', metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n\nA common use case for this is when you want to iterate over a collection of MDX and extract data. For example, creating a blog index page from all blog posts. You can use packages like Node's fs module\n or globby\n to read a directory of posts and extract the metadata.\n\nGood to know:\n\nUsing fs, globby, etc. can only be used server-side.\nView the Portfolio Starter Kit\n template for a complete working example.\nRemark and Rehype Plugins\n\nYou can optionally provide remark and rehype plugins to transform the MDX content.\n\nFor example, you can use remark-gfm to support GitHub Flavored Markdown.\n\nSince the remark and rehype ecosystem is ESM only, you'll need to use next.config.mjs as the configuration file.\n\nnext.config.mjs\nimport remarkGfm from 'remark-gfm'\nimport createMDX from '@next/mdx'\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions`` to include MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n \nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n  options: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [],\n  },\n})\n \n// Wrap MDX and Next.js config with each other\nexport default withMDX(nextConfig)\nRemote MDX\n\nIf your MDX files or content lives somewhere else, you can fetch it dynamically on the server. This is useful for content stored in a separate local folder, CMS, database, or anywhere else. A popular community package for this use is next-mdx-remote\n.\n\nGood to know: Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE).\n\nThe following example uses next-mdx-remote:\n\napp/mdx-page-remote/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { MDXRemote } from 'next-mdx-remote/rsc'\n \nexport default async function RemoteMdxPage() {\n  // MDX text - can be from a local file, database, CMS, fetch, anywhere...\n  const res = await fetch('https://...')\n  const markdown = await res.text()\n  return <MDXRemote source={markdown} />\n}\n\nNavigating to the /mdx-page-remote route should display your rendered MDX.\n\nDeep Dive: How do you transform markdown into HTML?\n\nReact does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished with remark and rehype.\n\nremark is an ecosystem of tools around markdown. rehype is the same, but for HTML. For example, the following code snippet transforms markdown into HTML:\n\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n \nmain()\n \nasync function main() {\n  const file = await unified()\n    .use(remarkParse) // Convert into markdown AST\n    .use(remarkRehype) // Transform to HTML AST\n    .use(rehypeSanitize) // Sanitize HTML input\n    .use(rehypeStringify) // Convert AST into serialized HTML\n    .process('Hello, Next.js!')\n \n  console.log(String(file)) // <p>Hello, Next.js!</p>\n}\n\nThe remark and rehype ecosystem contains plugins for syntax highlighting\n, linking headings\n, generating a table of contents\n, and more.\n\nWhen using @next/mdx as shown above, you do not need to use remark or rehype directly, as it is handled for you. We're describing it here for a deeper understanding of what the @next/mdx package is doing underneath.\n\nUsing the Rust-based MDX compiler (experimental)\n\nNext.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configure next.config.js when you pass it to withMDX:\n\nnext.config.js\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: true,\n  },\n})\n\nmdxRs also accepts an object to configure how to transform mdx files.\n\nnext.config.js\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: {\n      jsxRuntime?: string            // Custom jsx runtime\n      jsxImportSource?: string       // Custom jsx import source,\n      mdxType?: 'gfm' | 'commonmark' // Configure what kind of mdx syntax will be used to parse & transform\n    },\n  },\n})\n\nGood to know:\n\nThis option is required when processing markdown and MDX while using Turbopack (next dev --turbo).\n\nHelpful Links\nMDX\n@next/mdx\nremark\nrehype\nMarkdoc"
  },
  {
    "title": "Configuring: Custom Server | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/custom-server",
    "html": "Custom Server\n\nNext.js includes its own server with next start by default. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this approach. However, it's available if you need to eject.\n\nGood to know:\n\nBefore deciding to use a custom server, keep in mind that it should only be used when the integrated router of Next.js can't meet your app requirements. A custom server will remove important performance optimizations, like Automatic Static Optimization.\nA custom server cannot be deployed on Vercel\n.\nWhen using standalone output mode, it does not trace custom server files. This mode outputs a separate minimal server.js file, instead. These cannot be used together.\n\nTake a look at the following example\n of a custom server:\n\nserver.ts\nTypeScript\nJavaScript\nTypeScript\nimport { createServer } from 'http'\nimport { parse } from 'url'\nimport next from 'next'\n \nconst port = parseInt(process.env.PORT || '3000', 10)\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n \napp.prepare().then(() => {\n  createServer((req, res) => {\n    const parsedUrl = parse(req.url!, true)\n    handle(req, res, parsedUrl)\n  }).listen(port)\n \n  console.log(\n    `> Server listening at http://localhost:${port} as ${\n      dev ? 'development' : process.env.NODE_ENV\n    }`\n  )\n})\n\nserver.js does not run through the Next.js Compiler or bundling process. Make sure the syntax and source code this file requires are compatible with the current Node.js version you are using. View an example\n.\n\nTo run the custom server, you'll need to update the scripts in package.json like so:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n\nAlternatively, you can set up nodemon (example\n). The custom server uses the following import to connect the server with the Next.js application:\n\nimport next from 'next'\n \nconst app = next({})\n\nThe above next import is a function that receives an object with the following options:\n\nOption\tType\tDescription\nconf\tObject\tThe same object you would use in next.config.js. Defaults to {}\ncustomServer\tBoolean\t(Optional) Set to false when the server was created by Next.js\ndev\tBoolean\t(Optional) Whether or not to launch Next.js in dev mode. Defaults to false\ndir\tString\t(Optional) Location of the Next.js project. Defaults to '.'\nquiet\tBoolean\t(Optional) Hide error messages containing server information. Defaults to false\nhostname\tString\t(Optional) The hostname the server is running behind\nport\tNumber\t(Optional) The port the server is running behind\nhttpServer\tnode:http#Server\t(Optional) The HTTP Server that Next.js is running behind\n\nThe returned app can then be used to let Next.js handle requests as required."
  },
  {
    "title": "Configuring: Absolute Imports and Module Path Aliases | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/absolute-imports-and-module-aliases",
    "html": "Absolute Imports and Module Path Aliases\nExamples\n\nNext.js has in-built support for the \"paths\" and \"baseUrl\" options of tsconfig.json and jsconfig.json files.\n\nThese options allow you to alias project directories to absolute paths, making it easier to import modules. For example:\n\n// before\nimport { Button } from '../../../components/button'\n \n// after\nimport { Button } from '@/components/button'\n\nGood to know: create-next-app will prompt to configure these options for you.\n\nAbsolute Imports\n\nThe baseUrl configuration option allows you to import directly from the root of the project.\n\nAn example of this configuration:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  }\n}\ncomponents/button.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Button() {\n  return <button>Click me</button>\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Button from 'components/button'\n \nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\nModule Aliases\n\nIn addition to configuring the baseUrl path, you can use the \"paths\" option to \"alias\" module paths.\n\nFor example, the following configuration maps @/components/* to components/*:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\ncomponents/button.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Button() {\n  return <button>Click me</button>\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Button from '@/components/button'\n \nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n\nEach of the \"paths\" are relative to the baseUrl location. For example:\n\ntsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Button from '@/components/button'\nimport '@/styles/styles.css'\nimport Helper from 'utils/helper'\n \nexport default function HomePage() {\n  return (\n    <Helper>\n      <h1>Hello World</h1>\n      <Button />\n    </Helper>\n  )\n}"
  },
  {
    "title": "Configuring: src Directory | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/src-directory",
    "html": "src Directory\n\nAs an alternative to having the special Next.js app or pages directories in the root of your project, Next.js also supports the common pattern of placing application code under the src directory.\n\nThis separates application code from project configuration files which mostly live in the root of a project, which is preferred by some individuals and teams.\n\nTo use the src directory, move the app Router folder or pages Router folder to src/app or src/pages respectively.\n\nGood to know:\n\nThe /public directory should remain in the root of your project.\nConfig files like package.json, next.config.js and tsconfig.json should remain in the root of your project.\n.env.* files should remain in the root of your project.\nsrc/app or src/pages will be ignored if app or pages are present in the root directory.\nIf you're using src, you'll probably also move other application folders such as /components or /lib.\nIf you're using Middleware, ensure it is placed inside the src directory.\nIf you're using Tailwind CSS, you'll need to add the /src prefix to the tailwind.config.js file in the content section\n.\nIf you are using TypeScript paths for imports such as @/*, you should update the paths object in tsconfig.json to include src/."
  },
  {
    "title": "Configuring: ESLint | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/eslint",
    "html": "ESLint\n\nNext.js provides an integrated ESLint\n experience out of the box. Add next lint as a script to package.json:\n\npackage.json\n{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n\nThen run npm run lint or yarn lint:\n\nTerminal\nyarn lint\n\nIf you don't already have ESLint configured in your application, you will be guided through the installation and configuration process.\n\nTerminal\nyarn lint\n\nYou'll see a prompt like this:\n\n? How would you like to configure ESLint?\n\n❯ Strict (recommended)\nBase\nCancel\n\nOne of the following three options can be selected:\n\nStrict: Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time.\n\n.eslintrc.json\n{\n  \"extends\": \"next/core-web-vitals\"\n}\n\nBase: Includes Next.js' base ESLint configuration.\n\n.eslintrc.json\n{\n  \"extends\": \"next\"\n}\n\nCancel: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration.\n\nIf either of the two configuration options are selected, Next.js will automatically install eslint and eslint-config-next as dependencies in your application and create an .eslintrc.json file in the root of your project that includes your selected configuration.\n\nYou can now run next lint every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build (next build). Errors will fail the build, while warnings will not.\n\nIf you do not want ESLint to run during next build, refer to the documentation for Ignoring ESLint.\n\nWe recommend using an appropriate integration\n to view warnings and errors directly in your code editor during development.\n\nESLint Config\n\nThe default configuration (eslint-config-next) includes everything you need to have an optimal out-of-the-box linting experience in Next.js. If you do not have ESLint already configured in your application, we recommend using next lint to set up ESLint along with this configuration.\n\nIf you would like to use eslint-config-next along with other ESLint configurations, refer to the Additional Configurations section to learn how to do so without causing any conflicts.\n\nRecommended rule-sets from the following ESLint plugins are all used within eslint-config-next:\n\neslint-plugin-react\neslint-plugin-react-hooks\neslint-plugin-next\n\nThis will take precedence over the configuration from next.config.js.\n\nESLint Plugin\n\nNext.js provides an ESLint plugin, eslint-plugin-next\n, already bundled within the base configuration that makes it possible to catch common issues and problems in a Next.js application. The full set of rules is as follows:\n\n Enabled in the recommended configuration\n\n\tRule\tDescription\n\n\t@next/next/google-font-display\tEnforce font-display behavior with Google Fonts.\n\n\t@next/next/google-font-preconnect\tEnsure preconnect is used with Google Fonts.\n\n\t@next/next/inline-script-id\tEnforce id attribute on next/script components with inline content.\n\n\t@next/next/next-script-for-ga\tPrefer next/script component when using the inline script for Google Analytics.\n\n\t@next/next/no-assign-module-variable\tPrevent assignment to the module variable.\n\n\t@next/next/no-async-client-component\tPrevent client components from being async functions.\n\n\t@next/next/no-before-interactive-script-outside-document\tPrevent usage of next/script's beforeInteractive strategy outside of pages/_document.js.\n\n\t@next/next/no-css-tags\tPrevent manual stylesheet tags.\n\n\t@next/next/no-document-import-in-page\tPrevent importing next/document outside of pages/_document.js.\n\n\t@next/next/no-duplicate-head\tPrevent duplicate usage of <Head> in pages/_document.js.\n\n\t@next/next/no-head-element\tPrevent usage of <head> element.\n\n\t@next/next/no-head-import-in-document\tPrevent usage of next/head in pages/_document.js.\n\n\t@next/next/no-html-link-for-pages\tPrevent usage of <a> elements to navigate to internal Next.js pages.\n\n\t@next/next/no-img-element\tPrevent usage of <img> element due to slower LCP and higher bandwidth.\n\n\t@next/next/no-page-custom-font\tPrevent page-only custom fonts.\n\n\t@next/next/no-script-component-in-head\tPrevent usage of next/script in next/head component.\n\n\t@next/next/no-styled-jsx-in-document\tPrevent usage of styled-jsx in pages/_document.js.\n\n\t@next/next/no-sync-scripts\tPrevent synchronous scripts.\n\n\t@next/next/no-title-in-document-head\tPrevent usage of <title> with Head component from next/document.\n\n\t@next/next/no-typos\tPrevent common typos in Next.js's data fetching functions\n\n\t@next/next/no-unwanted-polyfillio\tPrevent duplicate polyfills from Polyfill.io.\n\nIf you already have ESLint configured in your application, we recommend extending from this plugin directly instead of including eslint-config-next unless a few conditions are met. Refer to the Recommended Plugin Ruleset to learn more.\n\nCustom Settings\nrootDir\n\nIf you're using eslint-plugin-next in a project where Next.js isn't installed in your root directory (such as a monorepo), you can tell eslint-plugin-next where to find your Next.js application using the settings property in your .eslintrc:\n\n.eslintrc.json\n{\n  \"extends\": \"next\",\n  \"settings\": {\n    \"next\": {\n      \"rootDir\": \"packages/my-app/\"\n    }\n  }\n}\n\nrootDir can be a path (relative or absolute), a glob (i.e. \"packages/*/\"), or an array of paths and/or globs.\n\nLinting Custom Directories and Files\n\nBy default, Next.js will run ESLint for all files in the pages/, app/, components/, lib/, and src/ directories. However, you can specify which directories using the dirs option in the eslint config in next.config.js for production builds:\n\nnext.config.js\nmodule.exports = {\n  eslint: {\n    dirs: ['pages', 'utils'], // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)\n  },\n}\n\nSimilarly, the --dir and --file flags can be used for next lint to lint specific directories and files:\n\nTerminal\nnext lint --dir pages --dir utils --file bar.js\nCaching\n\nTo improve performance, information of files processed by ESLint are cached by default. This is stored in .next/cache or in your defined build directory. If you include any ESLint rules that depend on more than the contents of a single source file and need to disable the cache, use the --no-cache flag with next lint.\n\nTerminal\nnext lint --no-cache\nDisabling Rules\n\nIf you would like to modify or disable any rules provided by the supported plugins (react, react-hooks, next), you can directly change them using the rules property in your .eslintrc:\n\n.eslintrc.json\n{\n  \"extends\": \"next\",\n  \"rules\": {\n    \"react/no-unescaped-entities\": \"off\",\n    \"@next/next/no-page-custom-font\": \"off\"\n  }\n}\nCore Web Vitals\n\nThe next/core-web-vitals rule set is enabled when next lint is run for the first time and the strict option is selected.\n\n.eslintrc.json\n{\n  \"extends\": \"next/core-web-vitals\"\n}\n\nnext/core-web-vitals updates eslint-plugin-next to error on a number of rules that are warnings by default if they affect Core Web Vitals\n.\n\nThe next/core-web-vitals entry point is automatically included for new applications built with Create Next App.\n\nTypeScript\n\nIn addition to the Next.js ESLint rules, create-next-app --typescript will also add TypeScript-specific lint rules with next/typescript to your config:\n\n.eslintrc.json\n{\n  \"extends\": [\"next/core-web-vitals\", \"next/typescript\"]\n}\n\nThose rules are based on plugin:@typescript-eslint/recommended\n. See typescript-eslint > Configs\n for more details.\n\nUsage With Other Tools\nPrettier\n\nESLint also contains code formatting rules, which can conflict with your existing Prettier\n setup. We recommend including eslint-config-prettier\n in your ESLint config to make ESLint and Prettier work together.\n\nFirst, install the dependency:\n\nTerminal\nnpm install --save-dev eslint-config-prettier\n \nyarn add --dev eslint-config-prettier\n \npnpm add --save-dev eslint-config-prettier\n \nbun add --dev eslint-config-prettier\n\nThen, add prettier to your existing ESLint config:\n\n.eslintrc.json\n{\n  \"extends\": [\"next\", \"prettier\"]\n}\nlint-staged\n\nIf you would like to use next lint with lint-staged\n to run the linter on staged git files, you'll have to add the following to the .lintstagedrc.js file in the root of your project in order to specify usage of the --file flag.\n\n.lintstagedrc.js\nconst path = require('path')\n \nconst buildEslintCommand = (filenames) =>\n  `next lint --fix --file ${filenames\n    .map((f) => path.relative(process.cwd(), f))\n    .join(' --file ')}`\n \nmodule.exports = {\n  '*.{js,jsx,ts,tsx}': [buildEslintCommand],\n}\nMigrating Existing Config\nRecommended Plugin Ruleset\n\nIf you already have ESLint configured in your application and any of the following conditions are true:\n\nYou have one or more of the following plugins already installed (either separately or through a different config such as airbnb or react-app):\nreact\nreact-hooks\njsx-a11y\nimport\nYou've defined specific parserOptions that are different from how Babel is configured within Next.js (this is not recommended unless you have customized your Babel configuration)\nYou have eslint-plugin-import installed with Node.js and/or TypeScript resolvers\n defined to handle imports\n\nThen we recommend either removing these settings if you prefer how these properties have been configured within eslint-config-next\n or extending directly from the Next.js ESLint plugin instead:\n\nmodule.exports = {\n  extends: [\n    //...\n    'plugin:@next/next/recommended',\n  ],\n}\n\nThe plugin can be installed normally in your project without needing to run next lint:\n\nTerminal\nnpm install --save-dev @next/eslint-plugin-next\n \nyarn add --dev @next/eslint-plugin-next\n \npnpm add --save-dev @next/eslint-plugin-next\n \nbun add --dev @next/eslint-plugin-next\n\nThis eliminates the risk of collisions or errors that can occur due to importing the same plugin or parser across multiple configurations.\n\nAdditional Configurations\n\nIf you already use a separate ESLint configuration and want to include eslint-config-next, ensure that it is extended last after other configurations. For example:\n\n.eslintrc.json\n{\n  \"extends\": [\"eslint:recommended\", \"next\"]\n}\n\nThe next configuration already handles setting default values for the parser, plugins and settings properties. There is no need to manually re-declare any of these properties unless you need a different configuration for your use case.\n\nIf you include any other shareable configurations, you will need to make sure that these properties are not overwritten or modified. Otherwise, we recommend removing any configurations that share behavior with the next configuration or extending directly from the Next.js ESLint plugin as mentioned above."
  },
  {
    "title": "Configuring: Environment Variables | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/environment-variables",
    "html": "Environment Variables\nExamples\n\nNext.js comes with built-in support for environment variables, which allows you to do the following:\n\nUse .env to load environment variables\nBundle environment variables for the browser by prefixing with NEXT_PUBLIC_\nLoading Environment Variables\n\nNext.js has built-in support for loading environment variables from .env* files into process.env.\n\n.env\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n\nNote: Next.js also supports multiline variables inside of your .env* files:\n\n# .env\n \n# you can write with line breaks\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n...\nKh9NV...\n...\n-----END DSA PRIVATE KEY-----\"\n \n# or with `\\n` inside double quotes\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END DSA PRIVATE KEY-----\\n\"\n\nNote: If you are using a /src folder, please note that Next.js will load the .env files only from the parent folder and not from the /src folder. This loads process.env.DB_HOST, process.env.DB_USER, and process.env.DB_PASS into the Node.js environment automatically allowing you to use them in Route Handlers.\n\nFor example:\n\napp/api/route.js\nexport async function GET() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\nLoading Environment Variables with @next/env\n\nIf you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the @next/env package.\n\nThis package is used internally by Next.js to load environment variables from .env* files.\n\nTo use it, install the package and use the loadEnvConfig function to load the environment variables:\n\nnpm install @next/env\nenvConfig.ts\nTypeScript\nJavaScript\nTypeScript\nimport { loadEnvConfig } from '@next/env'\n \nconst projectDir = process.cwd()\nloadEnvConfig(projectDir)\n\nThen, you can import the configuration where needed. For example:\n\norm.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport './envConfig.ts'\n \nexport default defineConfig({\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL!,\n  },\n})\nReferencing Other Variables\n\nNext.js will automatically expand variables that use $ to reference other variables e.g. $VARIABLE inside of your .env* files. This allows you to reference other secrets. For example:\n\n.env\nTWITTER_USER=nextjs\nTWITTER_URL=https://x.com/$TWITTER_USER\n\nIn the above example, process.env.TWITTER_URL would be set to https://x.com/nextjs.\n\nGood to know: If you need to use variable with a $ in the actual value, it needs to be escaped e.g. \\$.\n\nBundling Environment Variables for the Browser\n\nNon-NEXT_PUBLIC_ environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a different environment).\n\nIn order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at build time, into the js bundle that is delivered to the client, replacing all references to process.env.[variable] with a hard-coded value. To tell it to do this, you just have to prefix the variable with NEXT_PUBLIC_. For example:\n\nTerminal\nNEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n\nThis will tell Next.js to replace all references to process.env.NEXT_PUBLIC_ANALYTICS_ID in the Node.js environment with the value from the environment in which you run next build, allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser.\n\nNote: After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, all NEXT_PUBLIC_ variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization).\n\npages/index.js\nimport setupAnalyticsService from '../lib/my-analytics-service'\n \n// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.\n// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n \nfunction HomePage() {\n  return <h1>Hello World</h1>\n}\n \nexport default HomePage\n\nNote that dynamic lookups will not be inlined, such as:\n\n// This will NOT be inlined, because it uses a variable\nconst varName = 'NEXT_PUBLIC_ANALYTICS_ID'\nsetupAnalyticsService(process.env[varName])\n \n// This will NOT be inlined, because it uses a variable\nconst env = process.env\nsetupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)\nRuntime Environment Variables\n\nNext.js can support both build time and runtime environment variables.\n\nBy default, environment variables are only available on the server. To expose an environment variable to the browser, it must be prefixed with NEXT_PUBLIC_. However, these public environment variables will be inlined into the JavaScript bundle during next build.\n\nTo read runtime environment variables, we recommend using getServerSideProps or incrementally adopting the App Router. With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values.\n\nimport { unstable_noStore as noStore } from 'next/cache'\n \nexport default function Component() {\n  noStore()\n  // cookies(), headers(), and other dynamic functions\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n\nGood to know:\n\nYou can run code on server startup using the register function.\nWe do not recommend using the runtimeConfig option, as this does not work with the standalone output mode. Instead, we recommend incrementally adopting the App Router.\nDefault Environment Variables\n\nTypically, only .env* file is needed. However, sometimes you might want to add some defaults for the development (next dev) or production (next start) environment.\n\nNext.js allows you to set defaults in .env (all environments), .env.development (development environment), and .env.production (production environment).\n\nGood to know: .env, .env.development, and .env.production files should be included in your repository as they define defaults. All .env files are excluded in .gitignore by default, allowing you to opt-into committing these values to your repository.\n\nEnvironment Variables on Vercel\n\nWhen deploying your Next.js application to Vercel\n, Environment Variables can be configured in the Project Settings\n.\n\nAll types of Environment Variables should be configured there. Even Environment Variables used in Development – which can be downloaded onto your local device\n afterwards.\n\nIf you've configured Development Environment Variables\n you can pull them into a .env.local for usage on your local machine using the following command:\n\nTerminal\nvercel env pull\n\nGood to know: When deploying your Next.js application to Vercel\n, your environment variables in .env* files will not be made available to Edge Runtime, unless their name are prefixed with NEXT_PUBLIC_. We strongly recommend managing your environment variables in Project Settings\n instead, from where all environment variables are available.\n\nTest Environment Variables\n\nApart from development and production environments, there is a 3rd option available: test. In the same way you can set defaults for development or production environments, you can do the same with a .env.test file for the testing environment (though this one is not as common as the previous two). Next.js will not load environment variables from .env.development or .env.production in the testing environment.\n\nThis one is useful when running tests with tools like jest or cypress where you need to set specific environment vars only for testing purposes. Test default values will be loaded if NODE_ENV is set to test, though you usually don't need to do this manually as testing tools will address it for you.\n\nThere is a small difference between test environment, and both development and production that you need to bear in mind: .env.local won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your .env.local (which is intended to override the default set).\n\nGood to know: similar to Default Environment Variables, .env.test file should be included in your repository, but .env.test.local shouldn't, as .env*.local are intended to be ignored through .gitignore.\n\nWhile running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the loadEnvConfig function from the @next/env package.\n\n// The below can be used in a Jest global setup file or similar for your testing set-up\nimport { loadEnvConfig } from '@next/env'\n \nexport default async () => {\n  const projectDir = process.cwd()\n  loadEnvConfig(projectDir)\n}\nEnvironment Variable Load Order\n\nEnvironment variables are looked up in the following places, in order, stopping once the variable is found.\n\nprocess.env\n.env.$(NODE_ENV).local\n.env.local (Not checked when NODE_ENV is test.)\n.env.$(NODE_ENV)\n.env\n\nFor example, if NODE_ENV is development and you define a variable in both .env.development.local and .env, the value in .env.development.local will be used.\n\nGood to know: The allowed values for NODE_ENV are production, development and test.\n\nGood to know\nIf you are using a /src directory, .env.* files should remain in the root of your project.\nIf the environment variable NODE_ENV is unassigned, Next.js automatically assigns development when running the next dev command, or production for all other commands.\nVersion History\nVersion\tChanges\nv9.4.0\tSupport .env and NEXT_PUBLIC_ introduced."
  },
  {
    "title": "Configuring: TypeScript | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/typescript",
    "html": "TypeScript\n\nNext.js provides a TypeScript-first development experience for building your React application.\n\nIt comes with built-in TypeScript support for automatically installing the necessary packages and configuring the proper settings.\n\nAs well as a TypeScript Plugin for your editor.\n\n🎥 Watch: Learn about the built-in TypeScript plugin → YouTube (3 minutes)\n\nNew Projects\n\ncreate-next-app now ships with TypeScript by default.\n\nTerminal\nnpx create-next-app@latest\nExisting Projects\n\nAdd TypeScript to your project by renaming a file to .ts / .tsx. Run next dev and next build to automatically install the necessary dependencies and add a tsconfig.json file with the recommended config options.\n\nIf you already had a jsconfig.json file, copy the paths compiler option from the old jsconfig.json into the new tsconfig.json file, and delete the old jsconfig.json file.\n\nWe also recommend you to use next.config.ts over next.config.js for better type inference.\n\nTypeScript Plugin\n\nNext.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.\n\nYou can enable the plugin in VS Code by:\n\nOpening the command palette (Ctrl/⌘ + Shift + P)\nSearching for \"TypeScript: Select TypeScript Version\"\nSelecting \"Use Workspace Version\"\n\nNow, when editing files, the custom plugin will be enabled. When running next build, the custom type checker will be used.\n\nPlugin Features\n\nThe TypeScript plugin can help with:\n\nWarning if the invalid values for segment config options are passed.\nShowing available options and in-context documentation.\nEnsuring the use client directive is used correctly.\nEnsuring client hooks (like useState) are only used in Client Components.\n\nGood to know: More features will be added in the future.\n\nMinimum TypeScript Version\n\nIt is highly recommended to be on at least v4.5.2 of TypeScript to get syntax features such as type modifiers on import names\n and performance improvements\n.\n\nType checking in Next.js Configuration\nType checking next.config.js\n\nWhen using the next.config.js file, you can add some type checking in your IDE using JSDoc as below:\n\nnext.config.js\n// @ts-check\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n \nmodule.exports = nextConfig\nType checking next.config.ts\n\nYou can use TypeScript and import types in your Next.js configuration by using next.config.ts.\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n \nexport default nextConfig\n\nGood to know: You can import Native ESM modules in next.config.ts without any additional configuration. Supports importing extensions like .cjs, .cts, .mjs, and .mts.\n\nStatically Typed Links\n\nNext.js can statically type links to prevent typos and other errors when using next/link, improving type safety when navigating between pages.\n\nTo opt-into this feature, experimental.typedRoutes need to be enabled and the project needs to be using TypeScript.\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n \nexport default nextConfig\n\nNext.js will generate a link definition in .next/types that contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links.\n\nCurrently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast the href with as Route:\n\nimport type { Route } from 'next';\nimport Link from 'next/link'\n \n// No TypeScript errors if href is a valid route\n<Link href=\"/about\" />\n<Link href=\"/blog/nextjs\" />\n<Link href={`/blog/${slug}`} />\n<Link href={('/blog' + slug) as Route} />\n \n// TypeScript errors if href is not a valid route\n<Link href=\"/aboot\" />\n\nTo accept href in a custom component wrapping next/link, use a generic:\n\nimport type { Route } from 'next'\nimport Link from 'next/link'\n \nfunction Card<T extends string>({ href }: { href: Route<T> | URL }) {\n  return (\n    <Link href={href}>\n      <div>My Card</div>\n    </Link>\n  )\n}\n\nHow does it work?\n\nWhen running next dev or next build, Next.js generates a hidden .d.ts file inside .next that contains information about all existing routes in your application (all valid routes as the href type of Link). This .d.ts file is included in tsconfig.json and the TypeScript compiler will check that .d.ts and provide feedback in your editor about invalid links.\n\nEnd-to-End Type Safety\n\nThe Next.js App Router has enhanced type safety. This includes:\n\nNo serialization of data between fetching function and page: You can fetch directly in components, layouts, and pages on the server. This data does not need to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, since app uses Server Components by default, we can use values like Date, Map, Set, and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.\nStreamlined data flow between components: With the removal of _app in favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individual pages and _app were difficult to type and could introduce confusing bugs. With colocated data fetching in the App Router, this is no longer an issue.\n\nData Fetching in Next.js now provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection.\n\nWe're able to type the response data as you would expect with normal TypeScript. For example:\n\napp/page.tsx\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n  return res.json()\n}\n \nexport default async function Page() {\n  const name = await getData()\n \n  return '...'\n}\n\nFor complete end-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using an ORM\n or type-safe query builder.\n\nAsync Server Component TypeScript Error\n\nTo use an async Server Component with TypeScript, ensure you are using TypeScript 5.1.3 or higher and @types/react 18.2.8 or higher.\n\nIf you are using an older version of TypeScript, you may see a 'Promise<Element>' is not a valid JSX element type error. Updating to the latest version of TypeScript and @types/react should resolve this issue.\n\nPassing Data Between Server & Client Components\n\nWhen passing data between a Server and Client Component through props, the data is still serialized (converted to a string) for use in the browser. However, it does not need a special type. It’s typed the same as passing any other props between components.\n\nFurther, there is less code to be serialized, as un-rendered data does not cross between the server and client (it remains on the server). This is only now possible through support for Server Components.\n\nPath aliases and baseUrl\n\nNext.js automatically supports the tsconfig.json \"paths\" and \"baseUrl\" options.\n\nYou can learn more about this feature on the Module Path aliases documentation.\n\nIncremental type checking\n\nSince v10.2.1 Next.js supports incremental type checking\n when enabled in your tsconfig.json, this can help speed up type checking in larger applications.\n\nIgnoring TypeScript Errors\n\nNext.js fails your production build (next build) when TypeScript errors are present in your project.\n\nIf you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.\n\nIf disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.\n\nOpen next.config.ts and enable the ignoreBuildErrors option in the typescript config:\n\nnext.config.ts\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n \nexport default nextConfig\nCustom Type Declarations\n\nWhen you need to declare custom types, you might be tempted to modify next-env.d.ts. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call it new-types.d.ts, and reference it in your tsconfig.json:\n\ntsconfig.json\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n    //...truncated...\n  },\n  \"include\": [\n    \"new-types.d.ts\",\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\nVersion Changes\nVersion\tChanges\nv15.0.0\tnext.config.ts support added for TypeScript projects.\nv13.2.0\tStatically typed links are available in beta.\nv12.0.0\tSWC is now used by default to compile TypeScript and TSX for faster builds.\nv10.2.1\tIncremental type checking\n support added when enabled in your tsconfig.json."
  },
  {
    "title": "Building Your Application: Configuring | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring",
    "html": "Configuring\n\nNext.js allows you to customize your project to meet specific requirements. This includes integrations with TypeScript, ESlint, and more, as well as internal configuration options such as Absolute Imports and Environment Variables."
  },
  {
    "title": "Optimizing: Memory Usage | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/memory-usage",
    "html": "Memory Usage\n\nAs applications grow and become more feature rich, they can demand more resources when developing locally or creating production builds.\n\nLet's explore some strategies and techniques to optimize memory and address common memory issues in Next.js.\n\nReduce number of dependencies\n\nApplications with a large amount of dependencies will use more memory.\n\nThe Bundle Analyzer can help you investigate large dependencies in your application that may be able to be removed to improve performance and memory usage.\n\nTry experimental.webpackMemoryOptimizations\n\nStarting in v15.0.0, you can add experimental.webpackMemoryOptimizations: true to your next.config.js file to change behavior in Webpack that reduces max memory usage but may increase compilation times by a slight amount.\n\nGood to know: This feature is currently experimental to test on more projects first, but it is considered to be low-risk.\n\nRun next build with --experimental-debug-memory-usage\n\nStarting in 14.2.0, you can run next build --experimental-debug-memory-usage to run the build in a mode where Next.js will print out information about memory usage continuously throughout the build, such as heap usage and garbage collection statistics. Heap snapshots will also be taken automatically when memory usage gets close to the configured limit.\n\nGood to know: This feature is not compatible with the Webpack build worker option which is auto-enabled unless you have custom webpack config.\n\nRecord a heap profile\n\nTo look for memory issues, you can record a heap profile from Node.js and load it in Chrome DevTools to identify potential sources of memory leaks.\n\nIn your terminal, pass the --heap-prof flag to Node.js when starting your Next.js build:\n\nnode --heap-prof node_modules/next/dist/bin/next build\n\nAt the end of the build, a .heapprofile file will be created by Node.js.\n\nIn Chrome DevTools, you can open the Memory tab and click on the \"Load Profile\" button to visualize the file.\n\nAnalyze a snapshot of the heap\n\nYou can use an inspector tool to analyze the memory usage of the application.\n\nWhen running the next build or next dev command, add NODE_OPTIONS=--inspect to the beginning of the command. This will expose the inspector agent on the default port. If you wish to break before any user code starts, you can pass --inspect-brk instead. While the process is running, you can use a tool such as Chrome DevTools to connect to the debugging port to record and analyze a snapshot of the heap to see what memory is being retained.\n\nStarting in 14.2.0, you can also run next build with the --experimental-debug-memory-usage flag to make it easier to take heap snapshots.\n\nWhile running in this mode, you can send a SIGUSR2 signal to the process at any point, and the process will take a heap snapshot.\n\nThe heap snapshot will be saved to the project root of the Next.js application and can be loaded in any heap analyzer, such as Chrome DevTools, to see what memory is retained. This mode is not yet compatible with Webpack build workers.\n\nSee how to record and analyze heap snapshots\n for more information.\n\nWebpack build worker\n\nThe Webpack build worker allows you to run Webpack compilations inside a separate Node.js worker which will decrease memory usage of your application during builds.\n\nThis option is enabled by default if your application does not have a custom Webpack configuration starting in v14.1.0.\n\nIf you are using an older version of Next.js or you have a custom Webpack configuration, you can enable this option by setting experimental.webpackBuildWorker: true inside your next.config.js.\n\nGood to know: This feature may not be compatible with all custom Webpack plugins.\n\nDisable Webpack cache\n\nThe Webpack cache\n saves generated Webpack modules in memory and/or to disk to improve the speed of builds. This can help with performance, but it will also increase the memory usage of your application to store the cached data.\n\nYou can disable this behavior by adding a custom Webpack configuration to your application:\n\nnext.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    if (config.cache && !dev) {\n      config.cache = Object.freeze({\n        type: 'memory',\n      })\n    }\n    // Important: return the modified config\n    return config\n  },\n}\n \nexport default nextConfig\nDisable source maps\n\nGenerating source maps consumes extra memory during the build process.\n\nYou can disable source map generation by adding productionBrowserSourceMaps: false and experimental.serverSourceMaps: false to your Next.js configuration.\n\nGood to know: Some plugins may turn on source maps and may require custom configuration to disable.\n\nEdge memory issues\n\nNext.js v14.1.3 fixed a memory issue when using the Edge runtime. Please update to this version (or later) to see if it addresses your issue."
  },
  {
    "title": "Optimizing: Static Assets | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/static-assets",
    "html": "Static Assets in `public`\n\nNext.js can serve static files, like images, under a folder called public in the root directory. Files inside public can then be referenced by your code starting from the base URL (/).\n\nFor example, the file public/avatars/me.png can be viewed by visiting the /avatars/me.png path. The code to display that image might look like:\n\navatar.js\nimport Image from 'next/image'\n \nexport function Avatar({ id, alt }) {\n  return <Image src={`/avatars/${id}.png`} alt={alt} width=\"64\" height=\"64\" />\n}\n \nexport function AvatarOfMe() {\n  return <Avatar id=\"me\" alt=\"A portrait of me\" />\n}\nCaching\n\nNext.js cannot safely cache assets in the public folder because they may change. The default caching headers applied are:\n\nCache-Control: public, max-age=0\nRobots, Favicons, and others\n\nFor static metadata files, such as robots.txt, favicon.ico, etc, you should use special metadata files inside the app folder.\n\nGood to know:\n\nThe directory must be named public. The name cannot be changed and it's the only directory used to serve static assets.\nOnly assets that are in the public directory at build time will be served by Next.js. Files added at request time won't be available. We recommend using a third-party service like Vercel Blob\n for persistent file storage."
  },
  {
    "title": "Optimizing: Third Party Libraries | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/third-party-libraries",
    "html": "Third Party Libraries\n\n@next/third-parties is a library that provides a collection of components and utilities that improve the performance and developer experience of loading popular third-party libraries in your Next.js application.\n\nAll third-party integrations provided by @next/third-parties have been optimized for performance and ease of use.\n\nGetting Started\n\nTo get started, install the @next/third-parties library:\n\nTerminal\nnpm install @next/third-parties@latest next@latest\n\n@next/third-parties is currently an experimental library under active development. We recommend installing it with the latest or canary flags while we work on adding more third-party integrations.\n\nGoogle Third-Parties\n\nAll supported third-party libraries from Google can be imported from @next/third-parties/google.\n\nGoogle Tag Manager\n\nThe GoogleTagManager component can be used to instantiate a Google Tag Manager\n container to your page. By default, it fetches the original inline script after hydration occurs on the page.\n\nTo load Google Tag Manager for all routes, include the component directly in your root layout and pass in your GTM container ID:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { GoogleTagManager } from '@next/third-parties/google'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n      <body>{children}</body>\n    </html>\n  )\n}\n\nTo load Google Tag Manager for a single route, include the component in your page file:\n\napp/page.js\nimport { GoogleTagManager } from '@next/third-parties/google'\n \nexport default function Page() {\n  return <GoogleTagManager gtmId=\"GTM-XYZ\" />\n}\nSending Events\n\nThe sendGTMEvent function can be used to track user interactions on your page by sending events using the dataLayer object. For this function to work, the <GoogleTagManager /> component must be included in either a parent layout, page, or component, or directly in the same file.\n\napp/page.js\n'use client'\n \nimport { sendGTMEvent } from '@next/third-parties/google'\n \nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGTMEvent('event', 'buttonClicked', { value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n\nRefer to the Tag Manager developer documentation\n to learn about the different variables and events that can be passed into the function.\n\nOptions\n\nOptions to pass to the Google Tag Manager. For a full list of options, read the Google Tag Manager docs\n.\n\nName\tType\tDescription\ngtmId\tRequired\tYour GTM container ID. Usually starts with GTM-.\ndataLayer\tOptional\tData layer object to instantiate the container with.\ndataLayerName\tOptional\tName of the data layer. Defaults to dataLayer.\nauth\tOptional\tValue of authentication parameter (gtm_auth) for environment snippets.\npreview\tOptional\tValue of preview parameter (gtm_preview) for environment snippets.\nGoogle Analytics\n\nThe GoogleAnalytics component can be used to include Google Analytics 4\n to your page via the Google tag (gtag.js). By default, it fetches the original scripts after hydration occurs on the page.\n\nRecommendation: If Google Tag Manager is already included in your application, you can configure Google Analytics directly using it, rather than including Google Analytics as a separate component. Refer to the documentation\n to learn more about the differences between Tag Manager and gtag.js.\n\nTo load Google Analytics for all routes, include the component directly in your root layout and pass in your measurement ID:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { GoogleAnalytics } from '@next/third-parties/google'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n\nTo load Google Analytics for a single route, include the component in your page file:\n\napp/page.js\nimport { GoogleAnalytics } from '@next/third-parties/google'\n \nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\nSending Events\n\nThe sendGAEvent function can be used to measure user interactions on your page by sending events using the dataLayer object. For this function to work, the <GoogleAnalytics /> component must be included in either a parent layout, page, or component, or directly in the same file.\n\napp/page.js\n'use client'\n \nimport { sendGAEvent } from '@next/third-parties/google'\n \nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n\nRefer to the Google Analytics developer documentation\n to learn more about event parameters.\n\nTracking Pageviews\n\nGoogle Analytics automatically tracks pageviews when the browser history state changes. This means that client-side navigations between Next.js routes will send pageview data without any configuration.\n\nTo ensure that client-side navigations are being measured correctly, verify that the “Enhanced Measurement”\n property is enabled in your Admin panel and the “Page changes based on browser history events” checkbox is selected.\n\nNote: If you decide to manually send pageview events, make sure to disable the default pageview measurement to avoid having duplicate data. Refer to the Google Analytics developer documentation\n to learn more.\n\nOptions\n\nOptions to pass to the <GoogleAnalytics> component.\n\nName\tType\tDescription\ngaId\tRequired\tYour measurement ID\n. Usually starts with G-.\ndataLayerName\tOptional\tName of the data layer. Defaults to dataLayer.\nGoogle Maps Embed\n\nThe GoogleMapsEmbed component can be used to add a Google Maps Embed\n to your page. By default, it uses the loading attribute to lazy-load the embed below the fold.\n\napp/page.js\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n \nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\nOptions\n\nOptions to pass to the Google Maps Embed. For a full list of options, read the Google Map Embed docs\n.\n\nName\tType\tDescription\napiKey\tRequired\tYour api key.\nmode\tRequired\tMap mode\n\nheight\tOptional\tHeight of the embed. Defaults to auto.\nwidth\tOptional\tWidth of the embed. Defaults to auto.\nstyle\tOptional\tPass styles to the iframe.\nallowfullscreen\tOptional\tProperty to allow certain map parts to go full screen.\nloading\tOptional\tDefaults to lazy. Consider changing if you know your embed will be above the fold.\nq\tOptional\tDefines map marker location. This may be required depending on the map mode.\ncenter\tOptional\tDefines the center of the map view.\nzoom\tOptional\tSets initial zoom level of the map.\nmaptype\tOptional\tDefines type of map tiles to load.\nlanguage\tOptional\tDefines the language to use for UI elements and for the display of labels on map tiles.\nregion\tOptional\tDefines the appropriate borders and labels to display, based on geo-political sensitivities.\nYouTube Embed\n\nThe YouTubeEmbed component can be used to load and display a YouTube embed. This component loads faster by using lite-youtube-embed\n under the hood.\n\napp/page.js\nimport { YouTubeEmbed } from '@next/third-parties/google'\n \nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />\n}\nOptions\nName\tType\tDescription\nvideoid\tRequired\tYouTube video id.\nwidth\tOptional\tWidth of the video container. Defaults to auto\nheight\tOptional\tHeight of the video container. Defaults to auto\nplaylabel\tOptional\tA visually hidden label for the play button for accessibility.\nparams\tOptional\tThe video player params defined here\n.\nParams are passed as a query param string.\nEg: params=\"controls=0&start=10&end=30\"\nstyle\tOptional\tUsed to apply styles to the video container."
  },
  {
    "title": "Optimizing: OpenTelemetry | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/open-telemetry",
    "html": "OpenTelemetry\n\nGood to know: This feature is experimental, you need to explicitly opt-in by providing experimental.instrumentationHook = true; in your next.config.js.\n\nObservability is crucial for understanding and optimizing the behavior and performance of your Next.js app.\n\nAs applications become more complex, it becomes increasingly difficult to identify and diagnose issues that may arise. By leveraging observability tools, such as logging and metrics, developers can gain insights into their application's behavior and identify areas for optimization. With observability, developers can proactively address issues before they become major problems and provide a better user experience. Therefore, it is highly recommended to use observability in your Next.js applications to improve performance, optimize resources, and enhance user experience.\n\nWe recommend using OpenTelemetry for instrumenting your apps. It's a platform-agnostic way to instrument apps that allows you to change your observability provider without changing your code. Read Official OpenTelemetry docs\n for more information about OpenTelemetry and how it works.\n\nThis documentation uses terms like Span, Trace or Exporter throughout this doc, all of which can be found in the OpenTelemetry Observability Primer\n.\n\nNext.js supports OpenTelemetry instrumentation out of the box, which means that we already instrumented Next.js itself. When you enable OpenTelemetry we will automatically wrap all your code like getStaticProps in spans with helpful attributes.\n\nGetting Started\n\nOpenTelemetry is extensible but setting it up properly can be quite verbose. That's why we prepared a package @vercel/otel that helps you get started quickly.\n\nUsing @vercel/otel\n\nTo get started, install the following packages:\n\nTerminal\nnpm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation\n\nNext, create a custom instrumentation.ts (or .js) file in the root directory of the project (or inside src folder if using one):\n\nyour-project/instrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { registerOTel } from '@vercel/otel'\n \nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n\nSee the @vercel/otel documentation\n for additional configuration options.\n\nGood to know:\n\nThe instrumentation file should be in the root of your project and not inside the app or pages directory. If you're using the src folder, then place the file inside src alongside pages and app.\nIf you use the pageExtensions config option to add a suffix, you will also need to update the instrumentation filename to match.\nWe have created a basic with-opentelemetry\n example that you can use.\nManual OpenTelemetry configuration\n\nThe @vercel/otel package provides many configuration options and should serve most of common use cases. But if it doesn't suit your needs, you can configure OpenTelemetry manually.\n\nFirstly you need to install OpenTelemetry packages:\n\nTerminal\nnpm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http\n\nNow you can initialize NodeSDK in your instrumentation.ts. Unlike @vercel/otel, NodeSDK is not compatible with edge runtime, so you need to make sure that you are importing them only when process.env.NEXT_RUNTIME === 'nodejs'. We recommend creating a new file instrumentation.node.ts which you conditionally import only when using node:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.ts')\n  }\n}\ninstrumentation.node.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\n \nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n\nDoing this is equivalent to using @vercel/otel, but it's possible to modify and extend some features that are not exposed by the @vercel/otel. If edge runtime support is necessary, you will have to use @vercel/otel.\n\nTesting your instrumentation\n\nYou need an OpenTelemetry collector with a compatible backend to test OpenTelemetry traces locally. We recommend using our OpenTelemetry dev environment\n.\n\nIf everything works well you should be able to see the root server span labeled as GET /requested/pathname. All other spans from that particular trace will be nested under it.\n\nNext.js traces more spans than are emitted by default. To see more spans, you must set NEXT_OTEL_VERBOSE=1.\n\nDeployment\nUsing OpenTelemetry Collector\n\nWhen you are deploying with OpenTelemetry Collector, you can use @vercel/otel. It will work both on Vercel and when self-hosted.\n\nDeploying on Vercel\n\nWe made sure that OpenTelemetry works out of the box on Vercel.\n\nFollow Vercel documentation\n to connect your project to an observability provider.\n\nSelf-hosting\n\nDeploying to other platforms is also straightforward. You will need to spin up your own OpenTelemetry Collector to receive and process the telemetry data from your Next.js app.\n\nTo do this, follow the OpenTelemetry Collector Getting Started guide\n, which will walk you through setting up the collector and configuring it to receive data from your Next.js app.\n\nOnce you have your collector up and running, you can deploy your Next.js app to your chosen platform following their respective deployment guides.\n\nCustom Exporters\n\nOpenTelemetry Collector is not necessary. You can use a custom OpenTelemetry exporter with @vercel/otel or manual OpenTelemetry configuration.\n\nCustom Spans\n\nYou can add a custom span with OpenTelemetry APIs\n.\n\nTerminal\nnpm install @opentelemetry/api\n\nThe following example demonstrates a function that fetches GitHub stars and adds a custom fetchGithubStars span to track the fetch request's result:\n\nimport { trace } from '@opentelemetry/api'\n \nexport async function fetchGithubStars() {\n  return await trace\n    .getTracer('nextjs-example')\n    .startActiveSpan('fetchGithubStars', async (span) => {\n      try {\n        return await getValue()\n      } finally {\n        span.end()\n      }\n    })\n}\n\nThe register function will execute before your code runs in a new environment. You can start creating new spans, and they should be correctly added to the exported trace.\n\nDefault Spans in Next.js\n\nNext.js automatically instruments several spans for you to provide useful insights into your application's performance.\n\nAttributes on spans follow OpenTelemetry semantic conventions\n. We also add some custom attributes under the next namespace:\n\nnext.span_name - duplicates span name\nnext.span_type - each span type has a unique identifier\nnext.route - The route pattern of the request (e.g., /[param]/user).\nnext.rsc (true/false) - Whether the request is an RSC request, such as prefetch.\nnext.page\nThis is an internal value used by an app router.\nYou can think about it as a route to a special file (like page.ts, layout.ts, loading.ts and others)\nIt can be used as a unique identifier only when paired with next.route because /layout can be used to identify both /(groupA)/layout.ts and /(groupB)/layout.ts\n[http.method] [next.route]\nnext.span_type: BaseServer.handleRequest\n\nThis span represents the root span for each incoming request to your Next.js application. It tracks the HTTP method, route, target, and status code of the request.\n\nAttributes:\n\nCommon HTTP attributes\nhttp.method\nhttp.status_code\nServer HTTP attributes\nhttp.route\nhttp.target\nnext.span_name\nnext.span_type\nnext.route\nrender route (app) [next.route]\nnext.span_type: AppRender.getBodyResult.\n\nThis span represents the process of rendering a route in the app router.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\nfetch [http.method] [http.url]\nnext.span_type: AppRender.fetch\n\nThis span represents the fetch request executed in your code.\n\nAttributes:\n\nCommon HTTP attributes\nhttp.method\nClient HTTP attributes\nhttp.url\nnet.peer.name\nnet.peer.port (only if specified)\nnext.span_name\nnext.span_type\n\nThis span can be turned off by setting NEXT_OTEL_FETCH_DISABLED=1 in your environment. This is useful when you want to use a custom fetch instrumentation library.\n\nexecuting api route (app) [next.route]\nnext.span_type: AppRouteRouteHandlers.runHandler.\n\nThis span represents the execution of an API route handler in the app router.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\ngetServerSideProps [next.route]\nnext.span_type: Render.getServerSideProps.\n\nThis span represents the execution of getServerSideProps for a specific route.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\ngetStaticProps [next.route]\nnext.span_type: Render.getStaticProps.\n\nThis span represents the execution of getStaticProps for a specific route.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\nrender route (pages) [next.route]\nnext.span_type: Render.renderDocument.\n\nThis span represents the process of rendering the document for a specific route.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\ngenerateMetadata [next.page]\nnext.span_type: ResolveMetadata.generateMetadata.\n\nThis span represents the process of generating metadata for a specific page (a single route can have multiple of these spans).\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.page\nresolve page components\nnext.span_type: NextNodeServer.findPageComponents.\n\nThis span represents the process of resolving page components for a specific page.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.route\nresolve segment modules\nnext.span_type: NextNodeServer.getLayoutOrPageModule.\n\nThis span represents loading of code modules for a layout or a page.\n\nAttributes:\n\nnext.span_name\nnext.span_type\nnext.segment\nstart response\nnext.span_type: NextNodeServer.startResponse.\n\nThis zero-length span represents the time when the first byte has been sent in the response."
  },
  {
    "title": "Optimizing: Analytics | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/analytics",
    "html": "Analytics\n\nNext.js has built-in support for measuring and reporting performance metrics. You can either use the useReportWebVitals hook to manage reporting yourself, or alternatively, Vercel provides a managed service\n to automatically collect and visualize metrics for you.\n\nBuild Your Own\napp/_components/web-vitals.js\n'use client'\n \nimport { useReportWebVitals } from 'next/web-vitals'\n \nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n}\napp/layout.js\nimport { WebVitals } from './_components/web-vitals'\n \nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n\nSince the useReportWebVitals hook requires the \"use client\" directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the WebVitals component.\n\nView the API Reference for more information.\n\nWeb Vitals\n\nWeb Vitals\n are a set of useful metrics that aim to capture the user experience of a web page. The following web vitals are all included:\n\nTime to First Byte\n (TTFB)\nFirst Contentful Paint\n (FCP)\nLargest Contentful Paint\n (LCP)\nFirst Input Delay\n (FID)\nCumulative Layout Shift\n (CLS)\nInteraction to Next Paint\n (INP)\n\nYou can handle all the results of these metrics using the name property.\n\napp/_components/web-vitals.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useReportWebVitals } from 'next/web-vitals'\n \nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\nSending results to external systems\n\nYou can send results to any endpoint to measure and track real user performance on your site. For example:\n\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n \n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n\nGood to know: If you use Google Analytics\n, using the id value can allow you to construct metric distributions manually (to calculate percentiles, etc.)\n\nuseReportWebVitals((metric) => {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n  window.gtag('event', metric.name, {\n    value: Math.round(\n      metric.name === 'CLS' ? metric.value * 1000 : metric.value\n    ), // values must be integers\n    event_label: metric.id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  })\n})\n\nRead more about sending results to Google Analytics\n."
  },
  {
    "title": "Optimizing: Instrumentation | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation",
    "html": "Instrumentation\n\nInstrumentation is the process of using code to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production.\n\nConvention\n\nTo set up instrumentation, create instrumentation.ts|js file in the root directory of your project (or inside the src folder if using one).\n\nThen, export a register function in the file. This function will be called once when a new Next.js server instance is initiated.\n\nFor example, to use Next.js with OpenTelemetry\n and @vercel/otel\n:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nimport { registerOTel } from '@vercel/otel'\n \nexport function register() {\n  registerOTel('next-app')\n}\n\nSee the Next.js with OpenTelemetry example\n for a complete implementation.\n\nGood to know:\n\nThis feature is experimental. To use it, you must explicitly opt in by defining experimental.instrumentationHook = true; in your next.config.js.\nThe instrumentation file should be in the root of your project and not inside the app or pages directory. If you're using the src folder, then place the file inside src alongside pages and app.\nIf you use the pageExtensions config option to add a suffix, you will also need to update the instrumentation filename to match.\nExamples\nImporting files with side effects\n\nSometimes, it may be useful to import a file in your code because of the side effects it will cause. For example, you might import a file that defines a set of global variables, but never explicitly use the imported file in your code. You would still have access to the global variables the package has declared.\n\nWe recommend importing files using JavaScript import syntax within your register function. The following example demonstrates a basic usage of import in a register function:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function register() {\n  await import('package-with-side-effect')\n}\n\nGood to know:\n\nWe recommend importing the file from within the register function, rather than at the top of the file. By doing this, you can colocate all of your side effects in one place in your code, and avoid any unintended consequences from importing globally at the top of the file.\n\nImporting runtime-specific code\n\nNext.js calls register in all environments, so it's important to conditionally import any code that doesn't support specific runtimes (e.g. Edge or Node.js). You can use the NEXT_RUNTIME environment variable to get the current environment:\n\ninstrumentation.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n \n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}"
  },
  {
    "title": "Optimizing: Lazy Loading | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading",
    "html": "Lazy Loading\n\nLazy loading\n in Next.js helps improve the initial loading performance of an application by decreasing the amount of JavaScript needed to render a route.\n\nIt allows you to defer loading of Client Components and imported libraries, and only include them in the client bundle when they're needed. For example, you might want to defer loading a modal until a user clicks to open it.\n\nThere are two ways you can implement lazy loading in Next.js:\n\nUsing Dynamic Imports with next/dynamic\nUsing React.lazy()\n with Suspense\n\nBy default, Server Components are automatically code split\n, and you can use streaming to progressively send pieces of UI from the server to the client. Lazy loading applies to Client Components.\n\nnext/dynamic\n\nnext/dynamic is a composite of React.lazy()\n and Suspense\n. It behaves the same way in the app and pages directories to allow for incremental migration.\n\nExamples\nImporting Client Components\napp/page.js\n'use client'\n \nimport { useState } from 'react'\nimport dynamic from 'next/dynamic'\n \n// Client Components:\nconst ComponentA = dynamic(() => import('../components/A'))\nconst ComponentB = dynamic(() => import('../components/B'))\nconst ComponentC = dynamic(() => import('../components/C'), { ssr: false })\n \nexport default function ClientComponentExample() {\n  const [showMore, setShowMore] = useState(false)\n \n  return (\n    <div>\n      {/* Load immediately, but in a separate client bundle */}\n      <ComponentA />\n \n      {/* Load on demand, only when/if the condition is met */}\n      {showMore && <ComponentB />}\n      <button onClick={() => setShowMore(!showMore)}>Toggle</button>\n \n      {/* Load only on the client side */}\n      <ComponentC />\n    </div>\n  )\n}\nSkipping SSR\n\nWhen using React.lazy() and Suspense, Client Components will be pre-rendered (SSR) by default.\n\nIf you want to disable pre-rendering for a Client Component, you can use the ssr option set to false:\n\nconst ComponentC = dynamic(() => import('../components/C'), { ssr: false })\nImporting Server Components\n\nIf you dynamically import a Server Component, only the Client Components that are children of the Server Component will be lazy-loaded - not the Server Component itself.\n\napp/page.js\nimport dynamic from 'next/dynamic'\n \n// Server Component:\nconst ServerComponent = dynamic(() => import('../components/ServerComponent'))\n \nexport default function ServerComponentExample() {\n  return (\n    <div>\n      <ServerComponent />\n    </div>\n  )\n}\nLoading External Libraries\n\nExternal libraries can be loaded on demand using the import()\n function. This example uses the external library fuse.js for fuzzy search. The module is only loaded on the client after the user types in the search input.\n\napp/page.js\n'use client'\n \nimport { useState } from 'react'\n \nconst names = ['Tim', 'Joe', 'Bel', 'Lee']\n \nexport default function Page() {\n  const [results, setResults] = useState()\n \n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={async (e) => {\n          const { value } = e.currentTarget\n          // Dynamically load fuse.js\n          const Fuse = (await import('fuse.js')).default\n          const fuse = new Fuse(names)\n \n          setResults(fuse.search(value))\n        }}\n      />\n      <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n    </div>\n  )\n}\nAdding a custom loading component\napp/page.js\nimport dynamic from 'next/dynamic'\n \nconst WithCustomLoading = dynamic(\n  () => import('../components/WithCustomLoading'),\n  {\n    loading: () => <p>Loading...</p>,\n  }\n)\n \nexport default function Page() {\n  return (\n    <div>\n      {/* The loading component will be rendered while  <WithCustomLoading/> is loading */}\n      <WithCustomLoading />\n    </div>\n  )\n}\nImporting Named Exports\n\nTo dynamically import a named export, you can return it from the Promise returned by import()\n function:\n\ncomponents/hello.js\n'use client'\n \nexport function Hello() {\n  return <p>Hello!</p>\n}\napp/page.js\nimport dynamic from 'next/dynamic'\n \nconst ClientComponent = dynamic(() =>\n  import('../components/hello').then((mod) => mod.Hello)\n)"
  },
  {
    "title": "Optimizing: Package Bundling | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/package-bundling",
    "html": "Optimizing Package Bundling\n\nBundling external packages can significantly improve the performance of your application. By default, packages imported inside Server Components and Route Handlers are automatically bundled by Next.js. This page will guide you through how to analyze and further optimize package bundling.\n\nAnalyzing JavaScript bundles\n\n@next/bundle-analyzer\n is a plugin for Next.js that helps you manage the size of your application bundles. It generates a visual report of the size of each package and their dependencies. You can use the information to remove large dependencies, split, or lazy-load your code.\n\nInstallation\n\nInstall the plugin by running the following command:\n\nnpm i @next/bundle-analyzer\n# or\nyarn add @next/bundle-analyzer\n# or\npnpm add @next/bundle-analyzer\n\nThen, add the bundle analyzer's settings to your next.config.js.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {}\n \nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n \nmodule.exports = withBundleAnalyzer(nextConfig)\nGenerating a report\n\nRun the following command to analyze your bundles:\n\nANALYZE=true npm run build\n# or\nANALYZE=true yarn build\n# or\nANALYZE=true pnpm build\n\nThe report will open three new tabs in your browser, which you can inspect. Periodically evaluating your application's bundles can help you maintain application performance over time.\n\nOptimizing package imports\n\nSome packages, such as icon libraries, can export hundreds of modules, which can cause performance issues in development and production.\n\nYou can optimize how these packages are imported by adding the optimizePackageImports option to your next.config.js. This option will only load the modules you actually use, while still giving you the convenience of writing import statements with many named exports.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    optimizePackageImports: ['icon-library'],\n  },\n}\n \nmodule.exports = nextConfig\n\nNext.js also optimizes some libraries automatically, thus they do not need to be included in the optimizePackageImports list. See the full list\n.\n\nOpting specific packages out of bundling\n\nSince packages imported inside Server Components and Route Handlers are automatically bundled by Next.js, you can opt specific packages out of bundling using the serverExternalPackages option in your next.config.js.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverExternalPackages: ['package-name'],\n}\n \nmodule.exports = nextConfig\n\nNext.js includes a list of popular packages that currently are working on compatibility and automatically opt-ed out. See the full list."
  },
  {
    "title": "Optimizing: Fonts | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/fonts",
    "html": "Font Optimization\n\nnext/font will automatically optimize your fonts (including custom fonts) and remove external network requests for improved privacy and performance.\n\n🎥 Watch: Learn more about using next/font → YouTube (6 minutes)\n.\n\nnext/font includes built-in automatic self-hosting for any font file. This means you can optimally load web fonts with zero layout shift, thanks to the underlying CSS size-adjust property used.\n\nThis new font system also allows you to conveniently use all Google Fonts with performance and privacy in mind. CSS and font files are downloaded at build time and self-hosted with the rest of your static assets. No requests are sent to Google by the browser.\n\nGoogle Fonts\n\nAutomatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment. No requests are sent to Google by the browser.\n\nGet started by importing the font you would like to use from next/font/google as a function. We recommend using variable fonts\n for the best performance and flexibility.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Inter } from 'next/font/google'\n \n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n\nIf you can't use a variable font, you will need to specify a weight:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Roboto } from 'next/font/google'\n \nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n  display: 'swap',\n})\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={roboto.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n\nYou can specify multiple weights and/or styles by using an array:\n\napp/layout.js\nconst roboto = Roboto({\n  weight: ['400', '700'],\n  style: ['normal', 'italic'],\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nGood to know: Use an underscore (_) for font names with multiple words. E.g. Roboto Mono should be imported as Roboto_Mono.\n\nSpecifying a subset\n\nGoogle Fonts are automatically subset\n. This reduces the size of the font file and improves performance. You'll need to define which of these subsets you want to preload. Failing to specify any subsets while preload is true will result in a warning.\n\nThis can be done by adding it to the function call:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nconst inter = Inter({ subsets: ['latin'] })\n\nView the Font API Reference for more information.\n\nUsing Multiple Fonts\n\nYou can import and use multiple fonts in your application. There are two approaches you can take.\n\nThe first approach is to create a utility function that exports a font, imports it, and applies its className where needed. This ensures the font is preloaded only when it's rendered:\n\napp/fonts.ts\nTypeScript\nJavaScript\nTypeScript\nimport { Inter, Roboto_Mono } from 'next/font/google'\n \nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n \nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { inter } from './fonts'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { roboto_mono } from './fonts'\n \nexport default function Page() {\n  return (\n    <>\n      <h1 className={roboto_mono.className}>My page</h1>\n    </>\n  )\n}\n\nIn the example above, Inter will be applied globally, and Roboto Mono can be imported and applied as needed.\n\nAlternatively, you can create a CSS variable and use it with your preferred CSS solution:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Inter, Roboto_Mono } from 'next/font/google'\nimport styles from './global.css'\n \nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n})\n \nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  variable: '--font-roboto-mono',\n  display: 'swap',\n})\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>\n        <h1>My App</h1>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\napp/global.css\nhtml {\n  font-family: var(--font-inter);\n}\n \nh1 {\n  font-family: var(--font-roboto-mono);\n}\n\nIn the example above, Inter will be applied globally, and any <h1> tags will be styled with Roboto Mono.\n\nRecommendation: Use multiple fonts conservatively since each new font is an additional resource the client has to download.\n\nLocal Fonts\n\nImport next/font/local and specify the src of your local font file. We recommend using variable fonts\n for the best performance and flexibility.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport localFont from 'next/font/local'\n \n// Font files can be colocated inside of `app`\nconst myFont = localFont({\n  src: './my-font.woff2',\n  display: 'swap',\n})\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n\nIf you want to use multiple files for a single font family, src can be an array:\n\nconst roboto = localFont({\n  src: [\n    {\n      path: './Roboto-Regular.woff2',\n      weight: '400',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-Italic.woff2',\n      weight: '400',\n      style: 'italic',\n    },\n    {\n      path: './Roboto-Bold.woff2',\n      weight: '700',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-BoldItalic.woff2',\n      weight: '700',\n      style: 'italic',\n    },\n  ],\n})\n\nView the Font API Reference for more information.\n\nWith Tailwind CSS\n\nnext/font can be used with Tailwind CSS\n through a CSS variable.\n\nIn the example below, we use the font Inter from next/font/google (you can use any font from Google or Local Fonts). Load your font with the variable option to define your CSS variable name and assign it to inter. Then, use inter.variable to add the CSS variable to your HTML document.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Inter, Roboto_Mono } from 'next/font/google'\n \nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n})\n \nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>{children}</body>\n    </html>\n  )\n}\n\nFinally, add the CSS variable to your Tailwind CSS config:\n\ntailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n    './app/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-inter)'],\n        mono: ['var(--font-roboto-mono)'],\n      },\n    },\n  },\n  plugins: [],\n}\n\nYou can now use the font-sans and font-mono utility classes to apply the font to your elements.\n\nPreloading\n\nWhen a font function is called on a page of your site, it is not globally available and preloaded on all routes. Rather, the font is only preloaded on the related routes based on the type of file where it is used:\n\nIf it's a unique page, it is preloaded on the unique route for that page.\nIf it's a layout, it is preloaded on all the routes wrapped by the layout.\nIf it's the root layout, it is preloaded on all routes.\nReusing fonts\n\nEvery time you call the localFont or Google font function, that font is hosted as one instance in your application. Therefore, if you load the same font function in multiple files, multiple instances of the same font are hosted. In this situation, it is recommended to do the following:\n\nCall the font loader function in one shared file\nExport it as a constant\nImport the constant in each file where you would like to use this font"
  },
  {
    "title": "Optimizing: Scripts | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/scripts",
    "html": "Script Optimization\nLayout Scripts\n\nTo load a third-party script for multiple routes, import next/script and include the script directly in your layout component:\n\napp/dashboard/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n\nThe third-party script is fetched when the folder route (e.g. dashboard/page.js) or any nested route (e.g. dashboard/settings/page.js) is accessed by the user. Next.js will ensure the script will only load once, even if a user navigates between multiple routes in the same layout.\n\nApplication Scripts\n\nTo load a third-party script for all routes, import next/script and include the script directly in your root layout:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script src=\"https://example.com/script.js\" />\n    </html>\n  )\n}\n\nThis script will load and execute when any route in your application is accessed. Next.js will ensure the script will only load once, even if a user navigates between multiple pages.\n\nRecommendation: We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance.\n\nStrategy\n\nAlthough the default behavior of next/script allows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using the strategy property:\n\nbeforeInteractive: Load the script before any Next.js code and before any page hydration occurs.\nafterInteractive: (default) Load the script early but after some hydration on the page occurs.\nlazyOnload: Load the script later during browser idle time.\nworker: (experimental) Load the script in a web worker.\n\nRefer to the next/script API reference documentation to learn more about each strategy and their use cases.\n\nOffloading Scripts To A Web Worker (experimental)\n\nWarning: The worker strategy is not yet stable and does not yet work with the app directory. Use with caution.\n\nScripts that use the worker strategy are offloaded and executed in a web worker with Partytown\n. This can improve the performance of your site by dedicating the main thread to the rest of your application code.\n\nThis strategy is still experimental and can only be used if the nextScriptWorkers flag is enabled in next.config.js:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n\nThen, run next (normally npm run dev or yarn dev) and Next.js will guide you through the installation of the required packages to finish the setup:\n\nTerminal\nnpm run dev\n\nYou'll see instructions like these: Please install Partytown by running npm install @builder.io/partytown\n\nOnce setup is complete, defining strategy=\"worker\" will automatically instantiate Partytown in your application and offload the script to a web worker.\n\npages/home.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n\nThere are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown's tradeoffs\n documentation for more information.\n\nInline Scripts\n\nInline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:\n\n<Script id=\"show-banner\">\n  {`document.getElementById('banner').classList.remove('hidden')`}\n</Script>\n\nOr by using the dangerouslySetInnerHTML property:\n\n<Script\n  id=\"show-banner\"\n  dangerouslySetInnerHTML={{\n    __html: `document.getElementById('banner').classList.remove('hidden')`,\n  }}\n/>\n\nWarning: An id property must be assigned for inline scripts in order for Next.js to track and optimize the script.\n\nExecuting Additional Code\n\nEvent handlers can be used with the Script component to execute additional code after a certain event occurs:\n\nonLoad: Execute code after the script has finished loading.\nonReady: Execute code after the script has finished loading and every time the component is mounted.\nonError: Execute code if the script fails to load.\n\nThese handlers will only work when next/script is imported and used inside of a Client Component where \"use client\" is defined as the first line of code:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n\nRefer to the next/script API reference to learn more about each event handler and view examples.\n\nAdditional Attributes\n\nThere are many DOM attributes that can be assigned to a <script> element that are not used by the Script component, like nonce\n or custom data attributes\n. Including any additional attributes will automatically forward it to the final, optimized <script> element that is included in the HTML.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}"
  },
  {
    "title": "Optimizing: Metadata | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/metadata",
    "html": "Metadata\n\nNext.js has a Metadata API that can be used to define your application metadata (e.g. meta and link tags inside your HTML head element) for improved SEO and web shareability.\n\nThere are two ways you can add metadata to your application:\n\nConfig-based Metadata: Export a static metadata object or a dynamic generateMetadata function in a layout.js or page.js file.\nFile-based Metadata: Add static or dynamically generated special files to route segments.\n\nWith both these options, Next.js will automatically generate the relevant <head> elements for your pages. You can also create dynamic OG images using the ImageResponse constructor.\n\nStatic Metadata\n\nTo define static metadata, export a Metadata object from a layout.js or static page.js file.\n\nlayout.tsx | page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n \nexport default function Page() {}\n\nFor all the available options, see the API Reference.\n\nDynamic Metadata\n\nYou can use generateMetadata function to fetch metadata that requires dynamic values.\n\napp/products/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata, ResolvingMetadata } from 'next'\n \ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n \nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  // read route params\n  const id = params.id\n \n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n \n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n \n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n \nexport default function Page({ params, searchParams }: Props) {}\n\nFor all the available params, see the API Reference.\n\nGood to know:\n\nBoth static and dynamic metadata through generateMetadata are only supported in Server Components.\nfetch requests are automatically memoized for the same data across generateMetadata, generateStaticParams, Layouts, Pages, and Server Components. React cache can be used if fetch is unavailable.\nNext.js will wait for data fetching inside generateMetadata to complete before streaming UI to the client. This guarantees the first part of a streamed response includes <head> tags.\nFile-based metadata\n\nThese special files are available for metadata:\n\nfavicon.ico, apple-icon.jpg, and icon.jpg\nopengraph-image.jpg and twitter-image.jpg\nrobots.txt\nsitemap.xml\n\nYou can use these for static metadata, or you can programmatically generate these files with code.\n\nFor implementation and examples, see the Metadata Files API Reference and Dynamic Image Generation.\n\nBehavior\n\nFile-based metadata has the higher priority and will override any config-based metadata.\n\nDefault Fields\n\nThere are two default meta tags that are always added even if a route doesn't define metadata:\n\nThe meta charset tag\n sets the character encoding for the website.\nThe meta viewport tag\n sets the viewport width and scale for the website to adjust for different devices.\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\nGood to know: You can overwrite the default viewport meta tag.\n\nOrdering\n\nMetadata is evaluated in order, starting from the root segment down to the segment closest to the final page.js segment. For example:\n\napp/layout.tsx (Root Layout)\napp/blog/layout.tsx (Nested Blog Layout)\napp/blog/[slug]/page.tsx (Blog Page)\nMerging\n\nFollowing the evaluation order, Metadata objects exported from multiple segments in the same route are shallowly merged together to form the final metadata output of a route. Duplicate keys are replaced based on their ordering.\n\nThis means metadata with nested fields such as openGraph and robots that are defined in an earlier segment are overwritten by the last segment to define them.\n\nOverwriting fields\napp/layout.js\nexport const metadata = {\n  title: 'Acme',\n  openGraph: {\n    title: 'Acme',\n    description: 'Acme is a...',\n  },\n}\napp/blog/page.js\nexport const metadata = {\n  title: 'Blog',\n  openGraph: {\n    title: 'Blog',\n  },\n}\n \n// Output:\n// <title>Blog</title>\n// <meta property=\"og:title\" content=\"Blog\" />\n\nIn the example above:\n\ntitle from app/layout.js is replaced by title in app/blog/page.js.\nAll openGraph fields from app/layout.js are replaced in app/blog/page.js because app/blog/page.js sets openGraph metadata. Note the absence of openGraph.description.\n\nIf you'd like to share some nested fields between segments while overwriting others, you can pull them out into a separate variable:\n\napp/shared-metadata.js\nexport const openGraphImage = { images: ['http://...'] }\napp/page.js\nimport { openGraphImage } from './shared-metadata'\n \nexport const metadata = {\n  openGraph: {\n    ...openGraphImage,\n    title: 'Home',\n  },\n}\napp/about/page.js\nimport { openGraphImage } from '../shared-metadata'\n \nexport const metadata = {\n  openGraph: {\n    ...openGraphImage,\n    title: 'About',\n  },\n}\n\nIn the example above, the OG image is shared between app/layout.js and app/about/page.js while the titles are different.\n\nInheriting fields\napp/layout.js\nexport const metadata = {\n  title: 'Acme',\n  openGraph: {\n    title: 'Acme',\n    description: 'Acme is a...',\n  },\n}\napp/about/page.js\nexport const metadata = {\n  title: 'About',\n}\n \n// Output:\n// <title>About</title>\n// <meta property=\"og:title\" content=\"Acme\" />\n// <meta property=\"og:description\" content=\"Acme is a...\" />\n\nNotes\n\ntitle from app/layout.js is replaced by title in app/about/page.js.\nAll openGraph fields from app/layout.js are inherited in app/about/page.js because app/about/page.js doesn't set openGraph metadata.\nDynamic Image Generation\n\nThe ImageResponse constructor allows you to generate dynamic images using JSX and CSS. This is useful for creating social media images such as Open Graph images, Twitter cards, and more.\n\nTo use it, you can import ImageResponse from next/og:\n\napp/about/route.js\nimport { ImageResponse } from 'next/og'\n \nexport async function GET() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          textAlign: 'center',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Hello world!\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 600,\n    }\n  )\n}\n\nImageResponse integrates well with other Next.js APIs, including Route Handlers and file-based Metadata. For example, you can use ImageResponse in a opengraph-image.tsx file to generate Open Graph images at build time or dynamically at request time.\n\nImageResponse supports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images. See the full list of supported CSS properties.\n\nGood to know:\n\nExamples are available in the Vercel OG Playground\n.\nImageResponse uses @vercel/og\n, Satori\n, and Resvg to convert HTML and CSS into PNG.\nOnly the Edge Runtime is supported. The default Node.js runtime will not work.\nOnly flexbox and a subset of CSS properties are supported. Advanced layouts (e.g. display: grid) will not work.\nMaximum bundle size of 500KB. The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime.\nOnly ttf, otf, and woff font formats are supported. To maximize the font parsing speed, ttf or otf are preferred over woff.\nJSON-LD\n\nJSON-LD\n is a format for structured data that can be used by search engines to understand your content. For example, you can use it to describe a person, an event, an organization, a movie, a book, a recipe, and many other types of entities.\n\nOur current recommendation for JSON-LD is to render structured data as a <script> tag in your layout.js or page.js components. For example:\n\napp/products/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page({ params }) {\n  const product = await getProduct(params.id)\n \n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n \n  return (\n    <section>\n      {/* Add JSON-LD to your page */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n\nYou can validate and test your structured data with the Rich Results Test\n for Google or the generic Schema Markup Validator\n.\n\nYou can type your JSON-LD with TypeScript using community packages like schema-dts\n:\n\nimport { Product, WithContext } from 'schema-dts'\n \nconst jsonLd: WithContext<Product> = {\n  '@context': 'https://schema.org',\n  '@type': 'Product',\n  name: 'Next.js Sticker',\n  image: 'https://nextjs.org/imgs/sticker.png',\n  description: 'Dynamic at the speed of static.',\n}"
  },
  {
    "title": "Optimizing: Videos | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/videos",
    "html": "Video Optimization\n\nThis page outlines how to use videos with Next.js applications, showing how to store and display video files without affecting performance.\n\nUsing <video> and <iframe>\n\nVideos can be embedded on the page using the HTML <video> tag for direct video files and <iframe> for external platform-hosted videos.\n\n<video>\n\nThe HTML <video>\n tag can embed self-hosted or directly served video content, allowing full control over the playback and appearance.\n\napp/ui/video.jsx\nexport function Video() {\n  return (\n    <video width=\"320\" height=\"240\" controls preload=\"none\">\n      <source src=\"/path/to/video.mp4\" type=\"video/mp4\" />\n      <track\n        src=\"/path/to/captions.vtt\"\n        kind=\"subtitles\"\n        srcLang=\"en\"\n        label=\"English\"\n      />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\nCommon <video> tag attributes\nAttribute\tDescription\tExample Value\nsrc\tSpecifies the source of the video file.\t<video src=\"/path/to/video.mp4\" />\nwidth\tSets the width of the video player.\t<video width=\"320\" />\nheight\tSets the height of the video player.\t<video height=\"240\" />\ncontrols\tIf present, it displays the default set of playback controls.\t<video controls />\nautoPlay\tAutomatically starts playing the video when the page loads. Note: Autoplay policies vary across browsers.\t<video autoPlay />\nloop\tLoops the video playback.\t<video loop />\nmuted\tMutes the audio by default. Often used with autoPlay.\t<video muted />\npreload\tSpecifies how the video is preloaded. Values: none, metadata, auto.\t<video preload=\"none\" />\nplaysInline\tEnables inline playback on iOS devices, often necessary for autoplay to work on iOS Safari.\t<video playsInline />\n\nGood to know: When using the autoPlay attribute, it is important to also include the muted attribute to ensure the video plays automatically in most browsers and the playsInline attribute for compatibility with iOS devices.\n\nFor a comprehensive list of video attributes, refer to the MDN documentation\n.\n\nVideo best practices\nFallback Content: When using the <video> tag, include fallback content inside the tag for browsers that do not support video playback.\nSubtitles or Captions: Include subtitles or captions for users who are deaf or hard of hearing. Utilize the <track>\n tag with your <video> elements to specify caption file sources.\nAccessible Controls: Standard HTML5 video controls are recommended for keyboard navigation and screen reader compatibility. For advanced needs, consider third-party players like react-player\n or video.js\n, which offer accessible controls and consistent browser experience.\n<iframe>\n\nThe HTML <iframe> tag allows you to embed videos from external platforms like YouTube or Vimeo.\n\napp/page.jsx\nexport default function Page() {\n  return (\n    <iframe\n      src=\"https://www.youtube.com/watch?v=gfU1iZnjRZM\"\n      frameborder=\"0\"\n      allowfullscreen\n    />\n  )\n}\nCommon <iframe> tag attributes\nAttribute\tDescription\tExample Value\nsrc\tThe URL of the page to embed.\t<iframe src=\"https://example.com\" />\nwidth\tSets the width of the iframe.\t<iframe width=\"500\" />\nheight\tSets the height of the iframe.\t<iframe height=\"300\" />\nframeborder\tSpecifies whether or not to display a border around the iframe.\t<iframe frameborder=\"0\" />\nallowfullscreen\tAllows the iframe content to be displayed in full-screen mode.\t<iframe allowfullscreen />\nsandbox\tEnables an extra set of restrictions on the content within the iframe.\t<iframe sandbox />\nloading\tOptimize loading behavior (e.g., lazy loading).\t<iframe loading=\"lazy\" />\ntitle\tProvides a title for the iframe to support accessibility.\t<iframe title=\"Description\" />\n\nFor a comprehensive list of iframe attributes, refer to the MDN documentation\n.\n\nChoosing a video embedding method\n\nThere are two ways you can embed videos in your Next.js application:\n\nSelf-hosted or direct video files: Embed self-hosted videos using the <video> tag for scenarios requiring detailed control over the player's functionality and appearance. This integration method within Next.js allows for customization and control of your video content.\nUsing video hosting services (YouTube, Vimeo, etc.): For video hosting services like YouTube or Vimeo, you'll embed their iframe-based players using the <iframe> tag. While this method limits some control over the player, it offers ease of use and features provided by these platforms.\n\nChoose the embedding method that aligns with your application's requirements and the user experience you aim to deliver.\n\nEmbedding externally hosted videos\n\nTo embed videos from external platforms, you can use Next.js to fetch the video information and React Suspense to handle the fallback state while loading.\n\n1. Create a Server Component for video embedding\n\nThe first step is to create a Server Component\n that generates the appropriate iframe for embedding the video. This component will fetch the source URL for the video and render the iframe.\n\napp/ui/video-component.jsx\nexport default async function VideoComponent() {\n  const src = await getVideoSrc()\n \n  return <iframe src={src} frameborder=\"0\" allowfullscreen />\n}\n\n2. Stream the video component using React Suspense\n\nAfter creating the Server Component to embed the video, the next step is to stream\n the component using React Suspense\n.\n\napp/page.jsx\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\n \nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading video...</p>}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\n\nGood to know: When embedding videos from external platforms, consider the following best practices:\n\nEnsure the video embeds are responsive. Use CSS to make the iframe or video player adapt to different screen sizes.\nImplement strategies for loading videos\n based on network conditions, especially for users with limited data plans.\n\nThis approach results in a better user experience as it prevents the page from blocking, meaning the user can interact with the page while the video component streams in.\n\nFor a more engaging and informative loading experience, consider using a loading skeleton as the fallback UI. So instead of showing a simple loading message, you can show a skeleton that resembles the video player like this:\n\napp/page.jsx\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\nimport VideoSkeleton from '../ui/VideoSkeleton.jsx'\n \nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<VideoSkeleton />}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\nSelf-hosted videos\n\nSelf-hosting videos may be preferable for several reasons:\n\nComplete control and independence: Self-hosting gives you direct management over your video content, from playback to appearance, ensuring full ownership and control, free from external platform constraints.\nCustomization for specific needs: Ideal for unique requirements, like dynamic background videos, it allows for tailored customization to align with design and functional needs.\nPerformance and scalability considerations: Choose storage solutions that are both high-performing and scalable, to support increasing traffic and content size effectively.\nCost and integration: Balance the costs of storage and bandwidth with the need for easy integration into your Next.js framework and broader tech ecosystem.\nUsing Vercel Blob for video hosting\n\nVercel Blob\n offers an efficient way to host videos, providing a scalable cloud storage solution that works well with Next.js. Here's how you can host a video using Vercel Blob:\n\n1. Uploading a video to Vercel Blob\n\nIn your Vercel dashboard, navigate to the \"Storage\" tab and select your Vercel Blob\n store. In the Blob table's upper-right corner, find and click the \"Upload\" button. Then, choose the video file you wish to upload. After the upload completes, the video file will appear in the Blob table.\n\nAlternatively, you can upload your video using a server action. For detailed instructions, refer to the Vercel documentation on server-side uploads\n. Vercel also supports client-side uploads\n. This method may be preferable for certain use cases.\n\n2. Displaying the video in Next.js\n\nOnce the video is uploaded and stored, you can display it in your Next.js application. Here's an example of how to do this using the <video> tag and React Suspense:\n\napp/page.jsx\nimport { Suspense } from 'react'\nimport { list } from '@vercel/blob'\n \nexport default function Page() {\n  return (\n    <Suspense fallback={<p>Loading video...</p>}>\n      <VideoComponent fileName=\"my-video.mp4\" />\n    </Suspense>\n  )\n}\n \nasync function VideoComponent({ fileName }) {\n  const { blobs } = await list({\n    prefix: fileName,\n    limit: 1,\n  })\n  const { url } = blobs[0]\n \n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n\nIn this approach, the page uses the video's @vercel/blob URL to display the video using the VideoComponent. React Suspense is used to show a fallback until the video URL is fetched and the video is ready to be displayed.\n\nAdding subtitles to your video\n\nIf you have subtitles for your video, you can easily add them using the <track> element inside your <video> tag. You can fetch the subtitle file from Vercel Blob\n in a similar way as the video file. Here's how you can update the <VideoComponent> to include subtitles.\n\napp/page.jsx\nasync function VideoComponent({ fileName }) {\n  const { blobs } = await list({\n    prefix: fileName,\n    limit: 2,\n  })\n  const { url } = blobs[0]\n  const { url: captionsUrl } = blobs[1]\n \n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      <track src={captionsUrl} kind=\"subtitles\" srcLang=\"en\" label=\"English\" />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n\nBy following this approach, you can effectively self-host and integrate videos into your Next.js applications.\n\nResources\n\nTo continue learning more about video optimization and best practices, please refer to the following resources:\n\nUnderstanding video formats and codecs: Choose the right format and codec, like MP4 for compatibility or WebM for web optimization, for your video needs. For more details, see Mozilla's guide on video codecs\n.\nVideo compression: Use tools like FFmpeg to effectively compress videos, balancing quality with file size. Learn about compression techniques at FFmpeg's official website\n.\nResolution and bitrate adjustment: Adjust resolution and bitrate\n based on the viewing platform, with lower settings for mobile devices.\nContent Delivery Networks (CDNs): Utilize a CDN to enhance video delivery speed and manage high traffic. When using some storage solutions, such as Vercel Blob, CDN functionality is automatically handled for you. Learn more\n about CDNs and their benefits.\n\nExplore these video streaming platforms for integrating video into your Next.js projects:\n\nOpen source next-video component\nProvides a <Video> component for Next.js, compatible with various hosting services including Vercel Blob\n, S3, Backblaze, and Mux.\nDetailed documentation\n for using next-video.dev with different hosting services.\nCloudinary Integration\nOfficial documentation and integration guide\n for using Cloudinary with Next.js.\nIncludes a <CldVideoPlayer> component for drop-in video support\n.\nFind examples\n of integrating Cloudinary with Next.js including Adaptive Bitrate Streaming\n.\nOther Cloudinary libraries\n including a Node.js SDK are also available.\nMux Video API\nMux provides a starter template\n for creating a video course with Mux and Next.js.\nLearn about Mux's recommendations for embedding high-performance video for your Next.js application\n.\nExplore an example project\n demonstrating Mux with Next.js.\nFastly\nLearn more about integrating Fastly's solutions for video on demand\n and streaming media into Next.js."
  },
  {
    "title": "Styling: CSS-in-JS | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/styling/css-in-js",
    "html": "CSS-in-JS\n\nWarning: CSS-in-JS libraries which require runtime JavaScript are not currently supported in Server Components. Using CSS-in-JS with newer React features like Server Components and Streaming requires library authors to support the latest version of React, including concurrent rendering\n.\n\nWe're working with the React team on upstream APIs to handle CSS and JavaScript assets with support for React Server Components and streaming architecture.\n\nThe following libraries are supported in Client Components in the app directory (alphabetical):\n\nant-design\nchakra-ui\n@fluentui/react-components\nkuma-ui\n@mui/material\n@mui/joy\npandacss\nstyled-jsx\nstyled-components\nstylex\ntamagui\ntss-react\nvanilla-extract\n\nThe following are currently working on support:\n\nemotion\n\nGood to know: We're testing out different CSS-in-JS libraries and we'll be adding more examples for libraries that support React 18 features and/or the app directory.\n\nIf you want to style Server Components, we recommend using CSS Modules or other solutions that output CSS files, like PostCSS or Tailwind CSS.\n\nConfiguring CSS-in-JS in app\n\nConfiguring CSS-in-JS is a three-step opt-in process that involves:\n\nA style registry to collect all CSS rules in a render.\nThe new useServerInsertedHTML hook to inject rules before any content that might use them.\nA Client Component that wraps your app with the style registry during initial server-side rendering.\nstyled-jsx\n\nUsing styled-jsx in Client Components requires using v5.1.0. First, create a new registry:\n\napp/registry.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n \nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n \n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n \n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n\nThen, wrap your root layout with the registry:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport StyledJsxRegistry from './registry'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n\nView an example here\n.\n\nStyled Components\n\nBelow is an example of how to configure styled-components@6 or newer:\n\nFirst, enable styled-components in next.config.js.\n\nnext.config.js\nmodule.exports = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n\nThen, use the styled-components API to create a global registry component to collect all CSS style rules generated during a render, and a function to return those rules. Then use the useServerInsertedHTML hook to inject the styles collected in the registry into the <head> HTML tag in the root layout.\n\nlib/registry.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n \nexport default function StyledComponentsRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n \n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n \n  if (typeof window !== 'undefined') return <>{children}</>\n \n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n\nWrap the children of the root layout with the style registry component:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport StyledComponentsRegistry from './lib/registry'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n\nView an example here\n.\n\nGood to know:\n\nDuring server rendering, styles will be extracted to a global registry and flushed to the <head> of your HTML. This ensures the style rules are placed before any content that might use them. In the future, we may use an upcoming React feature to determine where to inject the styles.\nDuring streaming, styles from each chunk will be collected and appended to existing styles. After client-side hydration is complete, styled-components will take over as usual and inject any further dynamic styles.\nWe specifically use a Client Component at the top level of the tree for the style registry because it's more efficient to extract CSS rules this way. It avoids re-generating styles on subsequent server renders, and prevents them from being sent in the Server Component payload.\nFor advanced use cases where you need to configure individual properties of styled-components compilation, you can read our Next.js styled-components API reference to learn more."
  },
  {
    "title": "Optimizing: Images | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing/images",
    "html": "Image Optimization\nExamples\n\nAccording to Web Almanac\n, images account for a huge portion of the typical website’s page weight\n and can have a sizable impact on your website's LCP performance\n.\n\nThe Next.js Image component extends the HTML <img> element with features for automatic image optimization:\n\nSize Optimization: Automatically serve correctly sized images for each device, using modern image formats like WebP and AVIF.\nVisual Stability: Prevent layout shift automatically when images are loading.\nFaster Page Loads: Images are only loaded when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.\nAsset Flexibility: On-demand image resizing, even for images stored on remote servers\n\n🎥 Watch: Learn more about how to use next/image → YouTube (9 minutes)\n.\n\nUsage\nimport Image from 'next/image'\n\nYou can then define the src for your image (either local or remote).\n\nLocal Images\n\nTo use a local image, import your .jpg, .png, or .webp image files.\n\nNext.js will automatically determine the intrisic width and height of your image based on the imported file. These values are used to determine the image ratio and prevent Cumulative Layout Shift\n while your image is loading.\n\napp/page.js\nimport Image from 'next/image'\nimport profilePic from './me.png'\n \nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n\nWarning: Dynamic await import() or require() are not supported. The import must be static so it can be analyzed at build time.\n\nRemote Images\n\nTo use a remote image, the src property should be a URL string.\n\nSince Next.js does not have access to remote files during the build process, you'll need to provide the width, height and optional blurDataURL props manually.\n\nThe width and height attributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. The width and height do not determine the rendered size of the image file. Learn more about Image Sizing.\n\napp/page.js\nimport Image from 'next/image'\n \nexport default function Page() {\n  return (\n    <Image\n      src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n\nTo safely allow optimizing images, define a list of supported URL patterns in next.config.js. Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:\n\nnext.config.js\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 's3.amazonaws.com',\n        port: '',\n        pathname: '/my-bucket/**',\n      },\n    ],\n  },\n}\n\nLearn more about remotePatterns configuration. If you want to use relative URLs for the image src, use a loader.\n\nDomains\n\nSometimes you may want to optimize a remote image, but still use the built-in Next.js Image Optimization API. To do this, leave the loader at its default setting and enter an absolute URL for the Image src prop.\n\nTo protect your application from malicious users, you must define a list of remote hostnames you intend to use with the next/image component.\n\nLearn more about remotePatterns configuration.\n\nLoaders\n\nNote that in the example earlier, a partial URL (\"/me.png\") is provided for a local image. This is possible because of the loader architecture.\n\nA loader is a function that generates the URLs for your image. It modifies the provided src, and generates multiple URLs to request the image at different sizes. These multiple URLs are used in the automatic srcset\n generation, so that visitors to your site will be served an image that is the right size for their viewport.\n\nThe default loader for Next.js applications uses the built-in Image Optimization API, which optimizes images from anywhere on the web, and then serves them directly from the Next.js web server. If you would like to serve your images directly from a CDN or image server, you can write your own loader function with a few lines of JavaScript.\n\nYou can define a loader per-image with the loader prop, or at the application level with the loaderFile configuration.\n\nPriority\n\nYou should add the priority property to the image that will be the Largest Contentful Paint (LCP) element\n for each page. Doing so allows Next.js to specially prioritize the image for loading (e.g. through preload tags or priority hints), leading to a meaningful boost in LCP.\n\nThe LCP element is typically the largest image or text block visible within the viewport of the page. When you run next dev, you'll see a console warning if the LCP element is an <Image> without the priority property.\n\nOnce you've identified the LCP image, you can add the property like this:\n\napp/page.js\nimport Image from 'next/image'\nimport profilePic from '../public/me.png'\n \nexport default function Page() {\n  return <Image src={profilePic} alt=\"Picture of the author\" priority />\n}\n\nSee more about priority in the next/image component documentation.\n\nImage Sizing\n\nOne of the ways that images most commonly hurt performance is through layout shift, where the image pushes other elements around on the page as it loads in. This performance problem is so annoying to users that it has its own Core Web Vital, called Cumulative Layout Shift\n. The way to avoid image-based layout shifts is to always size your images\n. This allows the browser to reserve precisely enough space for the image before it loads.\n\nBecause next/image is designed to guarantee good performance results, it cannot be used in a way that will contribute to layout shift, and must be sized in one of three ways:\n\nAutomatically, using a static import\nManually, by including a width and height property used to determine the image's aspect ratio.\nImplicitly, by using fill which causes the image to expand to fill its parent element.\n\nWhat if I don't know the size of my images?\n\nIf you are accessing images from a source without knowledge of the images' sizes, there are several things you can do:\n\nUse fill\n\nThe fill prop allows your image to be sized by its parent element. Consider using CSS to give the image's parent element space on the page along sizes prop to match any media query break points. You can also use object-fit\n with fill, contain, or cover, and object-position\n to define how the image should occupy that space.\n\nNormalize your images\n\nIf you're serving images from a source that you control, consider modifying your image pipeline to normalize the images to a specific size.\n\nModify your API calls\n\nIf your application is retrieving image URLs using an API call (such as to a CMS), you may be able to modify the API call to return the image dimensions along with the URL.\n\nIf none of the suggested methods works for sizing your images, the next/image component is designed to work well on a page alongside standard <img> elements.\n\nStyling\n\nStyling the Image component is similar to styling a normal <img> element, but there are a few guidelines to keep in mind:\n\nUse className or style, not styled-jsx.\nIn most cases, we recommend using the className prop. This can be an imported CSS Module, a global stylesheet, etc.\nYou can also use the style prop to assign inline styles.\nYou cannot use styled-jsx because it's scoped to the current component (unless you mark the style as global).\nWhen using fill, the parent element must have position: relative\nThis is necessary for the proper rendering of the image element in that layout mode.\nWhen using fill, the parent element must have display: block\nThis is the default for <div> elements but should be specified otherwise.\nExamples\nResponsive\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n \nexport default function Responsive() {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <Image\n        alt=\"Mountains\"\n        // Importing an image will\n        // automatically set the width and height\n        src={mountains}\n        sizes=\"100vw\"\n        // Make the image display full width\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      />\n    </div>\n  )\n}\nFill Container\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n \nexport default function Fill() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridGap: '8px',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',\n      }}\n    >\n      <div style={{ position: 'relative', height: '400px' }}>\n        <Image\n          alt=\"Mountains\"\n          src={mountains}\n          fill\n          sizes=\"(min-width: 808px) 50vw, 100vw\"\n          style={{\n            objectFit: 'cover', // cover, contain, none\n          }}\n        />\n      </div>\n      {/* And more images in the grid... */}\n    </div>\n  )\n}\nBackground Image\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n \nexport default function Background() {\n  return (\n    <Image\n      alt=\"Mountains\"\n      src={mountains}\n      placeholder=\"blur\"\n      quality={100}\n      fill\n      sizes=\"100vw\"\n      style={{\n        objectFit: 'cover',\n      }}\n    />\n  )\n}\n\nFor examples of the Image component used with the various styles, see the Image Component Demo\n.\n\nOther Properties\n\nView all properties available to the next/image component.\n\nConfiguration\n\nThe next/image component and Next.js Image Optimization API can be configured in the next.config.js file. These configurations allow you to enable remote images, define custom image breakpoints, change caching behavior and more.\n\nRead the full image configuration documentation for more information."
  },
  {
    "title": "Building Your Application: Optimizing | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/optimizing",
    "html": "Optimizations\n\nNext.js comes with a variety of built-in optimizations designed to improve your application's speed and Core Web Vitals\n. This guide will cover the optimizations you can leverage to enhance your user experience.\n\nBuilt-in Components\n\nBuilt-in components abstract away the complexity of implementing common UI optimizations. These components are:\n\nImages: Built on the native <img> element. The Image Component optimizes images for performance by lazy loading and automatically resizing images based on device size.\nLink: Built on the native <a> tags. The Link Component prefetches pages in the background, for faster and smoother page transitions.\nScripts: Built on the native <script> tags. The Script Component gives you control over loading and execution of third-party scripts.\nMetadata\n\nMetadata helps search engines understand your content better (which can result in better SEO), and allows you to customize how your content is presented on social media, helping you create a more engaging and consistent user experience across various platforms.\n\nThe Metadata API in Next.js allows you to modify the <head> element of a page. You can configure metadata in two ways:\n\nConfig-based Metadata: Export a static metadata object or a dynamic generateMetadata function in a layout.js or page.js file.\nFile-based Metadata: Add static or dynamically generated special files to route segments.\n\nAdditionally, you can create dynamic Open Graph Images using JSX and CSS with imageResponse constructor.\n\nStatic Assets\n\nNext.js /public folder can be used to serve static assets like images, fonts, and other files. Files inside /public can also be cached by CDN providers so that they are delivered efficiently.\n\nAnalytics and Monitoring\n\nFor large applications, Next.js integrates with popular analytics and monitoring tools to help you understand how your application is performing. Learn more in the OpenTelemetry and Instrumentation guides."
  },
  {
    "title": "Styling: Sass | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/styling/sass",
    "html": "Sass\n\nNext.js has built-in support for integrating with Sass after the package is installed using both the .scss and .sass extensions. You can use component-level Sass via CSS Modules and the .module.scssor .module.sass extension.\n\nFirst, install sass\n:\n\nTerminal\nnpm install --save-dev sass\n\nGood to know:\n\nSass supports two different syntaxes\n, each with their own extension. The .scss extension requires you use the SCSS syntax\n, while the .sass extension requires you use the Indented Syntax (\"Sass\")\n.\n\nIf you're not sure which to choose, start with the .scss extension which is a superset of CSS, and doesn't require you learn the Indented Syntax (\"Sass\").\n\nCustomizing Sass Options\n\nIf you want to configure the Sass compiler, use sassOptions in next.config.js.\n\nnext.config.js\nconst path = require('path')\n \nmodule.exports = {\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n}\nSass Variables\n\nNext.js supports Sass variables exported from CSS Module files.\n\nFor example, using the exported primaryColor Sass variable:\n\napp/variables.module.scss\n$primary-color: #64ff00;\n \n:export {\n  primaryColor: $primary-color;\n}\napp/page.js\n// maps to root `/` URL\n \nimport variables from './variables.module.scss'\n \nexport default function Page() {\n  return <h1 style={{ color: variables.primaryColor }}>Hello, Next.js!</h1>\n}"
  },
  {
    "title": "Styling: Tailwind CSS | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/styling/tailwind-css",
    "html": "Tailwind CSS\n\nTailwind CSS\n is a utility-first CSS framework that works exceptionally well with Next.js.\n\nInstalling Tailwind\n\nInstall the Tailwind CSS packages and run the init command to generate both the tailwind.config.js and postcss.config.js files:\n\nTerminal\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\nConfiguring Tailwind\n\nInside your Tailwind configuration file, add paths to the files that will use Tailwind class names:\n\ntailwind.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { Config } from 'tailwindcss'\n \nconst config: Config = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // Note the addition of the `app` directory.\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n \n    // Or if using `src` directory:\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\nexport default config\n\nYou do not need to modify postcss.config.js.\n\nImporting Styles\n\nAdd the Tailwind CSS directives\n that Tailwind will use to inject its generated styles to a Global Stylesheet in your application, for example:\n\napp/globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nInside the root layout (app/layout.tsx), import the globals.css stylesheet to apply the styles to every route in your application.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \n// These styles apply to every route in the application\nimport './globals.css'\n \nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\nUsing Classes\n\nAfter installing Tailwind CSS and adding the global styles, you can use Tailwind's utility classes in your application.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\nUsage with Turbopack\n\nAs of Next.js 13.1, Tailwind CSS and PostCSS are supported with Turbopack\n."
  },
  {
    "title": "Styling: CSS | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/styling/css",
    "html": "CSS\n\nNext.js supports multiple ways of handling CSS, including:\n\nCSS Modules\nGlobal Styles\nExternal Stylesheets\nCSS Modules\n\nNext.js has built-in support for CSS Modules using the .module.css extension.\n\nCSS Modules locally scope CSS by automatically creating a unique class name. This allows you to use the same class name in different files without worrying about collisions. This behavior makes CSS Modules the ideal way to include component-level CSS.\n\nExample\n\nCSS Modules can be imported into any file inside the app directory:\n\napp/dashboard/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport styles from './styles.module.css'\n \nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section className={styles.dashboard}>{children}</section>\n}\napp/dashboard/styles.module.css\n.dashboard {\n  padding: 24px;\n}\n\nCSS Modules are only enabled for files with the .module.css and .module.sass extensions.\n\nIn production, all CSS Module files will be automatically concatenated into many minified and code-split .css files. These .css files represent hot execution paths in your application, ensuring the minimal amount of CSS is loaded for your application to paint.\n\nGlobal Styles\n\nGlobal styles can be imported into any layout, page, or component inside the app directory.\n\nGood to know:\n\nThis is different from the pages directory, where you can only import global styles inside the _app.js file.\nNext.js does not support usage of global styles unless they are actually global, meaning they can apply to all pages and can live for the lifetime of the application. This is because Next.js uses React's built-in support for stylesheets to integrate with Suspense. This built-in support currently does not remove stylesheets as you navigate between routes. Because of this, we recommend using CSS Modules over global styles.\n\nFor example, consider a stylesheet named app/global.css:\n\napp/global.css\nbody {\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n\nInside the root layout (app/layout.js), import the global.css stylesheet to apply the styles to every route in your application:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\n// These styles apply to every route in the application\nimport './global.css'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\nExternal Stylesheets\n\nStylesheets published by external packages can be imported anywhere in the app directory, including colocated components:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport 'bootstrap/dist/css/bootstrap.css'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n\nGood to know: External stylesheets must be directly imported from an npm package or downloaded and colocated with your codebase. You cannot use <link rel=\"stylesheet\" />.\n\nOrdering and Merging\n\nNext.js optimizes CSS during production builds by automatically chunking (merging) stylesheets. The CSS order is determined by the order in which you import the stylesheets into your application code.\n\nFor example, base-button.module.css will be ordered before page.module.css since <BaseButton> is imported first in <Page>:\n\nbase-button.tsx\nTypeScript\nJavaScript\nTypeScript\nimport styles from './base-button.module.css'\n \nexport function BaseButton() {\n  return <button className={styles.primary} />\n}\npage.ts\nTypeScript\nJavaScript\nTypeScript\nimport { BaseButton } from './base-button'\nimport styles from './page.module.css'\n \nexport function Page() {\n  return <BaseButton className={styles.primary} />\n}\n\nTo maintain a predictable order, we recommend the following:\n\nOnly import a CSS file in a single JS/TS file.\nIf using global class names, import the global styles in the same file in the order you want them to be applied.\nPrefer CSS Modules over global styles.\nUse a consistent naming convention for your CSS modules. For example, using <name>.module.css over <name>.tsx.\nExtract shared styles into a separate shared component.\nIf using Tailwind, import the stylesheet at the top of the file, preferably in the Root Layout.\nTurn off any linters/formatters (e.g., ESLint's sort-import\n) that automatically sort your imports. This can inadvertently affect your CSS since CSS import order matters.\n\nGood to know:\n\nCSS ordering can behave differently in development mode, always ensure to check the build (next build) to verify the final CSS order.\nYou can use the cssChunking option in next.config.js to control how CSS is chunked.\nAdditional Features\n\nNext.js includes additional features to improve the authoring experience of adding styles:\n\nWhen running locally with next dev, local stylesheets (either global or CSS modules) will take advantage of Fast Refresh to instantly reflect changes as edits are saved.\nWhen building for production with next build, CSS files will be bundled into fewer minified .css files to reduce the number of network requests needed to retrieve styles.\nIf you disable JavaScript, styles will still be loaded in the production build (next start). However, JavaScript is still required for next dev to enable Fast Refresh."
  },
  {
    "title": "Building Your Application: Styling | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/styling",
    "html": "Styling\n\nNext.js supports different ways of styling your application, including:\n\nCSS Modules: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.\nGlobal CSS: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.\nTailwind CSS: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.\nSass: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.\nCSS-in-JS: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling.\n\nLearn more about each approach by exploring their respective documentation:"
  },
  {
    "title": "Building Your Application: Caching | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/caching",
    "html": "Caching in Next.js\n\nNext.js improves your application's performance and reduces costs by caching rendering work and data requests. This page provides an in-depth look at Next.js caching mechanisms, the APIs you can use to configure them, and how they interact with each other.\n\nGood to know: This page helps you understand how Next.js works under the hood but is not essential knowledge to be productive with Next.js. Most of Next.js' caching heuristics are determined by your API usage and have defaults for the best performance with zero or minimal configuration. If you instead want to jump to examples, start here.\n\nOverview\n\nHere's a high-level overview of the different caching mechanisms and their purpose:\n\nMechanism\tWhat\tWhere\tPurpose\tDuration\nRequest Memoization\tReturn values of functions\tServer\tRe-use data in a React Component tree\tPer-request lifecycle\nData Cache\tData\tServer\tStore data across user requests and deployments\tPersistent (can be revalidated)\nFull Route Cache\tHTML and RSC payload\tServer\tReduce rendering cost and improve performance\tPersistent (can be revalidated)\nRouter Cache\tRSC Payload\tClient\tReduce server requests on navigation\tUser session or time-based\n\nBy default, Next.js will cache as much as possible to improve performance and reduce cost. This means routes are statically rendered and data requests are cached unless you opt out. The diagram below shows the default caching behavior: when a route is statically rendered at build time and when a static route is first visited.\n\nCaching behavior changes depending on whether the route is statically or dynamically rendered, data is cached or uncached, and whether a request is part of an initial visit or a subsequent navigation. Depending on your use case, you can configure the caching behavior for individual routes and data requests.\n\nRequest Memoization\n\nNext.js extends the fetch API to automatically memoize requests that have the same URL and options. This means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once.\n\nFor example, if you need to use the same data across a route (e.g. in a Layout, Page, and multiple components), you do not have to fetch data at the top of the tree, and forward props between components. Instead, you can fetch data in the components that need it without worrying about the performance implications of making multiple requests across the network for the same data.\n\napp/example.tsx\nTypeScript\nJavaScript\nTypeScript\nasync function getItem() {\n  // The `fetch` function is automatically memoized and the result\n  // is cached\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n \n// This function is called twice, but only executed the first time\nconst item = await getItem() // cache MISS\n \n// The second call could be anywhere in your route\nconst item = await getItem() // cache HIT\n\nHow Request Memoization Works\n\nWhile rendering a route, the first time a particular request is called, its result will not be in memory and it'll be a cache MISS.\nTherefore, the function will be executed, and the data will be fetched from the external source, and the result will be stored in memory.\nSubsequent function calls of the request in the same render pass will be a cache HIT, and the data will be returned from memory without executing the function.\nOnce the route has been rendered and the rendering pass is complete, memory is \"reset\" and all request memoization entries are cleared.\n\nGood to know:\n\nRequest memoization is a React feature, not a Next.js feature. It's included here to show how it interacts with the other caching mechanisms.\nMemoization only applies to the GET method in fetch requests.\nMemoization only applies to the React Component tree, this means:\nIt applies to fetch requests in generateMetadata, generateStaticParams, Layouts, Pages, and other Server Components.\nIt doesn't apply to fetch requests in Route Handlers as they are not a part of the React component tree.\nFor cases where fetch is not suitable (e.g. some database clients, CMS clients, or GraphQL clients), you can use the React cache function to memoize functions.\nDuration\n\nThe cache lasts the lifetime of a server request until the React component tree has finished rendering.\n\nRevalidating\n\nSince the memoization is not shared across server requests and only applies during rendering, there is no need to revalidate it.\n\nOpting out\n\nMemoization only applies to the GET method in fetch requests, other methods, such as POST and DELETE, are not memoized. This default behavior is a React optimization and we do not recommend opting out of it.\n\nTo manage individual requests, you can use the signal\n property from AbortController\n. However, this will not opt requests out of memoization, rather, abort in-flight requests.\n\napp/example.js\nconst { signal } = new AbortController()\nfetch(url, { signal })\nData Cache\n\nNext.js has a built-in Data Cache that persists the result of data fetches across incoming server requests and deployments. This is possible because Next.js extends the native fetch API to allow each request on the server to set its own persistent caching semantics.\n\nGood to know: In the browser, the cache option of fetch indicates how a request will interact with the browser's HTTP cache, in Next.js, the cache option indicates how a server-side request will interact with the server's Data Cache.\n\nYou can use the cache and next.revalidate options of fetch to configure the caching behavior.\n\nHow the Data Cache Works\n\nThe first time a fetch request with the 'force-cache' option is called during rendering, Next.js checks the Data Cache for a cached response.\nIf a cached response is found, it's returned immediately and memoized.\nIf a cached response is not found, the request is made to the data source, the result is stored in the Data Cache, and memoized.\nFor uncached data (e.g. no cache option defined or using { cache: 'no-store' }), the result is always fetched from the data source, and memoized.\nWhether the data is cached or uncached, the requests are always memoized to avoid making duplicate requests for the same data during a React render pass.\n\nDifferences between the Data Cache and Request Memoization\n\nWhile both caching mechanisms help improve performance by re-using cached data, the Data Cache is persistent across incoming requests and deployments, whereas memoization only lasts the lifetime of a request.\n\nDuration\n\nThe Data Cache is persistent across incoming requests and deployments unless you revalidate or opt-out.\n\nRevalidating\n\nCached data can be revalidated in two ways, with:\n\nTime-based Revalidation: Revalidate data after a certain amount of time has passed and a new request is made. This is useful for data that changes infrequently and freshness is not as critical.\nOn-demand Revalidation: Revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated).\nTime-based Revalidation\n\nTo revalidate data at a timed interval, you can use the next.revalidate option of fetch to set the cache lifetime of a resource (in seconds).\n\n// Revalidate at most every hour\nfetch('https://...', { next: { revalidate: 3600 } })\n\nAlternatively, you can use Route Segment Config options to configure all fetch requests in a segment or for cases where you're not able to use fetch.\n\nHow Time-based Revalidation Works\n\nThe first time a fetch request with revalidate is called, the data will be fetched from the external data source and stored in the Data Cache.\nAny requests that are called within the specified timeframe (e.g. 60-seconds) will return the cached data.\nAfter the timeframe, the next request will still return the cached (now stale) data.\nNext.js will trigger a revalidation of the data in the background.\nOnce the data is fetched successfully, Next.js will update the Data Cache with the fresh data.\nIf the background revalidation fails, the previous data will be kept unaltered.\n\nThis is similar to stale-while-revalidate\n behavior.\n\nOn-demand Revalidation\n\nData can be revalidated on-demand by path (revalidatePath) or by cache tag (revalidateTag).\n\nHow On-Demand Revalidation Works\n\nThe first time a fetch request is called, the data will be fetched from the external data source and stored in the Data Cache.\nWhen an on-demand revalidation is triggered, the appropriate cache entries will be purged from the cache.\nThis is different from time-based revalidation, which keeps the stale data in the cache until the fresh data is fetched.\nThe next time a request is made, it will be a cache MISS again, and the data will be fetched from the external data source and stored in the Data Cache.\nOpting out\n\nIf you do not want to cache the response from fetch, you can do the following:\n\nlet data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })\nFull Route Cache\n\nRelated terms:\n\nYou may see the terms Automatic Static Optimization, Static Site Generation, or Static Rendering being used interchangeably to refer to the process of rendering and caching routes of your application at build time.\n\nNext.js automatically renders and caches routes at build time. This is an optimization that allows you to serve the cached route instead of rendering on the server for every request, resulting in faster page loads.\n\nTo understand how the Full Route Cache works, it's helpful to look at how React handles rendering, and how Next.js caches the result:\n\n1. React Rendering on the Server\n\nOn the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual routes segments and Suspense boundaries.\n\nEach chunk is rendered in two steps:\n\nReact renders Server Components into a special data format, optimized for streaming, called the React Server Component Payload.\nNext.js uses the React Server Component Payload and Client Component JavaScript instructions to render HTML on the server.\n\nThis means we don't have to wait for everything to render before caching the work or sending a response. Instead, we can stream a response as work is completed.\n\nWhat is the React Server Component Payload?\n\nThe React Server Component Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The React Server Component Payload contains:\n\nThe rendered result of Server Components\nPlaceholders for where Client Components should be rendered and references to their JavaScript files\nAny props passed from a Server Component to a Client Component\n\nTo learn more, see the Server Components documentation.\n\n2. Next.js Caching on the Server (Full Route Cache)\n\nThe default behavior of Next.js is to cache the rendered result (React Server Component Payload and HTML) of a route on the server. This applies to statically rendered routes at build time, or during revalidation.\n\n3. React Hydration and Reconciliation on the Client\n\nAt request time, on the client:\n\nThe HTML is used to immediately show a fast non-interactive initial preview of the Client and Server Components.\nThe React Server Components Payload is used to reconcile the Client and rendered Server Component trees, and update the DOM.\nThe JavaScript instructions are used to hydrate\n Client Components and make the application interactive.\n4. Next.js Caching on the Client (Router Cache)\n\nThe React Server Component Payload is stored in the client-side Router Cache - a separate in-memory cache, split by individual route segment. This Router Cache is used to improve the navigation experience by storing previously visited routes and prefetching future routes.\n\n5. Subsequent Navigations\n\nOn subsequent navigations or during prefetching, Next.js will check if the React Server Components Payload is stored in the Router Cache. If so, it will skip sending a new request to the server.\n\nIf the route segments are not in the cache, Next.js will fetch the React Server Components Payload from the server, and populate the Router Cache on the client.\n\nStatic and Dynamic Rendering\n\nWhether a route is cached or not at build time depends on whether it's statically or dynamically rendered. Static routes are cached by default, whereas dynamic routes are rendered at request time, and not cached.\n\nThis diagram shows the difference between statically and dynamically rendered routes, with cached and uncached data:\n\nLearn more about static and dynamic rendering.\n\nDuration\n\nBy default, the Full Route Cache is persistent. This means that the render output is cached across user requests.\n\nInvalidation\n\nThere are two ways you can invalidate the Full Route Cache:\n\nRevalidating Data: Revalidating the Data Cache, will in turn invalidate the Router Cache by re-rendering components on the server and caching the new render output.\nRedeploying: Unlike the Data Cache, which persists across deployments, the Full Route Cache is cleared on new deployments.\nOpting out\n\nYou can opt out of the Full Route Cache, or in other words, dynamically render components for every incoming request, by:\n\nUsing a Dynamic Function: This will opt the route out from the Full Route Cache and dynamically render it at request time. The Data Cache can still be used.\nUsing the dynamic = 'force-dynamic' or revalidate = 0 route segment config options: This will skip the Full Route Cache and the Data Cache. Meaning components will be rendered and data fetched on every incoming request to the server. The Router Cache will still apply as it's a client-side cache.\nOpting out of the Data Cache: If a route has a fetch request that is not cached, this will opt the route out of the Full Route Cache. The data for the specific fetch request will be fetched for every incoming request. Other fetch requests that do not opt out of caching will still be cached in the Data Cache. This allows for a hybrid of cached and uncached data.\nClient-side Router Cache\n\nNext.js has an in-memory client-side router cache that stores the RSC payload of route segments, split by layouts, loading states, and pages.\n\nWhen a user navigates between routes, Next.js caches the visited route segments and prefetches the routes the user is likely to navigate to. This results in instant back/forward navigation, no full-page reload between navigations, and preservation of React state and browser state.\n\nWith the Router Cache:\n\nLayouts are cached and reused on navigation (partial rendering).\nLoading states are cached and reused on navigation for instant navigation.\nPages are not cached by default, but are reused during browser backward and forward navigation. You can enable caching for page segments by using the experimental staleTimes config option.\n\nGood to know: This cache specifically applies to Next.js and Server Components, and is different to the browser's bfcache\n, though it has a similar result.\n\nDuration\n\nThe cache is stored in the browser's temporary memory. Two factors determine how long the router cache lasts:\n\nSession: The cache persists across navigation. However, it's cleared on page refresh.\nAutomatic Invalidation Period: The cache of layouts and loading states is automatically invalidated after a specific time. The duration depends on how the resource was prefetched, and if the resource was statically generated:\nDefault Prefetching (prefetch={null} or unspecified): not cached for dynamic pages, 5 minutes for static pages.\nFull Prefetching (prefetch={true} or router.prefetch): 5 minutes for both static & dynamic pages.\n\nWhile a page refresh will clear all cached segments, the automatic invalidation period only affects the individual segment from the time it was prefetched.\n\nGood to know: The experimental staleTimes config option can be used to adjust the automatic invalidation times mentioned above.\n\nInvalidation\n\nThere are two ways you can invalidate the Router Cache:\n\nIn a Server Action:\nRevalidating data on-demand by path with (revalidatePath) or by cache tag with (revalidateTag)\nUsing cookies.set or cookies.delete invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).\nCalling router.refresh will invalidate the Router Cache and make a new request to the server for the current route.\nOpting out\n\nAs of Next.js 15, page segments are opted out by default.\n\nGood to know: You can also opt out of prefetching by setting the prefetch prop of the <Link> component to false.\n\nCache Interactions\n\nWhen configuring the different caching mechanisms, it's important to understand how they interact with each other:\n\nData Cache and Full Route Cache\nRevalidating or opting out of the Data Cache will invalidate the Full Route Cache, as the render output depends on data.\nInvalidating or opting out of the Full Route Cache does not affect the Data Cache. You can dynamically render a route that has both cached and uncached data. This is useful when most of your page uses cached data, but you have a few components that rely on data that needs to be fetched at request time. You can dynamically render without worrying about the performance impact of re-fetching all the data.\nData Cache and Client-side Router cache\nTo immediately invalidate the Data Cache and Router cache, you can use revalidatePath or revalidateTag in a Server Action.\nRevalidating the Data Cache in a Route Handler will not immediately invalidate the Router Cache as the Route Handler isn't tied to a specific route. This means Router Cache will continue to serve the previous payload until a hard refresh, or the automatic invalidation period has elapsed.\nAPIs\n\nThe following table provides an overview of how different Next.js APIs affect caching:\n\nAPI\tRouter Cache\tFull Route Cache\tData Cache\tReact Cache\n<Link prefetch>\tCache\t\t\t\nrouter.prefetch\tCache\t\t\t\nrouter.refresh\tRevalidate\t\t\t\nfetch\t\t\tCache\tCache\nfetch options.cache\t\t\tCache or Opt out\t\nfetch options.next.revalidate\t\tRevalidate\tRevalidate\t\nfetch options.next.tags\t\tCache\tCache\t\nrevalidateTag\tRevalidate (Server Action)\tRevalidate\tRevalidate\t\nrevalidatePath\tRevalidate (Server Action)\tRevalidate\tRevalidate\t\nconst revalidate\t\tRevalidate or Opt out\tRevalidate or Opt out\t\nconst dynamic\t\tCache or Opt out\tCache or Opt out\t\ncookies\tRevalidate (Server Action)\tOpt out\t\t\nheaders, searchParams\t\tOpt out\t\t\ngenerateStaticParams\t\tCache\t\t\nReact.cache\t\t\t\tCache\nunstable_cache\t\t\tCache\t\n<Link>\n\nBy default, the <Link> component automatically prefetches routes from the Full Route Cache and adds the React Server Component Payload to the Router Cache.\n\nTo disable prefetching, you can set the prefetch prop to false. But this will not skip the cache permanently, the route segment will still be cached client-side when the user visits the route.\n\nLearn more about the <Link> component.\n\nrouter.prefetch\n\nThe prefetch option of the useRouter hook can be used to manually prefetch a route. This adds the React Server Component Payload to the Router Cache.\n\nSee the useRouter hook API reference.\n\nrouter.refresh\n\nThe refresh option of the useRouter hook can be used to manually refresh a route. This completely clears the Router Cache, and makes a new request to the server for the current route. refresh does not affect the Data or Full Route Cache.\n\nThe rendered result will be reconciled on the client while preserving React state and browser state.\n\nSee the useRouter hook API reference.\n\nfetch\n\nData returned from fetch is automatically cached in the Data Cache.\n\nIf you do not want to cache the response from fetch, you can do the following:\n\nlet data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })\n\nSee the fetch API Reference for more options.\n\nfetch options.cache\n\nYou can opt individual fetch into caching by setting the cache option to force-cache:\n\n// Opt out of caching\nfetch(`https://...`, { cache: 'force-cache' })\n\nSee the fetch API Reference for more options.\n\nfetch options.next.revalidate\n\nYou can use the next.revalidate option of fetch to set the revalidation period (in seconds) of an individual fetch request. This will revalidate the Data Cache, which in turn will revalidate the Full Route Cache. Fresh data will be fetched, and components will be re-rendered on the server.\n\n// Revalidate at most after 1 hour\nfetch(`https://...`, { next: { revalidate: 3600 } })\n\nSee the fetch API reference for more options.\n\nfetch options.next.tags and revalidateTag\n\nNext.js has a cache tagging system for fine-grained data caching and revalidation.\n\nWhen using fetch or unstable_cache, you have the option to tag cache entries with one or more tags.\nThen, you can call revalidateTag to purge the cache entries associated with that tag.\n\nFor example, you can set a tag when fetching data:\n\n// Cache data with a tag\nfetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })\n\nThen, call revalidateTag with a tag to purge the cache entry:\n\n// Revalidate entries with a specific tag\nrevalidateTag('a')\n\nThere are two places you can use revalidateTag, depending on what you're trying to achieve:\n\nRoute Handlers - to revalidate data in response of a third party event (e.g. webhook). This will not invalidate the Router Cache immediately as the Router Handler isn't tied to a specific route.\nServer Actions - to revalidate data after a user action (e.g. form submission). This will invalidate the Router Cache for the associated route.\nrevalidatePath\n\nrevalidatePath allows you manually revalidate data and re-render the route segments below a specific path in a single operation. Calling the revalidatePath method revalidates the Data Cache, which in turn invalidates the Full Route Cache.\n\nrevalidatePath('/')\n\nThere are two places you can use revalidatePath, depending on what you're trying to achieve:\n\nRoute Handlers - to revalidate data in response to a third party event (e.g. webhook).\nServer Actions - to revalidate data after a user interaction (e.g. form submission, clicking a button).\n\nSee the revalidatePath API reference for more information.\n\nrevalidatePath vs. router.refresh:\n\nCalling router.refresh will clear the Router cache, and re-render route segments on the server without invalidating the Data Cache or the Full Route Cache.\n\nThe difference is that revalidatePath purges the Data Cache and Full Route Cache, whereas router.refresh() does not change the Data Cache and Full Route Cache, as it is a client-side API.\n\nDynamic Functions\n\nDynamic functions like cookies and headers, and the searchParams prop in Pages depend on runtime incoming request information. Using them will opt a route out of the Full Route Cache, in other words, the route will be dynamically rendered.\n\ncookies\n\nUsing cookies.set or cookies.delete in a Server Action invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. to reflect authentication changes).\n\nSee the cookies API reference.\n\nSegment Config Options\n\nThe Route Segment Config options can be used to override the route segment defaults or when you're not able to use the fetch API (e.g. database client or 3rd party libraries).\n\nThe following Route Segment Config options will opt out of the Data Cache and Full Route Cache:\n\nconst dynamic = 'force-dynamic'\nconst revalidate = 0\n\nSee the Route Segment Config documentation for more options.\n\ngenerateStaticParams\n\nFor dynamic segments (e.g. app/blog/[slug]/page.js), paths provided by generateStaticParams are cached in the Full Route Cache at build time. At request time, Next.js will also cache paths that weren't known at build time the first time they're visited.\n\nTo statically render all paths at build time, supply the full list of paths to generateStaticParams:\n\napp/blog/[slug]/page.js\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n\nTo statically render a subset of paths at build time, and the rest the first time they're visited at runtime, return a partial list of paths:\n\napp/blog/[slug]/page.js\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  // Render the first 10 posts at build time\n  return posts.slice(0, 10).map((post) => ({\n    slug: post.slug,\n  }))\n}\n\nTo statically render all paths the first time they're visited, return an empty array (no paths will be rendered at build time) or utilize export const dynamic = 'force-static':\n\napp/blog/[slug]/page.js\nexport async function generateStaticParams() {\n  return []\n}\n\nGood to know: You must return an array from generateStaticParams, even if it's empty. Otherwise, the route will be dynamically rendered.\n\napp/changelog/[slug]/page.js\nexport const dynamic = 'force-static'\n\nTo disable caching at request time, add the export const dynamicParams = false option in a route segment. When this config option is used, only paths provided by generateStaticParams will be served, and other routes will 404 or match (in the case of catch-all routes).\n\nReact cache function\n\nThe React cache function allows you to memoize the return value of a function, allowing you to call the same function multiple times while only executing it once.\n\nSince fetch requests are automatically memoized, you do not need to wrap it in React cache. However, you can use cache to manually memoize data requests for use cases when the fetch API is not suitable. For example, some database clients, CMS clients, or GraphQL clients.\n\nutils/get-item.ts\nTypeScript\nJavaScript\nTypeScript\nimport { cache } from 'react'\nimport db from '@/lib/db'\n \nexport const getItem = cache(async (id: string) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})"
  },
  {
    "title": "Rendering: Runtimes | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes",
    "html": "Runtimes\n\nNext.js has two server runtimes you can use in your application:\n\nThe Node.js Runtime (default) which has access to all Node.js APIs and compatible packages from the ecosystem.\nThe Edge Runtime which contains a more limited set of APIs.\nUse Cases\nThe Node.js runtime is used for rendering your application.\nThe Edge runtime is used for Middleware (routing rules like redirects, rewrites, and setting headers).\nCaveats\nThe Edge runtime does not support all Node.js APIs. Some packages will not work. Learn more about the unsupported APIs in the Edge Runtime.\nThe Edge runtime does not support Incremental Static Regeneration (ISR).\nBoth runtimes can support streaming depending on your deployment infrastructure."
  },
  {
    "title": "Rendering: Composition Patterns | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns",
    "html": "Server and Client Composition Patterns\n\nWhen building React applications, you will need to consider what parts of your application should be rendered on the server or the client. This page covers some recommended composition patterns when using Server and Client Components.\n\nWhen to use Server and Client Components?\n\nHere's a quick summary of the different use cases for Server and Client Components:\n\nWhat do you need to do?\tServer Component\tClient Component\nFetch data\t\n\t\n\nAccess backend resources (directly)\t\n\t\n\nKeep sensitive information on the server (access tokens, API keys, etc)\t\n\t\n\nKeep large dependencies on the server / Reduce client-side JavaScript\t\n\t\n\nAdd interactivity and event listeners (onClick(), onChange(), etc)\t\n\t\n\nUse State and Lifecycle Effects (useState(), useReducer(), useEffect(), etc)\t\n\t\n\nUse browser-only APIs\t\n\t\n\nUse custom hooks that depend on state, effects, or browser-only APIs\t\n\t\n\nUse React Class components\n\t\n\t\nServer Component Patterns\n\nBefore opting into client-side rendering, you may wish to do some work on the server like fetching data, or accessing your database or backend services.\n\nHere are some common patterns when working with Server Components:\n\nSharing data between components\n\nWhen fetching data on the server, there may be cases where you need to share data across different components. For example, you may have a layout and a page that depend on the same data.\n\nInstead of using React Context\n (which is not available on the server) or passing data as props, you can use fetch or React's cache function to fetch the same data in the components that need it, without worrying about making duplicate requests for the same data. This is because React extends fetch to automatically memoize data requests, and the cache function can be used when fetch is not available.\n\nView an example of this pattern.\n\nKeeping Server-only Code out of the Client Environment\n\nSince JavaScript modules can be shared between both Server and Client Components modules, it's possible for code that was only ever intended to be run on the server to sneak its way into the client.\n\nFor example, take the following data-fetching function:\n\nlib/data.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}\n\nAt first glance, it appears that getData works on both the server and the client. However, this function contains an API_KEY, written with the intention that it would only ever be executed on the server.\n\nSince the environment variable API_KEY is not prefixed with NEXT_PUBLIC, it's a private variable that can only be accessed on the server. To prevent your environment variables from being leaked to the client, Next.js replaces private environment variables with an empty string.\n\nAs a result, even though getData() can be imported and executed on the client, it won't work as expected. And while making the variable public would make the function work on the client, you may not want to expose sensitive information to the client.\n\nTo prevent this sort of unintended client usage of server code, we can use the server-only package to give other developers a build-time error if they ever accidentally import one of these modules into a Client Component.\n\nTo use server-only, first install the package:\n\nTerminal\nnpm install server-only\n\nThen import the package into any module that contains server-only code:\n\nlib/data.js\nimport 'server-only'\n \nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n \n  return res.json()\n}\n\nNow, any Client Component that imports getData() will receive a build-time error explaining that this module can only be used on the server.\n\nThe corresponding package client-only can be used to mark modules that contain client-only code – for example, code that accesses the window object.\n\nUsing Third-party Packages and Providers\n\nSince Server Components are a new React feature, third-party packages and providers in the ecosystem are just beginning to add the \"use client\" directive to components that use client-only features like useState, useEffect, and createContext.\n\nToday, many components from npm packages that use client-only features do not yet have the directive. These third-party components will work as expected within Client Components since they have the \"use client\" directive, but they won't work within Server Components.\n\nFor example, let's say you've installed the hypothetical acme-carousel package which has a <Carousel /> component. This component uses useState, but it doesn't yet have the \"use client\" directive.\n\nIf you use <Carousel /> within a Client Component, it will work as expected:\n\napp/gallery.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n \nexport default function Gallery() {\n  const [isOpen, setIsOpen] = useState(false)\n \n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n \n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}\n\nHowever, if you try to use it directly within a Server Component, you'll see an error:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Carousel } from 'acme-carousel'\n \nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n \n      {/* Error: `useState` can not be used within Server Components */}\n      <Carousel />\n    </div>\n  )\n}\n\nThis is because Next.js doesn't know <Carousel /> is using client-only features.\n\nTo fix this, you can wrap third-party components that rely on client-only features in your own Client Components:\n\napp/carousel.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { Carousel } from 'acme-carousel'\n \nexport default Carousel\n\nNow, you can use <Carousel /> directly within a Server Component:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Carousel from './carousel'\n \nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n \n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}\n\nWe don't expect you to need to wrap most third-party components since it's likely you'll be using them within Client Components. However, one exception is providers, since they rely on React state and context, and are typically needed at the root of an application. Learn more about third-party context providers below.\n\nUsing Context Providers\n\nContext providers are typically rendered near the root of an application to share global concerns, like the current theme. Since React context\n is not supported in Server Components, trying to create a context at the root of your application will cause an error:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { createContext } from 'react'\n \n//  createContext is not supported in Server Components\nexport const ThemeContext = createContext({})\n \nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n      </body>\n    </html>\n  )\n}\n\nTo fix this, create your context and render its provider inside of a Client Component:\n\napp/theme-provider.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { createContext } from 'react'\n \nexport const ThemeContext = createContext({})\n \nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}\n\nYour Server Component will now be able to directly render your provider since it's been marked as a Client Component:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport ThemeProvider from './theme-provider'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n\nWith the provider rendered at the root, all other Client Components throughout your app will be able to consume this context.\n\nGood to know: You should render providers as deep as possible in the tree – notice how ThemeProvider only wraps {children} instead of the entire <html> document. This makes it easier for Next.js to optimize the static parts of your Server Components.\n\nAdvice for Library Authors\n\nIn a similar fashion, library authors creating packages to be consumed by other developers can use the \"use client\" directive to mark client entry points of their package. This allows users of the package to import package components directly into their Server Components without having to create a wrapping boundary.\n\nYou can optimize your package by using 'use client' deeper in the tree, allowing the imported modules to be part of the Server Component module graph.\n\nIt's worth noting some bundlers might strip out \"use client\" directives. You can find an example of how to configure esbuild to include the \"use client\" directive in the React Wrap Balancer\n and Vercel Analytics\n repositories.\n\nClient Components\nMoving Client Components Down the Tree\n\nTo reduce the Client JavaScript bundle size, we recommend moving Client Components down your component tree.\n\nFor example, you may have a Layout that has static elements (e.g. logo, links, etc) and an interactive search bar that uses state.\n\nInstead of making the whole layout a Client Component, move the interactive logic to a Client Component (e.g. <SearchBar />) and keep your layout as a Server Component. This means you don't have to send all the component Javascript of the layout to the client.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\n// SearchBar is a Client Component\nimport SearchBar from './searchbar'\n// Logo is a Server Component\nimport Logo from './logo'\n \n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <SearchBar />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}\nPassing props from Server to Client Components (Serialization)\n\nIf you fetch data in a Server Component, you may want to pass data down as props to Client Components. Props passed from the Server to Client Components need to be serializable\n by React.\n\nIf your Client Components depend on data that is not serializable, you can fetch data on the client with a third party library or on the server with a Route Handler.\n\nInterleaving Server and Client Components\n\nWhen interleaving Client and Server Components, it may be helpful to visualize your UI as a tree of components. Starting with the root layout, which is a Server Component, you can then render certain subtrees of components on the client by adding the \"use client\" directive.\n\nWithin those client subtrees, you can still nest Server Components or call Server Actions, however there are some things to keep in mind:\n\nDuring a request-response lifecycle, your code moves from the server to the client. If you need to access data or resources on the server while on the client, you'll be making a new request to the server - not switching back and forth.\nWhen a new request is made to the server, all Server Components are rendered first, including those nested inside Client Components. The rendered result (RSC Payload) will contain references to the locations of Client Components. Then, on the client, React uses the RSC Payload to reconcile Server and Client Components into a single tree.\nSince Client Components are rendered after Server Components, you cannot import a Server Component into a Client Component module (since it would require a new request back to the server). Instead, you can pass a Server Component as props to a Client Component. See the unsupported pattern and supported pattern sections below.\nUnsupported Pattern: Importing Server Components into Client Components\n\nThe following pattern is not supported. You cannot import a Server Component into a Client Component:\n\napp/client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \n// You cannot import a Server Component into a Client Component.\nimport ServerComponent from './Server-Component'\n \nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n \n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n \n      <ServerComponent />\n    </>\n  )\n}\nSupported Pattern: Passing Server Components to Client Components as Props\n\nThe following pattern is supported. You can pass Server Components as a prop to a Client Component.\n\nA common pattern is to use the React children prop to create a \"slot\" in your Client Component.\n\nIn the example below, <ClientComponent> accepts a children prop:\n\napp/client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useState } from 'react'\n \nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n \n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n      {children}\n    </>\n  )\n}\n\n<ClientComponent> doesn't know that children will eventually be filled in by the result of a Server Component. The only responsibility <ClientComponent> has is to decide where children will eventually be placed.\n\nIn a parent Server Component, you can import both the <ClientComponent> and <ServerComponent> and pass <ServerComponent> as a child of <ClientComponent>:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// This pattern works:\n// You can pass a Server Component as a child or prop of a\n// Client Component.\nimport ClientComponent from './client-component'\nimport ServerComponent from './server-component'\n \n// Pages in Next.js are Server Components by default\nexport default function Page() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  )\n}\n\nWith this approach, <ClientComponent> and <ServerComponent> are decoupled and can be rendered independently. In this case, the child <ServerComponent> can be rendered on the server, well before <ClientComponent> is rendered on the client.\n\nGood to know:\n\nThe pattern of \"lifting content up\" has been used to avoid re-rendering a nested child component when a parent component re-renders.\nYou're not limited to the children prop. You can use any prop to pass JSX."
  },
  {
    "title": "Rendering: Partial Prerendering | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/rendering/partial-prerendering",
    "html": "Partial Prerendering\n\nPartial Prerendering (PPR) enables you to combine static and dynamic components together in the same route.\n\nDuring the build, Next.js prerenders as much of the route as possible. If dynamic code is detected, like reading from the incoming request, you can wrap the relevant component with a React Suspense\n boundary. The Suspense boundary fallback will then be included in the prerendered HTML.\n\nNote: Partial Prerendering is an experimental feature and subject to change. It is not ready for production use.\n\n🎥 Watch: Why PPR and how it works → YouTube (10 minutes)\n.\n\nBackground\n\nPPR enables your Next.js server to immediately send prerendered content.\n\nTo prevent client to server waterfalls, dynamic components begin streaming from the server in parallel while serving the initial prerender. This ensures dynamic components can begin rendering before client JavaScript has been loaded in the browser.\n\nTo prevent creating many HTTP requests for each dynamic component, PPR is able to combine the static prerender and dynamic components together into a single HTTP request. This ensures there are not multiple network roundtrips needed for each dynamic component.\n\nUsing Partial Prerendering\nIncremental Adoption (Version 15)\n\nIn Next.js 15, you can incrementally adopt Partial Prerendering in layouts and pages by setting the ppr option in next.config.js to incremental, and exporting the experimental_ppr route config option at the top of the file:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental',\n  },\n}\n \nexport default nextConfig\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent, Fallback } from \"@/app/ui\"\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return {\n     <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n     </>\n  };\n}\n\nGood to know:\n\nRoutes that don't have experimental_ppr will default to false and will not be prerendered using PPR. You need to explicitly opt-in to PPR for each route.\nexperimental_ppr will apply to all children of the route segment, including nested layouts and pages. You don't have to add it to every file, only the top segment of a route.\nTo disable PPR for children segments, you can set experimental_ppr to false in the child segment.\nEnabling PPR (Version 14)\n\nFor version 14, you can enable it by adding the ppr option to your next.config.js file. This will apply to all routes in your application:\n\nnext.config.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: true,\n  },\n}\n \nexport default nextConfig\nDynamic Components\n\nWhen creating the prender for your route during next build, Next.js requires that dynamic functions are wrapped with React Suspense. The fallback is then included in the prerender.\n\nFor example, using functions like cookies() or headers():\n\napp/user.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { cookies } from 'next/headers'\n \nexport function User() {\n  const session = cookies().get('session')?.value\n  return '...'\n}\n\nThis component requires looking at the incoming request to read cookies. To use this with PPR, you should wrap the component with Suspense:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n \nexport const experimental_ppr = true\n \nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}\n\nComponents only opt into dynamic rendering when the value is accessed.\n\nFor example, if you are reading searchParams from a page, you can forward this value to another component as a prop:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Table } from './table'\n \nexport default function Page({\n  searchParams,\n}: {\n  searchParams: { sort: string }\n}) {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Table searchParams={searchParams} />\n    </section>\n  )\n}\n\nInside of the table component, accessing the value from searchParams will make the component run dynamically:\n\napp/table.tsx\nTypeScript\nJavaScript\nTypeScript\nexport function Table({ searchParams }: { searchParams: { sort: string } }) {\n  const sort = searchParams.sort === 'true'\n  return '...'\n}"
  },
  {
    "title": "Rendering: Client Components | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/rendering/client-components",
    "html": "Client Components\n\nClient Components allow you to write interactive UI that is prerendered on the server\n and can use client JavaScript to run in the browser.\n\nThis page will go through how Client Components work, how they're rendered, and when you might use them.\n\nBenefits of Client Rendering\n\nThere are a couple of benefits to doing the rendering work on the client, including:\n\nInteractivity: Client Components can use state, effects, and event listeners, meaning they can provide immediate feedback to the user and update the UI.\nBrowser APIs: Client Components have access to browser APIs, like geolocation\n or localStorage\n.\nUsing Client Components in Next.js\n\nTo use Client Components, you can add the React \"use client\" directive\n at the top of a file, above your imports.\n\n\"use client\" is used to declare a boundary between a Server and Client Component modules. This means that by defining a \"use client\" in a file, all other modules imported into it, including child components, are considered part of the client bundle.\n\napp/counter.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useState } from 'react'\n \nexport default function Counter() {\n  const [count, setCount] = useState(0)\n \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n\nThe diagram below shows that using onClick and useState in a nested component (toggle.js) will cause an error if the \"use client\" directive is not defined. This is because, by default, all components in the App Router are Server Components where these APIs are not available. By defining the \"use client\" directive in toggle.js, you can tell React to enter the client boundary where these APIs are available.\n\nDefining multiple use client entry points:\n\nYou can define multiple \"use client\" entry points in your React Component tree. This allows you to split your application into multiple client bundles.\n\nHowever, \"use client\" doesn't need to be defined in every component that needs to be rendered on the client. Once you define the boundary, all child components and modules imported into it are considered part of the client bundle.\n\nHow are Client Components Rendered?\n\nIn Next.js, Client Components are rendered differently depending on whether the request is part of a full page load (an initial visit to your application or a page reload triggered by a browser refresh) or a subsequent navigation.\n\nFull page load\n\nTo optimize the initial page load, Next.js will use React's APIs to render a static HTML preview on the server for both Client and Server Components. This means, when the user first visits your application, they will see the content of the page immediately, without having to wait for the client to download, parse, and execute the Client Component JavaScript bundle.\n\nOn the server:\n\nReact renders Server Components into a special data format called the React Server Component Payload (RSC Payload), which includes references to Client Components.\nNext.js uses the RSC Payload and Client Component JavaScript instructions to render HTML for the route on the server.\n\nThen, on the client:\n\nThe HTML is used to immediately show a fast non-interactive initial preview of the route.\nThe React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.\nThe JavaScript instructions are used to hydrate\n Client Components and make their UI interactive.\n\nWhat is hydration?\n\nHydration is the process of attaching event listeners to the DOM, to make the static HTML interactive. Behind the scenes, hydration is done with the hydrateRoot\n React API.\n\nSubsequent Navigations\n\nOn subsequent navigations, Client Components are rendered entirely on the client, without the server-rendered HTML.\n\nThis means the Client Component JavaScript bundle is downloaded and parsed. Once the bundle is ready, React will use the RSC Payload to reconcile the Client and Server Component trees, and update the DOM.\n\nGoing back to the Server Environment\n\nSometimes, after you've declared the \"use client\" boundary, you may want to go back to the server environment. For example, you may want to reduce the client bundle size, fetch data on the server, or use an API that is only available on the server.\n\nYou can keep code on the server even though it's theoretically nested inside Client Components by interleaving Client and Server Components and Server Actions. See the Composition Patterns page for more information."
  },
  {
    "title": "Rendering: Server Components | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/rendering/server-components",
    "html": "Server Components\n\nReact Server Components allow you to write UI that can be rendered and optionally cached on the server. In Next.js, the rendering work is further split by route segments to enable streaming and partial rendering, and there are three different server rendering strategies:\n\nStatic Rendering\nDynamic Rendering\nStreaming\n\nThis page will go through how Server Components work, when you might use them, and the different server rendering strategies.\n\nBenefits of Server Rendering\n\nThere are a couple of benefits to doing the rendering work on the server, including:\n\nData Fetching: Server Components allow you to move data fetching to the server, closer to your data source. This can improve performance by reducing time it takes to fetch data needed for rendering, and the number of requests the client needs to make.\nSecurity: Server Components allow you to keep sensitive data and logic on the server, such as tokens and API keys, without the risk of exposing them to the client.\nCaching: By rendering on the server, the result can be cached and reused on subsequent requests and across users. This can improve performance and reduce cost by reducing the amount of rendering and data fetching done on each request.\nPerformance: Server Components give you additional tools to optimize performance from the baseline. For example, if you start with an app composed of entirely Client Components, moving non-interactive pieces of your UI to Server Components can reduce the amount of client-side JavaScript needed. This is beneficial for users with slower internet or less powerful devices, as the browser has less client-side JavaScript to download, parse, and execute.\nInitial Page Load and First Contentful Paint (FCP)\n: On the server, we can generate HTML to allow users to view the page immediately, without waiting for the client to download, parse and execute the JavaScript needed to render the page.\nSearch Engine Optimization and Social Network Shareability: The rendered HTML can be used by search engine bots to index your pages and social network bots to generate social card previews for your pages.\nStreaming: Server Components allow you to split the rendering work into chunks and stream them to the client as they become ready. This allows the user to see parts of the page earlier without having to wait for the entire page to be rendered on the server.\nUsing Server Components in Next.js\n\nBy default, Next.js uses Server Components. This allows you to automatically implement server rendering with no additional configuration, and you can opt into using Client Components when needed, see Client Components.\n\nHow are Server Components rendered?\n\nOn the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual route segments and Suspense Boundaries\n.\n\nEach chunk is rendered in two steps:\n\nReact renders Server Components into a special data format called the React Server Component Payload (RSC Payload).\nNext.js uses the RSC Payload and Client Component JavaScript instructions to render HTML on the server.\n\nThen, on the client:\n\nThe HTML is used to immediately show a fast non-interactive preview of the route - this is for the initial page load only.\nThe React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.\nThe JavaScript instructions are used to hydrate\n Client Components and make the application interactive.\nWhat is the React Server Component Payload (RSC)?\n\nThe RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains:\n\nThe rendered result of Server Components\nPlaceholders for where Client Components should be rendered and references to their JavaScript files\nAny props passed from a Server Component to a Client Component\nServer Rendering Strategies\n\nThere are three subsets of server rendering: Static, Dynamic, and Streaming.\n\nStatic Rendering (Default)\n\nWith Static Rendering, routes are rendered at build time, or in the background after data revalidation. The result is cached and can be pushed to a Content Delivery Network (CDN)\n. This optimization allows you to share the result of the rendering work between users and server requests.\n\nStatic rendering is useful when a route has data that is not personalized to the user and can be known at build time, such as a static blog post or a product page.\n\nDynamic Rendering\n\nWith Dynamic Rendering, routes are rendered for each user at request time.\n\nDynamic rendering is useful when a route has data that is personalized to the user or has information that can only be known at request time, such as cookies or the URL's search params.\n\nDynamic Routes with Cached Data\n\nIn most websites, routes are not fully static or fully dynamic - it's a spectrum. For example, you can have an e-commerce page that uses cached product data that's revalidated at an interval, but also has uncached, personalized customer data.\n\nIn Next.js, you can have dynamically rendered routes that have both cached and uncached data. This is because the RSC Payload and data are cached separately. This allows you to opt into dynamic rendering without worrying about the performance impact of fetching all the data at request time.\n\nLearn more about the full-route cache and Data Cache.\n\nSwitching to Dynamic Rendering\n\nDuring rendering, if a dynamic function or uncached data request is discovered, Next.js will switch to dynamically rendering the whole route. This table summarizes how dynamic functions and data caching affect whether a route is statically or dynamically rendered:\n\nDynamic Functions\tData\tRoute\nNo\tCached\tStatically Rendered\nYes\tCached\tDynamically Rendered\nNo\tNot Cached\tDynamically Rendered\nYes\tNot Cached\tDynamically Rendered\n\nIn the table above, for a route to be fully static, all data must be cached. However, you can have a dynamically rendered route that uses both cached and uncached data fetches.\n\nAs a developer, you do not need to choose between static and dynamic rendering as Next.js will automatically choose the best rendering strategy for each route based on the features and APIs used. Instead, you choose when to cache or revalidate specific data, and you may choose to stream parts of your UI.\n\nDynamic Functions\n\nDynamic functions rely on information that can only be known at request time such as a user's cookies, current requests headers, or the URL's search params. In Next.js, these dynamic APIs are:\n\ncookies()\nheaders()\nunstable_noStore()\nunstable_after():\nsearchParams prop\n\nUsing any of these functions will opt the whole route into dynamic rendering at request time.\n\nStreaming\n\nStreaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering.\n\nStreaming is built into the Next.js App Router by default. This helps improve both the initial page loading performance, as well as UI that depends on slower data fetches that would block rendering the whole route. For example, reviews on a product page.\n\nYou can start streaming route segments using loading.js and UI components with React Suspense. See the Loading UI and Streaming section for more information."
  },
  {
    "title": "Building Your Application: Rendering | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/rendering",
    "html": "Rendering\n\nRendering converts the code you write into user interfaces. React and Next.js allow you to create hybrid web applications where parts of your code can be rendered on the server or the client. This section will help you understand the differences between these rendering environments, strategies, and runtimes.\n\nFundamentals\n\nTo start, it's helpful to be familiar with three foundational web concepts:\n\nThe Environments your application code can be executed in: the server and the client.\nThe Request-Response Lifecycle that's initiated when a user visits or interacts with your application.\nThe Network Boundary that separates server and client code.\nRendering Environments\n\nThere are two environments where web applications can be rendered: the client and the server.\n\nThe client refers to the browser on a user's device that sends a request to a server for your application code. It then turns the response from the server into a user interface.\nThe server refers to the computer in a data center that stores your application code, receives requests from a client, and sends back an appropriate response.\n\nHistorically, developers had to use different languages (e.g. JavaScript, PHP) and frameworks when writing code for the server and the client. With React, developers can use the same language (JavaScript), and the same framework (e.g. Next.js or your framework of choice). This flexibility allows you to seamlessly write code for both environments without context switching.\n\nHowever, each environment has its own set of capabilities and constraints. Therefore, the code you write for the server and the client is not always the same. There are certain operations (e.g. data fetching or managing user state) that are better suited for one environment over the other.\n\nUnderstanding these differences is key to effectively using React and Next.js. We'll cover the differences and use cases in more detail on the Server and Client Components pages, for now, let's continue building on our foundation.\n\nRequest-Response Lifecycle\n\nBroadly speaking, all websites follow the same Request-Response Lifecycle:\n\nUser Action: The user interacts with a web application. This could be clicking a link, submitting a form, or typing a URL directly into the browser's address bar.\nHTTP Request: The client sends an HTTP\n request to the server that contains necessary information about what resources are being requested, what method is being used (e.g. GET, POST), and additional data if necessary.\nServer: The server processes the request and responds with the appropriate resources. This process may take a couple of steps like routing, fetching data, etc.\nHTTP Response: After processing the request, the server sends an HTTP response back to the client. This response contains a status code (which tells the client whether the request was successful or not) and requested resources (e.g. HTML, CSS, JavaScript, static assets, etc).\nClient: The client parses the resources to render the user interface.\nUser Action: Once the user interface is rendered, the user can interact with it, and the whole process starts again.\n\nA major part of building a hybrid web application is deciding how to split the work in the lifecycle, and where to place the Network Boundary.\n\nNetwork Boundary\n\nIn web development, the Network Boundary is a conceptual line that separates the different environments. For example, the client and the server, or the server and the data store.\n\nIn React, you choose where to place the client-server network boundary wherever it makes the most sense.\n\nBehind the scenes, the work is split into two parts: the client module graph and the server module graph. The server module graph contains all the components that are rendered on the server, and the client module graph contains all components that are rendered on the client.\n\nIt may be helpful to think about module graphs as a visual representation of how files in your application depend on each other.\n\nYou can use the React \"use client\" convention to define the boundary. There's also a \"use server\" convention, which tells React to do some computational work on the server.\n\nBuilding Hybrid Applications\n\nWhen working in these environments, it's helpful to think of the flow of the code in your application as unidirectional. In other words, during a response, your application code flows in one direction: from the server to the client.\n\nIf you need to access the server from the client, you send a new request to the server rather than re-use the same request. This makes it easier to understand where to render your components and where to place the Network Boundary.\n\nIn practice, this model encourages developers to think about what they want to execute on the server first, before sending the result to the client and making the application interactive.\n\nThis concept will become clearer when we look at how you can interleave client and server components in the same component tree."
  },
  {
    "title": "Data Fetching: Server Actions and Mutations | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations",
    "html": "Server Actions and Mutations\n\nServer Actions\n are asynchronous functions that are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications.\n\n🎥 Watch: Learn more about mutations with Server Actions → YouTube (10 minutes)\n.\n\nConvention\n\nA Server Action can be defined with the React \"use server\"\n directive. You can place the directive at the top of an async function to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions.\n\nServer Components\n\nServer Components can use the inline function level or module level \"use server\" directive. To inline a Server Action, add \"use server\" to the top of the function body:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n    // Mutate data\n  }\n \n  return '...'\n}\nClient Components\n\nTo call a Server Action in a Client Component, create a new file and add the \"use server\" directive at the top of it. All functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nexport async function create() {}\napp/ui/button.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { create } from '@/app/actions'\n \nexport function Button() {\n  return <Button onClick={create} />\n}\nPassing actions as props\n\nYou can also pass a Server Action to a Client Component as a prop:\n\n<ClientComponent updateItemAction={updateItem} />\napp/client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nexport default function ClientComponent({\n  updateItemAction,\n}: {\n  updateItemAction: (formData: FormData) => void\n}) {\n  return <form action={updateItemAction}>{/* ... */}</form>\n}\n\nUsually, the Next.js TypeScript plugin would flag updateItemAction in client-component.tsx since it is a function which generally can't be serialized across client-server boundaries. However, props named action or ending with Action are assumed to receive Server Actions. This is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function. Runtime type-checking will still ensure you don't accidentally pass a function to a Client Component.\n\nBehavior\nServer actions can be invoked using the action attribute in a <form> element:\nServer Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.\nIn Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.\nAfter hydration, the browser does not refresh on form submission.\nServer Actions are not limited to <form> and can be invoked from event handlers, useEffect, third-party libraries, and other form elements like <button>.\nServer Actions integrate with the Next.js caching and revalidation architecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.\nBehind the scenes, actions use the POST method, and only this HTTP method can invoke them.\nThe arguments and return value of Server Actions must be serializable by React. See the React docs for a list of serializable arguments and values\n.\nServer Actions are functions. This means they can be reused anywhere in your application.\nServer Actions inherit the runtime from the page or layout they are used on.\nServer Actions inherit the Route Segment Config from the page or layout they are used on, including fields like maxDuration.\nExamples\nForms\n\nReact extends the HTML <form>\n element to allow Server Actions to be invoked with the action prop.\n\nWhen invoked in a form, the action automatically receives the FormData\n object. You don't need to use React useState to manage fields, instead, you can extract the data using the native FormData methods\n:\n\napp/invoices/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  async function createInvoice(formData: FormData) {\n    'use server'\n \n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n \n    // mutate data\n    // revalidate cache\n  }\n \n  return <form action={createInvoice}>...</form>\n}\n\nGood to know:\n\nExample: Form with Loading & Error States\nWhen working with forms that have many fields, you may want to consider using the entries()\n method with JavaScript's Object.fromEntries()\n. For example: const rawFormData = Object.fromEntries(formData). One thing to note is that the formData will include additional $ACTION_ properties.\nSee React <form> documentation\n to learn more.\nPassing additional arguments\n\nYou can pass additional arguments to a Server Action using the JavaScript bind method.\n\napp/client-component.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { updateUser } from './actions'\n \nexport function UserProfile({ userId }: { userId: string }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n \n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n\nThe Server Action will receive the userId argument, in addition to the form data:\n\napp/actions.js\n'use server'\n \nexport async function updateUser(userId, formData) {}\n\nGood to know:\n\nAn alternative is to pass arguments as hidden input fields in the form (e.g. <input type=\"hidden\" name=\"userId\" value={userId} />). However, the value will be part of the rendered HTML and will not be encoded.\n.bind works in both Server and Client Components. It also supports progressive enhancement.\nNested form elements\n\nYou can also invoke a Server Action in elements nested inside <form> such as <button>, <input type=\"submit\">, and <input type=\"image\">. These elements accept the formAction prop or event handlers.\n\nThis is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific <button> element for saving a post draft in addition to publishing it. See the React <form> docs\n for more information.\n\nProgrammatic form submission\n\nYou can trigger a form submission programmatically using the requestSubmit()\n method. For example, when the user submits a form using the ⌘ + Enter keyboard shortcut, you can listen for the onKeyDown event:\n\napp/entry.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nexport function Entry() {\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (\n      (e.ctrlKey || e.metaKey) &&\n      (e.key === 'Enter' || e.key === 'NumpadEnter')\n    ) {\n      e.preventDefault()\n      e.currentTarget.form?.requestSubmit()\n    }\n  }\n \n  return (\n    <div>\n      <textarea name=\"entry\" rows={20} required onKeyDown={handleKeyDown} />\n    </div>\n  )\n}\n\nThis will trigger the submission of the nearest <form> ancestor, which will invoke the Server Action.\n\nServer-side form validation\n\nYou can use the HTML attributes like required and type=\"email\" for basic client-side form validation.\n\nFor more advanced server-side validation, you can use a library like zod\n to validate the form fields before mutating the data:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { z } from 'zod'\n \nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n \nexport default async function createUser(formData: FormData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n \n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n \n  // Mutate data\n}\n\nOnce the fields have been validated on the server, you can return a serializable object in your action and use the React useActionState\n hook to show a message to the user.\n\nBy passing the action to useActionState, the action's function signature changes to receive a new prevState or initialState parameter as its first argument.\nuseActionState is a React hook and therefore must be used in a Client Component.\n\nGood to know: These examples use React's useActionState hook, which is available in React 19 RC. If you are using an earlier version of React, use useFormState instead. See the React docs\n for more information.\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { redirect } from 'next/navigation'\n \nexport async function createUser(prevState: any, formData: FormData) {\n  const res = await fetch('https://...')\n  const json = await res.json()\n \n  if (!res.ok) {\n    return { message: 'Please enter a valid email' }\n  }\n \n  redirect('/dashboard')\n}\n\nThen, you can pass your action to the useActionState hook and use the returned state to display an error message.\n\napp/ui/signup.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useActionState } from 'react'\nimport { createUser } from '@/app/actions'\n \nconst initialState = {\n  message: '',\n}\n \nexport function Signup() {\n  const [state, formAction] = useActionState(createUser, initialState)\n \n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\">{state?.message}</p>\n      <button>Sign up</button>\n    </form>\n  )\n}\n\nGood to know:\n\nBefore mutating data, you should always ensure a user is also authorized to perform the action. See Authentication and Authorization.\nPending states\n\nThe useActionState\n hook exposes a pending state that can be used to show a loading indicator while the action is being executed.\n\napp/submit-button.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useActionState } from 'react'\nimport { createUser } from '@/app/actions'\n \nconst initialState = {\n  message: '',\n}\n \nexport function Signup() {\n  const [state, formAction, pending] = useActionState(createUser, initialState)\n \n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\" className=\"sr-only\">\n        {state?.message}\n      </p>\n      <button aria-disabled={pending} type=\"submit\">\n        {pending ? 'Submitting...' : 'Sign up'}\n      </button>\n    </form>\n  )\n}\n\nGood to know: Alternatively, you can also use the useFormStatus\n hook to show a pending state for a specific form.\n\nOptimistic updates\n\nYou can use the React useOptimistic\n hook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n \ntype Message = {\n  message: string\n}\n \nexport function Thread({ messages }: { messages: Message[] }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic<\n    Message[],\n    string\n  >(messages, (state, newMessage) => [...state, { message: newMessage }])\n \n  const formAction = async (formData) => {\n    const message = formData.get('message') as string\n    addOptimisticMessage(message)\n    await send(message)\n  }\n \n  return (\n    <div>\n      {optimisticMessages.map((m, i) => (\n        <div key={i}>{m.message}</div>\n      ))}\n      <form action={formAction}>\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\nEvent handlers\n\nWhile it's common to use Server Actions within <form> elements, they can also be invoked with event handlers such as onClick. For example, to increment a like count:\n\napp/like-button.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n \nexport default function LikeButton({ initialLikes }: { initialLikes: number }) {\n  const [likes, setLikes] = useState(initialLikes)\n \n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n\nYou can also add event handlers to form elements, for example, to save a form field onChange:\n\napp/ui/edit-post.tsx\n'use client'\n \nimport { publishPost, saveDraft } from './actions'\n \nexport default function EditPost() {\n  return (\n    <form action={publishPost}>\n      <textarea\n        name=\"content\"\n        onChange={async (e) => {\n          await saveDraft(e.target.value)\n        }}\n      />\n      <button type=\"submit\">Publish</button>\n    </form>\n  )\n}\n\nFor cases like this, where multiple events might be fired in quick succession, we recommend debouncing to prevent unnecessary Server Action invocations.\n\nuseEffect\n\nYou can use the React useEffect\n hook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example, onKeyDown for app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:\n\napp/view-count.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n \nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n \n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n \n    updateViews()\n  }, [])\n \n  return <p>Total Views: {views}</p>\n}\n\nRemember to consider the behavior and caveats\n of useEffect.\n\nError Handling\n\nWhen an error is thrown, it'll be caught by the nearest error.js or <Suspense> boundary on the client. We recommend using try/catch to return errors to be handled by your UI.\n\nFor example, your Server Action might handle errors from creating a new item by returning a message:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nexport async function createTodo(prevState: any, formData: FormData) {\n  try {\n    // Mutate data\n  } catch (e) {\n    throw new Error('Failed to create task')\n  }\n}\n\nGood to know:\n\nAside from throwing the error, you can also return an object to be handled by useActionState. See Server-side validation and error handling.\nRevalidating data\n\nYou can revalidate the Next.js Cache inside your Server Actions with the revalidatePath API:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { revalidatePath } from 'next/cache'\n \nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidatePath('/posts')\n}\n\nOr invalidate a specific data fetch with a cache tag using revalidateTag:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { revalidateTag } from 'next/cache'\n \nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidateTag('posts')\n}\nRedirecting\n\nIf you would like to redirect the user to a different route after the completion of a Server Action, you can use redirect API. redirect needs to be called outside of the try/catch block:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n \nexport async function createPost(id: string) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\nCookies\n\nYou can get, set, and delete cookies inside a Server Action using the cookies API:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { cookies } from 'next/headers'\n \nexport async function exampleAction() {\n  // Get cookie\n  const value = cookies().get('name')?.value\n \n  // Set cookie\n  cookies().set('name', 'Delba')\n \n  // Delete cookie\n  cookies().delete('name')\n}\n\nSee additional examples for deleting cookies from Server Actions.\n\nSecurity\nAuthentication and authorization\n\nYou should treat Server Actions as you would public-facing API endpoints, and ensure that the user is authorized to perform the action. For example:\n\napp/actions.ts\n'use server'\n \nimport { auth } from './lib'\n \nexport function addItem() {\n  const { user } = auth()\n  if (!user) {\n    throw new Error('You must be signed in to perform this action')\n  }\n \n  // ...\n}\nClosures and encryption\n\nDefining a Server Action inside a component creates a closure\n where the action has access to the outer function's scope. For example, the publish action has access to the publishVersion variable:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  const publishVersion = await getLatestVersion();\n \n  async function publish() {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n \n  return (\n    <form>\n      <button formAction={publish}>Publish</button>\n    </form>\n  );\n}\n\nClosures are useful when you need to capture a snapshot of data (e.g. publishVersion) at the time of rendering so that it can be used later when the action is invoked.\n\nHowever, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build.\n\nGood to know: We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use the React taint APIs to proactively prevent specific data from being sent to the client.\n\nOverwriting encryption keys (advanced)\n\nWhen self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies.\n\nTo mitigate this, you can overwrite the encryption key using the process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY environment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key.\n\nThis is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing.\n\nGood to know: Next.js applications deployed to Vercel automatically handle this.\n\nAllowed origins (advanced)\n\nSince Server Actions can be invoked in a <form> element, this opens them up to CSRF attacks\n.\n\nBehind the scenes, Server Actions use the POST method, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly with SameSite cookies\n being the default.\n\nAs an additional protection, Server Actions in Next.js also compare the Origin header\n to the Host header\n (or X-Forwarded-Host). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it.\n\nFor large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration option serverActions.allowedOrigins option to specify a list of safe origins. The option accepts an array of strings.\n\nnext.config.js\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n\nLearn more about Security and Server Actions\n.\n\nAdditional resources\n\nFor more information on Server Actions, check out the following React docs:\n\nServer Actions\n\"use server\"\n<form>\nuseFormStatus\nuseActionState\nuseOptimistic"
  },
  {
    "title": "Data Fetching: Incremental Static Regeneration (ISR) | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration",
    "html": "Incremental Static Regeneration (ISR)\nExamples\n\nIncremental Static Regeneration (ISR) enables you to:\n\nUpdate static content without rebuilding the entire site\nReduce server load by serving prerendered, static pages for most requests\nEnsure proper cache-control headers are automatically added to pages\nHandle large amounts of content pages without long next build times\n\nHere's a minimal example:\n\napp/blog/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\ninterface Post {\n  id: string\n  title: string\n  content: string\n}\n \n// Next.js will invalidate the cache when a\n// request comes in, at most once every 60 seconds.\nexport const revalidate = 60\n \n// We'll prerender only the params from `generateStaticParams` at build time.\n// If a request comes in for a path that hasn't been generated,\n// Next.js will server-render the page on-demand.\nexport const dynamicParams = true // or false, to 404 on unknown paths\n \nexport async function generateStaticParams() {\n  let posts: Post[] = await fetch('https://api.vercel.app/blog').then((res) =>\n    res.json()\n  )\n  return posts.map((post) => ({\n    id: post.id,\n  }))\n}\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  let post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(\n    (res) => res.json()\n  )\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </main>\n  )\n}\n\nHere's how this example works:\n\nDuring next build, all known blog posts are generated (there are 25 in this example)\nAll requests made to these pages (e.g. /blog/1) are cached and instantaneous\nAfter 60 seconds has passed, the next request will still show the cached (stale) page\nThe cache is invalidated and a new version of the page begins generating in the background\nOnce generated successfully, Next.js will display and cache the updated page\nIf /blog/26 is requested, Next.js will generated and cached this page on-demand\nReference\nRoute segment config\nrevalidate\ndynamicParams\nFunctions\nrevalidatePath\nrevalidateTag\nExamples\nTime-based revalidation\n\nThis fetches and displays a list of blog posts on /blog. After an hour, the cache for this page is invalidated on the next visit to the page. Then, in the background, a new version of the page is generated with the latest blog posts.\n\nexport const revalidate = 3600 // invalidate every hour\n \nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n  return (\n    <main>\n      <h1>Blog Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </main>\n  )\n}\n\nWe recommend setting a high revalidation time. For instance, 1 hour instead of 1 second. If you need more precision, consider using on-demand revalidation. If you need real-time data, consider switching to dynamic rendering.\n\nOn-demand revalidation with revalidatePath\n\nFor a more precise method of revalidation, invalidate pages on-demand with the revalidatePath function.\n\nFor example, this Server Action would get called after adding a new post. Regardless of how you retrieve your data in your Server Component, either using fetch or connecting to a database, this will clear the cache for the entire route and allow the Server Component to fetch fresh data.\n\n'use server'\n \nimport { revalidatePath } from 'next/cache'\n \nexport async function createPost() {\n  // Invalidate the /posts route in the cache\n  revalidatePath('/posts')\n}\n\nView a demo\n and explore the source code\n.\n\nOn-demand revalidation with revalidateTag\n\nFor most use cases, prefer revalidating entire paths. If you need more granular control, you can use the revalidateTag function. For example, you can tag individual fetch calls:\n\nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog', {\n    next: { tags: ['posts'] },\n  })\n  let posts = await data.json()\n  // ...\n}\n\nIf you are using an ORM or connecting to a database, you can use unstable_cache:\n\nimport { unstable_cache } from 'next/cache'\nimport { db, posts } from '@/lib/db'\n \nconst getCachedPosts = unstable_cache(\n  async () => {\n    return await db.select().from(posts)\n  },\n  ['posts'],\n  { revalidate: 3600, tags: ['posts'] }\n)\n \nexport default async function Page() {\n  let posts = getCachedPosts()\n  // ...\n}\n\nYou can then use revalidateTag in a Server Actions or Route Handler:\n\n'use server'\n \nimport { revalidateTag } from 'next/cache'\n \nexport async function createPost() {\n  // Invalidate all data tagged with 'posts' in the cache\n  revalidateTag('posts')\n}\nHandling uncaught exceptions\n\nIf an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data. Learn more about error handling.\n\nCustomizing the cache location\n\nCaching and revalidating pages (with Incremental Static Regeneration) use the same shared cache. When deploying to Vercel\n, the ISR cache is automatically persisted to durable storage.\n\nWhen self-hosting, the ISR cache is stored to the filesystem (on disk) on your Next.js server. This works automatically when self-hosting using both the Pages and App Router.\n\nYou can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application. Learn more.\n\nTroubleshooting\nDebugging cached data in local development\n\nIf you are using the fetch API, you can add additional logging to understand which requests are cached or uncached. Learn more about the logging option.\n\nnext.config.js\nmodule.exports = {\n  logging: {\n    fetches: {\n      fullUrl: true,\n    },\n  },\n}\nVerifying correct production behavior\n\nTo verify your pages are cached and revalidated correctly in production, you can test locally by running next build and then next start to run the production Next.js server.\n\nThis will allow you to test ISR behavior as it would work in a production environment. For further debugging, add the following environment variable to your .env file:\n\n.env\nNEXT_PRIVATE_DEBUG_CACHE=1\n\nThis will make the Next.js server console log ISR cache hits and misses. You can inspect the output to see which pages are generated during next build, as well as how pages are updated as paths are accessed on-demand.\n\nCaveats\nISR is only supported when using the Node.js runtime (default).\nISR is not supported when creating a Static Export.\nIf you have multiple fetch requests in a statically rendered route, and each has a different revalidate frequency, the lowest time will be used for all requests.\nMiddleware won't be executed for on-demand ISR requests, meaning any path rewrites or logic in Middleware will not be applied. Ensure you are revalidating the exact path. For example, /post/1 instead of a rewritten /post-1.\nVersion history\nVersion\tChanges\nv14.1.0\tCustom cacheHandler is stable.\nv13.0.0\tApp Router is introduced.\nv12.2.0\tPages Router: On-Demand ISR is stable\nv12.0.0\tPages Router: Bot-aware ISR fallback added.\nv9.5.0\tPages Router: Stable ISR introduced."
  },
  {
    "title": "Data Fetching: Data Fetching and Caching | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/fetching",
    "html": "Data Fetching and Caching\nExamples\n\nThis guide will walk you through the basics of data fetching and caching in Next.js, providing practical examples and best practices.\n\nHere's a minimal example of data fetching in Next.js:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nThis example demonstrates a basic server-side data fetch using the fetch API in an asynchronous React Server Component.\n\nReference\nfetch\nReact cache\nNext.js unstable_cache\nExamples\nFetching data on the server with the fetch API\n\nThis component will fetch and display a list of blog posts. The response from fetch will be automatically cached.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nIf you are not using any dynamic functions anywhere else in your application, this page will be prerendered during next build to a static page. The data can then be updated using Incremental Static Regeneration.\n\nIf you do not want to cache the response from fetch, you can do the following:\n\nlet data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })\nFetching data on the server with an ORM or database\n\nThis component will always fetch and display a dynamic, up-to-date list of blog posts.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { db, posts } from '@/lib/db'\n \nexport default async function Page() {\n  let allPosts = await db.select().from(posts)\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nThe database call is not cached. This example would opt your Next.js application into server-side rendering. If you want to cache the response and allow the page to be prerendered, see this example.\n\nFetching data on the client\n\nWe recommend first attempting to fetch data on the server-side.\n\nHowever, there are still cases where client-side data fetching makes sense. In these scenarios, you can manually call fetch in a useEffect (not recommended), or lean on popular React libraries in the community (such as SWR\n or React Query\n) for client fetching.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useState, useEffect } from 'react'\n \nexport function Posts() {\n  const [posts, setPosts] = useState(null)\n \n  useEffect(() => {\n    async function fetchPosts() {\n      let res = await fetch('https://api.vercel.app/blog')\n      let data = await res.json()\n      setPosts(data)\n    }\n    fetchPosts()\n  }, [])\n \n  if (!posts) return <div>Loading...</div>\n \n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\nCaching data with an ORM or Database\n\nYou can use the unstable_cache API to cache the response to allow pages to be prerendered when running next build.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { unstable_cache } from 'next/cache'\nimport { db, posts } from '@/lib/db'\n \nconst getPosts = unstable_cache(\n  async () => {\n    return await db.select().from(posts)\n  },\n  ['posts'],\n  { revalidate: 3600, tags: ['posts'] }\n)\n \nexport default async function Page() {\n  const allPosts = await getPosts()\n \n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nThis example caches the result of the database query for 1 hour (3600 seconds). It also adds the cache tag posts which can then be invalidated with Incremental Static Regeneration.\n\nReusing data across multiple functions\n\nNext.js uses APIs like generateMetadata and generateStaticParams where you will need to use the same data fetched in the page.\n\nIf you are using fetch, requests are automatically memoized. This means you can safely call the same URL with the same options, and only one request will be made.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { notFound } from 'next/navigation'\n \ninterface Post {\n  id: string\n  title: string\n  content: string\n}\n \nasync function getPost(id: string) {\n  let res = await fetch(`https://api.example.com/posts/${id}`)\n  let post: Post = await res.json()\n  if (!post) notFound()\n  return post\n}\n \nexport async function generateStaticParams() {\n  let posts = await fetch('https://api.example.com/posts').then((res) =>\n    res.json()\n  )\n \n  return posts.map((post: Post) => ({\n    id: post.id,\n  }))\n}\n \nexport async function generateMetadata({ params }: { params: { id: string } }) {\n  let post = await getPost(params.id)\n \n  return {\n    title: post.title,\n  }\n}\n \nexport default async function Page({ params }: { params: { id: string } }) {\n  let post = await getPost(params.id)\n \n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </article>\n  )\n}\n\nIf you are not using fetch, and instead using an ORM or database directly, you can wrap your data fetch with the React cache function. This will de-duplicate and only make one query.\n\nimport { cache } from 'react'\nimport { db, posts, eq } from '@/lib/db' // Example with Drizzle ORM\nimport { notFound } from 'next/navigation'\n \nexport const getPost = cache(async (id) => {\n  const post = await db.query.posts.findFirst({\n    where: eq(posts.id, parseInt(id)),\n  })\n \n  if (!post) notFound()\n  return post\n})\nRevalidating cached data\n\nLearn more about revalidating cached data with Incremental Static Regeneration.\n\nPatterns\nParallel and sequential data fetching\n\nWhen fetching data inside components, you need to be aware of two data fetching patterns: Parallel and Sequential.\n\nSequential: requests in a component tree are dependent on each other. This can lead to longer loading times.\nParallel: requests in a route are eagerly initiated and will load data at the same time. This reduces the total time it takes to load data.\nSequential data fetching\n\nIf you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are not memoized.\n\nThere may be cases where you want this pattern because one fetch depends on the result of the other. For example, the Playlists component will only start fetching data once the Artist component has finished fetching data because Playlists depends on the artistID prop:\n\napp/artist/[username]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page({\n  params: { username },\n}: {\n  params: { username: string }\n}) {\n  // Get artist information\n  const artist = await getArtist(username)\n \n  return (\n    <>\n      <h1>{artist.name}</h1>\n      {/* Show fallback UI while the Playlists component is loading */}\n      <Suspense fallback={<div>Loading...</div>}>\n        {/* Pass the artist ID to the Playlists component */}\n        <Playlists artistID={artist.id} />\n      </Suspense>\n    </>\n  )\n}\n \nasync function Playlists({ artistID }: { artistID: string }) {\n  // Use the artist ID to fetch playlists\n  const playlists = await getArtistPlaylists(artistID)\n \n  return (\n    <ul>\n      {playlists.map((playlist) => (\n        <li key={playlist.id}>{playlist.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nYou can use loading.js (for route segments) or React <Suspense> (for nested components) to show an instant loading state while React streams in the result.\n\nThis will prevent the whole route from being blocked by data requests, and the user will be able to interact with the parts of the page that are ready.\n\nParallel Data Fetching\n\nBy default, layout and page segments are rendered in parallel. This means requests will be initiated in parallel.\n\nHowever, due to the nature of async/await, an awaited request inside the same segment or component will block any requests below it.\n\nTo fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved.\n\nIn the example below, the getArtist and getAlbums functions are defined outside the Page component and initiated inside the component using Promise.all:\n\napp/artist/[username]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Albums from './albums'\n \nasync function getArtist(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}`)\n  return res.json()\n}\n \nasync function getAlbums(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}/albums`)\n  return res.json()\n}\n \nexport default async function Page({\n  params: { username },\n}: {\n  params: { username: string }\n}) {\n  const artistData = getArtist(username)\n  const albumsData = getAlbums(username)\n \n  // Initiate both requests in parallel\n  const [artist, albums] = await Promise.all([artistData, albumsData])\n \n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Albums list={albums} />\n    </>\n  )\n}\n\nIn addition, you can add a Suspense Boundary to break up the rendering work and show part of the result as soon as possible.\n\nPreloading Data\n\nAnother way to prevent waterfalls is to use the preload pattern by creating an utility function that you eagerly call above blocking requests. For example, checkIsAvailable() blocks <Item/> from rendering, so you can call preload() before it to eagerly initiate <Item/> data dependencies. By the time <Item/> is rendered, its data has already been fetched.\n\nNote that preload function doesn't block checkIsAvailable() from running.\n\ncomponents/Item.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { getItem } from '@/utils/get-item'\n \nexport const preload = (id: string) => {\n  // void evaluates the given expression and returns undefined\n  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void\n  void getItem(id)\n}\nexport default async function Item({ id }: { id: string }) {\n  const result = await getItem(id)\n  // ...\n}\napp/item/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n \nexport default async function Page({\n  params: { id },\n}: {\n  params: { id: string }\n}) {\n  // starting loading item data\n  preload(id)\n  // perform another asynchronous task\n  const isAvailable = await checkIsAvailable()\n \n  return isAvailable ? <Item id={id} /> : null\n}\n\nGood to know: The \"preload\" function can also have any name as it's a pattern, not an API.\n\nUsing React cache and server-only with the Preload Pattern\n\nYou can combine the cache function, the preload pattern, and the server-only package to create a data fetching utility that can be used throughout your app.\n\nutils/get-item.ts\nTypeScript\nJavaScript\nTypeScript\nimport { cache } from 'react'\nimport 'server-only'\n \nexport const preload = (id: string) => {\n  void getItem(id)\n}\n \nexport const getItem = cache(async (id: string) => {\n  // ...\n})\n\nWith this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetching only happens on the server.\n\nThe utils/get-item exports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched.\n\nGood to know:\n\nWe recommend using the server-only package to make sure server data fetching functions are never used on the client.\nPreventing sensitive data from being exposed to the client\n\nWe recommend using React's taint APIs, taintObjectReference\n and taintUniqueValue\n, to prevent whole object instances or sensitive values from being passed to the client.\n\nTo enable tainting in your application, set the Next.js Config experimental.taint option to true:\n\nnext.config.js\nmodule.exports = {\n  experimental: {\n    taint: true,\n  },\n}\n\nThen pass the object or value you want to taint to the experimental_taintObjectReference or experimental_taintUniqueValue functions:\n\napp/utils.ts\nTypeScript\nJavaScript\nTypeScript\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n \nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { getUserData } from './data'\n \nexport async function Page() {\n  const userData = getUserData()\n  return (\n    <ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    />\n  )\n}"
  },
  {
    "title": "Building Your Application: Data Fetching | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching",
    "html": "Data Fetching"
  },
  {
    "title": "Routing: Middleware | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/middleware",
    "html": "Middleware\n\nMiddleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.\n\nMiddleware runs before cached content and routes are matched. See Matching Paths for more details.\n\nUse Cases\n\nIntegrating Middleware into your application can lead to significant improvements in performance, security, and user experience. Some common scenarios where Middleware is particularly effective include:\n\nAuthentication and Authorization: Ensure user identity and check session cookies before granting access to specific pages or API routes.\nServer-Side Redirects: Redirect users at the server level based on certain conditions (e.g., locale, user role).\nPath Rewriting: Support A/B testing, feature rollouts, or legacy paths by dynamically rewriting paths to API routes or pages based on request properties.\nBot Detection: Protect your resources by detecting and blocking bot traffic.\nLogging and Analytics: Capture and analyze request data for insights before processing by the page or API.\nFeature Flagging: Enable or disable features dynamically for seamless feature rollouts or testing.\n\nRecognizing situations where middleware may not be the optimal approach is just as crucial. Here are some scenarios to be mindful of:\n\nComplex Data Fetching and Manipulation: Middleware is not designed for direct data fetching or manipulation, this should be done within Route Handlers or server-side utilities instead.\nHeavy Computational Tasks: Middleware should be lightweight and respond quickly or it can cause delays in page load. Heavy computational tasks or long-running processes should be done within dedicated Route Handlers.\nExtensive Session Management: While Middleware can manage basic session tasks, extensive session management should be managed by dedicated authentication services or within Route Handlers.\nDirect Database Operations: Performing direct database operations within Middleware is not recommended. Database interactions should done within Route Handlers or server-side utilities.\nConvention\n\nUse the file middleware.ts (or .js) in the root of your project to define Middleware. For example, at the same level as pages or app, or inside src if applicable.\n\nNote: While only one middleware.ts file is supported per project, you can still organize your middleware logic modularly. Break out middleware functionalities into separate .ts or .js files and import them into your main middleware.ts file. This allows for cleaner management of route-specific middleware, aggregated in the middleware.ts for centralized control. By enforcing a single middleware file, it simplifies configuration, prevents potential conflicts, and optimizes performance by avoiding multiple middleware layers.\n\nExample\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n \n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\nMatching Paths\n\nMiddleware will be invoked for every route in your project. Given this, it's crucial to use matchers to precisely target or exclude specific routes. The following is the execution order:\n\nheaders from next.config.js\nredirects from next.config.js\nMiddleware (rewrites, redirects, etc.)\nbeforeFiles (rewrites) from next.config.js\nFilesystem routes (public/, _next/static/, pages/, app/, etc.)\nafterFiles (rewrites) from next.config.js\nDynamic Routes (/blog/[slug])\nfallback (rewrites) from next.config.js\n\nThere are two ways to define which paths Middleware will run on:\n\nCustom matcher config\nConditional statements\nMatcher\n\nmatcher allows you to filter Middleware to run on specific paths.\n\nmiddleware.js\nexport const config = {\n  matcher: '/about/:path*',\n}\n\nYou can match a single path or multiple paths with an array syntax:\n\nmiddleware.js\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n\nThe matcher config allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:\n\nmiddleware.js\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n  ],\n}\n\nYou can also bypass Middleware for certain requests by using the missing or has arrays, or a combination of both:\n\nmiddleware.js\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico, sitemap.xml, robots.txt (metadata files)\n     */\n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n \n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      has: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n \n    {\n      source:\n        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',\n      has: [{ type: 'header', key: 'x-present' }],\n      missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],\n    },\n  ],\n}\n\nGood to know: The matcher values need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored.\n\nConfigured matchers:\n\nMUST start with /\nCan include named parameters: /about/:path matches /about/a and /about/b but not /about/a/c\nCan have modifiers on named parameters (starting with :): /about/:path* matches /about/a/b/c because * is zero or more. ? is zero or one and + one or more\nCan use regular expression enclosed in parenthesis: /about/(.*) is the same as /about/:path*\n\nRead more details on path-to-regexp\n documentation.\n\nGood to know: For backward compatibility, Next.js always considers /public as /public/index. Therefore, a matcher of /public/:path will match.\n\nConditional Statements\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n \n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\nNextResponse\n\nThe NextResponse API allows you to:\n\nredirect the incoming request to a different URL\nrewrite the response by displaying a given URL\nSet request headers for API Routes, getServerSideProps, and rewrite destinations\nSet response cookies\nSet response headers\n\nTo produce a response from Middleware, you can:\n\nrewrite to a route (Page or Route Handler) that produces a response\nreturn a NextResponse directly. See Producing a Response\nUsing Cookies\n\nCookies are regular headers. On a Request, they are stored in the Cookie header. On a Response they are in the Set-Cookie header. Next.js provides a convenient way to access and manipulate these cookies through the cookies extension on NextRequest and NextResponse.\n\nFor incoming requests, cookies comes with the following methods: get, getAll, set, and delete cookies. You can check for the existence of a cookie with has or remove all cookies with clear.\nFor outgoing responses, cookies have the following methods get, getAll, set, and delete.\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  // Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request\n  // Getting cookies from the request using the `RequestCookies` API\n  let cookie = request.cookies.get('nextjs')\n  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }\n  const allCookies = request.cookies.getAll()\n  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]\n \n  request.cookies.has('nextjs') // => true\n  request.cookies.delete('nextjs')\n  request.cookies.has('nextjs') // => false\n \n  // Setting cookies on the response using the `ResponseCookies` API\n  const response = NextResponse.next()\n  response.cookies.set('vercel', 'fast')\n  response.cookies.set({\n    name: 'vercel',\n    value: 'fast',\n    path: '/',\n  })\n  cookie = response.cookies.get('vercel')\n  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }\n  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.\n \n  return response\n}\nSetting Headers\n\nYou can set request and response headers using the NextResponse API (setting request headers is available since Next.js v13.0.0).\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  // Clone the request headers and set a new header `x-hello-from-middleware1`\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-hello-from-middleware1', 'hello')\n \n  // You can also set request headers in NextResponse.next\n  const response = NextResponse.next({\n    request: {\n      // New request headers\n      headers: requestHeaders,\n    },\n  })\n \n  // Set a new response header `x-hello-from-middleware2`\n  response.headers.set('x-hello-from-middleware2', 'hello')\n  return response\n}\n\nGood to know: Avoid setting large headers as it might cause 431 Request Header Fields Too Large\n error depending on your backend web server configuration.\n\nCORS\n\nYou can set CORS headers in Middleware to allow cross-origin requests, including simple\n and preflighted\n requests.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse } from 'next/server'\n \nconst allowedOrigins = ['https://acme.com', 'https://my-app.org']\n \nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n \nexport function middleware(request: NextRequest) {\n  // Check the origin from the request\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n \n  // Handle preflighted requests\n  const isPreflight = request.method === 'OPTIONS'\n \n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n \n  // Handle simple requests\n  const response = NextResponse.next()\n \n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n \n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n \n  return response\n}\n \nexport const config = {\n  matcher: '/api/:path*',\n}\n\nGood to know: You can configure CORS headers for individual routes in Route Handlers.\n\nProducing a Response\n\nYou can respond from Middleware directly by returning a Response or NextResponse instance. (This is available since Next.js v13.1.0\n)\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport type { NextRequest } from 'next/server'\nimport { isAuthenticated } from '@lib/auth'\n \n// Limit the middleware to paths starting with `/api/`\nexport const config = {\n  matcher: '/api/:function*',\n}\n \nexport function middleware(request: NextRequest) {\n  // Call our authentication function to check the request\n  if (!isAuthenticated(request)) {\n    // Respond with JSON indicating an error message\n    return Response.json(\n      { success: false, message: 'authentication failed' },\n      { status: 401 }\n    )\n  }\n}\nwaitUntil and NextFetchEvent\n\nThe NextFetchEvent object extends the native FetchEvent\n object, and includes the waitUntil()\n method.\n\nThe waitUntil() method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background.\n\nmiddleware.ts\nimport { NextResponse } from 'next/server'\nimport type { NextFetchEvent, NextRequest } from 'next/server'\n \nexport function middleware(req: NextRequest, event: NextFetchEvent) {\n  event.waitUntil(\n    fetch('https://my-analytics-platform.com', {\n      method: 'POST',\n      body: JSON.stringify({ pathname: req.nextUrl.pathname }),\n    })\n  )\n \n  return NextResponse.next()\n}\nAdvanced Middleware Flags\n\nIn v13.1 of Next.js two additional flags were introduced for middleware, skipMiddlewareUrlNormalize and skipTrailingSlashRedirect to handle advanced use cases.\n\nskipTrailingSlashRedirect disables Next.js redirects for adding or removing trailing slashes. This allows custom handling inside middleware to maintain the trailing slash for some paths but not others, which can make incremental migrations easier.\n\nnext.config.js\nmodule.exports = {\n  skipTrailingSlashRedirect: true,\n}\nmiddleware.js\nconst legacyPrefixes = ['/docs', '/blog']\n \nexport default async function middleware(req) {\n  const { pathname } = req.nextUrl\n \n  if (legacyPrefixes.some((prefix) => pathname.startsWith(prefix))) {\n    return NextResponse.next()\n  }\n \n  // apply trailing slash handling\n  if (\n    !pathname.endsWith('/') &&\n    !pathname.match(/((?!\\.well-known(?:\\/.*)?)(?:[^/]+\\/)*[^/]+\\.\\w+)/)\n  ) {\n    return NextResponse.redirect(\n      new URL(`${req.nextUrl.pathname}/`, req.nextUrl)\n    )\n  }\n}\n\nskipMiddlewareUrlNormalize allows for disabling the URL normalization in Next.js to make handling direct visits and client-transitions the same. In some advanced cases, this option provides full control by using the original URL.\n\nnext.config.js\nmodule.exports = {\n  skipMiddlewareUrlNormalize: true,\n}\nmiddleware.js\nexport default async function middleware(req) {\n  const { pathname } = req.nextUrl\n \n  // GET /_next/data/build-id/hello.json\n \n  console.log(pathname)\n  // with the flag this now /_next/data/build-id/hello.json\n  // without the flag this would be normalized to /hello\n}\nRuntime\n\nMiddleware currently only supports the Edge runtime. The Node.js runtime can not be used.\n\nVersion History\nVersion\tChanges\nv13.1.0\tAdvanced Middleware flags added\nv13.0.0\tMiddleware can modify request headers, response headers, and send responses\nv12.2.0\tMiddleware is stable, please see the upgrade guide\nv12.0.9\tEnforce absolute URLs in Edge Runtime (PR\n)\nv12.0.0\tMiddleware (Beta) added"
  },
  {
    "title": "Routing: Internationalization | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/internationalization",
    "html": "Internationalization\n\nNext.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes.\n\nTerminology\nLocale: An identifier for a set of language and formatting preferences. This usually includes the preferred language of the user and possibly their geographic region.\nen-US: English as spoken in the United States\nnl-NL: Dutch as spoken in the Netherlands\nnl: Dutch, no specific region\nRouting Overview\n\nIt’s recommended to use the user’s language preferences in the browser to select which locale to use. Changing your preferred language will modify the incoming Accept-Language header to your application.\n\nFor example, using the following libraries, you can look at an incoming Request to determine which locale to select, based on the Headers, locales you plan to support, and the default locale.\n\nmiddleware.js\nimport { match } from '@formatjs/intl-localematcher'\nimport Negotiator from 'negotiator'\n \nlet headers = { 'accept-language': 'en-US,en;q=0.5' }\nlet languages = new Negotiator({ headers }).languages()\nlet locales = ['en-US', 'nl-NL', 'nl']\nlet defaultLocale = 'en-US'\n \nmatch(languages, locales, defaultLocale) // -> 'en-US'\n\nRouting can be internationalized by either the sub-path (/fr/products) or domain (my-site.fr/products). With this information, you can now redirect the user based on the locale inside Middleware.\n\nmiddleware.js\nimport { NextResponse } from \"next/server\";\n \nlet locales = ['en-US', 'nl-NL', 'nl']\n \n// Get the preferred locale, similar to the above or using a library\nfunction getLocale(request) { ... }\n \nexport function middleware(request) {\n  // Check if there is any supported locale in the pathname\n  const { pathname } = request.nextUrl\n  const pathnameHasLocale = locales.some(\n    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n \n  if (pathnameHasLocale) return\n \n  // Redirect if there is no locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n  // e.g. incoming request is /products\n  // The new URL is now /en-US/products\n  return NextResponse.redirect(request.nextUrl)\n}\n \nexport const config = {\n  matcher: [\n    // Skip all internal paths (_next)\n    '/((?!_next).*)',\n    // Optional: only run on root (/) URL\n    // '/'\n  ],\n}\n\nFinally, ensure all special files inside app/ are nested under app/[lang]. This enables the Next.js router to dynamically handle different locales in the route, and forward the lang parameter to every layout and page. For example:\n\napp/[lang]/page.js\n// You now have access to the current locale\n// e.g. /en-US/products -> `lang` is \"en-US\"\nexport default async function Page({ params: { lang } }) {\n  return ...\n}\n\nThe root layout can also be nested in the new folder (e.g. app/[lang]/layout.js).\n\nLocalization\n\nChanging displayed content based on the user’s preferred locale, or localization, is not something specific to Next.js. The patterns described below would work the same with any web application.\n\nLet’s assume we want to support both English and Dutch content inside our application. We might maintain two different “dictionaries”, which are objects that give us a mapping from some key to a localized string. For example:\n\ndictionaries/en.json\n{\n  \"products\": {\n    \"cart\": \"Add to Cart\"\n  }\n}\ndictionaries/nl.json\n{\n  \"products\": {\n    \"cart\": \"Toevoegen aan Winkelwagen\"\n  }\n}\n\nWe can then create a getDictionary function to load the translations for the requested locale:\n\napp/[lang]/dictionaries.js\nimport 'server-only'\n \nconst dictionaries = {\n  en: () => import('./dictionaries/en.json').then((module) => module.default),\n  nl: () => import('./dictionaries/nl.json').then((module) => module.default),\n}\n \nexport const getDictionary = async (locale) => dictionaries[locale]()\n\nGiven the currently selected language, we can fetch the dictionary inside of a layout or page.\n\napp/[lang]/page.js\nimport { getDictionary } from './dictionaries'\n \nexport default async function Page({ params: { lang } }) {\n  const dict = await getDictionary(lang) // en\n  return <button>{dict.products.cart}</button> // Add to Cart\n}\n\nBecause all layouts and pages in the app/ directory default to Server Components, we do not need to worry about the size of the translation files affecting our client-side JavaScript bundle size. This code will only run on the server, and only the resulting HTML will be sent to the browser.\n\nStatic Generation\n\nTo generate static routes for a given set of locales, we can use generateStaticParams with any page or layout. This can be global, for example, in the root layout:\n\napp/[lang]/layout.js\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n \nexport default function Root({ children, params }) {\n  return (\n    <html lang={params.lang}>\n      <body>{children}</body>\n    </html>\n  )\n}\nResources\nMinimal i18n routing and translations\nnext-intl\nnext-international\nnext-i18n-router\nparaglide-next\nlingui"
  },
  {
    "title": "Routing: Route Handlers | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-handlers",
    "html": "Route Handlers\n\nRoute Handlers allow you to create custom request handlers for a given route using the Web Request\n and Response\n APIs.\n\nGood to know: Route Handlers are only available inside the app directory. They are the equivalent of API Routes inside the pages directory meaning you do not need to use API Routes and Route Handlers together.\n\nConvention\n\nRoute Handlers are defined in a route.js|ts file inside the app directory:\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET(request: Request) {}\n\nRoute Handlers can be nested anywhere inside the app directory, similar to page.js and layout.js. But there cannot be a route.js file at the same route segment level as page.js.\n\nSupported HTTP Methods\n\nThe following HTTP methods\n are supported: GET, POST, PUT, PATCH, DELETE, HEAD, and OPTIONS. If an unsupported method is called, Next.js will return a 405 Method Not Allowed response.\n\nExtended NextRequest and NextResponse APIs\n\nIn addition to supporting the native Request\n and Response\n APIs, Next.js extends them with NextRequest and NextResponse to provide convenient helpers for advanced use cases.\n\nBehavior\nCaching\n\nRoute Handlers are not cached by default. You can, however, opt into caching for GET methods. To do so, use a route config option such as export const dynamic = 'force-static' in your Route Handler file.\n\napp/items/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const dynamic = 'force-static'\n \nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n \n  return Response.json({ data })\n}\nSpecial Route Handlers\n\nSpecial Route Handlers like sitemap.ts, opengraph-image.tsx, and icon.tsx, and other metadata files remain static by default unless they use dynamic functions or dynamic config options.\n\nRoute Resolution\n\nYou can consider a route the lowest level routing primitive.\n\nThey do not participate in layouts or client-side navigations like page.\nThere cannot be a route.js file at the same route as page.js.\nPage\tRoute\tResult\napp/page.js\tapp/route.js\t\n Conflict\napp/page.js\tapp/api/route.js\t\n Valid\napp/[user]/page.js\tapp/api/route.js\t\n Valid\n\nEach route.js or page.js file takes over all HTTP verbs for that route.\n\napp/page.js\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n \n// ❌ Conflict\n// `app/route.js`\nexport async function POST(request) {}\nExamples\n\nThe following examples show how to combine Route Handlers with other Next.js APIs and features.\n\nRevalidating Cached Data\n\nYou can revalidate cached data using Incremental Static Regeneration (ISR):\n\napp/posts/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const revalidate = 60\n \nexport async function GET() {\n  let data = await fetch('https://api.vercel.app/blog')\n  let posts = await data.json()\n \n  return Response.json(posts)\n}\nDynamic Functions\n\nRoute Handlers can be used with dynamic functions from Next.js, like cookies and headers.\n\nCookies\n\nYou can read or set cookies with cookies from next/headers. This server function can be called directly in a Route Handler, or nested inside of another function.\n\nAlternatively, you can return a new Response using the Set-Cookie\n header.\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { cookies } from 'next/headers'\n \nexport async function GET(request: Request) {\n  const cookieStore = cookies()\n  const token = cookieStore.get('token')\n \n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token.value}` },\n  })\n}\n\nYou can also use the underlying Web APIs to read cookies from the request (NextRequest):\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { type NextRequest } from 'next/server'\n \nexport async function GET(request: NextRequest) {\n  const token = request.cookies.get('token')\n}\nHeaders\n\nYou can read headers with headers from next/headers. This server function can be called directly in a Route Handler, or nested inside of another function.\n\nThis headers instance is read-only. To set headers, you need to return a new Response with new headers.\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { headers } from 'next/headers'\n \nexport async function GET(request: Request) {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n \n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n\nYou can also use the underlying Web APIs to read headers from the request (NextRequest):\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { type NextRequest } from 'next/server'\n \nexport async function GET(request: NextRequest) {\n  const requestHeaders = new Headers(request.headers)\n}\nRedirects\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { redirect } from 'next/navigation'\n \nexport async function GET(request: Request) {\n  redirect('https://nextjs.org/')\n}\nDynamic Route Segments\n\nWe recommend reading the Defining Routes page before continuing.\n\nRoute Handlers can use Dynamic Segments to create request handlers from dynamic data.\n\napp/items/[slug]/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET(\n  request: Request,\n  { params }: { params: { slug: string } }\n) {\n  const slug = params.slug // 'a', 'b', or 'c'\n}\nRoute\tExample URL\tparams\napp/items/[slug]/route.js\t/items/a\t{ slug: 'a' }\napp/items/[slug]/route.js\t/items/b\t{ slug: 'b' }\napp/items/[slug]/route.js\t/items/c\t{ slug: 'c' }\nURL Query Parameters\n\nThe request object passed to the Route Handler is a NextRequest instance, which has some additional convenience methods, including for more easily handling query parameters.\n\napp/api/search/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { type NextRequest } from 'next/server'\n \nexport function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\nStreaming\n\nStreaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about the AI SDK\n.\n\napp/api/chat/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { openai } from '@ai-sdk/openai'\nimport { StreamingTextResponse, streamText } from 'ai'\n \nexport async function POST(req: Request) {\n  const { messages } = await req.json()\n  const result = await streamText({\n    model: openai('gpt-4-turbo'),\n    messages,\n  })\n \n  return new StreamingTextResponse(result.toAIStream())\n}\n\nThese abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly.\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\n// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream\nfunction iteratorToStream(iterator: any) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n \n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n \nfunction sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n \nconst encoder = new TextEncoder()\n \nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n \nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n \n  return new Response(stream)\n}\nRequest Body\n\nYou can read the Request body using the standard Web API methods:\n\napp/items/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function POST(request: Request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\nRequest Body FormData\n\nYou can read the FormData using the request.formData() function:\n\napp/items/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function POST(request: Request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n\nSince formData data are all strings, you may want to use zod-form-data\n to validate the request and retrieve data in the format you prefer (e.g. number).\n\nCORS\n\nYou can set CORS headers for a specific Route Handler using the standard Web API methods:\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET(request: Request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n\nGood to know:\n\nTo add CORS headers to multiple Route Handlers, you can use Middleware or the next.config.js file.\nAlternatively, see our CORS example\n package.\nWebhooks\n\nYou can use a Route Handler to receive webhooks from third-party services:\n\napp/api/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function POST(request: Request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n \n  return new Response('Success!', {\n    status: 200,\n  })\n}\n\nNotably, unlike API Routes with the Pages Router, you do not need to use bodyParser to use any additional configuration.\n\nNon-UI Responses\n\nYou can use Route Handlers to return non-UI content. Note that sitemap.xml, robots.txt, app icons, and open graph images all have built-in support.\n\napp/rss.xml/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport async function GET() {\n  return new Response(\n    `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n \n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n \n</rss>`,\n    {\n      headers: {\n        'Content-Type': 'text/xml',\n      },\n    }\n  )\n}\nSegment Config Options\n\nRoute Handlers use the same route segment configuration as pages and layouts.\n\napp/items/route.ts\nTypeScript\nJavaScript\nTypeScript\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n\nSee the API reference for more details."
  },
  {
    "title": "Routing: Intercepting Routes | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/intercepting-routes",
    "html": "Intercepting Routes\n\nIntercepting routes allows you to load a route from another part of your application within the current layout. This routing paradigm can be useful when you want to display the content of a route without the user switching to a different context.\n\nFor example, when clicking on a photo in a feed, you can display the photo in a modal, overlaying the feed. In this case, Next.js intercepts the /photo/123 route, masks the URL, and overlays it over /feed.\n\nHowever, when navigating to the photo by clicking a shareable URL or by refreshing the page, the entire photo page should render instead of the modal. No route interception should occur.\n\nConvention\n\nIntercepting routes can be defined with the (..) convention, which is similar to relative path convention ../ but for segments.\n\nYou can use:\n\n(.) to match segments on the same level\n(..) to match segments one level above\n(..)(..) to match segments two levels above\n(...) to match segments from the root app directory\n\nFor example, you can intercept the photo segment from within the feed segment by creating a (..)photo directory.\n\nNote that the (..) convention is based on route segments, not the file-system.\n\nExamples\nModals\n\nIntercepting Routes can be used together with Parallel Routes to create modals. This allows you to solve common challenges when building modals, such as:\n\nMaking the modal content shareable through a URL.\nPreserving context when the page is refreshed, instead of closing the modal.\nClosing the modal on backwards navigation rather than going to the previous route.\nReopening the modal on forwards navigation.\n\nConsider the following UI pattern, where a user can open a photo modal from a gallery using client-side navigation, or navigate to the photo page directly from a shareable URL:\n\nIn the above example, the path to the photo segment can use the (..) matcher since @modal is a slot and not a segment. This means that the photo route is only one segment level higher, despite being two file-system levels higher.\n\nSee the Parallel Routes documentation for a step-by-step example, or see our image gallery example\n.\n\nGood to know:\n\nOther examples could include opening a login modal in a top navbar while also having a dedicated /login page, or opening a shopping cart in a side modal."
  },
  {
    "title": "Routing: Parallel Routes | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/parallel-routes",
    "html": "Parallel Routes\n\nParallel Routes allows you to simultaneously or conditionally render one or more pages within the same layout. They are useful for highly dynamic sections of an app, such as dashboards and feeds on social sites.\n\nFor example, considering a dashboard, you can use parallel routes to simultaneously render the team and analytics pages:\n\nSlots\n\nParallel routes are created using named slots. Slots are defined with the @folder convention. For example, the following file structure defines two slots: @analytics and @team:\n\nSlots are passed as props to the shared parent layout. For the example above, the component in app/layout.js now accepts the @analytics and @team slots props, and can render them in parallel alongside the children prop:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Layout({\n  children,\n  team,\n  analytics,\n}: {\n  children: React.ReactNode\n  analytics: React.ReactNode\n  team: React.ReactNode\n}) {\n  return (\n    <>\n      {children}\n      {team}\n      {analytics}\n    </>\n  )\n}\n\nHowever, slots are not route segments and do not affect the URL structure. For example, for /@analytics/views, the URL will be /views since @analytics is a slot.\n\nGood to know:\n\nThe children prop is an implicit slot that does not need to be mapped to a folder. This means app/page.js is equivalent to app/@children/page.js.\nActive state and navigation\n\nBy default, Next.js keeps track of the active state (or subpage) for each slot. However, the content rendered within a slot will depend on the type of navigation:\n\nSoft Navigation: During client-side navigation, Next.js will perform a partial render, changing the subpage within the slot, while maintaining the other slot's active subpages, even if they don't match the current URL.\nHard Navigation: After a full-page load (browser refresh), Next.js cannot determine the active state for the slots that don't match the current URL. Instead, it will render a default.js file for the unmatched slots, or 404 if default.js doesn't exist.\n\nGood to know:\n\nThe 404 for unmatched routes helps ensure that you don't accidentally render a parallel route on a page that it was not intended for.\ndefault.js\n\nYou can define a default.js file to render as a fallback for unmatched slots during the initial load or full-page reload.\n\nConsider the following folder structure. The @team slot has a /settings page, but @analytics does not.\n\nWhen navigating to /settings, the @team slot will render the /settings page while maintaining the currently active page for the @analytics slot.\n\nOn refresh, Next.js will render a default.js for @analytics. If default.js doesn't exist, a 404 is rendered instead.\n\nAdditionally, since children is an implicit slot, you also need to create a default.js file to render a fallback for children when Next.js cannot recover the active state of the parent page.\n\nuseSelectedLayoutSegment(s)\n\nBoth useSelectedLayoutSegment and useSelectedLayoutSegments accept a parallelRoutesKey parameter, which allows you to read the active route segment within a slot.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useSelectedLayoutSegment } from 'next/navigation'\n \nexport default function Layout({ auth }: { auth: React.ReactNode }) {\n  const loginSegment = useSelectedLayoutSegment('auth')\n  // ...\n}\n\nWhen a user navigates to app/@auth/login (or /login in the URL bar), loginSegment will be equal to the string \"login\".\n\nExamples\nConditional Routes\n\nYou can use Parallel Routes to conditionally render routes based on certain conditions, such as user role. For example, to render a different dashboard page for the /admin or /user roles:\n\napp/dashboard/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { checkUserRole } from '@/lib/auth'\n \nexport default function Layout({\n  user,\n  admin,\n}: {\n  user: React.ReactNode\n  admin: React.ReactNode\n}) {\n  const role = checkUserRole()\n  return <>{role === 'admin' ? admin : user}</>\n}\nTab Groups\n\nYou can add a layout inside a slot to allow users to navigate the slot independently. This is useful for creating tabs.\n\nFor example, the @analytics slot has two subpages: /page-views and /visitors.\n\nWithin @analytics, create a layout file to share the tabs between the two pages:\n\napp/@analytics/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/page-views\">Page Views</Link>\n        <Link href=\"/visitors\">Visitors</Link>\n      </nav>\n      <div>{children}</div>\n    </>\n  )\n}\nModals\n\nParallel Routes can be used together with Intercepting Routes to create modals that support deep linking. This allows you to solve common challenges when building modals, such as:\n\nMaking the modal content shareable through a URL.\nPreserving context when the page is refreshed, instead of closing the modal.\nClosing the modal on backwards navigation rather than going to the previous route.\nReopening the modal on forwards navigation.\n\nConsider the following UI pattern, where a user can open a login modal from a layout using client-side navigation, or access a separate /login page:\n\nTo implement this pattern, start by creating a /login route that renders your main login page.\n\napp/login/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Login } from '@/app/ui/login'\n \nexport default function Page() {\n  return <Login />\n}\n\nThen, inside the @auth slot, add default.js file that returns null. This ensures that the modal is not rendered when it's not active.\n\napp/@auth/default.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Default() {\n  return '...'\n}\n\nInside your @auth slot, intercept the /login route by updating the /(.)login folder. Import the <Modal> component and its children into the /(.)login/page.tsx file:\n\napp/@auth/(.)login/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Modal } from '@/app/ui/modal'\nimport { Login } from '@/app/ui/login'\n \nexport default function Page() {\n  return (\n    <Modal>\n      <Login />\n    </Modal>\n  )\n}\n\nGood to know:\n\nThe convention used to intercept the route, e.g. (.), depends on your file-system structure. See Intercepting Routes convention.\nBy separating the <Modal> functionality from the modal content (<Login>), you can ensure any content inside the modal, e.g. forms, are Server Components. See Interleaving Client and Server Components for more information.\nOpening the modal\n\nNow, you can leverage the Next.js router to open and close the modal. This ensures the URL is correctly updated when the modal is open, and when navigating backwards and forwards.\n\nTo open the modal, pass the @auth slot as a prop to the parent layout and render it alongside the children prop.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Layout({\n  auth,\n  children,\n}: {\n  auth: React.ReactNode\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/login\">Open modal</Link>\n      </nav>\n      <div>{auth}</div>\n      <div>{children}</div>\n    </>\n  )\n}\n\nWhen the user clicks the <Link>, the modal will open instead of navigating to the /login page. However, on refresh or initial load, navigating to /login will take the user to the main login page.\n\nClosing the modal\n\nYou can close the modal by calling router.back() or by using the Link component.\n\napp/ui/modal.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useRouter } from 'next/navigation'\n \nexport function Modal({ children }: { children: React.ReactNode }) {\n  const router = useRouter()\n \n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      </button>\n      <div>{children}</div>\n    </>\n  )\n}\n\nWhen using the Link component to navigate away from a page that shouldn't render the @auth slot anymore, we need to make sure the parallel route matches to a component that returns null. For example, when navigating back to the root page, we create a @auth/page.tsx component:\n\napp/ui/modal.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport function Modal({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <Link href=\"/\">Close modal</Link>\n      <div>{children}</div>\n    </>\n  )\n}\napp/@auth/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  return '...'\n}\n\nOr if navigating to any other page (such as /foo, /foo/bar, etc), you can use a catch-all slot:\n\napp/@auth/[...catchAll]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function CatchAll() {\n  return '...'\n}\n\nGood to know:\n\nWe use a catch-all route in our @auth slot to close the modal because of the behavior described in Active state and navigation. Since client-side navigations to a route that no longer match the slot will remain visible, we need to match the slot to a route that returns null to close the modal.\nOther examples could include opening a photo modal in a gallery while also having a dedicated /photo/[id] page, or opening a shopping cart in a side modal.\nView an example\n of modals with Intercepted and Parallel Routes.\nLoading and Error UI\n\nParallel Routes can be streamed independently, allowing you to define independent error and loading states for each route:\n\nSee the Loading UI and Error Handling documentation for more information."
  },
  {
    "title": "Routing: Dynamic Routes | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes",
    "html": "Dynamic Routes\n\nWhen you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or prerendered at build time.\n\nConvention\n\nA Dynamic Segment can be created by wrapping a folder's name in square brackets: [folderName]. For example, [id] or [slug].\n\nDynamic Segments are passed as the params prop to layout, page, route, and generateMetadata functions.\n\nExample\n\nFor example, a blog could include the following route app/blog/[slug]/page.js where [slug] is the Dynamic Segment for blog posts.\n\napp/blog/[slug]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page({ params }: { params: { slug: string } }) {\n  return <div>My Post: {params.slug}</div>\n}\nRoute\tExample URL\tparams\napp/blog/[slug]/page.js\t/blog/a\t{ slug: 'a' }\napp/blog/[slug]/page.js\t/blog/b\t{ slug: 'b' }\napp/blog/[slug]/page.js\t/blog/c\t{ slug: 'c' }\n\nSee the generateStaticParams() page to learn how to generate the params for the segment.\n\nGood to know: Dynamic Segments are equivalent to Dynamic Routes in the pages directory.\n\nGenerating Static Params\n\nThe generateStaticParams function can be used in combination with dynamic route segments to statically generate routes at build time instead of on-demand at request time.\n\napp/blog/[slug]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n \n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n\nThe primary benefit of the generateStaticParams function is its smart retrieval of data. If content is fetched within the generateStaticParams function using a fetch request, the requests are automatically memoized. This means a fetch request with the same arguments across multiple generateStaticParams, Layouts, and Pages will only be made once, which decreases build times.\n\nUse the migration guide if you are migrating from the pages directory.\n\nSee generateStaticParams server function documentation for more information and advanced use cases.\n\nCatch-all Segments\n\nDynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [...folderName].\n\nFor example, app/shop/[...slug]/page.js will match /shop/clothes, but also /shop/clothes/tops, /shop/clothes/tops/t-shirts, and so on.\n\nRoute\tExample URL\tparams\napp/shop/[...slug]/page.js\t/shop/a\t{ slug: ['a'] }\napp/shop/[...slug]/page.js\t/shop/a/b\t{ slug: ['a', 'b'] }\napp/shop/[...slug]/page.js\t/shop/a/b/c\t{ slug: ['a', 'b', 'c'] }\nOptional Catch-all Segments\n\nCatch-all Segments can be made optional by including the parameter in double square brackets: [[...folderName]].\n\nFor example, app/shop/[[...slug]]/page.js will also match /shop, in addition to /shop/clothes, /shop/clothes/tops, /shop/clothes/tops/t-shirts.\n\nThe difference between catch-all and optional catch-all segments is that with optional, the route without the parameter is also matched (/shop in the example above).\n\nRoute\tExample URL\tparams\napp/shop/[[...slug]]/page.js\t/shop\t{}\napp/shop/[[...slug]]/page.js\t/shop/a\t{ slug: ['a'] }\napp/shop/[[...slug]]/page.js\t/shop/a/b\t{ slug: ['a', 'b'] }\napp/shop/[[...slug]]/page.js\t/shop/a/b/c\t{ slug: ['a', 'b', 'c'] }\nTypeScript\n\nWhen using TypeScript, you can add types for params depending on your configured route segment.\n\napp/blog/[slug]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page({ params }: { params: { slug: string } }) {\n  return <h1>My Page</h1>\n}\nRoute\tparams Type Definition\napp/blog/[slug]/page.js\t{ slug: string }\napp/shop/[...slug]/page.js\t{ slug: string[] }\napp/shop/[[...slug]]/page.js\t{ slug?: string[] }\napp/[categoryId]/[itemId]/page.js\t{ categoryId: string, itemId: string }\n\nGood to know: This may be done automatically by the TypeScript plugin in the future."
  },
  {
    "title": "Routing: Project Organization | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/colocation",
    "html": "Project Organization and File Colocation\n\nApart from routing folder and file conventions, Next.js is unopinionated about how you organize and colocate your project files.\n\nThis page shares default behavior and features you can use to organize your project.\n\nSafe colocation by default\nProject organization features\nProject organization strategies\nSafe colocation by default\n\nIn the app directory, nested folder hierarchy defines route structure.\n\nEach folder represents a route segment that is mapped to a corresponding segment in a URL path.\n\nHowever, even though route structure is defined through folders, a route is not publicly accessible until a page.js or route.js file is added to a route segment.\n\nAnd, even when a route is made publicly accessible, only the content returned by page.js or route.js is sent to the client.\n\nThis means that project files can be safely colocated inside route segments in the app directory without accidentally being routable.\n\nGood to know:\n\nThis is different from the pages directory, where any file in pages is considered a route.\nWhile you can colocate your project files in app you don't have to. If you prefer, you can keep them outside the app directory.\nProject organization features\n\nNext.js provides several features to help you organize your project.\n\nPrivate Folders\n\nPrivate folders can be created by prefixing a folder with an underscore: _folderName\n\nThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing.\n\nSince files in the app directory can be safely colocated by default, private folders are not required for colocation. However, they can be useful for:\n\nSeparating UI logic from routing logic.\nConsistently organizing internal files across a project and the Next.js ecosystem.\nSorting and grouping files in code editors.\nAvoiding potential naming conflicts with future Next.js file conventions.\n\nGood to know:\n\nWhile not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern.\nYou can create URL segments that start with an underscore by prefixing the folder name with %5F (the URL-encoded form of an underscore): %5FfolderName.\nIf you don't use private folders, it would be helpful to know Next.js special file conventions to prevent unexpected naming conflicts.\nRoute Groups\n\nRoute groups can be created by wrapping a folder in parenthesis: (folderName)\n\nThis indicates the folder is for organizational purposes and should not be included in the route's URL path.\n\nRoute groups are useful for:\n\nOrganizing routes into groups e.g. by site section, intent, or team.\nEnabling nested layouts in the same route segment level:\nCreating multiple nested layouts in the same segment, including multiple root layouts\nAdding a layout to a subset of routes in a common segment\nsrc Directory\n\nNext.js supports storing application code (including app) inside an optional src directory. This separates application code from project configuration files which mostly live in the root of a project.\n\nModule Path Aliases\n\nNext.js supports Module Path Aliases which make it easier to read and maintain imports across deeply nested project files.\n\napp/dashboard/settings/analytics/page.js\n// before\nimport { Button } from '../../../components/button'\n \n// after\nimport { Button } from '@/components/button'\nProject organization strategies\n\nThere is no \"right\" or \"wrong\" way when it comes to organizing your own files and folders in a Next.js project.\n\nThe following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project.\n\nGood to know: In our examples below, we're using components and lib folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like ui, utils, hooks, styles, etc.\n\nStore project files outside of app\n\nThis strategy stores all application code in shared folders in the root of your project and keeps the app directory purely for routing purposes.\n\nStore project files in top-level folders inside of app\n\nThis strategy stores all application code in shared folders in the root of the app directory.\n\nSplit project files by feature or route\n\nThis strategy stores globally shared application code in the root app directory and splits more specific application code into the route segments that use them."
  },
  {
    "title": "Routing: Route Groups | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups",
    "html": "Route Groups\n\nIn the app directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a Route Group to prevent the folder from being included in the route's URL path.\n\nThis allows you to organize your route segments and project files into logical groups without affecting the URL path structure.\n\nRoute groups are useful for:\n\nOrganizing routes into groups e.g. by site section, intent, or team.\nEnabling nested layouts in the same route segment level:\nCreating multiple nested layouts in the same segment, including multiple root layouts\nAdding a layout to a subset of routes in a common segment\nConvention\n\nA route group can be created by wrapping a folder's name in parenthesis: (folderName)\n\nExamples\nOrganize routes without affecting the URL path\n\nTo organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. (marketing) or (shop).\n\nEven though routes inside (marketing) and (shop) share the same URL hierarchy, you can create a different layout for each group by adding a layout.js file inside their folders.\n\nOpting specific segments into a layout\n\nTo opt specific routes into a layout, create a new route group (e.g. (shop)) and move the routes that share the same layout into the group (e.g. account and cart). The routes outside of the group will not share the layout (e.g. checkout).\n\nCreating multiple root layouts\n\nTo create multiple root layouts, remove the top-level layout.js file, and add a layout.js file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The <html> and <body> tags need to be added to each root layout.\n\nIn the example above, both (marketing) and (shop) have their own root layout.\n\nGood to know:\n\nThe naming of route groups has no special significance other than for organization. They do not affect the URL path.\nRoutes that include a route group should not resolve to the same URL path as other routes. For example, since route groups don't affect URL structure, (marketing)/about/page.js and (shop)/about/page.js would both resolve to /about and cause an error.\nIf you use multiple root layouts without a top-level layout.js file, your home page.js file should be defined in one of the route groups, For example: app/(marketing)/page.js.\nNavigating across multiple root layouts will cause a full page load (as opposed to a client-side navigation). For example, navigating from /cart that uses app/(shop)/layout.js to /blog that uses app/(marketing)/layout.js will cause a full page load. This only applies to multiple root layouts."
  },
  {
    "title": "Routing: Redirecting | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/redirecting",
    "html": "Redirecting\n\nThere are a few ways you can handle redirects in Next.js. This page will go through each available option, use cases, and how to manage large numbers of redirects.\n\nAPI\tPurpose\tWhere\tStatus Code\nredirect\tRedirect user after a mutation or event\tServer Components, Server Actions, Route Handlers\t307 (Temporary) or 303 (Server Action)\npermanentRedirect\tRedirect user after a mutation or event\tServer Components, Server Actions, Route Handlers\t308 (Permanent)\nuseRouter\tPerform a client-side navigation\tEvent Handlers in Client Components\tN/A\nredirects in next.config.js\tRedirect an incoming request based on a path\tnext.config.js file\t307 (Temporary) or 308 (Permanent)\nNextResponse.redirect\tRedirect an incoming request based on a condition\tMiddleware\tAny\nredirect function\n\nThe redirect function allows you to redirect the user to another URL. You can call redirect in Server Components, Route Handlers, and Server Actions.\n\nredirect is often used after a mutation or event. For example, creating a post:\n\napp/actions.tsx\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n \nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n \n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n\nGood to know:\n\nredirect returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.\nredirect internally throws an error so it should be called outside of try/catch blocks.\nredirect can be called in Client Components during the rendering process but not in event handlers. You can use the useRouter hook instead.\nredirect also accepts absolute URLs and can be used to redirect to external links.\nIf you'd like to redirect before the render process, use next.config.js or Middleware.\n\nSee the redirect API reference for more information.\n\npermanentRedirect function\n\nThe permanentRedirect function allows you to permanently redirect the user to another URL. You can call permanentRedirect in Server Components, Route Handlers, and Server Actions.\n\npermanentRedirect is often used after a mutation or event that changes an entity's canonical URL, such as updating a user's profile URL after they change their username:\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n \nexport async function updateUsername(username: string, formData: FormData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n \n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}\n\nGood to know:\n\npermanentRedirect returns a 308 (permanent redirect) status code by default.\npermanentRedirect also accepts absolute URLs and can be used to redirect to external links.\nIf you'd like to redirect before the render process, use next.config.js or Middleware.\n\nSee the permanentRedirect API reference for more information.\n\nuseRouter() hook\n\nIf you need to redirect inside an event handler in a Client Component, you can use the push method from the useRouter hook. For example:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n\nGood to know:\n\nIf you don't need to programmatically navigate a user, you should use a <Link> component.\n\nSee the useRouter API reference for more information.\n\nredirects in next.config.js\n\nThe redirects option in the next.config.js file allows you to redirect an incoming request path to a different destination path. This is useful when you change the URL structure of pages or have a list of redirects that are known ahead of time.\n\nredirects supports path, header, cookie, and query matching, giving you the flexibility to redirect users based on an incoming request.\n\nTo use redirects, add the option to your next.config.js file:\n\nnext.config.js\nmodule.exports = {\n  async redirects() {\n    return [\n      // Basic redirect\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n      // Wildcard path matching\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n        permanent: true,\n      },\n    ]\n  },\n}\n\nSee the redirects API reference for more information.\n\nGood to know:\n\nredirects can return a 307 (Temporary Redirect) or 308 (Permanent Redirect) status code with the permanent option.\nredirects may have a limit on platforms. For example, on Vercel, there's a limit of 1,024 redirects. To manage a large number of redirects (1000+), consider creating a custom solution using Middleware. See managing redirects at scale for more.\nredirects runs before Middleware.\nNextResponse.redirect in Middleware\n\nMiddleware allows you to run code before a request is completed. Then, based on the incoming request, redirect to a different URL using NextResponse.redirect. This is useful if you want to redirect users based on a condition (e.g. authentication, session management, etc) or have a large number of redirects.\n\nFor example, to redirect the user to a /login page if they are not authenticated:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse, NextRequest } from 'next/server'\nimport { authenticate } from 'auth-provider'\n \nexport function middleware(request: NextRequest) {\n  const isAuthenticated = authenticate(request)\n \n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n \n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n \nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n\nGood to know:\n\nMiddleware runs after redirects in next.config.js and before rendering.\n\nSee the Middleware documentation for more information.\n\nManaging redirects at scale (advanced)\n\nTo manage a large number of redirects (1000+), you may consider creating a custom solution using Middleware. This allows you to handle redirects programmatically without having to redeploy your application.\n\nTo do this, you'll need to consider:\n\nCreating and storing a redirect map.\nOptimizing data lookup performance.\n\nNext.js Example: See our Middleware with Bloom filter\n example for an implementation of the recommendations below.\n\n1. Creating and storing a redirect map\n\nA redirect map is a list of redirects that you can store in a database (usually a key-value store) or JSON file.\n\nConsider the following data structure:\n\n{\n  \"/old\": {\n    \"destination\": \"/new\",\n    \"permanent\": true\n  },\n  \"/blog/post-old\": {\n    \"destination\": \"/blog/post-new\",\n    \"permanent\": true\n  }\n}\n\nIn Middleware, you can read from a database such as Vercel's Edge Config\n or Redis\n, and redirect the user based on the incoming request:\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse, NextRequest } from 'next/server'\nimport { get } from '@vercel/edge-config'\n \ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n \nexport async function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n \n  if (redirectData && typeof redirectData === 'string') {\n    const redirectEntry: RedirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n \n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n2. Optimizing data lookup performance\n\nReading a large dataset for every incoming request can be slow and expensive. There are two ways you can optimize data lookup performance:\n\nUse a database that is optimized for fast reads, such as Vercel Edge Config\n or Redis\n.\nUse a data lookup strategy such as a Bloom filter\n to efficiently check if a redirect exists before reading the larger redirects file or database.\n\nConsidering the previous example, you can import a generated bloom filter file into Middleware, then, check if the incoming request pathname exists in the bloom filter.\n\nIf it does, forward the request to a Route Handler which will check the actual file and redirect the user to the appropriate URL. This avoids importing a large redirects file into Middleware, which can slow down every incoming request.\n\nmiddleware.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextResponse, NextRequest } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n \ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n \n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter as any)\n \nexport async function middleware(request: NextRequest) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n \n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n \n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n \n      if (redirectData.ok) {\n        const redirectEntry: RedirectEntry | undefined =\n          await redirectData.json()\n \n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n \n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n \n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n\nThen, in the Route Handler:\n\napp/redirects/route.ts\nTypeScript\nJavaScript\nTypeScript\nimport { NextRequest, NextResponse } from 'next/server'\nimport redirects from '@/app/redirects/redirects.json'\n \ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n \nexport function GET(request: NextRequest) {\n  const pathname = request.nextUrl.searchParams.get('pathname')\n  if (!pathname) {\n    return new Response('Bad Request', { status: 400 })\n  }\n \n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n \n  // Account for bloom filter false positives\n  if (!redirect) {\n    return new Response('No redirect', { status: 400 })\n  }\n \n  // Return the redirect entry\n  return NextResponse.json(redirect)\n}\n\nGood to know:\n\nTo generate a bloom filter, you can use a library like bloom-filters\n.\nYou should validate requests made to your Route Handler to prevent malicious requests."
  },
  {
    "title": "Routing: Loading UI and Streaming | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",
    "html": "Loading UI and Streaming\n\nThe special file loading.js helps you create meaningful Loading UI with React Suspense\n. With this convention, you can show an instant loading state from the server while the content of a route segment loads. The new content is automatically swapped in once rendering is complete.\n\nInstant Loading States\n\nAn instant loading state is fallback UI that is shown immediately upon navigation. You can pre-render loading indicators such as skeletons and spinners, or a small but meaningful part of future screens such as a cover photo, title, etc. This helps users understand the app is responding and provides a better user experience.\n\nCreate a loading state by adding a loading.js file inside a folder.\n\napp/dashboard/loading.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Loading() {\n  // You can add any UI inside Loading, including a Skeleton.\n  return <LoadingSkeleton />\n}\n\nIn the same folder, loading.js will be nested inside layout.js. It will automatically wrap the page.js file and any children below in a <Suspense> boundary.\n\nGood to know:\n\nNavigation is immediate, even with server-centric routing.\nNavigation is interruptible, meaning changing routes does not need to wait for the content of the route to fully load before navigating to another route.\nShared layouts remain interactive while new route segments load.\n\nRecommendation: Use the loading.js convention for route segments (layouts and pages) as Next.js optimizes this functionality.\n\nStreaming with Suspense\n\nIn addition to loading.js, you can also manually create Suspense Boundaries for your own UI components. The App Router supports streaming with Suspense\n for both Node.js and Edge runtimes.\n\nGood to know:\n\nSome browsers\n buffer a streaming response. You may not see the streamed response until the response exceeds 1024 bytes. This typically only affects “hello world” applications, but not real applications.\nWhat is Streaming?\n\nTo learn how Streaming works in React and Next.js, it's helpful to understand Server-Side Rendering (SSR) and its limitations.\n\nWith SSR, there's a series of steps that need to be completed before a user can see and interact with a page:\n\nFirst, all data for a given page is fetched on the server.\nThe server then renders the HTML for the page.\nThe HTML, CSS, and JavaScript for the page are sent to the client.\nA non-interactive user interface is shown using the generated HTML, and CSS.\nFinally, React hydrates\n the user interface to make it interactive.\n\nThese steps are sequential and blocking, meaning the server can only render the HTML for a page once all the data has been fetched. And, on the client, React can only hydrate the UI once the code for all components in the page has been downloaded.\n\nSSR with React and Next.js helps improve the perceived loading performance by showing a non-interactive page to the user as soon as possible.\n\nHowever, it can still be slow as all data fetching on server needs to be completed before the page can be shown to the user.\n\nStreaming allows you to break down the page's HTML into smaller chunks and progressively send those chunks from the server to the client.\n\nThis enables parts of the page to be displayed sooner, without waiting for all the data to load before any UI can be rendered.\n\nStreaming works well with React's component model because each component can be considered a chunk. Components that have higher priority (e.g. product information) or that don't rely on data can be sent first (e.g. layout), and React can start hydration earlier. Components that have lower priority (e.g. reviews, related products) can be sent in the same server request after their data has been fetched.\n\nStreaming is particularly beneficial when you want to prevent long data requests from blocking the page from rendering as it can reduce the Time To First Byte (TTFB)\n and First Contentful Paint (FCP)\n. It also helps improve Time to Interactive (TTI)\n, especially on slower devices.\n\nExample\n\n<Suspense> works by wrapping a component that performs an asynchronous action (e.g. fetch data), showing fallback UI (e.g. skeleton, spinner) while it's happening, and then swapping in your component once the action completes.\n\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n \nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n\nBy using Suspense, you get the benefits of:\n\nStreaming Server Rendering - Progressively rendering HTML from the server to the client.\nSelective Hydration - React prioritizes what components to make interactive first based on user interaction.\n\nFor more Suspense examples and use cases, please see the React Documentation\n.\n\nSEO\nNext.js will wait for data fetching inside generateMetadata to complete before streaming UI to the client. This guarantees the first part of a streamed response includes <head> tags.\nSince streaming is server-rendered, it does not impact SEO. You can use the Rich Results Test\n tool from Google to see how your page appears to Google's web crawlers and view the serialized HTML (source\n).\nStatus Codes\n\nWhen streaming, a 200 status code will be returned to signal that the request was successful.\n\nThe server can still communicate errors or issues to the client within the streamed content itself, for example, when using redirect or notFound. Since the response headers have already been sent to the client, the status code of the response cannot be updated. This does not affect SEO."
  },
  {
    "title": "Routing: Error Handling | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/error-handling",
    "html": "Error Handling\n\nErrors can be divided into two categories: expected errors and uncaught exceptions:\n\nModel expected errors as return values: Avoid using try/catch for expected errors in Server Actions. Use useActionState\n to manage these errors and return them to the client.\nUse error boundaries for unexpected errors: Implement error boundaries using error.tsx and global-error.tsx files to handle unexpected errors and provide a fallback UI.\n\nGood to know: These examples use React's useActionState hook, which is available in React 19 RC. If you are using an earlier version of React, use useFormState instead. See the React docs\n for more information.\n\nHandling Expected Errors\n\nExpected errors are those that can occur during the normal operation of the application, such as those from server-side form validation or failed requests. These errors should be handled explicitly and returned to the client.\n\nHandling Expected Errors from Server Actions\n\nUse the useActionState\n hook to manage the state of Server Actions, including handling errors. This approach avoids try/catch blocks for expected errors, which should be modeled as return values rather than thrown exceptions.\n\napp/actions.ts\nTypeScript\nJavaScript\nTypeScript\n'use server'\n \nimport { redirect } from 'next/navigation'\n \nexport async function createUser(prevState: any, formData: FormData) {\n  const res = await fetch('https://...')\n  const json = await res.json()\n \n  if (!res.ok) {\n    return { message: 'Please enter a valid email' }\n  }\n \n  redirect('/dashboard')\n}\n\nThen, you can pass your action to the useActionState hook and use the returned state to display an error message.\n\napp/ui/signup.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { useActionState } from 'react'\nimport { createUser } from '@/app/actions'\n \nconst initialState = {\n  message: '',\n}\n \nexport function Signup() {\n  const [state, formAction] = useActionState(createUser, initialState)\n \n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\">{state?.message}</p>\n      <button>Sign up</button>\n    </form>\n  )\n}\n\nYou could also use the returned state to display a toast message from the client component.\n\nHandling Expected Errors from Server Components\n\nWhen fetching data inside of a Server Component, you can use the response to conditionally render an error message or redirect.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default async function Page() {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n \n  if (!res.ok) {\n    return 'There was an error.'\n  }\n \n  return '...'\n}\nUncaught Exceptions\n\nUncaught exceptions are unexpected errors that indicate bugs or issues that should not occur during the normal flow of your application. These should be handled by throwing errors, which will then be caught by error boundaries.\n\nCommon: Handle uncaught errors below the root layout with error.js.\nOptional: Handle granular uncaught errors with nested error.js files (e.g. app/dashboard/error.js)\nUncommon: Handle uncaught errors in the root layout with global-error.js.\nUsing Error Boundaries\n\nNext.js uses error boundaries to handle uncaught exceptions. Error boundaries catch errors in their child components and display a fallback UI instead of the component tree that crashed.\n\nCreate an error boundary by adding an error.tsx file inside a route segment and exporting a React component:\n\napp/dashboard/error.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client' // Error boundaries must be Client Components\n \nimport { useEffect } from 'react'\n \nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n \n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n\nIf you want errors to bubble up to the parent error boundary, you can throw when rendering the error component.\n\nHandling Errors in Nested Routes\n\nErrors will bubble up to the nearest parent error boundary. This allows for granular error handling by placing error.tsx files at different levels in the route hierarchy.\n\nHandling Global Errors\n\nWhile less common, you can handle errors in the root layout using app/global-error.js, located in the root app directory, even when leveraging internationalization. Global error UI must define its own <html> and <body> tags, since it is replacing the root layout or template when active.\n\napp/global-error.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client' // Error boundaries must be Client Components\n \nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    // global-error must include html and body tags\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}"
  },
  {
    "title": "Routing: Linking and Navigating | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating",
    "html": "Linking and Navigating\n\nThere are four ways to navigate between routes in Next.js:\n\nUsing the <Link> Component\nUsing the useRouter hook (Client Components)\nUsing the redirect function (Server Components)\nUsing the native History API\n\nThis page will go through how to use each of these options, and dive deeper into how navigation works.\n\n<Link> Component\n\n<Link> is a built-in component that extends the HTML <a> tag to provide prefetching and client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js.\n\nYou can use it by importing it from next/link, and passing a href prop to the component:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n\nThere are other optional props you can pass to <Link>. See the API reference for more.\n\nExamples\nLinking to Dynamic Segments\n\nWhen linking to dynamic segments, you can use template literals and interpolation\n to generate a list of links. For example, to generate a list of blog posts:\n\napp/blog/PostList.js\nimport Link from 'next/link'\n \nexport default function PostList({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\nChecking Active Links\n\nYou can use usePathname() to determine if a link is active. For example, to add a class to the active link, you can check if the current pathname matches the href of the link:\n\n@/app/ui/nav-links.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n \nexport function Links() {\n  const pathname = usePathname()\n \n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n \n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\nScrolling to an id\n\nThe default behavior of the Next.js App Router is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation.\n\nIf you'd like to scroll to a specific id on navigation, you can append your URL with a # hash link or just pass a hash link to the href prop. This is possible since <Link> renders to an <a> element.\n\n<Link href=\"/dashboard#settings\">Settings</Link>\n \n// Output\n<a href=\"/dashboard#settings\">Settings</a>\n\nGood to know:\n\nNext.js will scroll to the Page if it is not visible in the viewport upon navigation.\nDisabling scroll restoration\n\nThe default behavior of the Next.js App Router is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation. If you'd like to disable this behavior, you can pass scroll={false} to the <Link> component, or scroll: false to router.push() or router.replace().\n\n// next/link\n<Link href=\"/dashboard\" scroll={false}>\n  Dashboard\n</Link>\n// useRouter\nimport { useRouter } from 'next/navigation'\n \nconst router = useRouter()\n \nrouter.push('/dashboard', { scroll: false })\nuseRouter() hook\n\nThe useRouter hook allows you to programmatically change routes from Client Components.\n\napp/page.js\n'use client'\n \nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n\nFor a full list of useRouter methods, see the API reference.\n\nRecommendation: Use the <Link> component to navigate between routes unless you have a specific requirement for using useRouter.\n\nredirect function\n\nFor Server Components, use the redirect function instead.\n\napp/team/[id]/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { redirect } from 'next/navigation'\n \nasync function fetchTeam(id: string) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }: { params: { id: string } }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n \n  // ...\n}\n\nGood to know:\n\nredirect returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.\nredirect internally throws an error so it should be called outside of try/catch blocks.\nredirect can be called in Client Components during the rendering process but not in event handlers. You can use the useRouter hook instead.\nredirect also accepts absolute URLs and can be used to redirect to external links.\nIf you'd like to redirect before the render process, use next.config.js or Middleware.\n\nSee the redirect API reference for more information.\n\nUsing the native History API\n\nNext.js allows you to use the native window.history.pushState\n and window.history.replaceState\n methods to update the browser's history stack without reloading the page.\n\npushState and replaceState calls integrate into the Next.js Router, allowing you to sync with usePathname and useSearchParams.\n\nwindow.history.pushState\n\nUse it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products:\n\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\nwindow.history.replaceState\n\nUse it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale:\n\n'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n \n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n \n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\nHow Routing and Navigation Works\n\nThe App Router uses a hybrid approach for routing and navigation. On the server, your application code is automatically code-split by route segments. And on the client, Next.js prefetches and caches the route segments. This means, when a user navigates to a new route, the browser doesn't reload the page, and only the route segments that change re-render - improving the navigation experience and performance.\n\n1. Code Splitting\n\nCode splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance.\n\nServer Components allow your application code to be automatically code-split by route segments. This means only the code needed for the current route is loaded on navigation.\n\n2. Prefetching\n\nPrefetching is a way to preload a route in the background before the user visits it.\n\nThere are two ways routes are prefetched in Next.js:\n\n<Link> component: Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or when it comes into view through scrolling.\nrouter.prefetch(): The useRouter hook can be used to prefetch routes programmatically.\n\nThe <Link>'s default prefetching behavior (i.e. when the prefetch prop is left unspecified or set to null) is different depending on your usage of loading.js. Only the shared layout, down the rendered \"tree\" of components until the first loading.js file, is prefetched and cached for 30s. This reduces the cost of fetching an entire dynamic route, and it means you can show an instant loading state for better visual feedback to users.\n\nYou can disable prefetching by setting the prefetch prop to false. Alternatively, you can prefetch the full page data beyond the loading boundaries by setting the prefetch prop to true.\n\nSee the <Link> API reference for more information.\n\nGood to know:\n\nPrefetching is not enabled in development, only in production.\n3. Caching\n\nNext.js has an in-memory client-side cache called the Router Cache. As users navigate around the app, the React Server Component Payload of prefetched route segments and visited routes are stored in the cache.\n\nThis means on navigation, the cache is reused as much as possible, instead of making a new request to the server - improving performance by reducing the number of requests and data transferred.\n\nLearn more about how the Router Cache works and how to configure it.\n\n4. Partial Rendering\n\nPartial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved.\n\nFor example, when navigating between two sibling routes, /dashboard/settings and /dashboard/analytics, the settings and analytics pages will be rendered, and the shared dashboard layout will be preserved.\n\nWithout partial rendering, each navigation would cause the full page to re-render on the client. Rendering only the segment that changes reduces the amount of data transferred and execution time, leading to improved performance.\n\n5. Soft Navigation\n\nBrowsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation.\n\n6. Back and Forward Navigation\n\nBy default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in the Router Cache.\n\n7. Routing between pages/ and app/\n\nWhen incrementally migrating from pages/ to app/, the Next.js router will automatically handle hard navigation between the two. To detect transitions from pages/ to app/, there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in false positives. By default, such occurrences should be very rare, as we configure the false positive likelihood to be 0.01%. This likelihood can be customized via the experimental.clientRouterFilterAllowedRate option in next.config.js. It's important to note that lowering the false positive rate will increase the size of the generated filter in the client bundle.\n\nAlternatively, if you prefer to disable this handling completely and manage the routing between pages/ and app/ manually, you can set experimental.clientRouterFilter to false in next.config.js. When this feature is disabled, any dynamic routes in pages that overlap with app routes won't be navigated to properly by default."
  },
  {
    "title": "Routing: Layouts and Templates | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/layouts-and-templates",
    "html": "Layouts and Templates\n\nThe special files layout.js and template.js allow you to create UI that is shared between routes. This page will guide you through how and when to use these special files.\n\nLayouts\n\nA layout is UI that is shared between multiple routes. On navigation, layouts preserve state, remain interactive, and do not re-render. Layouts can also be nested.\n\nYou can define a layout by default exporting a React component from a layout.js file. The component should accept a children prop that will be populated with a child layout (if it exists) or a page during rendering.\n\nFor example, the layout will be shared with the /dashboard and /dashboard/settings pages:\n\napp/dashboard/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function DashboardLayout({\n  children, // will be a page or nested layout\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <section>\n      {/* Include shared UI here e.g. a header or sidebar */}\n      <nav></nav>\n \n      {children}\n    </section>\n  )\n}\nRoot Layout (Required)\n\nThe root layout is defined at the top level of the app directory and applies to all routes. This layout is required and must contain html and body tags, allowing you to modify the initial HTML returned from the server.\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\nNesting Layouts\n\nBy default, layouts in the folder hierarchy are nested, which means they wrap child layouts via their children prop. You can nest layouts by adding layout.js inside specific route segments (folders).\n\nFor example, to create a layout for the /dashboard route, add a new layout.js file inside the dashboard folder:\n\napp/dashboard/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n\nIf you were to combine the two layouts above, the root layout (app/layout.js) would wrap the dashboard layout (app/dashboard/layout.js), which would wrap route segments inside app/dashboard/*.\n\nThe two layouts would be nested as such:\n\nGood to know:\n\n.js, .jsx, or .tsx file extensions can be used for Layouts.\nOnly the root layout can contain <html> and <body> tags.\nWhen a layout.js and page.js file are defined in the same folder, the layout will wrap the page.\nLayouts are Server Components by default but can be set to a Client Component.\nLayouts can fetch data. View the Data Fetching section for more information.\nPassing data between a parent layout and its children is not possible. However, you can fetch the same data in a route more than once, and React will automatically dedupe the requests without affecting performance.\nLayouts do not have access to pathname (learn more). But imported Client Components can access the pathname using usePathname hook.\nLayouts do not have access to the route segments below itself. To access all route segments, you can use useSelectedLayoutSegment or useSelectedLayoutSegments in a Client Component.\nYou can use Route Groups to opt specific route segments in and out of shared layouts.\nYou can use Route Groups to create multiple root layouts. See an example here.\nMigrating from the pages directory: The root layout replaces the _app.js and _document.js files. View the migration guide.\nTemplates\n\nTemplates are similar to layouts in that they wrap a child layout or page. Unlike layouts that persist across routes and maintain state, templates create a new instance for each of their children on navigation. This means that when a user navigates between routes that share a template, a new instance of the child is mounted, DOM elements are recreated, state is not preserved in Client Components, and effects are re-synchronized.\n\nThere may be cases where you need those specific behaviors, and templates would be a more suitable option than layouts. For example:\n\nTo resynchronize useEffect on navigation.\nTo reset the state of a child Client Components on navigation.\n\nA template can be defined by exporting a default React component from a template.js file. The component should accept a children prop.\n\napp/template.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n\nIn terms of nesting, template.js is rendered between a layout and its children. Here's a simplified output:\n\nOutput\n<Layout>\n  {/* Note that the template is given a unique key. */}\n  <Template key={routeParam}>{children}</Template>\n</Layout>\nExamples\nMetadata\n\nYou can modify the <head> HTML elements such as title and meta using the Metadata APIs.\n\nMetadata can be defined by exporting a metadata object or generateMetadata function in a layout.js or page.js file.\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n \nexport default function Page() {\n  return '...'\n}\n\nGood to know: You should not manually add <head> tags such as <title> and <meta> to root layouts. Instead, use the Metadata API which automatically handles advanced requirements such as streaming and de-duplicating <head> elements.\n\nLearn more about available metadata options in the API reference.\n\nActive Nav Links\n\nYou can use the usePathname() hook to determine if a nav link is active.\n\nSince usePathname() is a client hook, you need to extract the nav links into a Client Component, which can be imported into your layout or template:\n\napp/ui/nav-links.tsx\nTypeScript\nJavaScript\nTypeScript\n'use client'\n \nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n \nexport function NavLinks() {\n  const pathname = usePathname()\n \n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n \n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { NavLinks } from '@/app/ui/nav-links'\n \nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavLinks />\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}"
  },
  {
    "title": "Routing: Pages | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/pages",
    "html": "Pages\n\nA page is UI that is unique to a route. You can define a page by default exporting a component from a page.js file.\n\nFor example, to create your index page, add the page.js file inside the app directory:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// `app/page.tsx` is the UI for the `/` URL\nexport default function Page() {\n  return <h1>Hello, Home page!</h1>\n}\n\nThen, to create further pages, create a new folder and add the page.js file inside it. For example, to create a page for the /dashboard route, create a new folder called dashboard, and add the page.js file inside it:\n\napp/dashboard/page.tsx\nTypeScript\nJavaScript\nTypeScript\n// `app/dashboard/page.tsx` is the UI for the `/dashboard` URL\nexport default function Page() {\n  return <h1>Hello, Dashboard Page!</h1>\n}\n\nGood to know:\n\nThe .js, .jsx, or .tsx file extensions can be used for Pages.\nA page is always the leaf of the route subtree.\nA page.js file is required to make a route segment publicly accessible.\nPages are Server Components by default, but can be set to a Client Component.\nPages can fetch data. View the Data Fetching section for more information."
  },
  {
    "title": "Routing: Defining Routes | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/defining-routes",
    "html": "Defining Routes\n\nWe recommend reading the Routing Fundamentals page before continuing.\n\nThis page will guide you through how to define and organize routes in your Next.js application.\n\nCreating Routes\n\nNext.js uses a file-system based router where folders are used to define routes.\n\nEach folder represents a route segment that maps to a URL segment. To create a nested route, you can nest folders inside each other.\n\nA special page.js file is used to make route segments publicly accessible.\n\nIn this example, the /dashboard/analytics URL path is not publicly accessible because it does not have a corresponding page.js file. This folder could be used to store components, stylesheets, images, or other colocated files.\n\nGood to know: .js, .jsx, .ts, or .tsx file extensions can be used for special files.\n\nCreating UI\n\nSpecial file conventions are used to create UI for each route segment. The most common are pages to show UI unique to a route, and layouts to show UI that is shared across multiple routes.\n\nFor example, to create your first page, add a page.js file inside the app directory and export a React component:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}"
  },
  {
    "title": "Building Your Application: Routing | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application/routing",
    "html": "Routing Fundamentals\n\nThe skeleton of every application is routing. This page will introduce you to the fundamental concepts of routing for the web and how to handle routing in Next.js.\n\nTerminology\n\nFirst, you will see these terms being used throughout the documentation. Here's a quick reference:\n\nTree: A convention for visualizing a hierarchical structure. For example, a component tree with parent and children components, a folder structure, etc.\nSubtree: Part of a tree, starting at a new root (first) and ending at the leaves (last).\nRoot: The first node in a tree or subtree, such as a root layout.\nLeaf: Nodes in a subtree that have no children, such as the last segment in a URL path.\nURL Segment: Part of the URL path delimited by slashes.\nURL Path: Part of the URL that comes after the domain (composed of segments).\nThe app Router\n\nIn version 13, Next.js introduced a new App Router built on React Server Components, which supports shared layouts, nested routing, loading states, error handling, and more.\n\nThe App Router works in a new directory named app. The app directory works alongside the pages directory to allow for incremental adoption. This allows you to opt some routes of your application into the new behavior while keeping other routes in the pages directory for previous behavior. If your application uses the pages directory, please also see the Pages Router documentation.\n\nGood to know: The App Router takes priority over the Pages Router. Routes across directories should not resolve to the same URL path and will cause a build-time error to prevent a conflict.\n\nBy default, components inside app are React Server Components. This is a performance optimization and allows you to easily adopt them, and you can also use Client Components.\n\nRecommendation: Check out the Server page if you're new to Server Components.\n\nRoles of Folders and Files\n\nNext.js uses a file-system based router where:\n\nFolders are used to define routes. A route is a single path of nested folders, following the file-system hierarchy from the root folder down to a final leaf folder that includes a page.js file. See Defining Routes.\nFiles are used to create UI that is shown for a route segment. See special files.\nRoute Segments\n\nEach folder in a route represents a route segment. Each route segment is mapped to a corresponding segment in a URL path.\n\nNested Routes\n\nTo create a nested route, you can nest folders inside each other. For example, you can add a new /dashboard/settings route by nesting two new folders in the app directory.\n\nThe /dashboard/settings route is composed of three segments:\n\n/ (Root segment)\ndashboard (Segment)\nsettings (Leaf segment)\nFile Conventions\n\nNext.js provides a set of special files to create UI with specific behavior in nested routes:\n\n\t\nlayout\tShared UI for a segment and its children\npage\tUnique UI of a route and make routes publicly accessible\nloading\tLoading UI for a segment and its children\nnot-found\tNot found UI for a segment and its children\nerror\tError UI for a segment and its children\nglobal-error\tGlobal Error UI\nroute\tServer-side API endpoint\ntemplate\tSpecialized re-rendered Layout UI\ndefault\tFallback UI for Parallel Routes\n\nGood to know: .js, .jsx, or .tsx file extensions can be used for special files.\n\nComponent Hierarchy\n\nThe React components defined in special files of a route segment are rendered in a specific hierarchy:\n\nlayout.js\ntemplate.js\nerror.js (React error boundary)\nloading.js (React suspense boundary)\nnot-found.js (React error boundary)\npage.js or nested layout.js\n\nIn a nested route, the components of a segment will be nested inside the components of its parent segment.\n\nColocation\n\nIn addition to special files, you have the option to colocate your own files (e.g. components, styles, tests, etc) inside folders in the app directory.\n\nThis is because while folders define routes, only the contents returned by page.js or route.js are publicly addressable.\n\nLearn more about Project Organization and Colocation.\n\nAdvanced Routing Patterns\n\nThe App Router also provides a set of conventions to help you implement more advanced routing patterns. These include:\n\nParallel Routes: Allow you to simultaneously show two or more pages in the same view that can be navigated independently. You can use them for split views that have their own sub-navigation. E.g. Dashboards.\nIntercepting Routes: Allow you to intercept a route and show it in the context of another route. You can use these when keeping the context for the current page is important. E.g. Seeing all tasks while editing one task or expanding a photo in a feed.\n\nThese patterns allow you to build richer and more complex UIs, democratizing features that were historically complex for small teams and individual developers to implement.\n\nNext Steps\n\nNow that you understand the fundamentals of routing in Next.js, follow the links below to create your first routes:"
  },
  {
    "title": "App Router: Building Your Application | Next.js",
    "url": "https://nextjs.org/docs/app/building-your-application",
    "html": "Building Your Application\n\nNext.js provides the building blocks to create flexible, full-stack web applications. The guides in Building Your Application explain how to use these features and how to customize your application's behavior.\n\nThe sections and pages are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your Next.js application. However, you can read them in any order or skip to the pages that apply to your use case.\n\nIf you're new to Next.js, we recommend starting with the Routing, Rendering, Data Fetching and Styling sections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such as Optimizing and Configuring. Finally, once you're ready, checkout the Deploying and Upgrading sections."
  },
  {
    "title": "Getting Started: Project Structure | Next.js",
    "url": "https://nextjs.org/docs/getting-started/project-structure",
    "html": "Next.js Project Structure\n\nThis page provides an overview of the project structure of a Next.js application. It covers top-level files and folders, configuration files, and routing conventions within the app and pages directories.\n\nClick the file and folder names to learn more about each convention.\n\nTop-level folders\n\nTop-level folders are used to organize your application's code and static assets.\n\n\t\napp\tApp Router\npages\tPages Router\npublic\tStatic assets to be served\nsrc\tOptional application source folder\nTop-level files\n\nTop-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables.\n\n\t\nNext.js\t\nnext.config.js\tConfiguration file for Next.js\npackage.json\tProject dependencies and scripts\ninstrumentation.ts\tOpenTelemetry and Instrumentation file\nmiddleware.ts\tNext.js request middleware\n.env\tEnvironment variables\n.env.local\tLocal environment variables\n.env.production\tProduction environment variables\n.env.development\tDevelopment environment variables\n.eslintrc.json\tConfiguration file for ESLint\n.gitignore\tGit files and folders to ignore\nnext-env.d.ts\tTypeScript declaration file for Next.js\ntsconfig.json\tConfiguration file for TypeScript\njsconfig.json\tConfiguration file for JavaScript\napp Routing Conventions\n\nThe following file conventions are used to define routes and handle metadata in the app router.\n\nRouting Files\n\t\t\nlayout\t.js .jsx .tsx\tLayout\npage\t.js .jsx .tsx\tPage\nloading\t.js .jsx .tsx\tLoading UI\nnot-found\t.js .jsx .tsx\tNot found UI\nerror\t.js .jsx .tsx\tError UI\nglobal-error\t.js .jsx .tsx\tGlobal error UI\nroute\t.js .ts\tAPI endpoint\ntemplate\t.js .jsx .tsx\tRe-rendered layout\ndefault\t.js .jsx .tsx\tParallel route fallback page\nNested Routes\n\t\nfolder\tRoute segment\nfolder/folder\tNested route segment\nDynamic Routes\n\t\n[folder]\tDynamic route segment\n[...folder]\tCatch-all route segment\n[[...folder]]\tOptional catch-all route segment\nRoute Groups and Private Folders\n\t\n(folder)\tGroup routes without affecting routing\n_folder\tOpt folder and all child segments out of routing\nParallel and Intercepted Routes\n\t\n@folder\tNamed slot\n(.)folder\tIntercept same level\n(..)folder\tIntercept one level above\n(..)(..)folder\tIntercept two levels above\n(...)folder\tIntercept from root\nMetadata File Conventions\nApp Icons\n\t\t\nfavicon\t.ico\tFavicon file\nicon\t.ico .jpg .jpeg .png .svg\tApp Icon file\nicon\t.js .ts .tsx\tGenerated App Icon\napple-icon\t.jpg .jpeg, .png\tApple App Icon file\napple-icon\t.js .ts .tsx\tGenerated Apple App Icon\nOpen Graph and Twitter Images\n\t\t\nopengraph-image\t.jpg .jpeg .png .gif\tOpen Graph image file\nopengraph-image\t.js .ts .tsx\tGenerated Open Graph image\ntwitter-image\t.jpg .jpeg .png .gif\tTwitter image file\ntwitter-image\t.js .ts .tsx\tGenerated Twitter image\nSEO\n\t\t\nsitemap\t.xml\tSitemap file\nsitemap\t.js .ts\tGenerated Sitemap\nrobots\t.txt\tRobots file\nrobots\t.js .ts\tGenerated Robots file\npages Routing Conventions\n\nThe following file conventions are used to define routes in the pages router.\n\nSpecial Files\n\t\t\n_app\t.js .jsx .tsx\tCustom App\n_document\t.js .jsx .tsx\tCustom Document\n_error\t.js .jsx .tsx\tCustom Error Page\n404\t.js .jsx .tsx\t404 Error Page\n500\t.js .jsx .tsx\t500 Error Page\nRoutes\n\t\t\nFolder convention\t\t\nindex\t.js .jsx .tsx\tHome page\nfolder/index\t.js .jsx .tsx\tNested page\nFile convention\t\t\nindex\t.js .jsx .tsx\tHome page\nfile\t.js .jsx .tsx\tNested page\nDynamic Routes\n\t\t\nFolder convention\t\t\n[folder]/index\t.js .jsx .tsx\tDynamic route segment\n[...folder]/index\t.js .jsx .tsx\tCatch-all route segment\n[[...folder]]/index\t.js .jsx .tsx\tOptional catch-all route segment\nFile convention\t\t\n[file]\t.js .jsx .tsx\tDynamic route segment\n[...file]\t.js .jsx .tsx\tCatch-all route segment\n[[...file]]\t.js .jsx .tsx\tOptional catch-all route segment"
  },
  {
    "title": "Getting Started: Installation | Next.js",
    "url": "https://nextjs.org/docs/getting-started/installation",
    "html": "Installation\n\nSystem Requirements:\n\nNode.js 18.18\n or later.\nmacOS, Windows (including WSL), and Linux are supported.\nAutomatic Installation\n\nWe recommend starting a new Next.js app using create-next-app, which sets up everything automatically for you. To create a project, run:\n\nTerminal\nnpx create-next-app@latest\n\nOn installation, you'll see the following prompts:\n\nTerminal\nWhat is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like your code inside a `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the import alias (`@/*` by default)? No / Yes\nWhat import alias would you like configured? @/*\n\nAfter the prompts, create-next-app will create a folder with your project name and install the required dependencies.\n\nIf you're new to Next.js, see the project structure docs for an overview of all the possible files and folders in your application.\n\nGood to know:\n\nNext.js now ships with TypeScript, ESLint, and Tailwind CSS configuration by default.\nYou can optionally use a src directory in the root of your project to separate your application's code from configuration files.\nManual Installation\n\nTo manually create a new Next.js app, install the required packages:\n\nTerminal\nnpm install next@latest react@latest react-dom@latest\n\nOpen your package.json file and add the following scripts:\n\npackage.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\n\nThese scripts refer to the different stages of developing an application:\n\ndev: runs next dev to start Next.js in development mode.\nbuild: runs next build to build the application for production usage.\nstart: runs next start to start a Next.js production server.\nlint: runs next lint to set up Next.js' built-in ESLint configuration.\nCreating directories\n\nNext.js uses file-system routing, which means the routes in your application are determined by how you structure your files.\n\nThe app directory\n\nFor new applications, we recommend using the App Router. This router allows you to use React's latest features and is an evolution of the Pages Router based on community feedback.\n\nCreate an app/ folder, then add a layout.tsx and page.tsx file. These will be rendered when the user visits the root of your application (/).\n\nCreate a root layout inside app/layout.tsx with the required <html> and <body> tags:\n\napp/layout.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n\nFinally, create a home page app/page.tsx with some initial content:\n\napp/page.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n\nGood to know: If you forget to create layout.tsx, Next.js will automatically create this file when running the development server with next dev.\n\nLearn more about using the App Router.\n\nThe pages directory (optional)\n\nIf you prefer to use the Pages Router instead of the App Router, you can create a pages/ directory at the root of your project.\n\nThen, add an index.tsx file inside your pages folder. This will be your home page (/):\n\npages/index.tsx\nTypeScript\nJavaScript\nTypeScript\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n\nNext, add an _app.tsx file inside pages/ to define the global layout. Learn more about the custom App file.\n\npages/_app.tsx\nTypeScript\nJavaScript\nTypeScript\nimport type { AppProps } from 'next/app'\n \nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n\nFinally, add a _document.tsx file inside pages/ to control the initial response from the server. Learn more about the custom Document file.\n\npages/_document.tsx\nTypeScript\nJavaScript\nTypeScript\nimport { Html, Head, Main, NextScript } from 'next/document'\n \nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n\nLearn more about using the Pages Router.\n\nGood to know: Although you can use both routers in the same project, routes in app will be prioritized over pages. We recommend using only one router in your new project to avoid confusion.\n\nThe public folder (optional)\n\nCreate a public folder to store static assets such as images, fonts, etc. Files inside public directory can then be referenced by your code starting from the base URL (/).\n\nRun the Development Server\nRun npm run dev to start the development server.\nVisit http://localhost:3000 to view your application.\nEdit app/page.tsx (or pages/index.tsx) file and save it to see the updated result in your browser."
  },
  {
    "title": "Docs | Next.js",
    "url": "https://nextjs.org/docs",
    "html": "Introduction\n\nWelcome to the Next.js documentation!\n\nWhat is Next.js?\n\nNext.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations.\n\nUnder the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration.\n\nWhether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications.\n\nMain Features\n\nSome of the main Next.js features include:\n\nFeature\tDescription\nRouting\tA file-system based router built on top of Server Components that supports layouts, nested routing, loading states, error handling, and more.\nRendering\tClient-side and Server-side Rendering with Client and Server Components. Further optimized with Static and Dynamic Rendering on the server with Next.js. Streaming on Edge and Node.js runtimes.\nData Fetching\tSimplified data fetching with async/await in Server Components, and an extended fetch API for request memoization, data caching and revalidation.\nStyling\tSupport for your preferred styling methods, including CSS Modules, Tailwind CSS, and CSS-in-JS\nOptimizations\tImage, Fonts, and Script Optimizations to improve your application's Core Web Vitals and User Experience.\nTypeScript\tImproved support for TypeScript, with better type checking and more efficient compilation, as well as custom TypeScript Plugin and type checker.\nHow to Use These Docs\n\nOn the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case.\n\nOn the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+K or Cmd+K).\n\nTo get started, check out the Installation guide.\n\nApp Router vs Pages Router\n\nNext.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications.\n\nAt the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected.\n\nThe breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs.\n\nPre-Requisite Knowledge\n\nAlthough our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept.\n\nTo get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application.\n\nAccessibility\n\nFor optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver.\n\nJoin our Community\n\nIf you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions\n, Discord\n, X (Twitter)\n, and Reddit\n."
  },
  {
    "title": "Docs | Next.js",
    "url": "https://nextjs.org/docs",
    "html": "Introduction\n\nWelcome to the Next.js documentation!\n\nWhat is Next.js?\n\nNext.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations.\n\nUnder the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration.\n\nWhether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications.\n\nMain Features\n\nSome of the main Next.js features include:\n\nFeature\tDescription\nRouting\tA file-system based router built on top of Server Components that supports layouts, nested routing, loading states, error handling, and more.\nRendering\tClient-side and Server-side Rendering with Client and Server Components. Further optimized with Static and Dynamic Rendering on the server with Next.js. Streaming on Edge and Node.js runtimes.\nData Fetching\tSimplified data fetching with async/await in Server Components, and an extended fetch API for request memoization, data caching and revalidation.\nStyling\tSupport for your preferred styling methods, including CSS Modules, Tailwind CSS, and CSS-in-JS\nOptimizations\tImage, Fonts, and Script Optimizations to improve your application's Core Web Vitals and User Experience.\nTypeScript\tImproved support for TypeScript, with better type checking and more efficient compilation, as well as custom TypeScript Plugin and type checker.\nHow to Use These Docs\n\nOn the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case.\n\nOn the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut (Ctrl+K or Cmd+K).\n\nTo get started, check out the Installation guide.\n\nApp Router vs Pages Router\n\nNext.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications.\n\nAt the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected.\n\nThe breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs.\n\nPre-Requisite Knowledge\n\nAlthough our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept.\n\nTo get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application.\n\nAccessibility\n\nFor optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver.\n\nJoin our Community\n\nIf you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions\n, Discord\n, X (Twitter)\n, and Reddit\n."
  }
]